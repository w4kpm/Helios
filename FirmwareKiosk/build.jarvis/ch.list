
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002c1 	.word	0x080002c1
 8000008:	080002c3 	.word	0x080002c3
 800000c:	080002c2 	.word	0x080002c2
 8000010:	080002c2 	.word	0x080002c2
 8000014:	080002c2 	.word	0x080002c2
 8000018:	080002c2 	.word	0x080002c2
 800001c:	080002c2 	.word	0x080002c2
 8000020:	080002c2 	.word	0x080002c2
 8000024:	080002c2 	.word	0x080002c2
 8000028:	080002c2 	.word	0x080002c2
 800002c:	08005201 	.word	0x08005201
 8000030:	080002c2 	.word	0x080002c2
 8000034:	080002c2 	.word	0x080002c2
 8000038:	080002c2 	.word	0x080002c2
 800003c:	080002c2 	.word	0x080002c2
 8000040:	080002c2 	.word	0x080002c2
 8000044:	080002c2 	.word	0x080002c2
 8000048:	080002c2 	.word	0x080002c2
 800004c:	080002c2 	.word	0x080002c2
 8000050:	080002c2 	.word	0x080002c2
 8000054:	080002c2 	.word	0x080002c2
 8000058:	080002c2 	.word	0x080002c2
 800005c:	080002c2 	.word	0x080002c2
 8000060:	080002c2 	.word	0x080002c2
 8000064:	080002c2 	.word	0x080002c2
 8000068:	080002c2 	.word	0x080002c2
 800006c:	08004c31 	.word	0x08004c31
 8000070:	08004be1 	.word	0x08004be1
 8000074:	08004b91 	.word	0x08004b91
 8000078:	08004b41 	.word	0x08004b41
 800007c:	08004af1 	.word	0x08004af1
 8000080:	08004aa1 	.word	0x08004aa1
 8000084:	08004a51 	.word	0x08004a51
 8000088:	08004d41 	.word	0x08004d41
 800008c:	080002c2 	.word	0x080002c2
 8000090:	080002c2 	.word	0x080002c2
 8000094:	080002c2 	.word	0x080002c2
 8000098:	080002c2 	.word	0x080002c2
 800009c:	080002c2 	.word	0x080002c2
 80000a0:	080002c2 	.word	0x080002c2
 80000a4:	080002c2 	.word	0x080002c2
 80000a8:	080002c2 	.word	0x080002c2
 80000ac:	080002c2 	.word	0x080002c2
 80000b0:	08004581 	.word	0x08004581
 80000b4:	080002c2 	.word	0x080002c2
 80000b8:	080002c2 	.word	0x080002c2
 80000bc:	080002c2 	.word	0x080002c2
 80000c0:	080002c2 	.word	0x080002c2
 80000c4:	080002c2 	.word	0x080002c2
 80000c8:	080002c2 	.word	0x080002c2
 80000cc:	080002c2 	.word	0x080002c2
 80000d0:	080002c2 	.word	0x080002c2
 80000d4:	08004551 	.word	0x08004551
 80000d8:	08004521 	.word	0x08004521
 80000dc:	080002c2 	.word	0x080002c2
 80000e0:	080002c2 	.word	0x080002c2
 80000e4:	080002c2 	.word	0x080002c2
 80000e8:	080002c2 	.word	0x080002c2
 80000ec:	080002c2 	.word	0x080002c2
 80000f0:	080002c2 	.word	0x080002c2
 80000f4:	080002c2 	.word	0x080002c2
 80000f8:	080002c2 	.word	0x080002c2
 80000fc:	08004d01 	.word	0x08004d01
 8000100:	080002c2 	.word	0x080002c2
 8000104:	080002c2 	.word	0x080002c2
 8000108:	080002c2 	.word	0x080002c2
 800010c:	080002c2 	.word	0x080002c2
 8000110:	080002c2 	.word	0x080002c2
 8000114:	080002c2 	.word	0x080002c2
 8000118:	080002c2 	.word	0x080002c2
 800011c:	080002c2 	.word	0x080002c2
 8000120:	08004a01 	.word	0x08004a01
 8000124:	080049b1 	.word	0x080049b1
 8000128:	08004961 	.word	0x08004961
 800012c:	08004911 	.word	0x08004911
 8000130:	080048c1 	.word	0x080048c1
 8000134:	08004cc1 	.word	0x08004cc1
 8000138:	080002c2 	.word	0x080002c2
 800013c:	080002c2 	.word	0x080002c2
 8000140:	080002c2 	.word	0x080002c2
 8000144:	080002c2 	.word	0x080002c2
 8000148:	080002c2 	.word	0x080002c2
 800014c:	080002c2 	.word	0x080002c2
 8000150:	080002c2 	.word	0x080002c2
 8000154:	080002c2 	.word	0x080002c2
 8000158:	080002c2 	.word	0x080002c2
 800015c:	080002c2 	.word	0x080002c2
 8000160:	080002c2 	.word	0x080002c2
 8000164:	080002c2 	.word	0x080002c2
 8000168:	080002c2 	.word	0x080002c2
 800016c:	080002c2 	.word	0x080002c2
 8000170:	080002c2 	.word	0x080002c2
 8000174:	080002c2 	.word	0x080002c2
 8000178:	080002c2 	.word	0x080002c2
 800017c:	080002c2 	.word	0x080002c2
 8000180:	080002c2 	.word	0x080002c2
 8000184:	080002c2 	.word	0x080002c2
 8000188:	080002c2 	.word	0x080002c2
 800018c:	080002c2 	.word	0x080002c2
 8000190:	080002c2 	.word	0x080002c2
 8000194:	080002c2 	.word	0x080002c2
 8000198:	080002c2 	.word	0x080002c2
 800019c:	080002c2 	.word	0x080002c2

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4839      	ldr	r0, [pc, #228]	; (8000288 <endfiniloop+0x6>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4838      	ldr	r0, [pc, #224]	; (800028c <endfiniloop+0xa>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4838      	ldr	r0, [pc, #224]	; (8000290 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001ba:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001be:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001c2:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 80001c6:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001ca:	6008      	str	r0, [r1, #0]
                dsb
 80001cc:	f3bf 8f4f 	dsb	sy
                isb
 80001d0:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 80001d4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 80001d8:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 80001dc:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 80001e0:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001e4:	6008      	str	r0, [r1, #0]
                dsb
 80001e6:	f3bf 8f4f 	dsb	sy
                isb
 80001ea:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 80001ee:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 80001f2:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 80001f6:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 80001fa:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001fe:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000200:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000202:	f380 8814 	msr	CONTROL, r0
                isb
 8000206:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800020a:	f002 fcd9 	bl	8002bc0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800020e:	f004 f89f 	bl	8004350 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000212:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000216:	491f      	ldr	r1, [pc, #124]	; (8000294 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <endfiniloop+0x6>)

0800021a <msloop>:
msloop:
                cmp     r1, r2
 800021a:	4291      	cmp	r1, r2
                itt     lo
 800021c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800021e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000222:	e7fa      	bcc.n	800021a <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <endfiniloop+0xa>)

08000228 <psloop>:
psloop:
                cmp     r1, r2
 8000228:	4291      	cmp	r1, r2
                itt     lo
 800022a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000230:	e7fa      	bcc.n	8000228 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000232:	491a      	ldr	r1, [pc, #104]	; (800029c <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 8000236:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <endfiniloop+0x22>)

08000238 <dloop>:
dloop:
                cmp     r2, r3
 8000238:	429a      	cmp	r2, r3
                ittt    lo
 800023a:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800023c:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000240:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000244:	e7f8      	bcc.n	8000238 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000246:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000248:	4917      	ldr	r1, [pc, #92]	; (80002a8 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 800024a:	4a18      	ldr	r2, [pc, #96]	; (80002ac <endfiniloop+0x2a>)

0800024c <bloop>:
bloop:
                cmp     r1, r2
 800024c:	4291      	cmp	r1, r2
                itt     lo
 800024e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000250:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000254:	e7fa      	bcc.n	800024c <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000256:	f002 fc7b 	bl	8002b50 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800025a:	f002 fca9 	bl	8002bb0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800025e:	4c14      	ldr	r4, [pc, #80]	; (80002b0 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 8000260:	4d14      	ldr	r5, [pc, #80]	; (80002b4 <endfiniloop+0x32>)

08000262 <initloop>:
initloop:
                cmp     r4, r5
 8000262:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000264:	da03      	bge.n	800026e <endinitloop>
                ldr     r1, [r4], #4
 8000266:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800026a:	4788      	blx	r1
                b       initloop
 800026c:	e7f9      	b.n	8000262 <initloop>

0800026e <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800026e:	f001 f87f 	bl	8001370 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000272:	4c11      	ldr	r4, [pc, #68]	; (80002b8 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 8000274:	4d11      	ldr	r5, [pc, #68]	; (80002bc <endfiniloop+0x3a>)

08000276 <finiloop>:
finiloop:
                cmp     r4, r5
 8000276:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000278:	da03      	bge.n	8000282 <endfiniloop>
                ldr     r1, [r4], #4
 800027a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800027e:	4788      	blx	r1
                b       finiloop
 8000280:	e7f9      	b.n	8000276 <finiloop>

08000282 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000282:	f002 bc8d 	b.w	8002ba0 <__default_exit>
 8000286:	0000      	.short	0x0000
                /* Interrupts are globally masked initially.*/
                cpsid   i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000288:	20000400 	.word	0x20000400
                msr     MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 800028c:	20000800 	.word	0x20000800
                msr     PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 8000290:	08000000 	.word	0x08000000
#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000294:	20000000 	.word	0x20000000
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000298:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 800029c:	08019df0 	.word	0x08019df0
                ldr     r2, =_data_start
 80002a0:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002a4:	200010ac 	.word	0x200010ac

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 80002a8:	200010b0 	.word	0x200010b0
                ldr     r2, =_bss_end
 80002ac:	20005c60 	.word	0x20005c60
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 80002b0:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 80002b4:	080001a0 	.word	0x080001a0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 80002b8:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 80002bc:	080001a0 	.word	0x080001a0

080002c0 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002c0:	e76e      	b.n	80001a0 <_crt0_entry>

080002c2 <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002c2:	f000 f800 	bl	80002c6 <_unhandled_exception>

080002c6 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002c6:	e7fe      	b.n	80002c6 <_unhandled_exception>

080002c8 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 80002cc:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002d0:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002d4:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002d6:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 80002d8:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e0 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002e0:	f003 fc16 	bl	8003b10 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002e4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002e6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002ea:	4628      	mov	r0, r5
                blx     r4
 80002ec:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002ee:	2000      	movs	r0, #0
                bl      chThdExit
 80002f0:	f003 fea6 	bl	8004040 <chThdExit>

080002f4 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002f4:	f003 fc34 	bl	8003b60 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002f8:	f003 fada 	bl	80038b0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002fc:	f003 fc08 	bl	8003b10 <_dbg_check_unlock>

08000300 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000300:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000302:	e7fe      	b.n	8000302 <_port_exit_from_isr+0x2>

08000304 <__aeabi_drsub>:
 8000304:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000308:	e002      	b.n	8000310 <__adddf3>
 800030a:	bf00      	nop

0800030c <__aeabi_dsub>:
 800030c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000310 <__adddf3>:
 8000310:	b530      	push	{r4, r5, lr}
 8000312:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000316:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800031a:	ea94 0f05 	teq	r4, r5
 800031e:	bf08      	it	eq
 8000320:	ea90 0f02 	teqeq	r0, r2
 8000324:	bf1f      	itttt	ne
 8000326:	ea54 0c00 	orrsne.w	ip, r4, r0
 800032a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000332:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000336:	f000 80e2 	beq.w	80004fe <__adddf3+0x1ee>
 800033a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000342:	bfb8      	it	lt
 8000344:	426d      	neglt	r5, r5
 8000346:	dd0c      	ble.n	8000362 <__adddf3+0x52>
 8000348:	442c      	add	r4, r5
 800034a:	ea80 0202 	eor.w	r2, r0, r2
 800034e:	ea81 0303 	eor.w	r3, r1, r3
 8000352:	ea82 0000 	eor.w	r0, r2, r0
 8000356:	ea83 0101 	eor.w	r1, r3, r1
 800035a:	ea80 0202 	eor.w	r2, r0, r2
 800035e:	ea81 0303 	eor.w	r3, r1, r3
 8000362:	2d36      	cmp	r5, #54	; 0x36
 8000364:	bf88      	it	hi
 8000366:	bd30      	pophi	{r4, r5, pc}
 8000368:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800036c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000370:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000374:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x70>
 800037a:	4240      	negs	r0, r0
 800037c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000380:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000384:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000388:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800038c:	d002      	beq.n	8000394 <__adddf3+0x84>
 800038e:	4252      	negs	r2, r2
 8000390:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000394:	ea94 0f05 	teq	r4, r5
 8000398:	f000 80a7 	beq.w	80004ea <__adddf3+0x1da>
 800039c:	f1a4 0401 	sub.w	r4, r4, #1
 80003a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a4:	db0d      	blt.n	80003c2 <__adddf3+0xb2>
 80003a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003aa:	fa22 f205 	lsr.w	r2, r2, r5
 80003ae:	1880      	adds	r0, r0, r2
 80003b0:	f141 0100 	adc.w	r1, r1, #0
 80003b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b8:	1880      	adds	r0, r0, r2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	4159      	adcs	r1, r3
 80003c0:	e00e      	b.n	80003e0 <__adddf3+0xd0>
 80003c2:	f1a5 0520 	sub.w	r5, r5, #32
 80003c6:	f10e 0e20 	add.w	lr, lr, #32
 80003ca:	2a01      	cmp	r2, #1
 80003cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003d0:	bf28      	it	cs
 80003d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	18c0      	adds	r0, r0, r3
 80003dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e4:	d507      	bpl.n	80003f6 <__adddf3+0xe6>
 80003e6:	f04f 0e00 	mov.w	lr, #0
 80003ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003fa:	d31b      	bcc.n	8000434 <__adddf3+0x124>
 80003fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000400:	d30c      	bcc.n	800041c <__adddf3+0x10c>
 8000402:	0849      	lsrs	r1, r1, #1
 8000404:	ea5f 0030 	movs.w	r0, r0, rrx
 8000408:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800040c:	f104 0401 	add.w	r4, r4, #1
 8000410:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000414:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000418:	f080 809a 	bcs.w	8000550 <__adddf3+0x240>
 800041c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000420:	bf08      	it	eq
 8000422:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000426:	f150 0000 	adcs.w	r0, r0, #0
 800042a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042e:	ea41 0105 	orr.w	r1, r1, r5
 8000432:	bd30      	pop	{r4, r5, pc}
 8000434:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000438:	4140      	adcs	r0, r0
 800043a:	eb41 0101 	adc.w	r1, r1, r1
 800043e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000442:	f1a4 0401 	sub.w	r4, r4, #1
 8000446:	d1e9      	bne.n	800041c <__adddf3+0x10c>
 8000448:	f091 0f00 	teq	r1, #0
 800044c:	bf04      	itt	eq
 800044e:	4601      	moveq	r1, r0
 8000450:	2000      	moveq	r0, #0
 8000452:	fab1 f381 	clz	r3, r1
 8000456:	bf08      	it	eq
 8000458:	3320      	addeq	r3, #32
 800045a:	f1a3 030b 	sub.w	r3, r3, #11
 800045e:	f1b3 0220 	subs.w	r2, r3, #32
 8000462:	da0c      	bge.n	800047e <__adddf3+0x16e>
 8000464:	320c      	adds	r2, #12
 8000466:	dd08      	ble.n	800047a <__adddf3+0x16a>
 8000468:	f102 0c14 	add.w	ip, r2, #20
 800046c:	f1c2 020c 	rsb	r2, r2, #12
 8000470:	fa01 f00c 	lsl.w	r0, r1, ip
 8000474:	fa21 f102 	lsr.w	r1, r1, r2
 8000478:	e00c      	b.n	8000494 <__adddf3+0x184>
 800047a:	f102 0214 	add.w	r2, r2, #20
 800047e:	bfd8      	it	le
 8000480:	f1c2 0c20 	rsble	ip, r2, #32
 8000484:	fa01 f102 	lsl.w	r1, r1, r2
 8000488:	fa20 fc0c 	lsr.w	ip, r0, ip
 800048c:	bfdc      	itt	le
 800048e:	ea41 010c 	orrle.w	r1, r1, ip
 8000492:	4090      	lslle	r0, r2
 8000494:	1ae4      	subs	r4, r4, r3
 8000496:	bfa2      	ittt	ge
 8000498:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800049c:	4329      	orrge	r1, r5
 800049e:	bd30      	popge	{r4, r5, pc}
 80004a0:	ea6f 0404 	mvn.w	r4, r4
 80004a4:	3c1f      	subs	r4, #31
 80004a6:	da1c      	bge.n	80004e2 <__adddf3+0x1d2>
 80004a8:	340c      	adds	r4, #12
 80004aa:	dc0e      	bgt.n	80004ca <__adddf3+0x1ba>
 80004ac:	f104 0414 	add.w	r4, r4, #20
 80004b0:	f1c4 0220 	rsb	r2, r4, #32
 80004b4:	fa20 f004 	lsr.w	r0, r0, r4
 80004b8:	fa01 f302 	lsl.w	r3, r1, r2
 80004bc:	ea40 0003 	orr.w	r0, r0, r3
 80004c0:	fa21 f304 	lsr.w	r3, r1, r4
 80004c4:	ea45 0103 	orr.w	r1, r5, r3
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	f1c4 040c 	rsb	r4, r4, #12
 80004ce:	f1c4 0220 	rsb	r2, r4, #32
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 f304 	lsl.w	r3, r1, r4
 80004da:	ea40 0003 	orr.w	r0, r0, r3
 80004de:	4629      	mov	r1, r5
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	fa21 f004 	lsr.w	r0, r1, r4
 80004e6:	4629      	mov	r1, r5
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	f094 0f00 	teq	r4, #0
 80004ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004f2:	bf06      	itte	eq
 80004f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f8:	3401      	addeq	r4, #1
 80004fa:	3d01      	subne	r5, #1
 80004fc:	e74e      	b.n	800039c <__adddf3+0x8c>
 80004fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000502:	bf18      	it	ne
 8000504:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000508:	d029      	beq.n	800055e <__adddf3+0x24e>
 800050a:	ea94 0f05 	teq	r4, r5
 800050e:	bf08      	it	eq
 8000510:	ea90 0f02 	teqeq	r0, r2
 8000514:	d005      	beq.n	8000522 <__adddf3+0x212>
 8000516:	ea54 0c00 	orrs.w	ip, r4, r0
 800051a:	bf04      	itt	eq
 800051c:	4619      	moveq	r1, r3
 800051e:	4610      	moveq	r0, r2
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea91 0f03 	teq	r1, r3
 8000526:	bf1e      	ittt	ne
 8000528:	2100      	movne	r1, #0
 800052a:	2000      	movne	r0, #0
 800052c:	bd30      	popne	{r4, r5, pc}
 800052e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000532:	d105      	bne.n	8000540 <__adddf3+0x230>
 8000534:	0040      	lsls	r0, r0, #1
 8000536:	4149      	adcs	r1, r1
 8000538:	bf28      	it	cs
 800053a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053e:	bd30      	pop	{r4, r5, pc}
 8000540:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000544:	bf3c      	itt	cc
 8000546:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800054a:	bd30      	popcc	{r4, r5, pc}
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000554:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000558:	f04f 0000 	mov.w	r0, #0
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000562:	bf1a      	itte	ne
 8000564:	4619      	movne	r1, r3
 8000566:	4610      	movne	r0, r2
 8000568:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800056c:	bf1c      	itt	ne
 800056e:	460b      	movne	r3, r1
 8000570:	4602      	movne	r2, r0
 8000572:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000576:	bf06      	itte	eq
 8000578:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800057c:	ea91 0f03 	teqeq	r1, r3
 8000580:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	bf00      	nop

08000588 <__aeabi_ui2d>:
 8000588:	f090 0f00 	teq	r0, #0
 800058c:	bf04      	itt	eq
 800058e:	2100      	moveq	r1, #0
 8000590:	4770      	bxeq	lr
 8000592:	b530      	push	{r4, r5, lr}
 8000594:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000598:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800059c:	f04f 0500 	mov.w	r5, #0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e750      	b.n	8000448 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_i2d>:
 80005a8:	f090 0f00 	teq	r0, #0
 80005ac:	bf04      	itt	eq
 80005ae:	2100      	moveq	r1, #0
 80005b0:	4770      	bxeq	lr
 80005b2:	b530      	push	{r4, r5, lr}
 80005b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005c0:	bf48      	it	mi
 80005c2:	4240      	negmi	r0, r0
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	e73e      	b.n	8000448 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_f2d>:
 80005cc:	0042      	lsls	r2, r0, #1
 80005ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005da:	bf1f      	itttt	ne
 80005dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e8:	4770      	bxne	lr
 80005ea:	f092 0f00 	teq	r2, #0
 80005ee:	bf14      	ite	ne
 80005f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005f4:	4770      	bxeq	lr
 80005f6:	b530      	push	{r4, r5, lr}
 80005f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	e720      	b.n	8000448 <__adddf3+0x138>
 8000606:	bf00      	nop

08000608 <__aeabi_ul2d>:
 8000608:	ea50 0201 	orrs.w	r2, r0, r1
 800060c:	bf08      	it	eq
 800060e:	4770      	bxeq	lr
 8000610:	b530      	push	{r4, r5, lr}
 8000612:	f04f 0500 	mov.w	r5, #0
 8000616:	e00a      	b.n	800062e <__aeabi_l2d+0x16>

08000618 <__aeabi_l2d>:
 8000618:	ea50 0201 	orrs.w	r2, r0, r1
 800061c:	bf08      	it	eq
 800061e:	4770      	bxeq	lr
 8000620:	b530      	push	{r4, r5, lr}
 8000622:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000626:	d502      	bpl.n	800062e <__aeabi_l2d+0x16>
 8000628:	4240      	negs	r0, r0
 800062a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800062e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000632:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000636:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063a:	f43f aedc 	beq.w	80003f6 <__adddf3+0xe6>
 800063e:	f04f 0203 	mov.w	r2, #3
 8000642:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000646:	bf18      	it	ne
 8000648:	3203      	addne	r2, #3
 800064a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064e:	bf18      	it	ne
 8000650:	3203      	addne	r2, #3
 8000652:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000656:	f1c2 0320 	rsb	r3, r2, #32
 800065a:	fa00 fc03 	lsl.w	ip, r0, r3
 800065e:	fa20 f002 	lsr.w	r0, r0, r2
 8000662:	fa01 fe03 	lsl.w	lr, r1, r3
 8000666:	ea40 000e 	orr.w	r0, r0, lr
 800066a:	fa21 f102 	lsr.w	r1, r1, r2
 800066e:	4414      	add	r4, r2
 8000670:	e6c1      	b.n	80003f6 <__adddf3+0xe6>
 8000672:	bf00      	nop

08000674 <__aeabi_dmul>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800067e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000682:	bf1d      	ittte	ne
 8000684:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000688:	ea94 0f0c 	teqne	r4, ip
 800068c:	ea95 0f0c 	teqne	r5, ip
 8000690:	f000 f8de 	bleq	8000850 <__aeabi_dmul+0x1dc>
 8000694:	442c      	add	r4, r5
 8000696:	ea81 0603 	eor.w	r6, r1, r3
 800069a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800069e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006a6:	bf18      	it	ne
 80006a8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b4:	d038      	beq.n	8000728 <__aeabi_dmul+0xb4>
 80006b6:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006c6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ca:	f04f 0600 	mov.w	r6, #0
 80006ce:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d2:	f09c 0f00 	teq	ip, #0
 80006d6:	bf18      	it	ne
 80006d8:	f04e 0e01 	orrne.w	lr, lr, #1
 80006dc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006e8:	d204      	bcs.n	80006f4 <__aeabi_dmul+0x80>
 80006ea:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ee:	416d      	adcs	r5, r5
 80006f0:	eb46 0606 	adc.w	r6, r6, r6
 80006f4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006f8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006fc:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000700:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000704:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000708:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800070c:	bf88      	it	hi
 800070e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000712:	d81e      	bhi.n	8000752 <__aeabi_dmul+0xde>
 8000714:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000718:	bf08      	it	eq
 800071a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800071e:	f150 0000 	adcs.w	r0, r0, #0
 8000722:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800072c:	ea46 0101 	orr.w	r1, r6, r1
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	ea81 0103 	eor.w	r1, r1, r3
 8000738:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800073c:	bfc2      	ittt	gt
 800073e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000746:	bd70      	popgt	{r4, r5, r6, pc}
 8000748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800074c:	f04f 0e00 	mov.w	lr, #0
 8000750:	3c01      	subs	r4, #1
 8000752:	f300 80ab 	bgt.w	80008ac <__aeabi_dmul+0x238>
 8000756:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075a:	bfde      	ittt	le
 800075c:	2000      	movle	r0, #0
 800075e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000762:	bd70      	pople	{r4, r5, r6, pc}
 8000764:	f1c4 0400 	rsb	r4, r4, #0
 8000768:	3c20      	subs	r4, #32
 800076a:	da35      	bge.n	80007d8 <__aeabi_dmul+0x164>
 800076c:	340c      	adds	r4, #12
 800076e:	dc1b      	bgt.n	80007a8 <__aeabi_dmul+0x134>
 8000770:	f104 0414 	add.w	r4, r4, #20
 8000774:	f1c4 0520 	rsb	r5, r4, #32
 8000778:	fa00 f305 	lsl.w	r3, r0, r5
 800077c:	fa20 f004 	lsr.w	r0, r0, r4
 8000780:	fa01 f205 	lsl.w	r2, r1, r5
 8000784:	ea40 0002 	orr.w	r0, r0, r2
 8000788:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800078c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	fa21 f604 	lsr.w	r6, r1, r4
 8000798:	eb42 0106 	adc.w	r1, r2, r6
 800079c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a0:	bf08      	it	eq
 80007a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a6:	bd70      	pop	{r4, r5, r6, pc}
 80007a8:	f1c4 040c 	rsb	r4, r4, #12
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f304 	lsl.w	r3, r0, r4
 80007b4:	fa20 f005 	lsr.w	r0, r0, r5
 80007b8:	fa01 f204 	lsl.w	r2, r1, r4
 80007bc:	ea40 0002 	orr.w	r0, r0, r2
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	f141 0100 	adc.w	r1, r1, #0
 80007cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d0:	bf08      	it	eq
 80007d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d6:	bd70      	pop	{r4, r5, r6, pc}
 80007d8:	f1c4 0520 	rsb	r5, r4, #32
 80007dc:	fa00 f205 	lsl.w	r2, r0, r5
 80007e0:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e4:	fa20 f304 	lsr.w	r3, r0, r4
 80007e8:	fa01 f205 	lsl.w	r2, r1, r5
 80007ec:	ea43 0302 	orr.w	r3, r3, r2
 80007f0:	fa21 f004 	lsr.w	r0, r1, r4
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	fa21 f204 	lsr.w	r2, r1, r4
 80007fc:	ea20 0002 	bic.w	r0, r0, r2
 8000800:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000808:	bf08      	it	eq
 800080a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f094 0f00 	teq	r4, #0
 8000814:	d10f      	bne.n	8000836 <__aeabi_dmul+0x1c2>
 8000816:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081a:	0040      	lsls	r0, r0, #1
 800081c:	eb41 0101 	adc.w	r1, r1, r1
 8000820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000824:	bf08      	it	eq
 8000826:	3c01      	subeq	r4, #1
 8000828:	d0f7      	beq.n	800081a <__aeabi_dmul+0x1a6>
 800082a:	ea41 0106 	orr.w	r1, r1, r6
 800082e:	f095 0f00 	teq	r5, #0
 8000832:	bf18      	it	ne
 8000834:	4770      	bxne	lr
 8000836:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083a:	0052      	lsls	r2, r2, #1
 800083c:	eb43 0303 	adc.w	r3, r3, r3
 8000840:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000844:	bf08      	it	eq
 8000846:	3d01      	subeq	r5, #1
 8000848:	d0f7      	beq.n	800083a <__aeabi_dmul+0x1c6>
 800084a:	ea43 0306 	orr.w	r3, r3, r6
 800084e:	4770      	bx	lr
 8000850:	ea94 0f0c 	teq	r4, ip
 8000854:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000858:	bf18      	it	ne
 800085a:	ea95 0f0c 	teqne	r5, ip
 800085e:	d00c      	beq.n	800087a <__aeabi_dmul+0x206>
 8000860:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000864:	bf18      	it	ne
 8000866:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086a:	d1d1      	bne.n	8000810 <__aeabi_dmul+0x19c>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	bd70      	pop	{r4, r5, r6, pc}
 800087a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800087e:	bf06      	itte	eq
 8000880:	4610      	moveq	r0, r2
 8000882:	4619      	moveq	r1, r3
 8000884:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000888:	d019      	beq.n	80008be <__aeabi_dmul+0x24a>
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	d102      	bne.n	8000896 <__aeabi_dmul+0x222>
 8000890:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000894:	d113      	bne.n	80008be <__aeabi_dmul+0x24a>
 8000896:	ea95 0f0c 	teq	r5, ip
 800089a:	d105      	bne.n	80008a8 <__aeabi_dmul+0x234>
 800089c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a0:	bf1c      	itt	ne
 80008a2:	4610      	movne	r0, r2
 80008a4:	4619      	movne	r1, r3
 80008a6:	d10a      	bne.n	80008be <__aeabi_dmul+0x24a>
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008b8:	f04f 0000 	mov.w	r0, #0
 80008bc:	bd70      	pop	{r4, r5, r6, pc}
 80008be:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008c6:	bd70      	pop	{r4, r5, r6, pc}

080008c8 <__aeabi_ddiv>:
 80008c8:	b570      	push	{r4, r5, r6, lr}
 80008ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008d6:	bf1d      	ittte	ne
 80008d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008dc:	ea94 0f0c 	teqne	r4, ip
 80008e0:	ea95 0f0c 	teqne	r5, ip
 80008e4:	f000 f8a7 	bleq	8000a36 <__aeabi_ddiv+0x16e>
 80008e8:	eba4 0405 	sub.w	r4, r4, r5
 80008ec:	ea81 0e03 	eor.w	lr, r1, r3
 80008f0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008f8:	f000 8088 	beq.w	8000a0c <__aeabi_ddiv+0x144>
 80008fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000900:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000904:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000908:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800090c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000910:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000914:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000918:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800091c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000920:	429d      	cmp	r5, r3
 8000922:	bf08      	it	eq
 8000924:	4296      	cmpeq	r6, r2
 8000926:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800092e:	d202      	bcs.n	8000936 <__aeabi_ddiv+0x6e>
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	1ab6      	subs	r6, r6, r2
 8000938:	eb65 0503 	sbc.w	r5, r5, r3
 800093c:	085b      	lsrs	r3, r3, #1
 800093e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000942:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000946:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094a:	ebb6 0e02 	subs.w	lr, r6, r2
 800094e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000952:	bf22      	ittt	cs
 8000954:	1ab6      	subcs	r6, r6, r2
 8000956:	4675      	movcs	r5, lr
 8000958:	ea40 000c 	orrcs.w	r0, r0, ip
 800095c:	085b      	lsrs	r3, r3, #1
 800095e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000962:	ebb6 0e02 	subs.w	lr, r6, r2
 8000966:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096a:	bf22      	ittt	cs
 800096c:	1ab6      	subcs	r6, r6, r2
 800096e:	4675      	movcs	r5, lr
 8000970:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	ebb6 0e02 	subs.w	lr, r6, r2
 800097e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000982:	bf22      	ittt	cs
 8000984:	1ab6      	subcs	r6, r6, r2
 8000986:	4675      	movcs	r5, lr
 8000988:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000992:	ebb6 0e02 	subs.w	lr, r6, r2
 8000996:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099a:	bf22      	ittt	cs
 800099c:	1ab6      	subcs	r6, r6, r2
 800099e:	4675      	movcs	r5, lr
 80009a0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a4:	ea55 0e06 	orrs.w	lr, r5, r6
 80009a8:	d018      	beq.n	80009dc <__aeabi_ddiv+0x114>
 80009aa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009ae:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009b6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ba:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009be:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009c6:	d1c0      	bne.n	800094a <__aeabi_ddiv+0x82>
 80009c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009cc:	d10b      	bne.n	80009e6 <__aeabi_ddiv+0x11e>
 80009ce:	ea41 0100 	orr.w	r1, r1, r0
 80009d2:	f04f 0000 	mov.w	r0, #0
 80009d6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009da:	e7b6      	b.n	800094a <__aeabi_ddiv+0x82>
 80009dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e0:	bf04      	itt	eq
 80009e2:	4301      	orreq	r1, r0
 80009e4:	2000      	moveq	r0, #0
 80009e6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ea:	bf88      	it	hi
 80009ec:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f0:	f63f aeaf 	bhi.w	8000752 <__aeabi_dmul+0xde>
 80009f4:	ebb5 0c03 	subs.w	ip, r5, r3
 80009f8:	bf04      	itt	eq
 80009fa:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a02:	f150 0000 	adcs.w	r0, r0, #0
 8000a06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
 8000a0c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a10:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a14:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a18:	bfc2      	ittt	gt
 8000a1a:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a1e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a22:	bd70      	popgt	{r4, r5, r6, pc}
 8000a24:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a28:	f04f 0e00 	mov.w	lr, #0
 8000a2c:	3c01      	subs	r4, #1
 8000a2e:	e690      	b.n	8000752 <__aeabi_dmul+0xde>
 8000a30:	ea45 0e06 	orr.w	lr, r5, r6
 8000a34:	e68d      	b.n	8000752 <__aeabi_dmul+0xde>
 8000a36:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3a:	ea94 0f0c 	teq	r4, ip
 8000a3e:	bf08      	it	eq
 8000a40:	ea95 0f0c 	teqeq	r5, ip
 8000a44:	f43f af3b 	beq.w	80008be <__aeabi_dmul+0x24a>
 8000a48:	ea94 0f0c 	teq	r4, ip
 8000a4c:	d10a      	bne.n	8000a64 <__aeabi_ddiv+0x19c>
 8000a4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a52:	f47f af34 	bne.w	80008be <__aeabi_dmul+0x24a>
 8000a56:	ea95 0f0c 	teq	r5, ip
 8000a5a:	f47f af25 	bne.w	80008a8 <__aeabi_dmul+0x234>
 8000a5e:	4610      	mov	r0, r2
 8000a60:	4619      	mov	r1, r3
 8000a62:	e72c      	b.n	80008be <__aeabi_dmul+0x24a>
 8000a64:	ea95 0f0c 	teq	r5, ip
 8000a68:	d106      	bne.n	8000a78 <__aeabi_ddiv+0x1b0>
 8000a6a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a6e:	f43f aefd 	beq.w	800086c <__aeabi_dmul+0x1f8>
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	e722      	b.n	80008be <__aeabi_dmul+0x24a>
 8000a78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a7c:	bf18      	it	ne
 8000a7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a82:	f47f aec5 	bne.w	8000810 <__aeabi_dmul+0x19c>
 8000a86:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8a:	f47f af0d 	bne.w	80008a8 <__aeabi_dmul+0x234>
 8000a8e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a92:	f47f aeeb 	bne.w	800086c <__aeabi_dmul+0x1f8>
 8000a96:	e712      	b.n	80008be <__aeabi_dmul+0x24a>

08000a98 <__gedf2>:
 8000a98:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a9c:	e006      	b.n	8000aac <__cmpdf2+0x4>
 8000a9e:	bf00      	nop

08000aa0 <__ledf2>:
 8000aa0:	f04f 0c01 	mov.w	ip, #1
 8000aa4:	e002      	b.n	8000aac <__cmpdf2+0x4>
 8000aa6:	bf00      	nop

08000aa8 <__cmpdf2>:
 8000aa8:	f04f 0c01 	mov.w	ip, #1
 8000aac:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000abc:	bf18      	it	ne
 8000abe:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac2:	d01b      	beq.n	8000afc <__cmpdf2+0x54>
 8000ac4:	b001      	add	sp, #4
 8000ac6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aca:	bf0c      	ite	eq
 8000acc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad0:	ea91 0f03 	teqne	r1, r3
 8000ad4:	bf02      	ittt	eq
 8000ad6:	ea90 0f02 	teqeq	r0, r2
 8000ada:	2000      	moveq	r0, #0
 8000adc:	4770      	bxeq	lr
 8000ade:	f110 0f00 	cmn.w	r0, #0
 8000ae2:	ea91 0f03 	teq	r1, r3
 8000ae6:	bf58      	it	pl
 8000ae8:	4299      	cmppl	r1, r3
 8000aea:	bf08      	it	eq
 8000aec:	4290      	cmpeq	r0, r2
 8000aee:	bf2c      	ite	cs
 8000af0:	17d8      	asrcs	r0, r3, #31
 8000af2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000af6:	f040 0001 	orr.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__cmpdf2+0x64>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d107      	bne.n	8000b1c <__cmpdf2+0x74>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d1d6      	bne.n	8000ac4 <__cmpdf2+0x1c>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d0d3      	beq.n	8000ac4 <__cmpdf2+0x1c>
 8000b1c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_cdrcmple>:
 8000b24:	4684      	mov	ip, r0
 8000b26:	4610      	mov	r0, r2
 8000b28:	4662      	mov	r2, ip
 8000b2a:	468c      	mov	ip, r1
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4663      	mov	r3, ip
 8000b30:	e000      	b.n	8000b34 <__aeabi_cdcmpeq>
 8000b32:	bf00      	nop

08000b34 <__aeabi_cdcmpeq>:
 8000b34:	b501      	push	{r0, lr}
 8000b36:	f7ff ffb7 	bl	8000aa8 <__cmpdf2>
 8000b3a:	2800      	cmp	r0, #0
 8000b3c:	bf48      	it	mi
 8000b3e:	f110 0f00 	cmnmi.w	r0, #0
 8000b42:	bd01      	pop	{r0, pc}

08000b44 <__aeabi_dcmpeq>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff fff4 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b4c:	bf0c      	ite	eq
 8000b4e:	2001      	moveq	r0, #1
 8000b50:	2000      	movne	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmplt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffea 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmple>:
 8000b6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b70:	f7ff ffe0 	bl	8000b34 <__aeabi_cdcmpeq>
 8000b74:	bf94      	ite	ls
 8000b76:	2001      	movls	r0, #1
 8000b78:	2000      	movhi	r0, #0
 8000b7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7e:	bf00      	nop

08000b80 <__aeabi_dcmpge>:
 8000b80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b84:	f7ff ffce 	bl	8000b24 <__aeabi_cdrcmple>
 8000b88:	bf94      	ite	ls
 8000b8a:	2001      	movls	r0, #1
 8000b8c:	2000      	movhi	r0, #0
 8000b8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b92:	bf00      	nop

08000b94 <__aeabi_dcmpgt>:
 8000b94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b98:	f7ff ffc4 	bl	8000b24 <__aeabi_cdrcmple>
 8000b9c:	bf34      	ite	cc
 8000b9e:	2001      	movcc	r0, #1
 8000ba0:	2000      	movcs	r0, #0
 8000ba2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <memcpy>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	ea41 0300 	orr.w	r3, r1, r0
 8000c9e:	f013 0303 	ands.w	r3, r3, #3
 8000ca2:	d16d      	bne.n	8000d80 <memcpy+0xe8>
 8000ca4:	3a40      	subs	r2, #64	; 0x40
 8000ca6:	d341      	bcc.n	8000d2c <memcpy+0x94>
 8000ca8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cac:	f840 3b04 	str.w	r3, [r0], #4
 8000cb0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cb4:	f840 3b04 	str.w	r3, [r0], #4
 8000cb8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cbc:	f840 3b04 	str.w	r3, [r0], #4
 8000cc0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cc4:	f840 3b04 	str.w	r3, [r0], #4
 8000cc8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ccc:	f840 3b04 	str.w	r3, [r0], #4
 8000cd0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cd4:	f840 3b04 	str.w	r3, [r0], #4
 8000cd8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cdc:	f840 3b04 	str.w	r3, [r0], #4
 8000ce0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000ce4:	f840 3b04 	str.w	r3, [r0], #4
 8000ce8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cec:	f840 3b04 	str.w	r3, [r0], #4
 8000cf0:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cf4:	f840 3b04 	str.w	r3, [r0], #4
 8000cf8:	f851 3b04 	ldr.w	r3, [r1], #4
 8000cfc:	f840 3b04 	str.w	r3, [r0], #4
 8000d00:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d04:	f840 3b04 	str.w	r3, [r0], #4
 8000d08:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d0c:	f840 3b04 	str.w	r3, [r0], #4
 8000d10:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d14:	f840 3b04 	str.w	r3, [r0], #4
 8000d18:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d1c:	f840 3b04 	str.w	r3, [r0], #4
 8000d20:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d24:	f840 3b04 	str.w	r3, [r0], #4
 8000d28:	3a40      	subs	r2, #64	; 0x40
 8000d2a:	d2bd      	bcs.n	8000ca8 <memcpy+0x10>
 8000d2c:	3230      	adds	r2, #48	; 0x30
 8000d2e:	d311      	bcc.n	8000d54 <memcpy+0xbc>
 8000d30:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d34:	f840 3b04 	str.w	r3, [r0], #4
 8000d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d3c:	f840 3b04 	str.w	r3, [r0], #4
 8000d40:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d44:	f840 3b04 	str.w	r3, [r0], #4
 8000d48:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d4c:	f840 3b04 	str.w	r3, [r0], #4
 8000d50:	3a10      	subs	r2, #16
 8000d52:	d2ed      	bcs.n	8000d30 <memcpy+0x98>
 8000d54:	320c      	adds	r2, #12
 8000d56:	d305      	bcc.n	8000d64 <memcpy+0xcc>
 8000d58:	f851 3b04 	ldr.w	r3, [r1], #4
 8000d5c:	f840 3b04 	str.w	r3, [r0], #4
 8000d60:	3a04      	subs	r2, #4
 8000d62:	d2f9      	bcs.n	8000d58 <memcpy+0xc0>
 8000d64:	3204      	adds	r2, #4
 8000d66:	d008      	beq.n	8000d7a <memcpy+0xe2>
 8000d68:	07d2      	lsls	r2, r2, #31
 8000d6a:	bf1c      	itt	ne
 8000d6c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000d70:	f800 3b01 	strbne.w	r3, [r0], #1
 8000d74:	d301      	bcc.n	8000d7a <memcpy+0xe2>
 8000d76:	880b      	ldrh	r3, [r1, #0]
 8000d78:	8003      	strh	r3, [r0, #0]
 8000d7a:	4660      	mov	r0, ip
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	2a08      	cmp	r2, #8
 8000d82:	d313      	bcc.n	8000dac <memcpy+0x114>
 8000d84:	078b      	lsls	r3, r1, #30
 8000d86:	d08d      	beq.n	8000ca4 <memcpy+0xc>
 8000d88:	f010 0303 	ands.w	r3, r0, #3
 8000d8c:	d08a      	beq.n	8000ca4 <memcpy+0xc>
 8000d8e:	f1c3 0304 	rsb	r3, r3, #4
 8000d92:	1ad2      	subs	r2, r2, r3
 8000d94:	07db      	lsls	r3, r3, #31
 8000d96:	bf1c      	itt	ne
 8000d98:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000d9c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000da0:	d380      	bcc.n	8000ca4 <memcpy+0xc>
 8000da2:	f831 3b02 	ldrh.w	r3, [r1], #2
 8000da6:	f820 3b02 	strh.w	r3, [r0], #2
 8000daa:	e77b      	b.n	8000ca4 <memcpy+0xc>
 8000dac:	3a04      	subs	r2, #4
 8000dae:	d3d9      	bcc.n	8000d64 <memcpy+0xcc>
 8000db0:	3a01      	subs	r2, #1
 8000db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000db6:	f800 3b01 	strb.w	r3, [r0], #1
 8000dba:	d2f9      	bcs.n	8000db0 <memcpy+0x118>
 8000dbc:	780b      	ldrb	r3, [r1, #0]
 8000dbe:	7003      	strb	r3, [r0, #0]
 8000dc0:	784b      	ldrb	r3, [r1, #1]
 8000dc2:	7043      	strb	r3, [r0, #1]
 8000dc4:	788b      	ldrb	r3, [r1, #2]
 8000dc6:	7083      	strb	r3, [r0, #2]
 8000dc8:	4660      	mov	r0, ip
 8000dca:	4770      	bx	lr

08000dcc <__aeabi_uldivmod>:
 8000dcc:	b953      	cbnz	r3, 8000de4 <__aeabi_uldivmod+0x18>
 8000dce:	b94a      	cbnz	r2, 8000de4 <__aeabi_uldivmod+0x18>
 8000dd0:	2900      	cmp	r1, #0
 8000dd2:	bf08      	it	eq
 8000dd4:	2800      	cmpeq	r0, #0
 8000dd6:	bf1c      	itt	ne
 8000dd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ddc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000de0:	f000 b83c 	b.w	8000e5c <__aeabi_idiv0>
 8000de4:	b082      	sub	sp, #8
 8000de6:	46ec      	mov	ip, sp
 8000de8:	e92d 5000 	stmdb	sp!, {ip, lr}
 8000dec:	f000 f81e 	bl	8000e2c <__gnu_uldivmod_helper>
 8000df0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000df4:	b002      	add	sp, #8
 8000df6:	bc0c      	pop	{r2, r3}
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <__gnu_ldivmod_helper>:
 8000dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e00:	9c06      	ldr	r4, [sp, #24]
 8000e02:	4615      	mov	r5, r2
 8000e04:	4606      	mov	r6, r0
 8000e06:	460f      	mov	r7, r1
 8000e08:	4698      	mov	r8, r3
 8000e0a:	f000 f829 	bl	8000e60 <__divdi3>
 8000e0e:	fb05 f301 	mul.w	r3, r5, r1
 8000e12:	fb00 3808 	mla	r8, r0, r8, r3
 8000e16:	fba5 2300 	umull	r2, r3, r5, r0
 8000e1a:	1ab2      	subs	r2, r6, r2
 8000e1c:	4443      	add	r3, r8
 8000e1e:	eb67 0303 	sbc.w	r3, r7, r3
 8000e22:	e9c4 2300 	strd	r2, r3, [r4]
 8000e26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e2a:	bf00      	nop

08000e2c <__gnu_uldivmod_helper>:
 8000e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e30:	9c06      	ldr	r4, [sp, #24]
 8000e32:	4690      	mov	r8, r2
 8000e34:	4606      	mov	r6, r0
 8000e36:	460f      	mov	r7, r1
 8000e38:	461d      	mov	r5, r3
 8000e3a:	f000 f95f 	bl	80010fc <__udivdi3>
 8000e3e:	fb00 f505 	mul.w	r5, r0, r5
 8000e42:	fba0 2308 	umull	r2, r3, r0, r8
 8000e46:	fb08 5501 	mla	r5, r8, r1, r5
 8000e4a:	1ab2      	subs	r2, r6, r2
 8000e4c:	442b      	add	r3, r5
 8000e4e:	eb67 0303 	sbc.w	r3, r7, r3
 8000e52:	e9c4 2300 	strd	r2, r3, [r4]
 8000e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000e5a:	bf00      	nop

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <__divdi3>:
 8000e60:	2900      	cmp	r1, #0
 8000e62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e66:	f2c0 80a6 	blt.w	8000fb6 <__divdi3+0x156>
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	f2c0 809c 	blt.w	8000faa <__divdi3+0x14a>
 8000e72:	4688      	mov	r8, r1
 8000e74:	4694      	mov	ip, r2
 8000e76:	469e      	mov	lr, r3
 8000e78:	4615      	mov	r5, r2
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	460f      	mov	r7, r1
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d13d      	bne.n	8000efe <__divdi3+0x9e>
 8000e82:	428a      	cmp	r2, r1
 8000e84:	d959      	bls.n	8000f3a <__divdi3+0xda>
 8000e86:	fab2 f382 	clz	r3, r2
 8000e8a:	b13b      	cbz	r3, 8000e9c <__divdi3+0x3c>
 8000e8c:	f1c3 0220 	rsb	r2, r3, #32
 8000e90:	409f      	lsls	r7, r3
 8000e92:	fa20 f202 	lsr.w	r2, r0, r2
 8000e96:	409d      	lsls	r5, r3
 8000e98:	4317      	orrs	r7, r2
 8000e9a:	409c      	lsls	r4, r3
 8000e9c:	0c29      	lsrs	r1, r5, #16
 8000e9e:	0c22      	lsrs	r2, r4, #16
 8000ea0:	fbb7 fef1 	udiv	lr, r7, r1
 8000ea4:	b2a8      	uxth	r0, r5
 8000ea6:	fb01 771e 	mls	r7, r1, lr, r7
 8000eaa:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8000eae:	fb00 f30e 	mul.w	r3, r0, lr
 8000eb2:	42bb      	cmp	r3, r7
 8000eb4:	d90a      	bls.n	8000ecc <__divdi3+0x6c>
 8000eb6:	197f      	adds	r7, r7, r5
 8000eb8:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
 8000ebc:	f080 8105 	bcs.w	80010ca <__divdi3+0x26a>
 8000ec0:	42bb      	cmp	r3, r7
 8000ec2:	f240 8102 	bls.w	80010ca <__divdi3+0x26a>
 8000ec6:	f1ae 0e02 	sub.w	lr, lr, #2
 8000eca:	442f      	add	r7, r5
 8000ecc:	1aff      	subs	r7, r7, r3
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb7 f3f1 	udiv	r3, r7, r1
 8000ed4:	fb01 7713 	mls	r7, r1, r3, r7
 8000ed8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000edc:	fb00 f003 	mul.w	r0, r0, r3
 8000ee0:	42b8      	cmp	r0, r7
 8000ee2:	d908      	bls.n	8000ef6 <__divdi3+0x96>
 8000ee4:	197f      	adds	r7, r7, r5
 8000ee6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8000eea:	f080 80f0 	bcs.w	80010ce <__divdi3+0x26e>
 8000eee:	42b8      	cmp	r0, r7
 8000ef0:	f240 80ed 	bls.w	80010ce <__divdi3+0x26e>
 8000ef4:	3b02      	subs	r3, #2
 8000ef6:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000efa:	2200      	movs	r2, #0
 8000efc:	e003      	b.n	8000f06 <__divdi3+0xa6>
 8000efe:	428b      	cmp	r3, r1
 8000f00:	d90f      	bls.n	8000f22 <__divdi3+0xc2>
 8000f02:	2200      	movs	r2, #0
 8000f04:	4613      	mov	r3, r2
 8000f06:	1c34      	adds	r4, r6, #0
 8000f08:	bf18      	it	ne
 8000f0a:	2401      	movne	r4, #1
 8000f0c:	4260      	negs	r0, r4
 8000f0e:	f04f 0500 	mov.w	r5, #0
 8000f12:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8000f16:	4058      	eors	r0, r3
 8000f18:	4051      	eors	r1, r2
 8000f1a:	1900      	adds	r0, r0, r4
 8000f1c:	4169      	adcs	r1, r5
 8000f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f22:	fab3 f283 	clz	r2, r3
 8000f26:	2a00      	cmp	r2, #0
 8000f28:	f040 8086 	bne.w	8001038 <__divdi3+0x1d8>
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d302      	bcc.n	8000f36 <__divdi3+0xd6>
 8000f30:	4584      	cmp	ip, r0
 8000f32:	f200 80db 	bhi.w	80010ec <__divdi3+0x28c>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e7e5      	b.n	8000f06 <__divdi3+0xa6>
 8000f3a:	b912      	cbnz	r2, 8000f42 <__divdi3+0xe2>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	fbb3 f5f2 	udiv	r5, r3, r2
 8000f42:	fab5 f085 	clz	r0, r5
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d13b      	bne.n	8000fc2 <__divdi3+0x162>
 8000f4a:	1b78      	subs	r0, r7, r5
 8000f4c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f50:	fa1f fc85 	uxth.w	ip, r5
 8000f54:	2201      	movs	r2, #1
 8000f56:	fbb0 f8fe 	udiv	r8, r0, lr
 8000f5a:	0c21      	lsrs	r1, r4, #16
 8000f5c:	fb0e 0718 	mls	r7, lr, r8, r0
 8000f60:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8000f64:	fb0c f308 	mul.w	r3, ip, r8
 8000f68:	42bb      	cmp	r3, r7
 8000f6a:	d907      	bls.n	8000f7c <__divdi3+0x11c>
 8000f6c:	197f      	adds	r7, r7, r5
 8000f6e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8000f72:	d202      	bcs.n	8000f7a <__divdi3+0x11a>
 8000f74:	42bb      	cmp	r3, r7
 8000f76:	f200 80bd 	bhi.w	80010f4 <__divdi3+0x294>
 8000f7a:	4688      	mov	r8, r1
 8000f7c:	1aff      	subs	r7, r7, r3
 8000f7e:	b2a4      	uxth	r4, r4
 8000f80:	fbb7 f3fe 	udiv	r3, r7, lr
 8000f84:	fb0e 7713 	mls	r7, lr, r3, r7
 8000f88:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8000f8c:	fb0c fc03 	mul.w	ip, ip, r3
 8000f90:	45bc      	cmp	ip, r7
 8000f92:	d907      	bls.n	8000fa4 <__divdi3+0x144>
 8000f94:	197f      	adds	r7, r7, r5
 8000f96:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8000f9a:	d202      	bcs.n	8000fa2 <__divdi3+0x142>
 8000f9c:	45bc      	cmp	ip, r7
 8000f9e:	f200 80a7 	bhi.w	80010f0 <__divdi3+0x290>
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000fa8:	e7ad      	b.n	8000f06 <__divdi3+0xa6>
 8000faa:	4252      	negs	r2, r2
 8000fac:	ea6f 0606 	mvn.w	r6, r6
 8000fb0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000fb4:	e75d      	b.n	8000e72 <__divdi3+0x12>
 8000fb6:	4240      	negs	r0, r0
 8000fb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000fbc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8000fc0:	e754      	b.n	8000e6c <__divdi3+0xc>
 8000fc2:	f1c0 0220 	rsb	r2, r0, #32
 8000fc6:	fa24 f102 	lsr.w	r1, r4, r2
 8000fca:	fa07 f300 	lsl.w	r3, r7, r0
 8000fce:	4085      	lsls	r5, r0
 8000fd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fd4:	40d7      	lsrs	r7, r2
 8000fd6:	4319      	orrs	r1, r3
 8000fd8:	fbb7 f2fe 	udiv	r2, r7, lr
 8000fdc:	0c0b      	lsrs	r3, r1, #16
 8000fde:	fb0e 7712 	mls	r7, lr, r2, r7
 8000fe2:	fa1f fc85 	uxth.w	ip, r5
 8000fe6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8000fea:	fb0c f702 	mul.w	r7, ip, r2
 8000fee:	429f      	cmp	r7, r3
 8000ff0:	fa04 f400 	lsl.w	r4, r4, r0
 8000ff4:	d907      	bls.n	8001006 <__divdi3+0x1a6>
 8000ff6:	195b      	adds	r3, r3, r5
 8000ff8:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8000ffc:	d274      	bcs.n	80010e8 <__divdi3+0x288>
 8000ffe:	429f      	cmp	r7, r3
 8001000:	d972      	bls.n	80010e8 <__divdi3+0x288>
 8001002:	3a02      	subs	r2, #2
 8001004:	442b      	add	r3, r5
 8001006:	1bdf      	subs	r7, r3, r7
 8001008:	b289      	uxth	r1, r1
 800100a:	fbb7 f8fe 	udiv	r8, r7, lr
 800100e:	fb0e 7318 	mls	r3, lr, r8, r7
 8001012:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001016:	fb0c f708 	mul.w	r7, ip, r8
 800101a:	429f      	cmp	r7, r3
 800101c:	d908      	bls.n	8001030 <__divdi3+0x1d0>
 800101e:	195b      	adds	r3, r3, r5
 8001020:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
 8001024:	d25c      	bcs.n	80010e0 <__divdi3+0x280>
 8001026:	429f      	cmp	r7, r3
 8001028:	d95a      	bls.n	80010e0 <__divdi3+0x280>
 800102a:	f1a8 0802 	sub.w	r8, r8, #2
 800102e:	442b      	add	r3, r5
 8001030:	1bd8      	subs	r0, r3, r7
 8001032:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001036:	e78e      	b.n	8000f56 <__divdi3+0xf6>
 8001038:	f1c2 0320 	rsb	r3, r2, #32
 800103c:	fa2c f103 	lsr.w	r1, ip, r3
 8001040:	fa0e fe02 	lsl.w	lr, lr, r2
 8001044:	fa20 f703 	lsr.w	r7, r0, r3
 8001048:	ea41 0e0e 	orr.w	lr, r1, lr
 800104c:	fa08 f002 	lsl.w	r0, r8, r2
 8001050:	fa28 f103 	lsr.w	r1, r8, r3
 8001054:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8001058:	4338      	orrs	r0, r7
 800105a:	fbb1 f8f5 	udiv	r8, r1, r5
 800105e:	0c03      	lsrs	r3, r0, #16
 8001060:	fb05 1118 	mls	r1, r5, r8, r1
 8001064:	fa1f f78e 	uxth.w	r7, lr
 8001068:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800106c:	fb07 f308 	mul.w	r3, r7, r8
 8001070:	428b      	cmp	r3, r1
 8001072:	fa0c fc02 	lsl.w	ip, ip, r2
 8001076:	d909      	bls.n	800108c <__divdi3+0x22c>
 8001078:	eb11 010e 	adds.w	r1, r1, lr
 800107c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
 8001080:	d230      	bcs.n	80010e4 <__divdi3+0x284>
 8001082:	428b      	cmp	r3, r1
 8001084:	d92e      	bls.n	80010e4 <__divdi3+0x284>
 8001086:	f1a8 0802 	sub.w	r8, r8, #2
 800108a:	4471      	add	r1, lr
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	b280      	uxth	r0, r0
 8001090:	fbb1 f3f5 	udiv	r3, r1, r5
 8001094:	fb05 1113 	mls	r1, r5, r3, r1
 8001098:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800109c:	fb07 f703 	mul.w	r7, r7, r3
 80010a0:	428f      	cmp	r7, r1
 80010a2:	d908      	bls.n	80010b6 <__divdi3+0x256>
 80010a4:	eb11 010e 	adds.w	r1, r1, lr
 80010a8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80010ac:	d216      	bcs.n	80010dc <__divdi3+0x27c>
 80010ae:	428f      	cmp	r7, r1
 80010b0:	d914      	bls.n	80010dc <__divdi3+0x27c>
 80010b2:	3b02      	subs	r3, #2
 80010b4:	4471      	add	r1, lr
 80010b6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010ba:	1bc9      	subs	r1, r1, r7
 80010bc:	fba3 890c 	umull	r8, r9, r3, ip
 80010c0:	4549      	cmp	r1, r9
 80010c2:	d309      	bcc.n	80010d8 <__divdi3+0x278>
 80010c4:	d005      	beq.n	80010d2 <__divdi3+0x272>
 80010c6:	2200      	movs	r2, #0
 80010c8:	e71d      	b.n	8000f06 <__divdi3+0xa6>
 80010ca:	4696      	mov	lr, r2
 80010cc:	e6fe      	b.n	8000ecc <__divdi3+0x6c>
 80010ce:	4613      	mov	r3, r2
 80010d0:	e711      	b.n	8000ef6 <__divdi3+0x96>
 80010d2:	4094      	lsls	r4, r2
 80010d4:	4544      	cmp	r4, r8
 80010d6:	d2f6      	bcs.n	80010c6 <__divdi3+0x266>
 80010d8:	3b01      	subs	r3, #1
 80010da:	e7f4      	b.n	80010c6 <__divdi3+0x266>
 80010dc:	4603      	mov	r3, r0
 80010de:	e7ea      	b.n	80010b6 <__divdi3+0x256>
 80010e0:	4688      	mov	r8, r1
 80010e2:	e7a5      	b.n	8001030 <__divdi3+0x1d0>
 80010e4:	46c8      	mov	r8, r9
 80010e6:	e7d1      	b.n	800108c <__divdi3+0x22c>
 80010e8:	4602      	mov	r2, r0
 80010ea:	e78c      	b.n	8001006 <__divdi3+0x1a6>
 80010ec:	4613      	mov	r3, r2
 80010ee:	e70a      	b.n	8000f06 <__divdi3+0xa6>
 80010f0:	3b02      	subs	r3, #2
 80010f2:	e757      	b.n	8000fa4 <__divdi3+0x144>
 80010f4:	f1a8 0802 	sub.w	r8, r8, #2
 80010f8:	442f      	add	r7, r5
 80010fa:	e73f      	b.n	8000f7c <__divdi3+0x11c>

080010fc <__udivdi3>:
 80010fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001100:	2b00      	cmp	r3, #0
 8001102:	d144      	bne.n	800118e <__udivdi3+0x92>
 8001104:	428a      	cmp	r2, r1
 8001106:	4615      	mov	r5, r2
 8001108:	4604      	mov	r4, r0
 800110a:	d94f      	bls.n	80011ac <__udivdi3+0xb0>
 800110c:	fab2 f782 	clz	r7, r2
 8001110:	460e      	mov	r6, r1
 8001112:	b14f      	cbz	r7, 8001128 <__udivdi3+0x2c>
 8001114:	f1c7 0320 	rsb	r3, r7, #32
 8001118:	40b9      	lsls	r1, r7
 800111a:	fa20 f603 	lsr.w	r6, r0, r3
 800111e:	fa02 f507 	lsl.w	r5, r2, r7
 8001122:	430e      	orrs	r6, r1
 8001124:	fa00 f407 	lsl.w	r4, r0, r7
 8001128:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800112c:	0c23      	lsrs	r3, r4, #16
 800112e:	fbb6 f0fe 	udiv	r0, r6, lr
 8001132:	b2af      	uxth	r7, r5
 8001134:	fb0e 6110 	mls	r1, lr, r0, r6
 8001138:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800113c:	fb07 f100 	mul.w	r1, r7, r0
 8001140:	4299      	cmp	r1, r3
 8001142:	d909      	bls.n	8001158 <__udivdi3+0x5c>
 8001144:	195b      	adds	r3, r3, r5
 8001146:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800114a:	f080 80ec 	bcs.w	8001326 <__udivdi3+0x22a>
 800114e:	4299      	cmp	r1, r3
 8001150:	f240 80e9 	bls.w	8001326 <__udivdi3+0x22a>
 8001154:	3802      	subs	r0, #2
 8001156:	442b      	add	r3, r5
 8001158:	1a5a      	subs	r2, r3, r1
 800115a:	b2a4      	uxth	r4, r4
 800115c:	fbb2 f3fe 	udiv	r3, r2, lr
 8001160:	fb0e 2213 	mls	r2, lr, r3, r2
 8001164:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8001168:	fb07 f703 	mul.w	r7, r7, r3
 800116c:	4297      	cmp	r7, r2
 800116e:	d908      	bls.n	8001182 <__udivdi3+0x86>
 8001170:	1952      	adds	r2, r2, r5
 8001172:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 8001176:	f080 80d8 	bcs.w	800132a <__udivdi3+0x22e>
 800117a:	4297      	cmp	r7, r2
 800117c:	f240 80d5 	bls.w	800132a <__udivdi3+0x22e>
 8001180:	3b02      	subs	r3, #2
 8001182:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001186:	2600      	movs	r6, #0
 8001188:	4631      	mov	r1, r6
 800118a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800118e:	428b      	cmp	r3, r1
 8001190:	d847      	bhi.n	8001222 <__udivdi3+0x126>
 8001192:	fab3 f683 	clz	r6, r3
 8001196:	2e00      	cmp	r6, #0
 8001198:	d148      	bne.n	800122c <__udivdi3+0x130>
 800119a:	428b      	cmp	r3, r1
 800119c:	d302      	bcc.n	80011a4 <__udivdi3+0xa8>
 800119e:	4282      	cmp	r2, r0
 80011a0:	f200 80cd 	bhi.w	800133e <__udivdi3+0x242>
 80011a4:	2001      	movs	r0, #1
 80011a6:	4631      	mov	r1, r6
 80011a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011ac:	b912      	cbnz	r2, 80011b4 <__udivdi3+0xb8>
 80011ae:	2501      	movs	r5, #1
 80011b0:	fbb5 f5f2 	udiv	r5, r5, r2
 80011b4:	fab5 f885 	clz	r8, r5
 80011b8:	f1b8 0f00 	cmp.w	r8, #0
 80011bc:	d177      	bne.n	80012ae <__udivdi3+0x1b2>
 80011be:	1b4a      	subs	r2, r1, r5
 80011c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80011c4:	b2af      	uxth	r7, r5
 80011c6:	2601      	movs	r6, #1
 80011c8:	fbb2 f0fe 	udiv	r0, r2, lr
 80011cc:	0c23      	lsrs	r3, r4, #16
 80011ce:	fb0e 2110 	mls	r1, lr, r0, r2
 80011d2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80011d6:	fb07 f300 	mul.w	r3, r7, r0
 80011da:	428b      	cmp	r3, r1
 80011dc:	d907      	bls.n	80011ee <__udivdi3+0xf2>
 80011de:	1949      	adds	r1, r1, r5
 80011e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80011e4:	d202      	bcs.n	80011ec <__udivdi3+0xf0>
 80011e6:	428b      	cmp	r3, r1
 80011e8:	f200 80ba 	bhi.w	8001360 <__udivdi3+0x264>
 80011ec:	4610      	mov	r0, r2
 80011ee:	1ac9      	subs	r1, r1, r3
 80011f0:	b2a4      	uxth	r4, r4
 80011f2:	fbb1 f3fe 	udiv	r3, r1, lr
 80011f6:	fb0e 1113 	mls	r1, lr, r3, r1
 80011fa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80011fe:	fb07 f703 	mul.w	r7, r7, r3
 8001202:	42a7      	cmp	r7, r4
 8001204:	d908      	bls.n	8001218 <__udivdi3+0x11c>
 8001206:	1964      	adds	r4, r4, r5
 8001208:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800120c:	f080 808f 	bcs.w	800132e <__udivdi3+0x232>
 8001210:	42a7      	cmp	r7, r4
 8001212:	f240 808c 	bls.w	800132e <__udivdi3+0x232>
 8001216:	3b02      	subs	r3, #2
 8001218:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800121c:	4631      	mov	r1, r6
 800121e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001222:	2600      	movs	r6, #0
 8001224:	4630      	mov	r0, r6
 8001226:	4631      	mov	r1, r6
 8001228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800122c:	f1c6 0420 	rsb	r4, r6, #32
 8001230:	fa22 f504 	lsr.w	r5, r2, r4
 8001234:	40b3      	lsls	r3, r6
 8001236:	432b      	orrs	r3, r5
 8001238:	fa20 fc04 	lsr.w	ip, r0, r4
 800123c:	fa01 f706 	lsl.w	r7, r1, r6
 8001240:	fa21 f504 	lsr.w	r5, r1, r4
 8001244:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8001248:	ea4c 0707 	orr.w	r7, ip, r7
 800124c:	fbb5 f8fe 	udiv	r8, r5, lr
 8001250:	0c39      	lsrs	r1, r7, #16
 8001252:	fb0e 5518 	mls	r5, lr, r8, r5
 8001256:	fa1f fc83 	uxth.w	ip, r3
 800125a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 800125e:	fb0c f108 	mul.w	r1, ip, r8
 8001262:	42a9      	cmp	r1, r5
 8001264:	fa02 f206 	lsl.w	r2, r2, r6
 8001268:	d904      	bls.n	8001274 <__udivdi3+0x178>
 800126a:	18ed      	adds	r5, r5, r3
 800126c:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
 8001270:	d367      	bcc.n	8001342 <__udivdi3+0x246>
 8001272:	46a0      	mov	r8, r4
 8001274:	1a6d      	subs	r5, r5, r1
 8001276:	b2bf      	uxth	r7, r7
 8001278:	fbb5 f4fe 	udiv	r4, r5, lr
 800127c:	fb0e 5514 	mls	r5, lr, r4, r5
 8001280:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8001284:	fb0c fc04 	mul.w	ip, ip, r4
 8001288:	458c      	cmp	ip, r1
 800128a:	d904      	bls.n	8001296 <__udivdi3+0x19a>
 800128c:	18c9      	adds	r1, r1, r3
 800128e:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
 8001292:	d35c      	bcc.n	800134e <__udivdi3+0x252>
 8001294:	462c      	mov	r4, r5
 8001296:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 800129a:	ebcc 0101 	rsb	r1, ip, r1
 800129e:	fba4 2302 	umull	r2, r3, r4, r2
 80012a2:	4299      	cmp	r1, r3
 80012a4:	d348      	bcc.n	8001338 <__udivdi3+0x23c>
 80012a6:	d044      	beq.n	8001332 <__udivdi3+0x236>
 80012a8:	4620      	mov	r0, r4
 80012aa:	2600      	movs	r6, #0
 80012ac:	e76c      	b.n	8001188 <__udivdi3+0x8c>
 80012ae:	f1c8 0420 	rsb	r4, r8, #32
 80012b2:	fa01 f308 	lsl.w	r3, r1, r8
 80012b6:	fa05 f508 	lsl.w	r5, r5, r8
 80012ba:	fa20 f704 	lsr.w	r7, r0, r4
 80012be:	40e1      	lsrs	r1, r4
 80012c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80012c4:	431f      	orrs	r7, r3
 80012c6:	fbb1 f6fe 	udiv	r6, r1, lr
 80012ca:	0c3a      	lsrs	r2, r7, #16
 80012cc:	fb0e 1116 	mls	r1, lr, r6, r1
 80012d0:	fa1f fc85 	uxth.w	ip, r5
 80012d4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80012d8:	fb0c f206 	mul.w	r2, ip, r6
 80012dc:	429a      	cmp	r2, r3
 80012de:	fa00 f408 	lsl.w	r4, r0, r8
 80012e2:	d907      	bls.n	80012f4 <__udivdi3+0x1f8>
 80012e4:	195b      	adds	r3, r3, r5
 80012e6:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
 80012ea:	d237      	bcs.n	800135c <__udivdi3+0x260>
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d935      	bls.n	800135c <__udivdi3+0x260>
 80012f0:	3e02      	subs	r6, #2
 80012f2:	442b      	add	r3, r5
 80012f4:	1a9b      	subs	r3, r3, r2
 80012f6:	b2bf      	uxth	r7, r7
 80012f8:	fbb3 f0fe 	udiv	r0, r3, lr
 80012fc:	fb0e 3310 	mls	r3, lr, r0, r3
 8001300:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8001304:	fb0c f100 	mul.w	r1, ip, r0
 8001308:	4299      	cmp	r1, r3
 800130a:	d907      	bls.n	800131c <__udivdi3+0x220>
 800130c:	195b      	adds	r3, r3, r5
 800130e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8001312:	d221      	bcs.n	8001358 <__udivdi3+0x25c>
 8001314:	4299      	cmp	r1, r3
 8001316:	d91f      	bls.n	8001358 <__udivdi3+0x25c>
 8001318:	3802      	subs	r0, #2
 800131a:	442b      	add	r3, r5
 800131c:	1a5a      	subs	r2, r3, r1
 800131e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8001322:	4667      	mov	r7, ip
 8001324:	e750      	b.n	80011c8 <__udivdi3+0xcc>
 8001326:	4610      	mov	r0, r2
 8001328:	e716      	b.n	8001158 <__udivdi3+0x5c>
 800132a:	460b      	mov	r3, r1
 800132c:	e729      	b.n	8001182 <__udivdi3+0x86>
 800132e:	4613      	mov	r3, r2
 8001330:	e772      	b.n	8001218 <__udivdi3+0x11c>
 8001332:	40b0      	lsls	r0, r6
 8001334:	4290      	cmp	r0, r2
 8001336:	d2b7      	bcs.n	80012a8 <__udivdi3+0x1ac>
 8001338:	1e60      	subs	r0, r4, #1
 800133a:	2600      	movs	r6, #0
 800133c:	e724      	b.n	8001188 <__udivdi3+0x8c>
 800133e:	4630      	mov	r0, r6
 8001340:	e722      	b.n	8001188 <__udivdi3+0x8c>
 8001342:	42a9      	cmp	r1, r5
 8001344:	d995      	bls.n	8001272 <__udivdi3+0x176>
 8001346:	f1a8 0802 	sub.w	r8, r8, #2
 800134a:	441d      	add	r5, r3
 800134c:	e792      	b.n	8001274 <__udivdi3+0x178>
 800134e:	458c      	cmp	ip, r1
 8001350:	d9a0      	bls.n	8001294 <__udivdi3+0x198>
 8001352:	3c02      	subs	r4, #2
 8001354:	4419      	add	r1, r3
 8001356:	e79e      	b.n	8001296 <__udivdi3+0x19a>
 8001358:	4610      	mov	r0, r2
 800135a:	e7df      	b.n	800131c <__udivdi3+0x220>
 800135c:	460e      	mov	r6, r1
 800135e:	e7c9      	b.n	80012f4 <__udivdi3+0x1f8>
 8001360:	3802      	subs	r0, #2
 8001362:	4429      	add	r1, r5
 8001364:	e743      	b.n	80011ee <__udivdi3+0xf2>
 8001366:	bf00      	nop
	...

08001370 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8001370:	4bc4      	ldr	r3, [pc, #784]	; (8001684 <main+0x314>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 8001372:	48c5      	ldr	r0, [pc, #788]	; (8001688 <main+0x318>)
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 8001374:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001376:	2200      	movs	r2, #0
 8001378:	f461 01fc 	orn	r1, r1, #8257536	; 0x7e0000
	sdStart(&SD2, &uartCfg3);
    else
	sdStart(&SD2, &uartCfg2);
}

int main(void) {
 800137c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8001380:	6299      	str	r1, [r3, #40]	; 0x28
 8001382:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 8001384:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001388:	691c      	ldr	r4, [r3, #16]
 800138a:	6119      	str	r1, [r3, #16]
 800138c:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 800138e:	68dc      	ldr	r4, [r3, #12]
 8001390:	60d9      	str	r1, [r3, #12]
 8001392:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 8001394:	69d9      	ldr	r1, [r3, #28]
 8001396:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800139a:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 800139c:	6801      	ldr	r1, [r0, #0]
 800139e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80013a2:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80013a4:	6a19      	ldr	r1, [r3, #32]
 80013a6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80013aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80013ae:	b08b      	sub	sp, #44	; 0x2c
 80013b0:	d003      	beq.n	80013ba <main+0x4a>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 80013b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80013b6:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 80013b8:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80013ba:	4bb2      	ldr	r3, [pc, #712]	; (8001684 <main+0x314>)
 80013bc:	6a1a      	ldr	r2, [r3, #32]
 80013be:	0416      	lsls	r6, r2, #16
 80013c0:	d407      	bmi.n	80013d2 <main+0x62>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 80013c2:	6a1a      	ldr	r2, [r3, #32]
 80013c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013c8:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013d0:	621a      	str	r2, [r3, #32]
 * @init
 */
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
 80013d2:	49ae      	ldr	r1, [pc, #696]	; (800168c <main+0x31c>)
 80013d4:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 80016d0 <main+0x360>
 80013d8:	4cad      	ldr	r4, [pc, #692]	; (8001690 <main+0x320>)
 80013da:	2300      	movs	r3, #0
 80013dc:	600b      	str	r3, [r1, #0]
  dma.isr_mask = 0U;
 80013de:	604b      	str	r3, [r1, #4]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80013e0:	461a      	mov	r2, r3
    _stm32_dma_streams[i].channel->CCR = 0U;
 80013e2:	4618      	mov	r0, r3
 80013e4:	4641      	mov	r1, r8
 80013e6:	684b      	ldr	r3, [r1, #4]
 80013e8:	6018      	str	r0, [r3, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 80013ea:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80013ee:	3201      	adds	r2, #1
 80013f0:	2a0c      	cmp	r2, #12
 80013f2:	f101 0114 	add.w	r1, r1, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 80013f6:	f04f 0300 	mov.w	r3, #0
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 80013fa:	d1f4      	bne.n	80013e6 <main+0x76>
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 80013fc:	4da5      	ldr	r5, [pc, #660]	; (8001694 <main+0x324>)
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 80013fe:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 80016d4 <main+0x364>
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001402:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80016d8 <main+0x368>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001406:	4aa4      	ldr	r2, [pc, #656]	; (8001698 <main+0x328>)
 8001408:	606b      	str	r3, [r5, #4]
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 800140a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800140e:	f8cc 5004 	str.w	r5, [ip, #4]
 8001412:	2660      	movs	r6, #96	; 0x60
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001414:	f8c9 5004 	str.w	r5, [r9, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001418:	2540      	movs	r5, #64	; 0x40

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800141a:	f882 6306 	strb.w	r6, [r2, #774]	; 0x306
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800141e:	f44f 7e80 	mov.w	lr, #256	; 0x100
 8001422:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
 8001426:	f44f 7c00 	mov.w	ip, #512	; 0x200
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800142a:	6015      	str	r5, [r2, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800142c:	2580      	movs	r5, #128	; 0x80

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800142e:	f882 6307 	strb.w	r6, [r2, #775]	; 0x307
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001432:	4894      	ldr	r0, [pc, #592]	; (8001684 <main+0x314>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001434:	f8c2 5180 	str.w	r5, [r2, #384]	; 0x180
 8001438:	f44f 6980 	mov.w	r9, #1024	; 0x400
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800143c:	6015      	str	r5, [r2, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800143e:	f882 6308 	strb.w	r6, [r2, #776]	; 0x308
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001442:	f8c2 e180 	str.w	lr, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001446:	f8c2 e000 	str.w	lr, [r2]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800144a:	f882 6309 	strb.w	r6, [r2, #777]	; 0x309
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800144e:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001452:	f8c2 c000 	str.w	ip, [r2]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001456:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800145a:	f882 630a 	strb.w	r6, [r2, #778]	; 0x30a
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800145e:	f8c2 9180 	str.w	r9, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001462:	f8c2 9000 	str.w	r9, [r2]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001466:	f882 6317 	strb.w	r6, [r2, #791]	; 0x317
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800146a:	f8c2 c180 	str.w	ip, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800146e:	f8c2 c000 	str.w	ip, [r2]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001472:	f882 6328 	strb.w	r6, [r2, #808]	; 0x328
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001476:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800147a:	f8c2 e004 	str.w	lr, [r2, #4]
 800147e:	6986      	ldr	r6, [r0, #24]
  adcp->samples  = NULL;
 8001480:	4d84      	ldr	r5, [pc, #528]	; (8001694 <main+0x324>)

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8001482:	4f86      	ldr	r7, [pc, #536]	; (800169c <main+0x32c>)
 8001484:	60ab      	str	r3, [r5, #8]
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8001486:	f046 0601 	orr.w	r6, r6, #1
 800148a:	6186      	str	r6, [r0, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 800148c:	683e      	ldr	r6, [r7, #0]
  adcp->depth    = 0;
 800148e:	60eb      	str	r3, [r5, #12]
 8001490:	f046 0620 	orr.w	r6, r6, #32
 8001494:	603e      	str	r6, [r7, #0]
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001496:	2601      	movs	r6, #1
 8001498:	702e      	strb	r6, [r5, #0]
  adcp->config   = NULL;
  adcp->samples  = NULL;
  adcp->depth    = 0;
  adcp->grpp     = NULL;
 800149a:	612b      	str	r3, [r5, #16]
 *
 * @notapi
 */
void adc_lld_init(void) {

  clkmask = 0;
 800149c:	4d80      	ldr	r5, [pc, #512]	; (80016a0 <main+0x330>)
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 800149e:	4c81      	ldr	r4, [pc, #516]	; (80016a4 <main+0x334>)
 80014a0:	602b      	str	r3, [r5, #0]
  adcp->config   = NULL;
  adcp->samples  = NULL;
  adcp->depth    = 0;
  adcp->grpp     = NULL;
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80014a2:	4d7c      	ldr	r5, [pc, #496]	; (8001694 <main+0x324>)
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80014a4:	4980      	ldr	r1, [pc, #512]	; (80016a8 <main+0x338>)
  adcp->config   = NULL;
  adcp->samples  = NULL;
  adcp->depth    = 0;
  adcp->grpp     = NULL;
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80014a6:	616b      	str	r3, [r5, #20]
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD1.adcc = ADC1_COMMON;
#endif
  ADCD1.adcm    = ADC1;
 80014a8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 80014ac:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80014b0:	f105 0818 	add.w	r8, r5, #24
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80014b4:	622b      	str	r3, [r5, #32]
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD1.adcc = ADC1_COMMON;
#endif
  ADCD1.adcm    = ADC1;
 80014b6:	62af      	str	r7, [r5, #40]	; 0x28
 80014b8:	f8c5 8018 	str.w	r8, [r5, #24]
  tqp->prev = (thread_t *)tqp;
 80014bc:	f8c5 801c 	str.w	r8, [r5, #28]
#endif
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80014c0:	4d7a      	ldr	r5, [pc, #488]	; (80016ac <main+0x33c>)
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 80014c2:	f8df b218 	ldr.w	fp, [pc, #536]	; 80016dc <main+0x36c>

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 80014c6:	f8df c218 	ldr.w	ip, [pc, #536]	; 80016e0 <main+0x370>
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD3.adcc = ADC3_COMMON;
#endif
  ADCD3.adcm    = ADC3;
 80014ca:	f8df a218 	ldr.w	sl, [pc, #536]	; 80016e4 <main+0x374>

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 80014ce:	f8df e218 	ldr.w	lr, [pc, #536]	; 80016e8 <main+0x378>
 80014d2:	7026      	strb	r6, [r4, #0]
#endif
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 80014d4:	f105 0850 	add.w	r8, r5, #80	; 0x50
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
 80014d8:	4d75      	ldr	r5, [pc, #468]	; (80016b0 <main+0x340>)
 80014da:	62a5      	str	r5, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80014dc:	f104 0718 	add.w	r7, r4, #24
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 80014e0:	f1a8 0550 	sub.w	r5, r8, #80	; 0x50
 80014e4:	f101 0918 	add.w	r9, r1, #24
 80014e8:	61a7      	str	r7, [r4, #24]
  tqp->prev = (thread_t *)tqp;
 80014ea:	61e7      	str	r7, [r4, #28]
 80014ec:	6325      	str	r5, [r4, #48]	; 0x30
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = ADC_DMA_SIZE |
 80014ee:	f242 578a 	movw	r7, #9610	; 0x258a

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 80014f2:	4d68      	ldr	r5, [pc, #416]	; (8001694 <main+0x324>)
  adcp->config   = NULL;
 80014f4:	6063      	str	r3, [r4, #4]
  adcp->samples  = NULL;
 80014f6:	60a3      	str	r3, [r4, #8]
  adcp->depth    = 0;
 80014f8:	60e3      	str	r3, [r4, #12]
  adcp->grpp     = NULL;
 80014fa:	6123      	str	r3, [r4, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80014fc:	6163      	str	r3, [r4, #20]
 80014fe:	6223      	str	r3, [r4, #32]
#endif
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8001500:	f8c1 8030 	str.w	r8, [r1, #48]	; 0x30
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD3.adcc = ADC3_COMMON;
#endif
  ADCD3.adcm    = ADC3;
 8001504:	f8c1 a028 	str.w	sl, [r1, #40]	; 0x28

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001508:	f04f 0850 	mov.w	r8, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800150c:	f44f 2a80 	mov.w	sl, #262144	; 0x40000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001510:	f8c1 9018 	str.w	r9, [r1, #24]
  tqp->prev = (thread_t *)tqp;
 8001514:	f8c1 901c 	str.w	r9, [r1, #28]

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
 8001518:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
 800151c:	f44f 4900 	mov.w	r9, #32768	; 0x8000
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = ADC_DMA_SIZE |
 8001520:	6367      	str	r7, [r4, #52]	; 0x34
 8001522:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001526:	700e      	strb	r6, [r1, #0]
  adcp->config   = NULL;
 8001528:	604b      	str	r3, [r1, #4]
  adcp->samples  = NULL;
 800152a:	608b      	str	r3, [r1, #8]
  adcp->depth    = 0;
 800152c:	60cb      	str	r3, [r1, #12]
  adcp->grpp     = NULL;
 800152e:	610b      	str	r3, [r1, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8001530:	614b      	str	r3, [r1, #20]
 8001532:	620b      	str	r3, [r1, #32]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 8001534:	f8c5 c02c 	str.w	ip, [r5, #44]	; 0x2c
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = ADC_DMA_SIZE |
 8001538:	636f      	str	r7, [r5, #52]	; 0x34
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = ADC_DMA_SIZE |
 800153a:	634f      	str	r7, [r1, #52]	; 0x34

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 800153c:	f8c1 e02c 	str.w	lr, [r1, #44]	; 0x2c
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8001540:	f88b 6000 	strb.w	r6, [fp]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001544:	f882 8312 	strb.w	r8, [r2, #786]	; 0x312
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001548:	f8c2 a180 	str.w	sl, [r2, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800154c:	f8c2 a000 	str.w	sl, [r2]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001550:	f882 832f 	strb.w	r8, [r2, #815]	; 0x32f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001554:	f8c2 9184 	str.w	r9, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001558:	f8c2 9004 	str.w	r9, [r2, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800155c:	f882 833d 	strb.w	r8, [r2, #829]	; 0x33d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001560:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001564:	6054      	str	r4, [r2, #4]

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
 8001566:	6941      	ldr	r1, [r0, #20]
  adcp->config   = NULL;
 8001568:	f8cb 3004 	str.w	r3, [fp, #4]
 800156c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001570:	6141      	str	r1, [r0, #20]
  rccResetADC12();
 8001572:	6a81      	ldr	r1, [r0, #40]	; 0x28
  adcp->samples  = NULL;
 8001574:	f8cb 3008 	str.w	r3, [fp, #8]
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8001578:	f44f 3880 	mov.w	r8, #65536	; 0x10000
  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
  rccResetADC12();
 800157c:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8001580:	6281      	str	r1, [r0, #40]	; 0x28
 8001582:	6283      	str	r3, [r0, #40]	; 0x28
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8001584:	f8cc 8008 	str.w	r8, [ip, #8]
  rccDisableADC12();
 8001588:	6941      	ldr	r1, [r0, #20]
  adcp->depth    = 0;
 800158a:	f8cb 300c 	str.w	r3, [fp, #12]
 800158e:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 8001592:	6141      	str	r1, [r0, #20]
  ADC1_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
 8001594:	6941      	ldr	r1, [r0, #20]
  adcp->grpp     = NULL;
 8001596:	f8cb 3010 	str.w	r3, [fp, #16]
 800159a:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800159e:	6141      	str	r1, [r0, #20]
  rccResetADC34();
 80015a0:	6a81      	ldr	r1, [r0, #40]	; 0x28

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
 80015a2:	4c44      	ldr	r4, [pc, #272]	; (80016b4 <main+0x344>)
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 80015a4:	f8cb 3014 	str.w	r3, [fp, #20]
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
  rccResetADC34();
 80015a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80015ac:	f10b 0c18 	add.w	ip, fp, #24
 80015b0:	f8cb 3020 	str.w	r3, [fp, #32]
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
 80015b4:	f8cb e02c 	str.w	lr, [fp, #44]	; 0x2c
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
  ADCD4.dmamode = ADC_DMA_SIZE |
 80015b8:	f8cb 7034 	str.w	r7, [fp, #52]	; 0x34

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
 80015bc:	f8cb 4028 	str.w	r4, [fp, #40]	; 0x28
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
  rccResetADC34();
 80015c0:	6281      	str	r1, [r0, #40]	; 0x28
#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
 80015c2:	493d      	ldr	r1, [pc, #244]	; (80016b8 <main+0x348>)
 80015c4:	f8cb c018 	str.w	ip, [fp, #24]
  tqp->prev = (thread_t *)tqp;
 80015c8:	f8cb c01c 	str.w	ip, [fp, #28]
 80015cc:	f8cb 1030 	str.w	r1, [fp, #48]	; 0x30
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
  rccResetADC34();
 80015d0:	6283      	str	r3, [r0, #40]	; 0x28
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 80015d2:	f8ce 8008 	str.w	r8, [lr, #8]
  rccDisableADC34();
 80015d6:	f8d0 e014 	ldr.w	lr, [r0, #20]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 80015da:	4938      	ldr	r1, [pc, #224]	; (80016bc <main+0x34c>)
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80015dc:	f8df a10c 	ldr.w	sl, [pc, #268]	; 80016ec <main+0x37c>
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80015e0:	720e      	strb	r6, [r1, #8]
 80015e2:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 80015e6:	f8c0 e014 	str.w	lr, [r0, #20]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 80015ea:	4f35      	ldr	r7, [pc, #212]	; (80016c0 <main+0x350>)
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80015ec:	f8c1 a018 	str.w	sl, [r1, #24]
  iqp->q_rdptr   = bp;
 80015f0:	f8c1 a024 	str.w	sl, [r1, #36]	; 0x24
  iqp->q_wrptr   = bp;
 80015f4:	f8c1 a020 	str.w	sl, [r1, #32]
  iqp->q_top     = bp + size;
 80015f8:	f10a 0a10 	add.w	sl, sl, #16
 80015fc:	f8c1 a01c 	str.w	sl, [r1, #28]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001600:	f04f 0a10 	mov.w	sl, #16
  oqp->q_buffer  = bp;
 8001604:	63cf      	str	r7, [r1, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8001606:	648f      	str	r7, [r1, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8001608:	644f      	str	r7, [r1, #68]	; 0x44
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 800160a:	468e      	mov	lr, r1
  oqp->q_top     = bp + size;
 800160c:	4457      	add	r7, sl
 800160e:	4c2d      	ldr	r4, [pc, #180]	; (80016c4 <main+0x354>)
 8001610:	640f      	str	r7, [r1, #64]	; 0x40
 8001612:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80016f0 <main+0x380>
  oqp->q_notify  = onfy;
 8001616:	4f2c      	ldr	r7, [pc, #176]	; (80016c8 <main+0x358>)
 8001618:	f84e cb04 	str.w	ip, [lr], #4
 800161c:	64cf      	str	r7, [r1, #76]	; 0x4c

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  SD1.usart = USART1;
 800161e:	4f2b      	ldr	r7, [pc, #172]	; (80016cc <main+0x35c>)
 8001620:	654f      	str	r7, [r1, #84]	; 0x54
 8001622:	46a1      	mov	r9, r4

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001624:	27c0      	movs	r7, #192	; 0xc0
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001626:	614b      	str	r3, [r1, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001628:	628b      	str	r3, [r1, #40]	; 0x28
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800162a:	f8c1 a038 	str.w	sl, [r1, #56]	; 0x38
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800162e:	62c9      	str	r1, [r1, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001630:	6509      	str	r1, [r1, #80]	; 0x50
 8001632:	f882 7325 	strb.w	r7, [r2, #805]	; 0x325
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8001636:	f8c1 e004 	str.w	lr, [r1, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800163a:	f04f 0e20 	mov.w	lr, #32
 800163e:	f8c2 e184 	str.w	lr, [r2, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001642:	f8c2 e004 	str.w	lr, [r2, #4]
 8001646:	f849 cb04 	str.w	ip, [r9], #4
 800164a:	f8c4 9004 	str.w	r9, [r4, #4]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800164e:	f101 090c 	add.w	r9, r1, #12
 8001652:	f8c1 900c 	str.w	r9, [r1, #12]
  tqp->prev = (thread_t *)tqp;
 8001656:	f8c1 9010 	str.w	r9, [r1, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800165a:	f101 0930 	add.w	r9, r1, #48	; 0x30
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800165e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 80016f4 <main+0x384>
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001662:	f8df c094 	ldr.w	ip, [pc, #148]	; 80016f8 <main+0x388>
 8001666:	f8c1 9030 	str.w	r9, [r1, #48]	; 0x30
 800166a:	f104 050c 	add.w	r5, r4, #12
  tqp->prev = (thread_t *)tqp;
 800166e:	f8c1 9034 	str.w	r9, [r1, #52]	; 0x34
  SD1.clock = STM32_USART1CLK;
 8001672:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80016fc <main+0x38c>
 8001676:	f8c1 9058 	str.w	r9, [r1, #88]	; 0x58
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800167a:	7226      	strb	r6, [r4, #8]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800167c:	2140      	movs	r1, #64	; 0x40
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800167e:	60e5      	str	r5, [r4, #12]
  tqp->prev = (thread_t *)tqp;
 8001680:	6125      	str	r5, [r4, #16]
 8001682:	e03d      	b.n	8001700 <main+0x390>
 8001684:	40021000 	.word	0x40021000
 8001688:	40007000 	.word	0x40007000
 800168c:	20002bd8 	.word	0x20002bd8
 8001690:	20001210 	.word	0x20001210
 8001694:	20004b38 	.word	0x20004b38
 8001698:	e000e100 	.word	0xe000e100
 800169c:	40010000 	.word	0x40010000
 80016a0:	20005c28 	.word	0x20005c28
 80016a4:	20004b70 	.word	0x20004b70
 80016a8:	20004ba8 	.word	0x20004ba8
 80016ac:	08016258 	.word	0x08016258
 80016b0:	50000100 	.word	0x50000100
 80016b4:	50000500 	.word	0x50000500
 80016b8:	0801626c 	.word	0x0801626c
 80016bc:	2000424c 	.word	0x2000424c
 80016c0:	20002adc 	.word	0x20002adc
 80016c4:	20002b04 	.word	0x20002b04
 80016c8:	080040b1 	.word	0x080040b1
 80016cc:	40013800 	.word	0x40013800
 80016d0:	080161cc 	.word	0x080161cc
 80016d4:	40020000 	.word	0x40020000
 80016d8:	40020400 	.word	0x40020400
 80016dc:	20004be0 	.word	0x20004be0
 80016e0:	50000300 	.word	0x50000300
 80016e4:	50000400 	.word	0x50000400
 80016e8:	50000700 	.word	0x50000700
 80016ec:	20002a34 	.word	0x20002a34
 80016f0:	08016138 	.word	0x08016138
 80016f4:	20002db8 	.word	0x20002db8
 80016f8:	20002aec 	.word	0x20002aec
 80016fc:	0112a880 	.word	0x0112a880
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8001700:	4dc8      	ldr	r5, [pc, #800]	; (8001a24 <main+0x6b4>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001702:	f8df e368 	ldr.w	lr, [pc, #872]	; 8001a6c <main+0x6fc>
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 8001706:	6163      	str	r3, [r4, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001708:	62a3      	str	r3, [r4, #40]	; 0x28
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 800170a:	f8c4 a038 	str.w	sl, [r4, #56]	; 0x38
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
  iqp->q_link    = link;
 800170e:	62e4      	str	r4, [r4, #44]	; 0x2c

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001710:	f882 7326 	strb.w	r7, [r2, #806]	; 0x326
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001714:	f8c2 1184 	str.w	r1, [r2, #388]	; 0x184
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001718:	6524      	str	r4, [r4, #80]	; 0x50
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800171a:	6051      	str	r1, [r2, #4]
#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
  SD2.clock = STM32_USART2CLK;
 800171c:	f8c4 9058 	str.w	r9, [r4, #88]	; 0x58
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001720:	f8c4 8018 	str.w	r8, [r4, #24]
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001724:	eb08 090a 	add.w	r9, r8, sl
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
 8001728:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800172c:	f8c4 8020 	str.w	r8, [r4, #32]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001730:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001734:	eb0c 080a 	add.w	r8, ip, sl
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
 8001738:	f8c4 c048 	str.w	ip, [r4, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800173c:	f8c4 c044 	str.w	ip, [r4, #68]	; 0x44

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
 8001740:	f8df c32c 	ldr.w	ip, [pc, #812]	; 8001a70 <main+0x700>
  oqp->q_top     = bp + size;
 8001744:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
 8001748:	f1a5 0878 	sub.w	r8, r5, #120	; 0x78
 800174c:	4fb6      	ldr	r7, [pc, #728]	; (8001a28 <main+0x6b8>)
 800174e:	f8ce 8020 	str.w	r8, [lr, #32]
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001752:	f8c4 901c 	str.w	r9, [r4, #28]
 8001756:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 800175a:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8001a74 <main+0x704>
 800175e:	f8c4 904c 	str.w	r9, [r4, #76]	; 0x4c
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8001762:	f50c 4c6c 	add.w	ip, ip, #60416	; 0xec00
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001766:	f108 0814 	add.w	r8, r8, #20
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800176a:	f241 090a 	movw	r9, #4106	; 0x100a
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800176e:	f104 0530 	add.w	r5, r4, #48	; 0x30
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8001772:	f8ce c01c 	str.w	ip, [lr, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001776:	f8ce 8024 	str.w	r8, [lr, #36]	; 0x24
 800177a:	f10e 0c0c 	add.w	ip, lr, #12
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800177e:	f241 0818 	movw	r8, #4120	; 0x1018
 8001782:	f88e 6000 	strb.w	r6, [lr]
  spip->config = NULL;
 8001786:	f8ce 3004 	str.w	r3, [lr, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800178a:	f8ce 3008 	str.w	r3, [lr, #8]
 800178e:	f8ce 3014 	str.w	r3, [lr, #20]
 8001792:	f8ce c00c 	str.w	ip, [lr, #12]
  tqp->prev = (thread_t *)tqp;
 8001796:	f8ce c010 	str.w	ip, [lr, #16]
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800179a:	f8ce 9028 	str.w	r9, [lr, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800179e:	f8ce 802c 	str.w	r8, [lr, #44]	; 0x2c
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80017a2:	703e      	strb	r6, [r7, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80017a4:	6325      	str	r5, [r4, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 80017a6:	6365      	str	r5, [r4, #52]	; 0x34
  spip->config = NULL;
 80017a8:	607b      	str	r3, [r7, #4]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 80017aa:	f8d0 e01c 	ldr.w	lr, [r0, #28]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80017ae:	499f      	ldr	r1, [pc, #636]	; (8001a2c <main+0x6bc>)
 * @notapi
 */
void wdg_lld_init(void) {

#if STM32_WDG_USE_IWDG
  WDGD1.state = WDG_STOP;
 80017b0:	4d9f      	ldr	r5, [pc, #636]	; (8001a30 <main+0x6c0>)
 80017b2:	700e      	strb	r6, [r1, #0]
 80017b4:	ea4e 0e06 	orr.w	lr, lr, r6
 80017b8:	702e      	strb	r6, [r5, #0]
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80017ba:	60bb      	str	r3, [r7, #8]
 80017bc:	f8c0 e01c 	str.w	lr, [r0, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80017c0:	f8df e2b4 	ldr.w	lr, [pc, #692]	; 8001a78 <main+0x708>
#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 80017c4:	f8c7 9028 	str.w	r9, [r7, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80017c8:	f8c7 802c 	str.w	r8, [r7, #44]	; 0x2c
#endif

#if STM32_SPI_USE_SPI3
  spiObjectInit(&SPID3);
  SPID3.spi       = SPI3;
  SPID3.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI3_RX_DMA_STREAM);
 80017cc:	4d95      	ldr	r5, [pc, #596]	; (8001a24 <main+0x6b4>)
  SPID3.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI3_TX_DMA_STREAM);
 80017ce:	4899      	ldr	r0, [pc, #612]	; (8001a34 <main+0x6c4>)
 80017d0:	6248      	str	r0, [r1, #36]	; 0x24
 80017d2:	f8de 0008 	ldr.w	r0, [lr, #8]
  SPID3.rxdmamode = STM32_DMA_CR_CHSEL(SPI3_RX_DMA_CHANNEL) |
 80017d6:	f8c1 9028 	str.w	r9, [r1, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI3_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID3.txdmamode = STM32_DMA_CR_CHSEL(SPI3_TX_DMA_CHANNEL) |
 80017da:	f8c1 802c 	str.w	r8, [r1, #44]	; 0x2c
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI3
  spiObjectInit(&SPID3);
  SPID3.spi       = SPI3;
 80017de:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8001a7c <main+0x70c>
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80017e2:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8001a80 <main+0x710>
#endif

#if STM32_SPI_USE_SPI3
  spiObjectInit(&SPID3);
  SPID3.spi       = SPI3;
  SPID3.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI3_RX_DMA_STREAM);
 80017e6:	620d      	str	r5, [r1, #32]
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80017e8:	f8c7 801c 	str.w	r8, [r7, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 80017ec:	f1a5 0c3c 	sub.w	ip, r5, #60	; 0x3c
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 80017f0:	f1a5 0850 	sub.w	r8, r5, #80	; 0x50
  WDGD1.wdg   = IWDG;
 80017f4:	4d8e      	ldr	r5, [pc, #568]	; (8001a30 <main+0x6c0>)
 80017f6:	f8c7 8020 	str.w	r8, [r7, #32]
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI3
  spiObjectInit(&SPID3);
  SPID3.spi       = SPI3;
 80017fa:	f8c1 901c 	str.w	r9, [r1, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80017fe:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
 8001802:	f5a9 6940 	sub.w	r9, r9, #3072	; 0xc00
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001806:	f8df a230 	ldr.w	sl, [pc, #560]	; 8001a38 <main+0x6c8>
 800180a:	f8c5 9008 	str.w	r9, [r5, #8]

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 800180e:	4330      	orrs	r0, r6

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001810:	f640 690f 	movw	r9, #3599	; 0xe0f
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001814:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001818:	617b      	str	r3, [r7, #20]
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
  spip->config = NULL;
 800181a:	604b      	str	r3, [r1, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800181c:	608b      	str	r3, [r1, #8]
 800181e:	614b      	str	r3, [r1, #20]

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8001820:	f8c7 c024 	str.w	ip, [r7, #36]	; 0x24

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001824:	f8ce 0008 	str.w	r0, [lr, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8001828:	f8c8 9028 	str.w	r9, [r8, #40]	; 0x28
 800182c:	f107 000c 	add.w	r0, r7, #12
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8001830:	f8c8 502c 	str.w	r5, [r8, #44]	; 0x2c
 8001834:	f101 0e0c 	add.w	lr, r1, #12

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001838:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 800183c:	60f8      	str	r0, [r7, #12]
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 800183e:	f64f 79f0 	movw	r9, #65520	; 0xfff0
  STM32_ST_TIM->CCMR1  = 0;
 8001842:	f8c8 3018 	str.w	r3, [r8, #24]
  tqp->prev = (thread_t *)tqp;
 8001846:	6138      	str	r0, [r7, #16]
  STM32_ST_TIM->CCR[0] = 0;
 8001848:	f8c8 3034 	str.w	r3, [r8, #52]	; 0x34
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800184c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001850:	f8c1 e00c 	str.w	lr, [r1, #12]
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001854:	f10a 0740 	add.w	r7, sl, #64	; 0x40
  STM32_ST_TIM->DIER   = 0;
 8001858:	f8c8 300c 	str.w	r3, [r8, #12]
  tqp->prev = (thread_t *)tqp;
 800185c:	f8c1 e010 	str.w	lr, [r1, #16]
  STM32_ST_TIM->CR2    = 0;
 8001860:	f8c8 3004 	str.w	r3, [r8, #4]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001864:	f10a 011c 	add.w	r1, sl, #28
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001868:	f8c8 6014 	str.w	r6, [r8, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 800186c:	f8c8 6000 	str.w	r6, [r8]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001870:	f882 531c 	strb.w	r5, [r2, #796]	; 0x31c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001874:	461e      	mov	r6, r3
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 8001876:	f8ca 3008 	str.w	r3, [sl, #8]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 800187a:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 800187e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8001882:	f04f 0380 	mov.w	r3, #128	; 0x80
 8001886:	f8ca 5024 	str.w	r5, [sl, #36]	; 0x24
 800188a:	f8ca a004 	str.w	sl, [sl, #4]
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800188e:	f8ca a010 	str.w	sl, [sl, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001892:	f8ca a014 	str.w	sl, [sl, #20]
 8001896:	f8aa 303a 	strh.w	r3, [sl, #58]	; 0x3a
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 800189a:	f8aa 9038 	strh.w	r9, [sl, #56]	; 0x38
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 800189e:	f8ca 703c 	str.w	r7, [sl, #60]	; 0x3c
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80018a2:	f8c2 0180 	str.w	r0, [r2, #384]	; 0x180
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80018a6:	f8ca 101c 	str.w	r1, [sl, #28]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80018aa:	6010      	str	r0, [r2, #0]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80018ac:	f8ca 1020 	str.w	r1, [sl, #32]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80018b0:	f8ca a000 	str.w	sl, [sl]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80018b4:	3601      	adds	r6, #1
 80018b6:	eb0a 1306 	add.w	r3, sl, r6, lsl #4
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80018ba:	2e80      	cmp	r6, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80018bc:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80018c0:	4f5d      	ldr	r7, [pc, #372]	; (8001a38 <main+0x6c8>)
 80018c2:	f36f 0202 	bfc	r2, #0, #3
 80018c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80018ca:	d1f3      	bne.n	80018b4 <main+0x544>
  _scheduler_init();
  _vt_init();
  _trace_init();

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 80018cc:	2100      	movs	r1, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80018ce:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80018d2:	2200      	movs	r2, #0
 80018d4:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80018d6:	a804      	add	r0, sp, #16

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 80018d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80018dc:	6339      	str	r1, [r7, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 80018de:	6379      	str	r1, [r7, #52]	; 0x34
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 80018e0:	f8c7 1884 	str.w	r1, [r7, #2180]	; 0x884
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 80018e4:	9105      	str	r1, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 80018e6:	9106      	str	r1, [sp, #24]
  tmp->n          = (ucnt_t)0;
 80018e8:	9107      	str	r1, [sp, #28]
 80018ea:	9102      	str	r1, [sp, #8]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 80018ec:	f8cd e010 	str.w	lr, [sp, #16]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 80018f0:	f004 f8de 	bl	8005ab0 <chTMStartMeasurementX.constprop.12>
  chTMStopMeasurementX(&tm);
 80018f4:	a804      	add	r0, sp, #16
 80018f6:	f001 fdfb 	bl	80034f0 <chTMStopMeasurementX>
 80018fa:	4b50      	ldr	r3, [pc, #320]	; (8001a3c <main+0x6cc>)
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <main+0x6d0>)
 80018fe:	f8df 8184 	ldr.w	r8, [pc, #388]	; 8001a84 <main+0x714>
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001902:	9902      	ldr	r1, [sp, #8]
 8001904:	f8c2 8000 	str.w	r8, [r2]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001908:	f8c7 6848 	str.w	r6, [r7, #2120]	; 0x848
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 800190c:	f103 0810 	add.w	r8, r3, #16
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001910:	f8c7 687c 	str.w	r6, [r7, #2172]	; 0x87c
 8001914:	f102 060c 	add.w	r6, r2, #12
  H_NEXT(&default_heap.header) = NULL;
 8001918:	6051      	str	r1, [r2, #4]
  H_PAGES(&default_heap.header) = 0;
 800191a:	6091      	str	r1, [r2, #8]
 800191c:	6151      	str	r1, [r2, #20]
 800191e:	60d6      	str	r6, [r2, #12]
  tqp->prev = (thread_t *)tqp;
 8001920:	6116      	str	r6, [r2, #16]
 8001922:	6099      	str	r1, [r3, #8]
 8001924:	f103 0224 	add.w	r2, r3, #36	; 0x24
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8001928:	6159      	str	r1, [r3, #20]
 800192a:	62d9      	str	r1, [r3, #44]	; 0x2c
 800192c:	f8c3 8010 	str.w	r8, [r3, #16]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001930:	f887 1861 	strb.w	r1, [r7, #2145]	; 0x861
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8001934:	f8c7 1878 	str.w	r1, [r7, #2168]	; 0x878
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8001938:	f8c7 1874 	str.w	r1, [r7, #2164]	; 0x874
  mp->object_size = size;
 800193c:	2614      	movs	r6, #20
 800193e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001942:	f04f 081c 	mov.w	r8, #28
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001946:	483f      	ldr	r0, [pc, #252]	; (8001a44 <main+0x6d4>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001948:	f8df e13c 	ldr.w	lr, [pc, #316]	; 8001a88 <main+0x718>
 800194c:	619e      	str	r6, [r3, #24]
 800194e:	625a      	str	r2, [r3, #36]	; 0x24
 8001950:	f103 063c 	add.w	r6, r3, #60	; 0x3c
 8001954:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001958:	6299      	str	r1, [r3, #40]	; 0x28
 800195a:	f8c3 8030 	str.w	r8, [r3, #48]	; 0x30
  mp->align = align;
 800195e:	2104      	movs	r1, #4
  mp->provider = provider;
 8001960:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8001a8c <main+0x71c>
 8001964:	63de      	str	r6, [r3, #60]	; 0x3c
 8001966:	641a      	str	r2, [r3, #64]	; 0x40

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
  mp->align = align;
 8001968:	61d9      	str	r1, [r3, #28]
 800196a:	6359      	str	r1, [r3, #52]	; 0x34
  mp->provider = provider;
 800196c:	f8c3 8020 	str.w	r8, [r3, #32]
  ch.tm.offset = tm.last;
 8001970:	9906      	ldr	r1, [sp, #24]
 8001972:	f8c3 8038 	str.w	r8, [r3, #56]	; 0x38
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001976:	601b      	str	r3, [r3, #0]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001978:	f04f 0801 	mov.w	r8, #1
  tqp->prev = (thread_t *)tqp;
 800197c:	605b      	str	r3, [r3, #4]
 800197e:	4e32      	ldr	r6, [pc, #200]	; (8001a48 <main+0x6d8>)
  ch_memcore.endmem  = __heap_end__;
 8001980:	4a32      	ldr	r2, [pc, #200]	; (8001a4c <main+0x6dc>)
  tp->name      = name;
 8001982:	4b33      	ldr	r3, [pc, #204]	; (8001a50 <main+0x6e0>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001984:	f8ce 6000 	str.w	r6, [lr]
  ch_memcore.endmem  = __heap_end__;
 8001988:	f8ce 2004 	str.w	r2, [lr, #4]
 800198c:	f8c7 1884 	str.w	r1, [r7, #2180]	; 0x884
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001990:	f887 8862 	strb.w	r8, [r7, #2146]	; 0x862
  tp->name      = name;
 8001994:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
 8001998:	68c1      	ldr	r1, [r0, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 800199a:	4b2e      	ldr	r3, [pc, #184]	; (8001a54 <main+0x6e4>)
  REG_INSERT(tp);
 800199c:	697e      	ldr	r6, [r7, #20]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800199e:	f8df e0f0 	ldr.w	lr, [pc, #240]	; 8001a90 <main+0x720>
 80019a2:	f8c7 6854 	str.w	r6, [r7, #2132]	; 0x854
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019a6:	f64f 02ff 	movw	r2, #63743	; 0xf8ff
 80019aa:	400a      	ands	r2, r1
  reg_value  =  (reg_value                                   |
 80019ac:	4313      	orrs	r3, r2
 80019ae:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 80019b2:	f8c7 7850 	str.w	r7, [r7, #2128]	; 0x850
 80019b6:	6131      	str	r1, [r6, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 80019b8:	60c3      	str	r3, [r0, #12]
 80019ba:	f8de 300c 	ldr.w	r3, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019be:	4e26      	ldr	r6, [pc, #152]	; (8001a58 <main+0x6e8>)
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 80019c0:	f887 8860 	strb.w	r8, [r7, #2144]	; 0x860

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c8:	f8ce 300c 	str.w	r3, [lr, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019cc:	6832      	ldr	r2, [r6, #0]
 80019ce:	6179      	str	r1, [r7, #20]
 80019d0:	ea42 0208 	orr.w	r2, r2, r8
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 80019d4:	61b9      	str	r1, [r7, #24]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019d6:	f04f 0810 	mov.w	r8, #16
 80019da:	6032      	str	r2, [r6, #0]
 80019dc:	2120      	movs	r1, #32
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 80019de:	f607 0668 	addw	r6, r7, #2152	; 0x868
 80019e2:	f880 801f 	strb.w	r8, [r0, #31]
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <main+0x6ec>)
 80019e8:	f8c7 6868 	str.w	r6, [r7, #2152]	; 0x868
 80019ec:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
 80019f0:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80019f6:	f607 026c 	addw	r2, r7, #2156	; 0x86c
 80019fa:	f8c7 286c 	str.w	r2, [r7, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 80019fe:	f8c7 2870 	str.w	r2, [r7, #2160]	; 0x870
 8001a02:	b90b      	cbnz	r3, 8001a08 <main+0x698>
 8001a04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a06:	b113      	cbz	r3, 8001a0e <main+0x69e>
    chSysHalt("SV#3");
 8001a08:	4815      	ldr	r0, [pc, #84]	; (8001a60 <main+0x6f0>)
 8001a0a:	f001 fdf9 	bl	8003600 <chSysHalt>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001a0e:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001a12:	b662      	cpsie	i
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8001a14:	4813      	ldr	r0, [pc, #76]	; (8001a64 <main+0x6f4>)
 8001a16:	f002 f8b3 	bl	8003b80 <chRegFindThreadByWorkingArea>
 8001a1a:	b3d8      	cbz	r0, 8001a94 <main+0x724>
 8001a1c:	4812      	ldr	r0, [pc, #72]	; (8001a68 <main+0x6f8>)
 8001a1e:	f001 fdef 	bl	8003600 <chSysHalt>
 8001a22:	bf00      	nop
 8001a24:	08016258 	.word	0x08016258
 8001a28:	20002a44 	.word	0x20002a44
 8001a2c:	20002df8 	.word	0x20002df8
 8001a30:	20005c1c 	.word	0x20005c1c
 8001a34:	0801626c 	.word	0x0801626c
 8001a38:	200042b0 	.word	0x200042b0
 8001a3c:	20002b90 	.word	0x20002b90
 8001a40:	20002d8c 	.word	0x20002d8c
 8001a44:	e000ed00 	.word	0xe000ed00
 8001a48:	20005c60 	.word	0x20005c60
 8001a4c:	2000a000 	.word	0x2000a000
 8001a50:	08016120 	.word	0x08016120
 8001a54:	05fa0300 	.word	0x05fa0300
 8001a58:	e0001000 	.word	0xe0001000
 8001a5c:	20000400 	.word	0x20000400
 8001a60:	080162dc 	.word	0x080162dc
 8001a64:	200010b0 	.word	0x200010b0
 8001a68:	080162bc 	.word	0x080162bc
 8001a6c:	20002dc8 	.word	0x20002dc8
 8001a70:	40004400 	.word	0x40004400
 8001a74:	080040a1 	.word	0x080040a1
 8001a78:	e0042000 	.word	0xe0042000
 8001a7c:	40003c00 	.word	0x40003c00
 8001a80:	40003800 	.word	0x40003800
 8001a84:	08005951 	.word	0x08005951
 8001a88:	20001270 	.word	0x20001270
 8001a8c:	08004fc1 	.word	0x08004fc1
 8001a90:	e000edf0 	.word	0xe000edf0
 8001a94:	492d      	ldr	r1, [pc, #180]	; (8001b4c <main+0x7dc>)
 8001a96:	4603      	mov	r3, r0
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8001a98:	2255      	movs	r2, #85	; 0x55
 8001a9a:	54ca      	strb	r2, [r1, r3]
 8001a9c:	3301      	adds	r3, #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8001a9e:	f5b3 7fb0 	cmp.w	r3, #352	; 0x160
    *startp++ = v;
 8001aa2:	4e2a      	ldr	r6, [pc, #168]	; (8001b4c <main+0x7dc>)
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8001aa4:	d1f9      	bne.n	8001a9a <main+0x72a>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001aa6:	2720      	movs	r7, #32
 8001aa8:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001aac:	f002 f858 	bl	8003b60 <_dbg_check_lock>
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  thread_t *tp;

  chDbgCheckClassI();
 8001ab0:	f001 fdfe 	bl	80036b0 <chDbgCheckClassI>
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001ab4:	f106 03b4 	add.w	r3, r6, #180	; 0xb4
 8001ab8:	4825      	ldr	r0, [pc, #148]	; (8001b50 <main+0x7e0>)
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001aba:	f8da 1014 	ldr.w	r1, [sl, #20]
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001abe:	f8c6 3124 	str.w	r3, [r6, #292]	; 0x124
 8001ac2:	f8c6 00f4 	str.w	r0, [r6, #244]	; 0xf4
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <main+0x7e4>)
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001ac8:	4823      	ldr	r0, [pc, #140]	; (8001b58 <main+0x7e8>)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001aca:	f8c6 2114 	str.w	r2, [r6, #276]	; 0x114
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001ace:	2302      	movs	r3, #2
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001ad0:	f506 728c 	add.w	r2, r6, #280	; 0x118
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001ad4:	f886 3138 	strb.w	r3, [r6, #312]	; 0x138
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001ad8:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001adc:	2300      	movs	r3, #0
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001ade:	2001      	movs	r0, #1
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001ae0:	f8c6 112c 	str.w	r1, [r6, #300]	; 0x12c
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001ae4:	f8c6 30f8 	str.w	r3, [r6, #248]	; 0xf8
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001ae8:	f886 3139 	strb.w	r3, [r6, #313]	; 0x139
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8001aec:	f8c6 3150 	str.w	r3, [r6, #336]	; 0x150
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8001af0:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001af4:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001af8:	f506 73a2 	add.w	r3, r6, #324	; 0x144
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001afc:	f8c6 0154 	str.w	r0, [r6, #340]	; 0x154
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001b00:	f886 013a 	strb.w	r0, [r6, #314]	; 0x13a
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8001b04:	f8c6 6134 	str.w	r6, [r6, #308]	; 0x134
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001b08:	f8c6 a128 	str.w	sl, [r6, #296]	; 0x128
 8001b0c:	610a      	str	r2, [r1, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001b0e:	f506 71a0 	add.w	r1, r6, #320	; 0x140
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001b12:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
  tqp->prev = (thread_t *)tqp;
 8001b16:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8001b1a:	4610      	mov	r0, r2
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001b1c:	f8c6 1140 	str.w	r1, [r6, #320]	; 0x140
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001b20:	f8ca 2014 	str.w	r2, [sl, #20]
                  CH_DBG_STACK_FILL_VALUE);
#endif

  chSysLock();
  tp = chThdCreateSuspendedI(tdp);
  chSchWakeupS(tp, MSG_OK);
 8001b24:	f003 ff84 	bl	8005a30 <chSchWakeupS.constprop.17>
  chSysUnlock();
 8001b28:	f002 f802 	bl	8003b30 <chSysUnlock.lto_priv.47>
  halInit();
  chSysInit();
 

  
  palSetPad(GPIOB, 5);
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <main+0x7ec>)
 8001b2e:	831f      	strh	r7, [r3, #24]
 8001b30:	f387 8811 	msr	BASEPRI, r7
 8001b34:	f002 f814 	bl	8003b60 <_dbg_check_lock>
void wdgStart(WDGDriver *wdgp, const WDGConfig *config) {

  osalDbgCheck((wdgp != NULL) && (config != NULL));

  osalSysLock();
  osalDbgAssert((wdgp->state == WDG_STOP) || (wdgp->state == WDG_READY),
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <main+0x7f0>)
 8001b3a:	4a09      	ldr	r2, [pc, #36]	; (8001b60 <main+0x7f0>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	3b01      	subs	r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d911      	bls.n	8001b68 <main+0x7f8>
 8001b44:	4807      	ldr	r0, [pc, #28]	; (8001b64 <main+0x7f4>)
 8001b46:	f001 fd5b 	bl	8003600 <chSysHalt>
 8001b4a:	bf00      	nop
 8001b4c:	200010b0 	.word	0x200010b0
 8001b50:	080034e1 	.word	0x080034e1
 8001b54:	080002e1 	.word	0x080002e1
 8001b58:	080162e4 	.word	0x080162e4
 8001b5c:	48000400 	.word	0x48000400
 8001b60:	20005c1c 	.word	0x20005c1c
 8001b64:	080162d0 	.word	0x080162d0
 */
void wdg_lld_start(WDGDriver *wdgp) {

#if STM32_IWDG_IS_WINDOWED
  /* Enable IWDG and unlock for write.*/
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 8001b68:	6893      	ldr	r3, [r2, #8]
                "invalid state");
  wdgp->config = config;
 8001b6a:	49c2      	ldr	r1, [pc, #776]	; (8001e74 <main+0xb04>)
 8001b6c:	6051      	str	r1, [r2, #4]
 8001b6e:	f64c 46cc 	movw	r6, #52428	; 0xcccc
  wdgp->wdg->KR   = KR_KEY_WRITE;
 8001b72:	f245 5055 	movw	r0, #21845	; 0x5555

  /* Write configuration.*/
  wdgp->wdg->PR   = wdgp->config->pr;
 8001b76:	2104      	movs	r1, #4
  wdgp->wdg->RLR  = wdgp->config->rlr;
 8001b78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 */
void wdg_lld_start(WDGDriver *wdgp) {

#if STM32_IWDG_IS_WINDOWED
  /* Enable IWDG and unlock for write.*/
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 8001b7c:	601e      	str	r6, [r3, #0]
  wdgp->wdg->KR   = KR_KEY_WRITE;
 8001b7e:	6018      	str	r0, [r3, #0]

  /* Write configuration.*/
  wdgp->wdg->PR   = wdgp->config->pr;
 8001b80:	6059      	str	r1, [r3, #4]
  wdgp->wdg->RLR  = wdgp->config->rlr;
 8001b82:	609a      	str	r2, [r3, #8]
  while (wdgp->wdg->SR != 0)
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d1fc      	bne.n	8001b84 <main+0x814>
    ;

  /* This also triggers a refresh.*/
  wdgp->wdg->WINR = wdgp->config->winr;
 8001b8a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b8e:	611a      	str	r2, [r3, #16]
  wdg_lld_start(wdgp);
  wdgp->state = WDG_READY;
 8001b90:	4ab9      	ldr	r2, [pc, #740]	; (8001e78 <main+0xb08>)
 8001b92:	2302      	movs	r3, #2
 8001b94:	7013      	strb	r3, [r2, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001b96:	f001 ffbb 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001b9a:	f8da 3000 	ldr.w	r3, [sl]
 8001b9e:	4ab7      	ldr	r2, [pc, #732]	; (8001e7c <main+0xb0c>)
 8001ba0:	4553      	cmp	r3, sl
 8001ba2:	d005      	beq.n	8001bb0 <main+0x840>
 8001ba4:	6992      	ldr	r2, [r2, #24]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	6892      	ldr	r2, [r2, #8]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	f0c0 8132 	bcc.w	8001e14 <main+0xaa4>
 8001bb0:	2700      	movs	r7, #0
 8001bb2:	f387 8811 	msr	BASEPRI, r7
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8001bb6:	4eb2      	ldr	r6, [pc, #712]	; (8001e80 <main+0xb10>)
  
  // Temp SPI

  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL); // tx/rx

  palSetPadMode(GPIOC, 0, PAL_MODE_OUTPUT_PUSHPULL); // rtd 0
 8001bb8:	4db2      	ldr	r5, [pc, #712]	; (8001e84 <main+0xb14>)
 

  
  palSetPad(GPIOB, 5);
  wdgStart(&WDGD1, &wdgcfg);
  wdgReset(&WDGD1);
 8001bba:	f004 fc19 	bl	80063f0 <wdgReset.constprop.19>
 8001bbe:	4ab2      	ldr	r2, [pc, #712]	; (8001e88 <main+0xb18>)
 8001bc0:	49b2      	ldr	r1, [pc, #712]	; (8001e8c <main+0xb1c>)
 8001bc2:	4bb3      	ldr	r3, [pc, #716]	; (8001e90 <main+0xb20>)
 8001bc4:	6016      	str	r6, [r2, #0]
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
 8001bc6:	f106 0e64 	add.w	lr, r6, #100	; 0x64
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
  mbp->rdptr  = buf;
 8001bca:	60d6      	str	r6, [r2, #12]
  mbp->wrptr  = buf;
 8001bcc:	6096      	str	r6, [r2, #8]
  mbp->top    = &buf[n];
 8001bce:	f8c2 e004 	str.w	lr, [r2, #4]
 8001bd2:	f101 0664 	add.w	r6, r1, #100	; 0x64
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001bd6:	f102 0e18 	add.w	lr, r2, #24
 */
void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {

  chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));

  mbp->buffer = buf;
 8001bda:	6019      	str	r1, [r3, #0]
  mbp->rdptr  = buf;
 8001bdc:	60d9      	str	r1, [r3, #12]
  mbp->wrptr  = buf;
 8001bde:	6099      	str	r1, [r3, #8]
  mbp->top    = &buf[n];
 8001be0:	605e      	str	r6, [r3, #4]
 8001be2:	f102 0120 	add.w	r1, r2, #32
 8001be6:	f103 0618 	add.w	r6, r3, #24
 8001bea:	f8c2 e018 	str.w	lr, [r2, #24]
  tqp->prev = (thread_t *)tqp;
 8001bee:	f8c2 e01c 	str.w	lr, [r2, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001bf2:	f103 0e20 	add.w	lr, r3, #32
 8001bf6:	6211      	str	r1, [r2, #32]
  tqp->prev = (thread_t *)tqp;
 8001bf8:	6251      	str	r1, [r2, #36]	; 0x24
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001bfa:	619e      	str	r6, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 8001bfc:	61de      	str	r6, [r3, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001bfe:	f8c3 e020 	str.w	lr, [r3, #32]
  tqp->prev = (thread_t *)tqp;
 8001c02:	f8c3 e024 	str.w	lr, [r3, #36]	; 0x24
  chMBObjectInit(&RxMbx,&RxMbxBuff,MAILBOX_SIZE);
  chMBObjectInit(&RxMbx2,&RxMbxBuff2,MAILBOX_SIZE);
  adcStart(&ADCD1, NULL);
 8001c06:	48a3      	ldr	r0, [pc, #652]	; (8001e94 <main+0xb24>)
  mbp->cnt    = (size_t)0;
 8001c08:	6117      	str	r7, [r2, #16]
  mbp->reset  = false;
 8001c0a:	7517      	strb	r7, [r2, #20]

  mbp->buffer = buf;
  mbp->rdptr  = buf;
  mbp->wrptr  = buf;
  mbp->top    = &buf[n];
  mbp->cnt    = (size_t)0;
 8001c0c:	611f      	str	r7, [r3, #16]
  mbp->reset  = false;
 8001c0e:	751f      	strb	r7, [r3, #20]
 8001c10:	f004 fb1e 	bl	8006250 <adcStart.constprop.33>
}


void adcSTM32EnableTSVREFE(void) {

  ADC12_COMMON->CCR |= ADC12_CCR_VREFEN;
 8001c14:	49a0      	ldr	r1, [pc, #640]	; (8001e98 <main+0xb28>)
 *
 * @notapi
 */
void adcSTM32EnableTS(ADCDriver *adcp) {

  adcp->adcc->CCR |= ADC_CCR_TSEN;
 8001c16:	489f      	ldr	r0, [pc, #636]	; (8001e94 <main+0xb24>)
 8001c18:	688b      	ldr	r3, [r1, #8]
  ADC34_COMMON->CCR |= ADC34_CCR_VREFEN;
 8001c1a:	4aa0      	ldr	r2, [pc, #640]	; (8001e9c <main+0xb2c>)
 8001c1c:	f8d0 e02c 	ldr.w	lr, [r0, #44]	; 0x2c
  /*
   * SPI1 I/O pins setup.
   */


  palSetPadMode(GPIOD, 9, PAL_MODE_INPUT_ANALOG);
 8001c20:	489f      	ldr	r0, [pc, #636]	; (8001ea0 <main+0xb30>)

  



  if (*flash2 == 0xffff)
 8001c22:	4ea0      	ldr	r6, [pc, #640]	; (8001ea4 <main+0xb34>)
}


void adcSTM32EnableTSVREFE(void) {

  ADC12_COMMON->CCR |= ADC12_CCR_VREFEN;
 8001c24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c28:	608b      	str	r3, [r1, #8]
  ADC34_COMMON->CCR |= ADC34_CCR_VREFEN;
 8001c2a:	6893      	ldr	r3, [r2, #8]
 8001c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c30:	6093      	str	r3, [r2, #8]
 8001c32:	f8de 3008 	ldr.w	r3, [lr, #8]
 8001c36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001c3a:	f8ce 3008 	str.w	r3, [lr, #8]
  /*
   * SPI1 I/O pins setup.
   */


  palSetPadMode(GPIOD, 9, PAL_MODE_INPUT_ANALOG);
 8001c3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c42:	2203      	movs	r2, #3
 8001c44:	f002 fd1c 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 11, PAL_MODE_INPUT_ANALOG);
 8001c48:	4895      	ldr	r0, [pc, #596]	; (8001ea0 <main+0xb30>)
 8001c4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4e:	2203      	movs	r2, #3
 8001c50:	f002 fd16 	bl	8004680 <_pal_lld_setgroupmode>
  
 
  palSetPadMode(GPIOD, 12, PAL_MODE_INPUT_ANALOG);
 8001c54:	4892      	ldr	r0, [pc, #584]	; (8001ea0 <main+0xb30>)
 8001c56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f002 fd10 	bl	8004680 <_pal_lld_setgroupmode>
  
  palSetPadMode(GPIOD, 13, PAL_MODE_INPUT_ANALOG);
 8001c60:	488f      	ldr	r0, [pc, #572]	; (8001ea0 <main+0xb30>)
 8001c62:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c66:	2203      	movs	r2, #3
 8001c68:	f002 fd0a 	bl	8004680 <_pal_lld_setgroupmode>


  
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7));    
 8001c6c:	488e      	ldr	r0, [pc, #568]	; (8001ea8 <main+0xb38>)
 8001c6e:	2140      	movs	r1, #64	; 0x40
 8001c70:	f240 3282 	movw	r2, #898	; 0x382
 8001c74:	f002 fd04 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7));
 8001c78:	488b      	ldr	r0, [pc, #556]	; (8001ea8 <main+0xb38>)
 8001c7a:	2180      	movs	r1, #128	; 0x80
 8001c7c:	f240 3282 	movw	r2, #898	; 0x382
 8001c80:	f002 fcfe 	bl	8004680 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8001c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c88:	2104      	movs	r1, #4
 8001c8a:	f240 3282 	movw	r2, #898	; 0x382
 8001c8e:	f002 fcf7 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8001c92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c96:	2108      	movs	r1, #8
 8001c98:	f240 3282 	movw	r2, #898	; 0x382
 8001c9c:	f002 fcf0 	bl	8004680 <_pal_lld_setgroupmode>


  palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	460a      	mov	r2, r1
 8001ca4:	4881      	ldr	r0, [pc, #516]	; (8001eac <main+0xb3c>)
 8001ca6:	f002 fceb 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);    
 8001caa:	4880      	ldr	r0, [pc, #512]	; (8001eac <main+0xb3c>)
 8001cac:	2102      	movs	r1, #2
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f002 fce6 	bl	8004680 <_pal_lld_setgroupmode>


  
  // Temp SPI

  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL); // tx/rx
 8001cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cb8:	2102      	movs	r1, #2
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f002 fce0 	bl	8004680 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOC, 0, PAL_MODE_OUTPUT_PUSHPULL); // rtd 0
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	4628      	mov	r0, r5
 8001cc6:	f002 fcdb 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 1, PAL_MODE_OUTPUT_PUSHPULL); // rtd 1
 8001cca:	4628      	mov	r0, r5
 8001ccc:	2102      	movs	r1, #2
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f002 fcd6 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 2, PAL_MODE_OUTPUT_PUSHPULL); // rtd 2
 8001cd4:	4628      	mov	r0, r5
 8001cd6:	2104      	movs	r1, #4
 8001cd8:	2201      	movs	r2, #1
 8001cda:	f002 fcd1 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 3, PAL_MODE_OUTPUT_PUSHPULL); // rtd 3 
 8001cde:	4628      	mov	r0, r5
 8001ce0:	2108      	movs	r1, #8
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f002 fccc 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 4, PAL_MODE_OUTPUT_PUSHPULL); // rtd 4
 8001ce8:	4628      	mov	r0, r5
 8001cea:	2110      	movs	r1, #16
 8001cec:	2201      	movs	r2, #1
 8001cee:	f002 fcc7 	bl	8004680 <_pal_lld_setgroupmode>
  //palSetPadMode(GPIOC, 5, PAL_MODE_OUTPUT_PUSHPULL); // common line
  palSetPadMode(GPIOC, 6, PAL_MODE_INPUT_PULLUP); // raingauge
 8001cf2:	4628      	mov	r0, r5
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	2220      	movs	r2, #32
 8001cf8:	f002 fcc2 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
 8001cfc:	4628      	mov	r0, r5
 8001cfe:	2180      	movs	r1, #128	; 0x80
 8001d00:	2220      	movs	r2, #32
 8001d02:	f002 fcbd 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPad(GPIOC,0);
 8001d06:	f04f 0801 	mov.w	r8, #1
  palSetPad(GPIOC,1);
  palSetPad(GPIOC,2);
  palSetPad(GPIOC,3);
  palSetPad(GPIOC,4);
 8001d0a:	2310      	movs	r3, #16
  palSetPadMode(GPIOC, 4, PAL_MODE_OUTPUT_PUSHPULL); // rtd 4
  //palSetPadMode(GPIOC, 5, PAL_MODE_OUTPUT_PUSHPULL); // common line
  palSetPadMode(GPIOC, 6, PAL_MODE_INPUT_PULLUP); // raingauge
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
  palSetPad(GPIOC,0);
  palSetPad(GPIOC,1);
 8001d0c:	2002      	movs	r0, #2
  palSetPad(GPIOC,2);
 8001d0e:	2104      	movs	r1, #4
  palSetPad(GPIOC,3);
 8001d10:	2208      	movs	r2, #8
  palSetPadMode(GPIOC, 3, PAL_MODE_OUTPUT_PUSHPULL); // rtd 3 
  palSetPadMode(GPIOC, 4, PAL_MODE_OUTPUT_PUSHPULL); // rtd 4
  //palSetPadMode(GPIOC, 5, PAL_MODE_OUTPUT_PUSHPULL); // common line
  palSetPadMode(GPIOC, 6, PAL_MODE_INPUT_PULLUP); // raingauge
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
  palSetPad(GPIOC,0);
 8001d12:	f8a5 8018 	strh.w	r8, [r5, #24]
  palSetPad(GPIOC,1);
 8001d16:	8328      	strh	r0, [r5, #24]
  palSetPad(GPIOC,2);
 8001d18:	8329      	strh	r1, [r5, #24]
  palSetPad(GPIOC,3);
  palSetPad(GPIOC,4);
  //palSetPad(GPIOC,5);
  
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(6)); // SPI3 
 8001d1a:	4628      	mov	r0, r5
  palSetPadMode(GPIOC, 6, PAL_MODE_INPUT_PULLUP); // raingauge
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
  palSetPad(GPIOC,0);
  palSetPad(GPIOC,1);
  palSetPad(GPIOC,2);
  palSetPad(GPIOC,3);
 8001d1c:	832a      	strh	r2, [r5, #24]
  palSetPad(GPIOC,4);
  //palSetPad(GPIOC,5);
  
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(6)); // SPI3 
 8001d1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
  palSetPad(GPIOC,0);
  palSetPad(GPIOC,1);
  palSetPad(GPIOC,2);
  palSetPad(GPIOC,3);
  palSetPad(GPIOC,4);
 8001d22:	832b      	strh	r3, [r5, #24]
  //palSetPad(GPIOC,5);
  
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(6)); // SPI3 
 8001d24:	f240 3202 	movw	r2, #770	; 0x302
 8001d28:	f002 fcaa 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(6));
 8001d2c:	4628      	mov	r0, r5
 8001d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d32:	f240 3202 	movw	r2, #770	; 0x302
 8001d36:	f002 fca3 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 12, PAL_MODE_ALTERNATE(6));
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d40:	f240 3202 	movw	r2, #770	; 0x302
 8001d44:	f002 fc9c 	bl	8004680 <_pal_lld_setgroupmode>
  
  palSetPadMode(GPIOB, 11, PAL_MODE_OUTPUT_PUSHPULL);                      // spi2
 8001d48:	4642      	mov	r2, r8
 8001d4a:	4857      	ldr	r0, [pc, #348]	; (8001ea8 <main+0xb38>)
 8001d4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d50:	f002 fc96 	bl	8004680 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8001d54:	4854      	ldr	r0, [pc, #336]	; (8001ea8 <main+0xb38>)
 8001d56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d5a:	f240 229a 	movw	r2, #666	; 0x29a
 8001d5e:	f002 fc8f 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8001d62:	4851      	ldr	r0, [pc, #324]	; (8001ea8 <main+0xb38>)
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	f240 229a 	movw	r2, #666	; 0x29a
 8001d6c:	f002 fc88 	bl	8004680 <_pal_lld_setgroupmode>


  
  palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);
 8001d70:	4642      	mov	r2, r8
 8001d72:	484d      	ldr	r0, [pc, #308]	; (8001ea8 <main+0xb38>)
 8001d74:	2120      	movs	r1, #32
 8001d76:	f002 fc83 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_PULLUP);
 8001d7a:	484b      	ldr	r0, [pc, #300]	; (8001ea8 <main+0xb38>)
 8001d7c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d80:	2220      	movs	r2, #32
 8001d82:	f002 fc7d 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_PULLUP);
 8001d86:	2220      	movs	r2, #32
 8001d88:	4847      	ldr	r0, [pc, #284]	; (8001ea8 <main+0xb38>)
 8001d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d8e:	f002 fc77 	bl	8004680 <_pal_lld_setgroupmode>
  sdStart(&SD1,&uartCfg);
 8001d92:	4847      	ldr	r0, [pc, #284]	; (8001eb0 <main+0xb40>)
 8001d94:	4947      	ldr	r1, [pc, #284]	; (8001eb4 <main+0xb44>)
 8001d96:	f001 f91b 	bl	8002fd0 <sdStart>

  



  if (*flash2 == 0xffff)
 8001d9a:	8832      	ldrh	r2, [r6, #0]
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d107      	bne.n	8001db4 <main+0xa44>
      {
	  chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,00\r\n");
 8001da4:	4944      	ldr	r1, [pc, #272]	; (8001eb8 <main+0xb48>)
 8001da6:	4842      	ldr	r0, [pc, #264]	; (8001eb0 <main+0xb40>)
 8001da8:	f003 ff02 	bl	8005bb0 <chprintf.constprop.4>
  	  write_flash(0,flash2);
 8001dac:	4638      	mov	r0, r7
 8001dae:	4631      	mov	r1, r6
 8001db0:	f003 f936 	bl	8005020 <write_flash>
      }
  
  lifetimeRain = *flash2/100.0;
 8001db4:	4b3b      	ldr	r3, [pc, #236]	; (8001ea4 <main+0xb34>)
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
 8001db6:	4f41      	ldr	r7, [pc, #260]	; (8001ebc <main+0xb4c>)
      {
	  chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,00\r\n");
  	  write_flash(0,flash2);
      }
  
  lifetimeRain = *flash2/100.0;
 8001db8:	881d      	ldrh	r5, [r3, #0]
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
      my_address = 60; // if flash hasn't been set up yet we default to
 8001dba:	4e41      	ldr	r6, [pc, #260]	; (8001ec0 <main+0xb50>)
      {
	  chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,00\r\n");
  	  write_flash(0,flash2);
      }
  
  lifetimeRain = *flash2/100.0;
 8001dbc:	4628      	mov	r0, r5
 8001dbe:	f7fe fbf3 	bl	80005a8 <__aeabi_i2d>
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <main+0xb54>)
 8001dc6:	f7fe fd7f 	bl	80008c8 <__aeabi_ddiv>
 8001dca:	f7fe ff15 	bl	8000bf8 <__aeabi_d2f>
 8001dce:	4b3e      	ldr	r3, [pc, #248]	; (8001ec8 <main+0xb58>)
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);
 8001dd0:	493e      	ldr	r1, [pc, #248]	; (8001ecc <main+0xb5c>)
      {
	  chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,00\r\n");
  	  write_flash(0,flash2);
      }
  
  lifetimeRain = *flash2/100.0;
 8001dd2:	6018      	str	r0, [r3, #0]
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);
 8001dd4:	462a      	mov	r2, r5
 8001dd6:	4836      	ldr	r0, [pc, #216]	; (8001eb0 <main+0xb40>)
 8001dd8:	f003 feea 	bl	8005bb0 <chprintf.constprop.4>

  if (*flash1 == 0xffff){
 8001ddc:	883b      	ldrh	r3, [r7, #0]
 8001dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f000 8084 	beq.w	8001ef0 <main+0xb80>
  else{
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
      save_address = my_address;
 8001de8:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <main+0xb60>)
      baud_rate = ((*flash1) & 0xff00) >> 8;
      save_baud_rate = baud_rate;
 8001dea:	493a      	ldr	r1, [pc, #232]	; (8001ed4 <main+0xb64>)
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
      save_address = my_address;
      baud_rate = ((*flash1) & 0xff00) >> 8;
 8001dec:	4d3a      	ldr	r5, [pc, #232]	; (8001ed8 <main+0xb68>)
  }
  else{
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
 8001dee:	b2da      	uxtb	r2, r3
      save_address = my_address;
      baud_rate = ((*flash1) & 0xff00) >> 8;
 8001df0:	0a1b      	lsrs	r3, r3, #8
  }
  else{
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
 8001df2:	7032      	strb	r2, [r6, #0]
      save_address = my_address;
 8001df4:	7002      	strb	r2, [r0, #0]
      baud_rate = ((*flash1) & 0xff00) >> 8;
      save_baud_rate = baud_rate;
 8001df6:	700b      	strb	r3, [r1, #0]
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
      save_address = my_address;
      baud_rate = ((*flash1) & 0xff00) >> 8;
 8001df8:	702b      	strb	r3, [r5, #0]
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001e00:	f001 feae 	bl	8003b60 <_dbg_check_lock>

  osalDbgCheck(sdp != NULL);

  osalSysLock();

  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8001e04:	7a23      	ldrb	r3, [r4, #8]
 8001e06:	4a35      	ldr	r2, [pc, #212]	; (8001edc <main+0xb6c>)
 8001e08:	1e59      	subs	r1, r3, #1
 8001e0a:	2901      	cmp	r1, #1
 8001e0c:	d905      	bls.n	8001e1a <main+0xaaa>
 8001e0e:	4834      	ldr	r0, [pc, #208]	; (8001ee0 <main+0xb70>)
 8001e10:	f001 fbf6 	bl	8003600 <chSysHalt>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e14:	4833      	ldr	r0, [pc, #204]	; (8001ee4 <main+0xb74>)
 8001e16:	f001 fbf3 	bl	8003600 <chSysHalt>
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d109      	bne.n	8001e32 <main+0xac2>
    /* UART is de-initialized then clocks are disabled.*/
    usart_deinit(sdp->usart);
 8001e1e:	6d53      	ldr	r3, [r2, #84]	; 0x54
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2();
 8001e20:	4931      	ldr	r1, [pc, #196]	; (8001ee8 <main+0xb78>)
 *
 * @param[in] u         pointer to an USART I/O block
 */
static void usart_deinit(USART_TypeDef *u) {

  u->CR1 = 0;
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  u->CR2 = 0;
 8001e26:	605a      	str	r2, [r3, #4]
  u->CR3 = 0;
 8001e28:	609a      	str	r2, [r3, #8]
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2();
 8001e2a:	69cb      	ldr	r3, [r1, #28]
 8001e2c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e30:	61cb      	str	r3, [r1, #28]
                "invalid state");

  sd_lld_stop(sdp);
  sdp->state = SD_STOP;
 8001e32:	2301      	movs	r3, #1
 8001e34:	7223      	strb	r3, [r4, #8]
 *
 * @iclass
 */
void oqResetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 8001e36:	f001 fc3b 	bl	80036b0 <chDbgCheckClassI>

  oqp->q_rdptr = oqp->q_buffer;
 8001e3a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = qSizeX(oqp);
 8001e3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001e3e:	4927      	ldr	r1, [pc, #156]	; (8001edc <main+0xb6c>)
 */
void oqResetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
 8001e40:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
  oqp->q_counter = qSizeX(oqp);
 8001e42:	1a9b      	subs	r3, r3, r2
void oqResetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  oqp->q_rdptr = oqp->q_buffer;
  oqp->q_wrptr = oqp->q_buffer;
 8001e44:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = qSizeX(oqp);
 8001e46:	63a3      	str	r3, [r4, #56]	; 0x38
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {

  while (queue_notempty(tqp)) {
 8001e48:	f101 0930 	add.w	r9, r1, #48	; 0x30

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001e4c:	f06f 0801 	mvn.w	r8, #1
 8001e50:	4f22      	ldr	r7, [pc, #136]	; (8001edc <main+0xb6c>)
 8001e52:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001e54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001e58:	4298      	cmp	r0, r3
 8001e5a:	d062      	beq.n	8001f22 <main+0xbb2>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8001e5c:	6803      	ldr	r3, [r0, #0]
 8001e5e:	630b      	str	r3, [r1, #48]	; 0x30

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8001e60:	f890 2020 	ldrb.w	r2, [r0, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001e64:	f8c3 9004 	str.w	r9, [r3, #4]
 8001e68:	2a04      	cmp	r2, #4
 8001e6a:	d053      	beq.n	8001f14 <main+0xba4>
 8001e6c:	481f      	ldr	r0, [pc, #124]	; (8001eec <main+0xb7c>)
 8001e6e:	f001 fbc7 	bl	8003600 <chSysHalt>
 8001e72:	bf00      	nop
 8001e74:	08016160 	.word	0x08016160
 8001e78:	20005c1c 	.word	0x20005c1c
 8001e7c:	200042b0 	.word	0x200042b0
 8001e80:	200029d0 	.word	0x200029d0
 8001e84:	48000800 	.word	0x48000800
 8001e88:	20002b64 	.word	0x20002b64
 8001e8c:	20002a78 	.word	0x20002a78
 8001e90:	20002be0 	.word	0x20002be0
 8001e94:	20004b38 	.word	0x20004b38
 8001e98:	50000300 	.word	0x50000300
 8001e9c:	50000700 	.word	0x50000700
 8001ea0:	48000c00 	.word	0x48000c00
 8001ea4:	0803e800 	.word	0x0803e800
 8001ea8:	48000400 	.word	0x48000400
 8001eac:	48001000 	.word	0x48001000
 8001eb0:	2000424c 	.word	0x2000424c
 8001eb4:	20000820 	.word	0x20000820
 8001eb8:	080162ec 	.word	0x080162ec
 8001ebc:	0803f000 	.word	0x0803f000
 8001ec0:	20002a74 	.word	0x20002a74
 8001ec4:	40590000 	.word	0x40590000
 8001ec8:	200029c8 	.word	0x200029c8
 8001ecc:	08016304 	.word	0x08016304
 8001ed0:	20002b00 	.word	0x20002b00
 8001ed4:	20002e2c 	.word	0x20002e2c
 8001ed8:	20002b01 	.word	0x20002b01
 8001edc:	20002b04 	.word	0x20002b04
 8001ee0:	080161c4 	.word	0x080161c4
 8001ee4:	08019c0c 	.word	0x08019c0c
 8001ee8:	40021000 	.word	0x40021000
 8001eec:	08016ba8 	.word	0x08016ba8
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
      my_address = 60; // if flash hasn't been set up yet we default to
                       // id 60, baud 9600
      baud_rate=0;
 8001ef0:	f04f 0e00 	mov.w	lr, #0
  
  lifetimeRain = *flash2/100.0;
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
      my_address = 60; // if flash hasn't been set up yet we default to
 8001ef4:	233c      	movs	r3, #60	; 0x3c
                       // id 60, baud 9600
      baud_rate=0;
 8001ef6:	4d19      	ldr	r5, [pc, #100]	; (8001f5c <main+0xbec>)
  
  lifetimeRain = *flash2/100.0;
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
      my_address = 60; // if flash hasn't been set up yet we default to
 8001ef8:	7033      	strb	r3, [r6, #0]
                       // id 60, baud 9600
      baud_rate=0;
      chprintf((BaseSequentialStream*)&SD1,"Resetting Flash - I am # %d,%d\r\n",my_address,baud_rate);
 8001efa:	461a      	mov	r2, r3
 8001efc:	4918      	ldr	r1, [pc, #96]	; (8001f60 <main+0xbf0>)
 8001efe:	4819      	ldr	r0, [pc, #100]	; (8001f64 <main+0xbf4>)
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);

  if (*flash1 == 0xffff){
      my_address = 60; // if flash hasn't been set up yet we default to
                       // id 60, baud 9600
      baud_rate=0;
 8001f00:	f885 e000 	strb.w	lr, [r5]
      chprintf((BaseSequentialStream*)&SD1,"Resetting Flash - I am # %d,%d\r\n",my_address,baud_rate);
 8001f04:	4673      	mov	r3, lr
 8001f06:	f003 fe53 	bl	8005bb0 <chprintf.constprop.4>
      write_flash((my_address&0xff),flash1);
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	7830      	ldrb	r0, [r6, #0]
 8001f0e:	f003 f887 	bl	8005020 <write_flash>
 8001f12:	e772      	b.n	8001dfa <main+0xa8a>

  tp->u.rdymsg = msg;
 8001f14:	f8c0 8024 	str.w	r8, [r0, #36]	; 0x24
 8001f18:	9102      	str	r1, [sp, #8]
  (void) chSchReadyI(tp);
 8001f1a:	f001 fd21 	bl	8003960 <chSchReadyI>
 8001f1e:	9902      	ldr	r1, [sp, #8]
 8001f20:	e796      	b.n	8001e50 <main+0xae0>
 *
 * @iclass
 */
void iqResetI(input_queue_t *iqp) {

  osalDbgCheckClassI();
 8001f22:	f001 fbc5 	bl	80036b0 <chDbgCheckClassI>

  iqp->q_rdptr = iqp->q_buffer;
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	627b      	str	r3, [r7, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
  iqp->q_counter = 0;
 8001f2a:	2200      	movs	r2, #0
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8001f2c:	46b8      	mov	r8, r7
void iqResetI(input_queue_t *iqp) {

  osalDbgCheckClassI();

  iqp->q_rdptr = iqp->q_buffer;
  iqp->q_wrptr = iqp->q_buffer;
 8001f2e:	623b      	str	r3, [r7, #32]
  iqp->q_counter = 0;
 8001f30:	617a      	str	r2, [r7, #20]
 8001f32:	f107 090c 	add.w	r9, r7, #12

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 8001f36:	f06f 0701 	mvn.w	r7, #1
 8001f3a:	68e0      	ldr	r0, [r4, #12]
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <main+0xbf8>)
 8001f3e:	4298      	cmp	r0, r3
 8001f40:	d014      	beq.n	8001f6c <main+0xbfc>

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8001f42:	f890 2020 	ldrb.w	r2, [r0, #32]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8001f46:	6803      	ldr	r3, [r0, #0]
 8001f48:	f8c8 300c 	str.w	r3, [r8, #12]
 8001f4c:	2a04      	cmp	r2, #4
  tqp->next->queue.prev = (thread_t *)tqp;
 8001f4e:	f8c3 9004 	str.w	r9, [r3, #4]
 8001f52:	d18b      	bne.n	8001e6c <main+0xafc>

  tp->u.rdymsg = msg;
 8001f54:	6247      	str	r7, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8001f56:	f001 fd03 	bl	8003960 <chSchReadyI>
 8001f5a:	e7ee      	b.n	8001f3a <main+0xbca>
 8001f5c:	20002b01 	.word	0x20002b01
 8001f60:	08016318 	.word	0x08016318
 8001f64:	2000424c 	.word	0x2000424c
 8001f68:	20002b10 	.word	0x20002b10
 *
 * @sclass
 */
static inline void osalOsRescheduleS(void) {

  chSchRescheduleS();
 8001f6c:	f001 fcc8 	bl	8003900 <chSchRescheduleS>
 *
 * @special
 */
static inline void osalSysUnlock(void) {

  chSysUnlock();
 8001f70:	f001 f816 	bl	8002fa0 <chSysUnlock.lto_priv.77>
}


void restart_modbus(){
    sdStop(&SD2);
    if (baud_rate == 1)
 8001f74:	782f      	ldrb	r7, [r5, #0]
	sdStart(&SD2, &uartCfg3);
 8001f76:	48a7      	ldr	r0, [pc, #668]	; (8002214 <main+0xea4>)

void init_spi()
{

  //  palSetPadMode(GPIOB, RST, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOB, DC, PAL_MODE_OUTPUT_PUSHPULL);
 8001f78:	4ca7      	ldr	r4, [pc, #668]	; (8002218 <main+0xea8>)
      



  restart_modbus();
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d,%d\r\n",my_address,baud_rate);
 8001f7a:	f8df 8338 	ldr.w	r8, [pc, #824]	; 80022b4 <main+0xf44>
}


void restart_modbus(){
    sdStop(&SD2);
    if (baud_rate == 1)
 8001f7e:	2f01      	cmp	r7, #1
	sdStart(&SD2, &uartCfg3);
 8001f80:	bf0c      	ite	eq
 8001f82:	49a6      	ldreq	r1, [pc, #664]	; (800221c <main+0xeac>)
    else
	sdStart(&SD2, &uartCfg2);
 8001f84:	49a6      	ldrne	r1, [pc, #664]	; (8002220 <main+0xeb0>)
 8001f86:	f001 f823 	bl	8002fd0 <sdStart>
      



  restart_modbus();
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d,%d\r\n",my_address,baud_rate);
 8001f8a:	7832      	ldrb	r2, [r6, #0]
 8001f8c:	49a5      	ldr	r1, [pc, #660]	; (8002224 <main+0xeb4>)
 8001f8e:	48a6      	ldr	r0, [pc, #664]	; (8002228 <main+0xeb8>)
 8001f90:	463b      	mov	r3, r7
 8001f92:	f003 fe0d 	bl	8005bb0 <chprintf.constprop.4>
  palSetPad(GPIOE, 0);     // Enable TX Light
 8001f96:	4ba5      	ldr	r3, [pc, #660]	; (800222c <main+0xebc>)
 8001f98:	2601      	movs	r6, #1
  palSetPad(GPIOE, 1);     // Enbale RX Light
 8001f9a:	2102      	movs	r1, #2



  restart_modbus();
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d,%d\r\n",my_address,baud_rate);
  palSetPad(GPIOE, 0);     // Enable TX Light
 8001f9c:	831e      	strh	r6, [r3, #24]

void init_spi()
{

  //  palSetPadMode(GPIOB, RST, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOB, DC, PAL_MODE_OUTPUT_PUSHPULL);
 8001f9e:	4632      	mov	r2, r6


  restart_modbus();
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d,%d\r\n",my_address,baud_rate);
  palSetPad(GPIOE, 0);     // Enable TX Light
  palSetPad(GPIOE, 1);     // Enbale RX Light
 8001fa0:	8319      	strh	r1, [r3, #24]

void init_spi()
{

  //  palSetPadMode(GPIOB, RST, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOB, DC, PAL_MODE_OUTPUT_PUSHPULL);
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fa8:	f002 fb6a 	bl	8004680 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, SPISELECT, PAL_MODE_OUTPUT_PUSHPULL);
 8001fac:	4632      	mov	r2, r6
 8001fae:	4620      	mov	r0, r4
 8001fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fb4:	f002 fb64 	bl	8004680 <_pal_lld_setgroupmode>
  palClearPad(GPIOB,SPISELECT);
 8001fb8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fbc:	8363      	strh	r3, [r4, #26]
  palSetPad(GPIOE, 1);     // Enbale RX Light



  init_spi();
  chprintf((BaseSequentialStream*)&SD1,"SPI init\r\n");
 8001fbe:	499c      	ldr	r1, [pc, #624]	; (8002230 <main+0xec0>)
 8001fc0:	4899      	ldr	r0, [pc, #612]	; (8002228 <main+0xeb8>)
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001fc2:	f44f 4680 	mov.w	r6, #16384	; 0x4000
  palSetPad(GPIOE, 1);     // Enbale RX Light



  init_spi();
  chprintf((BaseSequentialStream*)&SD1,"SPI init\r\n");
 8001fc6:	f003 fdf3 	bl	8005bb0 <chprintf.constprop.4>
void init_oled()
{
      uint8_t i, j,x;


      chprintf(&SD1,"do oled command A\r\n");
 8001fca:	499a      	ldr	r1, [pc, #616]	; (8002234 <main+0xec4>)
 8001fcc:	4896      	ldr	r0, [pc, #600]	; (8002228 <main+0xeb8>)
 8001fce:	f003 fdef 	bl	8005bb0 <chprintf.constprop.4>
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
    led_write0(data);
 8001fd2:	20fd      	movs	r0, #253	; 0xfd
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001fd4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001fd6:	f003 f893 	bl	8005100 <led_write0>
 8001fda:	2012      	movs	r0, #18
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001fdc:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001fde:	f003 f88f 	bl	8005100 <led_write0>
 8001fe2:	20ae      	movs	r0, #174	; 0xae
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001fe4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001fe6:	f003 f88b 	bl	8005100 <led_write0>
 8001fea:	2015      	movs	r0, #21
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001fec:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001fee:	f003 f887 	bl	8005100 <led_write0>
 8001ff2:	2000      	movs	r0, #0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001ff4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001ff6:	f003 f883 	bl	8005100 <led_write0>
 8001ffa:	207f      	movs	r0, #127	; 0x7f
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8001ffc:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8001ffe:	f003 f87f 	bl	8005100 <led_write0>
 8002002:	2075      	movs	r0, #117	; 0x75
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002004:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002006:	f003 f87b 	bl	8005100 <led_write0>
 800200a:	2000      	movs	r0, #0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800200c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800200e:	f003 f877 	bl	8005100 <led_write0>
 8002012:	201f      	movs	r0, #31
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002014:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002016:	f003 f873 	bl	8005100 <led_write0>
 800201a:	2081      	movs	r0, #129	; 0x81
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800201c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800201e:	f003 f86f 	bl	8005100 <led_write0>
 8002022:	2027      	movs	r0, #39	; 0x27
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002024:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002026:	f003 f86b 	bl	8005100 <led_write0>
 800202a:	2087      	movs	r0, #135	; 0x87
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800202c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800202e:	f003 f867 	bl	8005100 <led_write0>
 8002032:	20a0      	movs	r0, #160	; 0xa0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002034:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002036:	f003 f863 	bl	8005100 <led_write0>
 800203a:	2006      	movs	r0, #6
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800203c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800203e:	f003 f85f 	bl	8005100 <led_write0>
 8002042:	20a1      	movs	r0, #161	; 0xa1
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002044:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002046:	f003 f85b 	bl	8005100 <led_write0>
 800204a:	2000      	movs	r0, #0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800204c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800204e:	f003 f857 	bl	8005100 <led_write0>
 8002052:	20a2      	movs	r0, #162	; 0xa2
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002054:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002056:	f003 f853 	bl	8005100 <led_write0>
 800205a:	2000      	movs	r0, #0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800205c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800205e:	f003 f84f 	bl	8005100 <led_write0>
 8002062:	20a8      	movs	r0, #168	; 0xa8
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002064:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002066:	f003 f84b 	bl	8005100 <led_write0>
 800206a:	201f      	movs	r0, #31
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800206c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800206e:	f003 f847 	bl	8005100 <led_write0>
 8002072:	20b1      	movs	r0, #177	; 0xb1
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002074:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002076:	f003 f843 	bl	8005100 <led_write0>
 800207a:	2071      	movs	r0, #113	; 0x71
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800207c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800207e:	f003 f83f 	bl	8005100 <led_write0>
 8002082:	20b3      	movs	r0, #179	; 0xb3
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002084:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002086:	f003 f83b 	bl	8005100 <led_write0>
 800208a:	20f0      	movs	r0, #240	; 0xf0
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800208c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800208e:	f003 f837 	bl	8005100 <led_write0>
 8002092:	20b7      	movs	r0, #183	; 0xb7
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 8002094:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 8002096:	f003 f833 	bl	8005100 <led_write0>
 800209a:	20bb      	movs	r0, #187	; 0xbb
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 800209c:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 800209e:	f003 f82f 	bl	8005100 <led_write0>
 80020a2:	2035      	movs	r0, #53	; 0x35
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020a4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020a6:	f003 f82b 	bl	8005100 <led_write0>
 80020aa:	20ff      	movs	r0, #255	; 0xff
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020ac:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020ae:	f003 f827 	bl	8005100 <led_write0>
 80020b2:	20bc      	movs	r0, #188	; 0xbc
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020b4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020b6:	f003 f823 	bl	8005100 <led_write0>
 80020ba:	201f      	movs	r0, #31
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020bc:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020be:	f003 f81f 	bl	8005100 <led_write0>
 80020c2:	20be      	movs	r0, #190	; 0xbe
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020c4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020c6:	f003 f81b 	bl	8005100 <led_write0>
 80020ca:	200f      	movs	r0, #15
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020cc:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020ce:	f003 f817 	bl	8005100 <led_write0>
 80020d2:	20af      	movs	r0, #175	; 0xaf
  spiStop(&SPID2);
}

void write_oled_command(char data)
{
    palClearPad(GPIOB,DC);
 80020d4:	8366      	strh	r6, [r4, #26]
    led_write0(data);
 80020d6:	f003 f813 	bl	8005100 <led_write0>


  init_spi();
  chprintf((BaseSequentialStream*)&SD1,"SPI init\r\n");
  init_oled();
  chprintf((BaseSequentialStream*)&SD1,"OLED init\r\n");
 80020da:	4957      	ldr	r1, [pc, #348]	; (8002238 <main+0xec8>)
 80020dc:	4852      	ldr	r0, [pc, #328]	; (8002228 <main+0xeb8>)
 80020de:	f003 fd67 	bl	8005bb0 <chprintf.constprop.4>
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);
 80020e2:	4a56      	ldr	r2, [pc, #344]	; (800223c <main+0xecc>)
 80020e4:	4856      	ldr	r0, [pc, #344]	; (8002240 <main+0xed0>)
 80020e6:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80020ea:	f003 ffc9 	bl	8006080 <chThdCreateStatic.constprop.11>

void clear_oled()
{
    //memset(&vbuf2,0x00,128*32); // I set the clear to be 0x11 instead of 0x00

    memset(&vbuf,0x00,128*32); // I set the clear to be 0x11 instead of 0x00
 80020ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020f2:	2100      	movs	r1, #0
 80020f4:	4853      	ldr	r0, [pc, #332]	; (8002244 <main+0xed4>)
 80020f6:	f004 fb0f 	bl	8006718 <memset>
{
  uint8_t row;
  uint8_t col;
  clear_oled();
  //shade_oled(0x55);
  oled_draw_string(0,0,"Helios ");
 80020fa:	4953      	ldr	r1, [pc, #332]	; (8002248 <main+0xed8>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f003 ff6f 	bl	8005fe0 <oled_draw_string.constprop.3>
  if (baud_rate == 1)
 8002102:	782b      	ldrb	r3, [r5, #0]
      sprintf(text,"id=%d    baud=19200 ",my_address );
 8002104:	f898 2000 	ldrb.w	r2, [r8]
 8002108:	4850      	ldr	r0, [pc, #320]	; (800224c <main+0xedc>)
  uint8_t row;
  uint8_t col;
  clear_oled();
  //shade_oled(0x55);
  oled_draw_string(0,0,"Helios ");
  if (baud_rate == 1)
 800210a:	2b01      	cmp	r3, #1
      sprintf(text,"id=%d    baud=19200 ",my_address );
 800210c:	bf0c      	ite	eq
 800210e:	4950      	ldreq	r1, [pc, #320]	; (8002250 <main+0xee0>)
  else
      sprintf(text,"id=%d    baud=9600 ",my_address);
 8002110:	4950      	ldrne	r1, [pc, #320]	; (8002254 <main+0xee4>)
 8002112:	f004 fb4f 	bl	80067b4 <sprintf>
  oled_draw_string(0,1,text);
 8002116:	494d      	ldr	r1, [pc, #308]	; (800224c <main+0xedc>)
 8002118:	2001      	movs	r0, #1
 800211a:	f003 ff61 	bl	8005fe0 <oled_draw_string.constprop.3>
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 800211e:	4b4e      	ldr	r3, [pc, #312]	; (8002258 <main+0xee8>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	b90b      	cbnz	r3, 8002128 <main+0xdb8>
	wdgReset(&WDGD1);
 8002124:	f004 f964 	bl	80063f0 <wdgReset.constprop.19>
  chprintf((BaseSequentialStream*)&SD1,"OLED init\r\n");
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);

  graphics_init();
  feedWatchdog();
  chThdSleepMilliseconds(1000);
 8002128:	f242 7010 	movw	r0, #10000	; 0x2710
 800212c:	f001 ff60 	bl	8003ff0 <chThdSleep>
  palClearPad(GPIOA, 1);     // Recieve Enable RS485
  palClearPad(GPIOE, 0);     // Disable TX Light
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <main+0xebc>)
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);

  graphics_init();
  feedWatchdog();
  chThdSleepMilliseconds(1000);
  palClearPad(GPIOA, 1);     // Recieve Enable RS485
 8002132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002136:	2202      	movs	r2, #2
  palClearPad(GPIOE, 0);     // Disable TX Light
 8002138:	2101      	movs	r1, #1
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);

  graphics_init();
  feedWatchdog();
  chThdSleepMilliseconds(1000);
  palClearPad(GPIOA, 1);     // Recieve Enable RS485
 800213a:	8342      	strh	r2, [r0, #26]
  palClearPad(GPIOE, 0);     // Disable TX Light
 800213c:	8359      	strh	r1, [r3, #26]
  palClearPad(GPIOE, 1);     // Disable RX Light
 800213e:	835a      	strh	r2, [r3, #26]
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 8002140:	4b45      	ldr	r3, [pc, #276]	; (8002258 <main+0xee8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	b90b      	cbnz	r3, 800214a <main+0xdda>
	wdgReset(&WDGD1);
 8002146:	f004 f953 	bl	80063f0 <wdgReset.constprop.19>
  chThdSleepMilliseconds(1000);
  palClearPad(GPIOA, 1);     // Recieve Enable RS485
  palClearPad(GPIOE, 0);     // Disable TX Light
  palClearPad(GPIOE, 1);     // Disable RX Light
  feedWatchdog();
  chThdSleepMilliseconds(1000);
 800214a:	f242 7010 	movw	r0, #10000	; 0x2710
 800214e:	f001 ff4f 	bl	8003ff0 <chThdSleep>
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 8002152:	4b41      	ldr	r3, [pc, #260]	; (8002258 <main+0xee8>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b90b      	cbnz	r3, 800215c <main+0xdec>
	wdgReset(&WDGD1);
 8002158:	f004 f94a 	bl	80063f0 <wdgReset.constprop.19>
  feedWatchdog();
  chThdSleepMilliseconds(1000);
  feedWatchdog();


  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 800215c:	4a3f      	ldr	r2, [pc, #252]	; (800225c <main+0xeec>)
 800215e:	4840      	ldr	r0, [pc, #256]	; (8002260 <main+0xef0>)
 8002160:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002164:	f003 ff8c 	bl	8006080 <chThdCreateStatic.constprop.11>
  chThdCreateStatic(waThread6, sizeof(waThread6), NORMALPRIO, Thread6, NULL);
 8002168:	4a3e      	ldr	r2, [pc, #248]	; (8002264 <main+0xef4>)
 800216a:	483f      	ldr	r0, [pc, #252]	; (8002268 <main+0xef8>)
 800216c:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8002170:	f003 ff86 	bl	8006080 <chThdCreateStatic.constprop.11>
  chThdCreateStatic(waThread7, sizeof(waThread7), NORMALPRIO, Thread7, NULL);
 8002174:	4a3d      	ldr	r2, [pc, #244]	; (800226c <main+0xefc>)
 8002176:	483e      	ldr	r0, [pc, #248]	; (8002270 <main+0xf00>)
 8002178:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800217c:	f003 ff80 	bl	8006080 <chThdCreateStatic.constprop.11>

  chprintf((BaseSequentialStream*)&SD1,"HelloA\r\n")  ;
 8002180:	493c      	ldr	r1, [pc, #240]	; (8002274 <main+0xf04>)
 8002182:	4829      	ldr	r0, [pc, #164]	; (8002228 <main+0xeb8>)
 8002184:	f003 fd14 	bl	8005bb0 <chprintf.constprop.4>
  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO, Thread3, NULL);
 8002188:	4a3b      	ldr	r2, [pc, #236]	; (8002278 <main+0xf08>)
 800218a:	483c      	ldr	r0, [pc, #240]	; (800227c <main+0xf0c>)
 800218c:	f44f 7154 	mov.w	r1, #848	; 0x350
 8002190:	f003 ff76 	bl	8006080 <chThdCreateStatic.constprop.11>
  chprintf((BaseSequentialStream*)&SD1,"HelloB\r\n")  ;
 8002194:	493a      	ldr	r1, [pc, #232]	; (8002280 <main+0xf10>)
 8002196:	4824      	ldr	r0, [pc, #144]	; (8002228 <main+0xeb8>)
 8002198:	f003 fd0a 	bl	8005bb0 <chprintf.constprop.4>
  chThdCreateStatic(waThread4, sizeof(waThread4), NORMALPRIO, Thread4, NULL);
 800219c:	4a39      	ldr	r2, [pc, #228]	; (8002284 <main+0xf14>)
 800219e:	483a      	ldr	r0, [pc, #232]	; (8002288 <main+0xf18>)
 80021a0:	f44f 6115 	mov.w	r1, #2384	; 0x950
 80021a4:	f003 ff6c 	bl	8006080 <chThdCreateStatic.constprop.11>
  chprintf((BaseSequentialStream*)&SD1,"HelloC\r\n")  ;
 80021a8:	4938      	ldr	r1, [pc, #224]	; (800228c <main+0xf1c>)
 80021aa:	481f      	ldr	r0, [pc, #124]	; (8002228 <main+0xeb8>)
 80021ac:	f003 fd00 	bl	8005bb0 <chprintf.constprop.4>
  chThdCreateStatic(waThread5, sizeof(waThread5), NORMALPRIO, Thread5, NULL);
 80021b0:	4a37      	ldr	r2, [pc, #220]	; (8002290 <main+0xf20>)
 80021b2:	4838      	ldr	r0, [pc, #224]	; (8002294 <main+0xf24>)
 80021b4:	f44f 7154 	mov.w	r1, #848	; 0x350
 80021b8:	f003 ff62 	bl	8006080 <chThdCreateStatic.constprop.11>
  float outsideTemp;
  float internalTemp;

  //Default OPAMP4 CSR 10880000
  
  OPAMP4->CSR = 0X8041;
 80021bc:	4a36      	ldr	r2, [pc, #216]	; (8002298 <main+0xf28>)
 80021be:	f248 0141 	movw	r1, #32833	; 0x8041
 80021c2:	6011      	str	r1, [r2, #0]
  //chprintf(&SD1,"Default OPAMP4 CSR %X\r\n",OPAMP4->CSR);

  irradiance3 = 0;
 80021c4:	4a35      	ldr	r2, [pc, #212]	; (800229c <main+0xf2c>)
 80021c6:	2300      	movs	r3, #0
 80021c8:	6013      	str	r3, [r2, #0]
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 80021ca:	4b23      	ldr	r3, [pc, #140]	; (8002258 <main+0xee8>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	b90b      	cbnz	r3, 80021d4 <main+0xe64>
	wdgReset(&WDGD1);
 80021d0:	f004 f90e 	bl	80063f0 <wdgReset.constprop.19>

    while (TRUE)
      {
	  feedWatchdog();

	  step = (step +1)%256;
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <main+0xf30>)
	 
	  adcStart(&ADCD4, NULL);
 80021d6:	4c33      	ldr	r4, [pc, #204]	; (80022a4 <main+0xf34>)

    while (TRUE)
      {
	  feedWatchdog();

	  step = (step +1)%256;
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	4a31      	ldr	r2, [pc, #196]	; (80022a0 <main+0xf30>)
 80021dc:	3301      	adds	r3, #1
 80021de:	b2db      	uxtb	r3, r3
	 
	  adcStart(&ADCD4, NULL);
 80021e0:	4620      	mov	r0, r4

    while (TRUE)
      {
	  feedWatchdog();

	  step = (step +1)%256;
 80021e2:	8013      	strh	r3, [r2, #0]
	 
	  adcStart(&ADCD4, NULL);
 80021e4:	f004 f834 	bl	8006250 <adcStart.constprop.33>
	  adcConvert(&ADCD4, &adcgrpcfg2, samples2, ADC_GRP2_BUF_DEPTH);
 80021e8:	492f      	ldr	r1, [pc, #188]	; (80022a8 <main+0xf38>)
 80021ea:	4a30      	ldr	r2, [pc, #192]	; (80022ac <main+0xf3c>)
 80021ec:	4620      	mov	r0, r4
 80021ee:	f003 ffaf 	bl	8006150 <adcConvert.constprop.27>
	  chThdSleepMilliseconds(100);
 80021f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80021f6:	f001 fefb 	bl	8003ff0 <chThdSleep>
 80021fa:	2320      	movs	r3, #32
 80021fc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002200:	f001 fcae 	bl	8003b60 <_dbg_check_lock>

  osalDbgCheck(adcp != NULL);

  osalSysLock();

  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 8002204:	f89b 3000 	ldrb.w	r3, [fp]
 8002208:	1e5a      	subs	r2, r3, #1
 800220a:	2a01      	cmp	r2, #1
 800220c:	d954      	bls.n	80022b8 <main+0xf48>
 800220e:	4828      	ldr	r0, [pc, #160]	; (80022b0 <main+0xf40>)
 8002210:	f001 f9f6 	bl	8003600 <chSysHalt>
 8002214:	20002b04 	.word	0x20002b04
 8002218:	48000400 	.word	0x48000400
 800221c:	20000810 	.word	0x20000810
 8002220:	20000800 	.word	0x20000800
 8002224:	0801633c 	.word	0x0801633c
 8002228:	2000424c 	.word	0x2000424c
 800222c:	48001000 	.word	0x48001000
 8002230:	0801635c 	.word	0x0801635c
 8002234:	08016368 	.word	0x08016368
 8002238:	0801637c 	.word	0x0801637c
 800223c:	08004e81 	.word	0x08004e81
 8002240:	20001458 	.word	0x20001458
 8002244:	20004c1c 	.word	0x20004c1c
 8002248:	08016388 	.word	0x08016388
 800224c:	20002c08 	.word	0x20002c08
 8002250:	08016390 	.word	0x08016390
 8002254:	080163a8 	.word	0x080163a8
 8002258:	20002db4 	.word	0x20002db4
 800225c:	08004d91 	.word	0x08004d91
 8002260:	20001288 	.word	0x20001288
 8002264:	08004e01 	.word	0x08004e01
 8002268:	200022c8 	.word	0x200022c8
 800226c:	080050a1 	.word	0x080050a1
 8002270:	20002498 	.word	0x20002498
 8002274:	080163bc 	.word	0x080163bc
 8002278:	08005821 	.word	0x08005821
 800227c:	20002678 	.word	0x20002678
 8002280:	080163c8 	.word	0x080163c8
 8002284:	08005481 	.word	0x08005481
 8002288:	20001628 	.word	0x20001628
 800228c:	080163d4 	.word	0x080163d4
 8002290:	080057c1 	.word	0x080057c1
 8002294:	20001f78 	.word	0x20001f78
 8002298:	40010044 	.word	0x40010044
 800229c:	20002668 	.word	0x20002668
 80022a0:	20001280 	.word	0x20001280
 80022a4:	20004be0 	.word	0x20004be0
 80022a8:	08016198 	.word	0x08016198
 80022ac:	20002d80 	.word	0x20002d80
 80022b0:	080162c8 	.word	0x080162c8
 80022b4:	20002a74 	.word	0x20002a74
 * @notapi
 */
void adc_lld_stop(ADCDriver *adcp) {

  /* If in ready state then disables the ADC clock and analog part.*/
  if (adcp->state == ADC_READY) {
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f000 824d 	beq.w	8002758 <main+0x13e8>
                "invalid state");

  adc_lld_stop(adcp);
  adcp->config = NULL;
 80022be:	2200      	movs	r2, #0
  adcp->state  = ADC_STOP;
 80022c0:	2301      	movs	r3, #1

  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");

  adc_lld_stop(adcp);
  adcp->config = NULL;
 80022c2:	f8cb 2004 	str.w	r2, [fp, #4]
  adcp->state  = ADC_STOP;
 80022c6:	f88b 3000 	strb.w	r3, [fp]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80022ca:	f001 fc21 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022ce:	f8da 3000 	ldr.w	r3, [sl]
 80022d2:	4acb      	ldr	r2, [pc, #812]	; (8002600 <main+0x1290>)
 80022d4:	4553      	cmp	r3, sl
 80022d6:	d005      	beq.n	80022e4 <main+0xf74>
 80022d8:	6992      	ldr	r2, [r2, #24]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	6892      	ldr	r2, [r2, #8]
 80022de:	429a      	cmp	r2, r3
 80022e0:	f0c0 826b 	bcc.w	80027ba <main+0x144a>
 80022e4:	2300      	movs	r3, #0
 80022e6:	f383 8811 	msr	BASEPRI, r3
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 80022ea:	4bc6      	ldr	r3, [pc, #792]	; (8002604 <main+0x1294>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	b90b      	cbnz	r3, 80022f4 <main+0xf84>
	wdgReset(&WDGD1);
 80022f0:	f004 f87e 	bl	80063f0 <wdgReset.constprop.19>
	  //chprintf((BaseSequentialStream*)&SD1,"ADC4 %d %d %d %d %d\r\n",samples2[0],samples2[1],samples2[2],samples2[3],samples2[4]);


	  

	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);
 80022f4:	4bc4      	ldr	r3, [pc, #784]	; (8002608 <main+0x1298>)
 80022f6:	4ec5      	ldr	r6, [pc, #788]	; (800260c <main+0x129c>)
 80022f8:	8818      	ldrh	r0, [r3, #0]

	  irradiance2 = calc_volts(VDD,samples2[3])/(8*.0002);
 80022fa:	f8df 8380 	ldr.w	r8, [pc, #896]	; 800267c <main+0x130c>
	  //chprintf((BaseSequentialStream*)&SD1,"ADC4 %d %d %d %d %d\r\n",samples2[0],samples2[1],samples2[2],samples2[3],samples2[4]);


	  

	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);
 80022fe:	f7fe f953 	bl	80005a8 <__aeabi_i2d>
 8002302:	a3ad      	add	r3, pc, #692	; (adr r3, 80025b8 <main+0x1248>)
 8002304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002308:	f7fe f9b4 	bl	8000674 <__aeabi_dmul>
 800230c:	4604      	mov	r4, r0
 800230e:	8870      	ldrh	r0, [r6, #2]
 8002310:	460d      	mov	r5, r1
 8002312:	f7fe f949 	bl	80005a8 <__aeabi_i2d>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4620      	mov	r0, r4
 800231c:	4629      	mov	r1, r5
 800231e:	f7fe fad3 	bl	80008c8 <__aeabi_ddiv>
 8002322:	f7fe fc69 	bl	8000bf8 <__aeabi_d2f>



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 8002326:	f7fe f951 	bl	80005cc <__aeabi_f2d>
 800232a:	4604      	mov	r4, r0
 800232c:	88f0      	ldrh	r0, [r6, #6]
 800232e:	460d      	mov	r5, r1
 8002330:	f7fe f93a 	bl	80005a8 <__aeabi_i2d>
 8002334:	a3a2      	add	r3, pc, #648	; (adr r3, 80025c0 <main+0x1250>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	f7fe fac5 	bl	80008c8 <__aeabi_ddiv>
 800233e:	4622      	mov	r2, r4
 8002340:	462b      	mov	r3, r5
 8002342:	f7fe f997 	bl	8000674 <__aeabi_dmul>
 8002346:	f7fe fc57 	bl	8000bf8 <__aeabi_d2f>

	  

	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);

	  irradiance2 = calc_volts(VDD,samples2[3])/(8*.0002);
 800234a:	f7fe f93f 	bl	80005cc <__aeabi_f2d>
 800234e:	a39e      	add	r3, pc, #632	; (adr r3, 80025c8 <main+0x1258>)
 8002350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002354:	f7fe fab8 	bl	80008c8 <__aeabi_ddiv>
 8002358:	f7fe fc4e 	bl	8000bf8 <__aeabi_d2f>

	  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 800235c:	49ac      	ldr	r1, [pc, #688]	; (8002610 <main+0x12a0>)

	  

	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);

	  irradiance2 = calc_volts(VDD,samples2[3])/(8*.0002);
 800235e:	f8c8 0000 	str.w	r0, [r8]

	  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 8002362:	4aac      	ldr	r2, [pc, #688]	; (8002614 <main+0x12a4>)
 8002364:	48ac      	ldr	r0, [pc, #688]	; (8002618 <main+0x12a8>)
 8002366:	f003 fef3 	bl	8006150 <adcConvert.constprop.27>
	  chThdSleepMilliseconds(100);
 800236a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800236e:	f001 fe3f 	bl	8003ff0 <chThdSleep>
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
}


void feedWatchdog(){
    if (!reset)
 8002372:	4ba4      	ldr	r3, [pc, #656]	; (8002604 <main+0x1294>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	b90b      	cbnz	r3, 800237c <main+0x100c>
	wdgReset(&WDGD1);
 8002378:	f004 f83a 	bl	80063f0 <wdgReset.constprop.19>
	  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
	  chThdSleepMilliseconds(100);
	  feedWatchdog();
	  internalTemp = calc_temp(VDD,samples1[0]);
	  //chprintf((BaseSequentialStream*)&SD1,"ADC1 %d %d %d\r\n",samples1[0],samples1[1],samples1[2]);
	  chprintf((BaseSequentialStream*)&SD1,"Rain: %.2f Rate:%.2f\r\n",lifetimeRain,rainRate);
 800237c:	4ba7      	ldr	r3, [pc, #668]	; (800261c <main+0x12ac>)


	  irradiance = calc_volts(VDD,samples2[4]);
 800237e:	4fa8      	ldr	r7, [pc, #672]	; (8002620 <main+0x12b0>)
	  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
	  chThdSleepMilliseconds(100);
	  feedWatchdog();
	  internalTemp = calc_temp(VDD,samples1[0]);
	  //chprintf((BaseSequentialStream*)&SD1,"ADC1 %d %d %d\r\n",samples1[0],samples1[1],samples1[2]);
	  chprintf((BaseSequentialStream*)&SD1,"Rain: %.2f Rate:%.2f\r\n",lifetimeRain,rainRate);
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	f7fe f923 	bl	80005cc <__aeabi_f2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800238e:	4ba5      	ldr	r3, [pc, #660]	; (8002624 <main+0x12b4>)
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	f7fe f91b 	bl	80005cc <__aeabi_f2d>
 8002396:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800239a:	e9cd 0100 	strd	r0, r1, [sp]
 800239e:	49a2      	ldr	r1, [pc, #648]	; (8002628 <main+0x12b8>)
 80023a0:	48a2      	ldr	r0, [pc, #648]	; (800262c <main+0x12bc>)
 80023a2:	f003 fc05 	bl	8005bb0 <chprintf.constprop.4>



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 80023a6:	8930      	ldrh	r0, [r6, #8]
 80023a8:	f7fe f8fe 	bl	80005a8 <__aeabi_i2d>
 80023ac:	a384      	add	r3, pc, #528	; (adr r3, 80025c0 <main+0x1250>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	f7fe fa89 	bl	80008c8 <__aeabi_ddiv>
 80023b6:	4602      	mov	r2, r0
 80023b8:	460b      	mov	r3, r1
 80023ba:	4620      	mov	r0, r4
 80023bc:	4629      	mov	r1, r5
 80023be:	f7fe f959 	bl	8000674 <__aeabi_dmul>
 80023c2:	f7fe fc19 	bl	8000bf8 <__aeabi_d2f>
	  //chprintf((BaseSequentialStream*)&SD1,"ADC1 %d %d %d\r\n",samples1[0],samples1[1],samples1[2]);
	  chprintf((BaseSequentialStream*)&SD1,"Rain: %.2f Rate:%.2f\r\n",lifetimeRain,rainRate);


	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
 80023c6:	f7fe f901 	bl	80005cc <__aeabi_f2d>
 80023ca:	a381      	add	r3, pc, #516	; (adr r3, 80025d0 <main+0x1260>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f7fe fbc2 	bl	8000b58 <__aeabi_dcmplt>
 80023d4:	2800      	cmp	r0, #0
 80023d6:	f000 8213 	beq.w	8002800 <main+0x1490>
	      irradiance = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 80023de:	4b94      	ldr	r3, [pc, #592]	; (8002630 <main+0x12c0>)
	  amps = (calc_volts(VDD,samples2[2])/120.0);
 80023e0:	f8df 829c 	ldr.w	r8, [pc, #668]	; 8002680 <main+0x1310>
	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 80023e4:	6818      	ldr	r0, [r3, #0]
	  amps = (calc_volts(VDD,samples2[2])/120.0);
	  windspeed = (amps-0.004)*(50.0/.016);
	  opamp4 = calc_volts(VDD,samples2[3]);
 80023e6:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8002684 <main+0x1314>
	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 80023ea:	f7fe f8ef 	bl	80005cc <__aeabi_f2d>
 80023ee:	a37a      	add	r3, pc, #488	; (adr r3, 80025d8 <main+0x1268>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f93e 	bl	8000674 <__aeabi_dmul>
 80023f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80023fc:	6838      	ldr	r0, [r7, #0]
	  amps = (calc_volts(VDD,samples2[2])/120.0);
	  windspeed = (amps-0.004)*(50.0/.016);
 80023fe:	4f8d      	ldr	r7, [pc, #564]	; (8002634 <main+0x12c4>)
	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 8002400:	f7fe f8e4 	bl	80005cc <__aeabi_f2d>
 8002404:	a376      	add	r3, pc, #472	; (adr r3, 80025e0 <main+0x1270>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	f7fe f933 	bl	8000674 <__aeabi_dmul>
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002416:	f7fd ff7b 	bl	8000310 <__adddf3>
 800241a:	f7fe fbed 	bl	8000bf8 <__aeabi_d2f>
 800241e:	4b84      	ldr	r3, [pc, #528]	; (8002630 <main+0x12c0>)
 8002420:	6018      	str	r0, [r3, #0]



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 8002422:	88b0      	ldrh	r0, [r6, #4]
 8002424:	f7fe f8c0 	bl	80005a8 <__aeabi_i2d>
 8002428:	a365      	add	r3, pc, #404	; (adr r3, 80025c0 <main+0x1250>)
 800242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242e:	f7fe fa4b 	bl	80008c8 <__aeabi_ddiv>
 8002432:	4602      	mov	r2, r0
 8002434:	460b      	mov	r3, r1
 8002436:	4620      	mov	r0, r4
 8002438:	4629      	mov	r1, r5
 800243a:	f7fe f91b 	bl	8000674 <__aeabi_dmul>
 800243e:	f7fe fbdb 	bl	8000bf8 <__aeabi_d2f>
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
	  amps = (calc_volts(VDD,samples2[2])/120.0);
 8002442:	eddf 7a7d 	vldr	s15, [pc, #500]	; 8002638 <main+0x12c8>
 8002446:	ee07 0a10 	vmov	s14, r0
 800244a:	eec7 7a27 	vdiv.f32	s15, s14, s15
	  windspeed = (amps-0.004)*(50.0/.016);
 800244e:	ee17 0a90 	vmov	r0, s15
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
	  amps = (calc_volts(VDD,samples2[2])/120.0);
 8002452:	edc8 7a00 	vstr	s15, [r8]
	  windspeed = (amps-0.004)*(50.0/.016);
 8002456:	f7fe f8b9 	bl	80005cc <__aeabi_f2d>
 800245a:	a363      	add	r3, pc, #396	; (adr r3, 80025e8 <main+0x1278>)
 800245c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002460:	f7fd ff54 	bl	800030c <__aeabi_dsub>
 8002464:	a362      	add	r3, pc, #392	; (adr r3, 80025f0 <main+0x1280>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	f7fe f903 	bl	8000674 <__aeabi_dmul>
 800246e:	f7fe fbc3 	bl	8000bf8 <__aeabi_d2f>
 8002472:	ee08 0a10 	vmov	s16, r0



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 8002476:	88f0      	ldrh	r0, [r6, #6]
 8002478:	f7fe f896 	bl	80005a8 <__aeabi_i2d>
 800247c:	a350      	add	r3, pc, #320	; (adr r3, 80025c0 <main+0x1250>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	f7fe fa21 	bl	80008c8 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4620      	mov	r0, r4
 800248c:	4629      	mov	r1, r5
 800248e:	f7fe f8f1 	bl	8000674 <__aeabi_dmul>
 8002492:	f7fe fbb1 	bl	8000bf8 <__aeabi_d2f>
 8002496:	f8c9 0000 	str.w	r0, [r9]
 800249a:	8830      	ldrh	r0, [r6, #0]
 800249c:	f7fe f884 	bl	80005a8 <__aeabi_i2d>
 80024a0:	a347      	add	r3, pc, #284	; (adr r3, 80025c0 <main+0x1250>)
 80024a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a6:	f7fe fa0f 	bl	80008c8 <__aeabi_ddiv>
 80024aa:	460b      	mov	r3, r1
 80024ac:	4602      	mov	r2, r0
 80024ae:	4629      	mov	r1, r5
 80024b0:	4620      	mov	r0, r4
 80024b2:	f7fe f8df 	bl	8000674 <__aeabi_dmul>
 80024b6:	f7fe fb9f 	bl	8000bf8 <__aeabi_d2f>
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
	  amps = (calc_volts(VDD,samples2[2])/120.0);
	  windspeed = (amps-0.004)*(50.0/.016);
	  opamp4 = calc_volts(VDD,samples2[3]);
	  snow = calc_volts(VDD,samples2[0]);
	  if (windspeed < 0.5)
 80024ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 80024be:	4b5f      	ldr	r3, [pc, #380]	; (800263c <main+0x12cc>)
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
	  amps = (calc_volts(VDD,samples2[2])/120.0);
	  windspeed = (amps-0.004)*(50.0/.016);
	  opamp4 = calc_volts(VDD,samples2[3]);
	  snow = calc_volts(VDD,samples2[0]);
	  if (windspeed < 0.5)
 80024c0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr



float calc_volts(float vdd,int rawread)
{
    return (rawread/4095.0)*vdd;
 80024c8:	6018      	str	r0, [r3, #0]
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
	  amps = (calc_volts(VDD,samples2[2])/120.0);
	  windspeed = (amps-0.004)*(50.0/.016);
	  opamp4 = calc_volts(VDD,samples2[3]);
	  snow = calc_volts(VDD,samples2[0]);
	  if (windspeed < 0.5)
 80024ca:	f140 818c 	bpl.w	80027e6 <main+0x1476>
	      windspeed = 0;
 80024ce:	2300      	movs	r3, #0
 80024d0:	603b      	str	r3, [r7, #0]
	  else
	      windspeed = windspeed*2.237;
	  windspeedout = windspeed;
 80024d2:	4b5b      	ldr	r3, [pc, #364]	; (8002640 <main+0x12d0>)
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	601a      	str	r2, [r3, #0]
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
 80024d8:	2000      	movs	r0, #0
 80024da:	f002 fef1 	bl	80052c0 <get_temp>
 80024de:	4f59      	ldr	r7, [pc, #356]	; (8002644 <main+0x12d4>)
	  pt100temp2 = get_temp(1);
 80024e0:	4e59      	ldr	r6, [pc, #356]	; (8002648 <main+0x12d8>)
	  else
	      windspeed = windspeed*2.237;
	  windspeedout = windspeed;
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
 80024e2:	ed87 0a00 	vstr	s0, [r7]
	  pt100temp2 = get_temp(1);
 80024e6:	2001      	movs	r0, #1
 80024e8:	f002 feea 	bl	80052c0 <get_temp>
	  pt100temp3 = get_temp(2);
 80024ec:	2002      	movs	r0, #2
	      windspeed = windspeed*2.237;
	  windspeedout = windspeed;
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
	  pt100temp2 = get_temp(1);
 80024ee:	ed86 0a00 	vstr	s0, [r6]
	  pt100temp3 = get_temp(2);
 80024f2:	f002 fee5 	bl	80052c0 <get_temp>
 80024f6:	4d55      	ldr	r5, [pc, #340]	; (800264c <main+0x12dc>)
	  pt100temp4 = get_temp(3);
	  pt100temp5 = get_temp(4);
 80024f8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8002688 <main+0x1318>
	  windspeedout = windspeed;
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
	  pt100temp2 = get_temp(1);
	  pt100temp3 = get_temp(2);
 80024fc:	ed85 0a00 	vstr	s0, [r5]
	  pt100temp4 = get_temp(3);
 8002500:	2003      	movs	r0, #3
 8002502:	f002 fedd 	bl	80052c0 <get_temp>
 8002506:	4b52      	ldr	r3, [pc, #328]	; (8002650 <main+0x12e0>)
	  pt100temp5 = get_temp(4);
	  sprintf(metrics[0],"Irr: %5.0f",irradiance3);
 8002508:	4c52      	ldr	r4, [pc, #328]	; (8002654 <main+0x12e4>)
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
	  pt100temp2 = get_temp(1);
	  pt100temp3 = get_temp(2);
	  pt100temp4 = get_temp(3);
 800250a:	ed83 0a00 	vstr	s0, [r3]
	  pt100temp5 = get_temp(4);
 800250e:	2004      	movs	r0, #4
 8002510:	f002 fed6 	bl	80052c0 <get_temp>
	  sprintf(metrics[0],"Irr: %5.0f",irradiance3);
 8002514:	4b46      	ldr	r3, [pc, #280]	; (8002630 <main+0x12c0>)
	  
	  pt100temp1 = get_temp(0);
	  pt100temp2 = get_temp(1);
	  pt100temp3 = get_temp(2);
	  pt100temp4 = get_temp(3);
	  pt100temp5 = get_temp(4);
 8002516:	ed89 0a00 	vstr	s0, [r9]
	  sprintf(metrics[0],"Irr: %5.0f",irradiance3);
 800251a:	6818      	ldr	r0, [r3, #0]
 800251c:	f7fe f856 	bl	80005cc <__aeabi_f2d>
 8002520:	4602      	mov	r2, r0
 8002522:	460b      	mov	r3, r1
 8002524:	4620      	mov	r0, r4
 8002526:	494c      	ldr	r1, [pc, #304]	; (8002658 <main+0x12e8>)
 8002528:	f004 f944 	bl	80067b4 <sprintf>
	  if (amps < 0.003)
 800252c:	f8d8 0000 	ldr.w	r0, [r8]
 8002530:	f7fe f84c 	bl	80005cc <__aeabi_f2d>
 8002534:	a330      	add	r3, pc, #192	; (adr r3, 80025f8 <main+0x1288>)
 8002536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253a:	f7fe fb0d 	bl	8000b58 <__aeabi_dcmplt>
 800253e:	2800      	cmp	r0, #0
 8002540:	f000 8145 	beq.w	80027ce <main+0x145e>
	      sprintf(metrics[1],"Wind:  N/C");
 8002544:	4b45      	ldr	r3, [pc, #276]	; (800265c <main+0x12ec>)
 8002546:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800254a:	f104 030c 	add.w	r3, r4, #12
 800254e:	c303      	stmia	r3!, {r0, r1}
 8002550:	f823 2b02 	strh.w	r2, [r3], #2
 8002554:	0c12      	lsrs	r2, r2, #16
 8002556:	701a      	strb	r2, [r3, #0]
	  else
	      sprintf(metrics[1],"Wind: %4.0f",windspeed);
	  fillTemp(metrics[2],pt100temp1,1);
 8002558:	4841      	ldr	r0, [pc, #260]	; (8002660 <main+0x12f0>)
 800255a:	ed97 0a00 	vldr	s0, [r7]
 800255e:	2101      	movs	r1, #1
 8002560:	f002 fd36 	bl	8004fd0 <fillTemp>
	  fillTemp(metrics[3],pt100temp2,2);
 8002564:	483f      	ldr	r0, [pc, #252]	; (8002664 <main+0x12f4>)
 8002566:	ed96 0a00 	vldr	s0, [r6]
 800256a:	2102      	movs	r1, #2
 800256c:	f002 fd30 	bl	8004fd0 <fillTemp>
	  fillTemp(metrics[4],pt100temp3,3);
 8002570:	483d      	ldr	r0, [pc, #244]	; (8002668 <main+0x12f8>)
 8002572:	ed95 0a00 	vldr	s0, [r5]
 8002576:	2103      	movs	r1, #3
 8002578:	f002 fd2a 	bl	8004fd0 <fillTemp>
	  fillTemp(metrics[5],pt100temp4,4);
 800257c:	4b34      	ldr	r3, [pc, #208]	; (8002650 <main+0x12e0>)
 800257e:	483b      	ldr	r0, [pc, #236]	; (800266c <main+0x12fc>)
 8002580:	ed93 0a00 	vldr	s0, [r3]
 8002584:	2104      	movs	r1, #4
 8002586:	f002 fd23 	bl	8004fd0 <fillTemp>
	  if (palReadPad(GPIOC,7) == 0)
 800258a:	4b39      	ldr	r3, [pc, #228]	; (8002670 <main+0x1300>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	061b      	lsls	r3, r3, #24
 8002590:	f100 8116 	bmi.w	80027c0 <main+0x1450>
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
 8002594:	4b23      	ldr	r3, [pc, #140]	; (8002624 <main+0x12b4>)
 8002596:	6818      	ldr	r0, [r3, #0]
 8002598:	f7fe f818 	bl	80005cc <__aeabi_f2d>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4834      	ldr	r0, [pc, #208]	; (8002674 <main+0x1304>)
 80025a2:	4935      	ldr	r1, [pc, #212]	; (8002678 <main+0x1308>)
 80025a4:	f004 f906 	bl	80067b4 <sprintf>
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .05){
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <main+0x12cc>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f7fe f80e 	bl	80005cc <__aeabi_f2d>
 80025b0:	e06c      	b.n	800268c <main+0x131c>
 80025b2:	bf00      	nop
 80025b4:	f3af 8000 	nop.w
 80025b8:	66666666 	.word	0x66666666
 80025bc:	400a6666 	.word	0x400a6666
 80025c0:	00000000 	.word	0x00000000
 80025c4:	40affe00 	.word	0x40affe00
 80025c8:	eb1c432d 	.word	0xeb1c432d
 80025cc:	3f5a36e2 	.word	0x3f5a36e2
 80025d0:	47ae147b 	.word	0x47ae147b
 80025d4:	3f847ae1 	.word	0x3f847ae1
 80025d8:	cccccccd 	.word	0xcccccccd
 80025dc:	3feccccc 	.word	0x3feccccc
 80025e0:	9999999a 	.word	0x9999999a
 80025e4:	3fb99999 	.word	0x3fb99999
 80025e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80025ec:	3f70624d 	.word	0x3f70624d
 80025f0:	00000000 	.word	0x00000000
 80025f4:	40a86a00 	.word	0x40a86a00
 80025f8:	bc6a7efa 	.word	0xbc6a7efa
 80025fc:	3f689374 	.word	0x3f689374
 8002600:	200042b0 	.word	0x200042b0
 8002604:	20002db4 	.word	0x20002db4
 8002608:	1ffff7ba 	.word	0x1ffff7ba
 800260c:	20002d80 	.word	0x20002d80
 8002610:	0801616c 	.word	0x0801616c
 8002614:	20002d0c 	.word	0x20002d0c
 8002618:	20004b38 	.word	0x20004b38
 800261c:	200029c8 	.word	0x200029c8
 8002620:	200029cc 	.word	0x200029cc
 8002624:	20002d08 	.word	0x20002d08
 8002628:	080163e0 	.word	0x080163e0
 800262c:	2000424c 	.word	0x2000424c
 8002630:	20002668 	.word	0x20002668
 8002634:	20002bd4 	.word	0x20002bd4
 8002638:	42f00000 	.word	0x42f00000
 800263c:	2000266c 	.word	0x2000266c
 8002640:	20002db0 	.word	0x20002db0
 8002644:	20002b8c 	.word	0x20002b8c
 8002648:	20001284 	.word	0x20001284
 800264c:	20002afc 	.word	0x20002afc
 8002650:	20002da8 	.word	0x20002da8
 8002654:	20002d14 	.word	0x20002d14
 8002658:	080163f8 	.word	0x080163f8
 800265c:	08016404 	.word	0x08016404
 8002660:	20002d2c 	.word	0x20002d2c
 8002664:	20002d38 	.word	0x20002d38
 8002668:	20002d44 	.word	0x20002d44
 800266c:	20002d50 	.word	0x20002d50
 8002670:	48000800 	.word	0x48000800
 8002674:	20002d5c 	.word	0x20002d5c
 8002678:	0801641c 	.word	0x0801641c
 800267c:	20002e28 	.word	0x20002e28
 8002680:	2000127c 	.word	0x2000127c
 8002684:	20002d10 	.word	0x20002d10
 8002688:	20002670 	.word	0x20002670
 800268c:	a385      	add	r3, pc, #532	; (adr r3, 80028a4 <main+0x1534>)
 800268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002692:	4606      	mov	r6, r0
 8002694:	460f      	mov	r7, r1
 8002696:	f7fe fa5f 	bl	8000b58 <__aeabi_dcmplt>
 800269a:	2800      	cmp	r0, #0
 800269c:	f040 80c0 	bne.w	8002820 <main+0x14b0>
	      snowoutput = 2;
	      sprintf(metrics[7], "Snow:  N/C");
	  }
	  else if (snow < 1.2){
 80026a0:	4630      	mov	r0, r6
 80026a2:	4639      	mov	r1, r7
 80026a4:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80026a8:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <main+0x14e8>)
 80026aa:	f7fe fa55 	bl	8000b58 <__aeabi_dcmplt>
 80026ae:	2800      	cmp	r0, #0
 80026b0:	f000 80aa 	beq.w	8002808 <main+0x1498>
	      snowoutput = 1;	     
	      sprintf(metrics[7], "Snow: True");
 80026b4:	4a69      	ldr	r2, [pc, #420]	; (800285c <main+0x14ec>)
 80026b6:	4b6a      	ldr	r3, [pc, #424]	; (8002860 <main+0x14f0>)
	  if (snow < .05){
	      snowoutput = 2;
	      sprintf(metrics[7], "Snow:  N/C");
	  }
	  else if (snow < 1.2){
	      snowoutput = 1;	     
 80026b8:	4d6a      	ldr	r5, [pc, #424]	; (8002864 <main+0x14f4>)
	      sprintf(metrics[7], "Snow: True");
 80026ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80026bc:	c303      	stmia	r3!, {r0, r1}
 80026be:	f823 2b02 	strh.w	r2, [r3], #2
	  if (snow < .05){
	      snowoutput = 2;
	      sprintf(metrics[7], "Snow:  N/C");
	  }
	  else if (snow < 1.2){
	      snowoutput = 1;	     
 80026c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	      sprintf(metrics[7], "Snow: True");
 80026c6:	0c12      	lsrs	r2, r2, #16
 80026c8:	701a      	strb	r2, [r3, #0]
	  if (snow < .05){
	      snowoutput = 2;
	      sprintf(metrics[7], "Snow:  N/C");
	  }
	  else if (snow < 1.2){
	      snowoutput = 1;	     
 80026ca:	6029      	str	r1, [r5, #0]
	  else{
	      snowoutput = 0;
	      sprintf(metrics[7], "Snow:False");
	  }

	  displaymetric = step/32;
 80026cc:	4b66      	ldr	r3, [pc, #408]	; (8002868 <main+0x14f8>)
 80026ce:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 80028ac <main+0x153c>
 80026d2:	881d      	ldrh	r5, [r3, #0]

void clear_oled()
{
    //memset(&vbuf2,0x00,128*32); // I set the clear to be 0x11 instead of 0x00

    memset(&vbuf,0x00,128*32); // I set the clear to be 0x11 instead of 0x00
 80026d4:	4865      	ldr	r0, [pc, #404]	; (800286c <main+0x14fc>)
 80026d6:	4f66      	ldr	r7, [pc, #408]	; (8002870 <main+0x1500>)
	      sprintf(metrics[7], "Snow:False");
	  }

	  displaymetric = step/32;
	  clear_oled();
	  chprintf((BaseSequentialStream*)&SD1,"%s\r\n",metrics[displaymetric]);
 80026d8:	260c      	movs	r6, #12
	  else{
	      snowoutput = 0;
	      sprintf(metrics[7], "Snow:False");
	  }

	  displaymetric = step/32;
 80026da:	096d      	lsrs	r5, r5, #5

void clear_oled()
{
    //memset(&vbuf2,0x00,128*32); // I set the clear to be 0x11 instead of 0x00

    memset(&vbuf,0x00,128*32); // I set the clear to be 0x11 instead of 0x00
 80026dc:	2100      	movs	r1, #0
 80026de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	  else{
	      snowoutput = 0;
	      sprintf(metrics[7], "Snow:False");
	  }

	  displaymetric = step/32;
 80026e2:	f8c8 5000 	str.w	r5, [r8]

void clear_oled()
{
    //memset(&vbuf2,0x00,128*32); // I set the clear to be 0x11 instead of 0x00

    memset(&vbuf,0x00,128*32); // I set the clear to be 0x11 instead of 0x00
 80026e6:	f004 f817 	bl	8006718 <memset>
	      sprintf(metrics[7], "Snow:False");
	  }

	  displaymetric = step/32;
	  clear_oled();
	  chprintf((BaseSequentialStream*)&SD1,"%s\r\n",metrics[displaymetric]);
 80026ea:	fb06 4205 	mla	r2, r6, r5, r4
 80026ee:	4861      	ldr	r0, [pc, #388]	; (8002874 <main+0x1504>)
 80026f0:	4961      	ldr	r1, [pc, #388]	; (8002878 <main+0x1508>)
 80026f2:	f003 fa5d 	bl	8005bb0 <chprintf.constprop.4>
	  oled_draw_big_string(0,0,metrics[displaymetric]);
 80026f6:	f8d8 3000 	ldr.w	r3, [r8]
 80026fa:	9602      	str	r6, [sp, #8]
void oled_draw_big_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 80026fc:	2500      	movs	r5, #0
	  }

	  displaymetric = step/32;
	  clear_oled();
	  chprintf((BaseSequentialStream*)&SD1,"%s\r\n",metrics[displaymetric]);
	  oled_draw_big_string(0,0,metrics[displaymetric]);
 80026fe:	fb06 4403 	mla	r4, r6, r3, r4


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
    oled_current_row = (y*16);
 8002702:	46a9      	mov	r9, r5
	  }

	  displaymetric = step/32;
	  clear_oled();
	  chprintf((BaseSequentialStream*)&SD1,"%s\r\n",metrics[displaymetric]);
	  oled_draw_big_string(0,0,metrics[displaymetric]);
 8002704:	2602      	movs	r6, #2
 8002706:	f44f 78c0 	mov.w	r8, #384	; 0x180
void oled_draw_big_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 800270a:	4620      	mov	r0, r4
 800270c:	f004 f878 	bl	8006800 <strlen>
 8002710:	4285      	cmp	r5, r0
 8002712:	f4bf ad5a 	bcs.w	80021ca <main+0xe5a>
}


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
 8002716:	4b59      	ldr	r3, [pc, #356]	; (800287c <main+0x150c>)
 8002718:	5d61      	ldrb	r1, [r4, r5]
 800271a:	701e      	strb	r6, [r3, #0]
    oled_current_row = (y*16);
 800271c:	4b58      	ldr	r3, [pc, #352]	; (8002880 <main+0x1510>)
 800271e:	fb08 f101 	mul.w	r1, r8, r1
 8002722:	f883 9000 	strb.w	r9, [r3]
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
    {
	set_oled_text_pos((x+j)*2,y);
      write_big_oled_char(text[j]);
 8002726:	2300      	movs	r3, #0
 8002728:	9a02      	ldr	r2, [sp, #8]
 800272a:	fb02 1e03 	mla	lr, r2, r3, r1
 800272e:	4a4f      	ldr	r2, [pc, #316]	; (800286c <main+0x14fc>)
 8002730:	eb06 10c3 	add.w	r0, r6, r3, lsl #7
 8002734:	4410      	add	r0, r2
 8002736:	44be      	add	lr, r7
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8002738:	2200      	movs	r2, #0
   for (j=0; j<32; j++)
  {

    for (i=0; i<12; i++)
    {
	vbuf[(oled_current_row+j)][(oled_current_column+i)] = fontbig[a][j][i];
 800273a:	f81e c002 	ldrb.w	ip, [lr, r2]
 800273e:	f800 c002 	strb.w	ip, [r0, r2]
 8002742:	3201      	adds	r2, #1
  uint8_t j,i;

   for (j=0; j<32; j++)
  {

    for (i=0; i<12; i++)
 8002744:	2a0c      	cmp	r2, #12
 8002746:	d1f8      	bne.n	800273a <main+0x13ca>
 8002748:	3301      	adds	r3, #1

void write_big_oled_char(char a)
{
  uint8_t j,i;

   for (j=0; j<32; j++)
 800274a:	2b20      	cmp	r3, #32
 800274c:	d1ec      	bne.n	8002728 <main+0x13b8>
void oled_draw_big_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 800274e:	3501      	adds	r5, #1
 8002750:	360c      	adds	r6, #12
 8002752:	b2ed      	uxtb	r5, r5
 8002754:	b2f6      	uxtb	r6, r6
 8002756:	e7d8      	b.n	800270a <main+0x139a>

    /* Releasing the associated DMA channel.*/
    dmaStreamRelease(adcp->dmastp);
 8002758:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800275a:	f001 fff9 	bl	8004750 <dmaStreamRelease>
 800275e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
 8002760:	689a      	ldr	r2, [r3, #8]
 8002762:	0755      	lsls	r5, r2, #29
 8002764:	d469      	bmi.n	800283a <main+0x14ca>
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_analog_off(ADCDriver *adcp) {

  adcp->adcm->CR |= ADC_CR_ADDIS;
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	f042 0202 	orr.w	r2, r2, #2
 800276c:	609a      	str	r2, [r3, #8]
  while ((adcp->adcm->CR & ADC_CR_ADDIS) != 0)
 800276e:	689a      	ldr	r2, [r3, #8]
 8002770:	f012 0202 	ands.w	r2, r2, #2
 8002774:	d1fb      	bne.n	800276e <main+0x13fe>
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
#endif
      clkmask &= ~(1 << 3);
 8002776:	4943      	ldr	r1, [pc, #268]	; (8002884 <main+0x1514>)

#if STM32_ADC_USE_ADC4
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8002778:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
#endif
      clkmask &= ~(1 << 3);
 800277c:	6809      	ldr	r1, [r1, #0]
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_vreg_off(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
 800277e:	609a      	str	r2, [r3, #8]
  adcp->adcm->CR = ADC_CR_ADVREGEN_1;
 8002780:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000

#if STM32_ADC_USE_ADC4
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8002784:	f44f 3280 	mov.w	r2, #65536	; 0x10000
#endif
      clkmask &= ~(1 << 3);
 8002788:	4e3e      	ldr	r6, [pc, #248]	; (8002884 <main+0x1514>)
 */
static void adc_lld_vreg_off(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
  adcp->adcm->CR = ADC_CR_ADVREGEN_1;
 800278a:	609c      	str	r4, [r3, #8]
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
#endif
      clkmask &= ~(1 << 3);
 800278c:	f021 0508 	bic.w	r5, r1, #8

#if STM32_ADC_USE_ADC4
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8002790:	6082      	str	r2, [r0, #8]
    }
#endif

#if defined(STM32F3XX)
#if STM32_HAS_ADC1 || STM32_HAS_ADC2
    if ((clkmask & 0x3) == 0) {
 8002792:	0788      	lsls	r0, r1, #30
    if (&ADCD4 == adcp) {
#if defined(STM32F3XX)
      /* Resetting CCR options except default ones.*/
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
#endif
      clkmask &= ~(1 << 3);
 8002794:	6035      	str	r5, [r6, #0]
    }
#endif

#if defined(STM32F3XX)
#if STM32_HAS_ADC1 || STM32_HAS_ADC2
    if ((clkmask & 0x3) == 0) {
 8002796:	d107      	bne.n	80027a8 <main+0x1438>
      rccDisableADC12();
 8002798:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800279c:	f502 3288 	add.w	r2, r2, #69632	; 0x11000
 80027a0:	6953      	ldr	r3, [r2, #20]
 80027a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a6:	6153      	str	r3, [r2, #20]
    }
#endif

#if STM32_HAS_ADC3 || STM32_HAS_ADC4
    if ((clkmask & 0xC) == 0) {
 80027a8:	074a      	lsls	r2, r1, #29
 80027aa:	f53f ad88 	bmi.w	80022be <main+0xf4e>
      rccDisableADC34();
 80027ae:	4a36      	ldr	r2, [pc, #216]	; (8002888 <main+0x1518>)
 80027b0:	6953      	ldr	r3, [r2, #20]
 80027b2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80027b6:	6153      	str	r3, [r2, #20]
 80027b8:	e581      	b.n	80022be <main+0xf4e>
 80027ba:	4834      	ldr	r0, [pc, #208]	; (800288c <main+0x151c>)
 80027bc:	f000 ff20 	bl	8003600 <chSysHalt>
	  fillTemp(metrics[4],pt100temp3,3);
	  fillTemp(metrics[5],pt100temp4,4);
	  if (palReadPad(GPIOC,7) == 0)
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
	  else
	      fillTemp(metrics[6],pt100temp5,5);
 80027c0:	4833      	ldr	r0, [pc, #204]	; (8002890 <main+0x1520>)
 80027c2:	ed99 0a00 	vldr	s0, [r9]
 80027c6:	2105      	movs	r1, #5
 80027c8:	f002 fc02 	bl	8004fd0 <fillTemp>
 80027cc:	e6ec      	b.n	80025a8 <main+0x1238>
	  pt100temp5 = get_temp(4);
	  sprintf(metrics[0],"Irr: %5.0f",irradiance3);
	  if (amps < 0.003)
	      sprintf(metrics[1],"Wind:  N/C");
	  else
	      sprintf(metrics[1],"Wind: %4.0f",windspeed);
 80027ce:	4b31      	ldr	r3, [pc, #196]	; (8002894 <main+0x1524>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	f7fd fefb 	bl	80005cc <__aeabi_f2d>
 80027d6:	4602      	mov	r2, r0
 80027d8:	460b      	mov	r3, r1
 80027da:	f104 000c 	add.w	r0, r4, #12
 80027de:	492e      	ldr	r1, [pc, #184]	; (8002898 <main+0x1528>)
 80027e0:	f003 ffe8 	bl	80067b4 <sprintf>
 80027e4:	e6b8      	b.n	8002558 <main+0x11e8>
	  opamp4 = calc_volts(VDD,samples2[3]);
	  snow = calc_volts(VDD,samples2[0]);
	  if (windspeed < 0.5)
	      windspeed = 0;
	  else
	      windspeed = windspeed*2.237;
 80027e6:	ee18 0a10 	vmov	r0, s16
 80027ea:	f7fd feef 	bl	80005cc <__aeabi_f2d>
 80027ee:	a318      	add	r3, pc, #96	; (adr r3, 8002850 <main+0x14e0>)
 80027f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f4:	f7fd ff3e 	bl	8000674 <__aeabi_dmul>
 80027f8:	f7fe f9fe 	bl	8000bf8 <__aeabi_d2f>
 80027fc:	6038      	str	r0, [r7, #0]
 80027fe:	e668      	b.n	80024d2 <main+0x1162>

	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
 8002800:	f8d8 3000 	ldr.w	r3, [r8]
 8002804:	603b      	str	r3, [r7, #0]
 8002806:	e5ea      	b.n	80023de <main+0x106e>
	      snowoutput = 1;	     
	      sprintf(metrics[7], "Snow: True");
	  }
	  else{
	      snowoutput = 0;
	      sprintf(metrics[7], "Snow:False");
 8002808:	4a24      	ldr	r2, [pc, #144]	; (800289c <main+0x152c>)
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <main+0x14f0>)
	  else if (snow < 1.2){
	      snowoutput = 1;	     
	      sprintf(metrics[7], "Snow: True");
	  }
	  else{
	      snowoutput = 0;
 800280c:	4d15      	ldr	r5, [pc, #84]	; (8002864 <main+0x14f4>)
	      sprintf(metrics[7], "Snow:False");
 800280e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002810:	c303      	stmia	r3!, {r0, r1}
 8002812:	f823 2b02 	strh.w	r2, [r3], #2
	  else if (snow < 1.2){
	      snowoutput = 1;	     
	      sprintf(metrics[7], "Snow: True");
	  }
	  else{
	      snowoutput = 0;
 8002816:	2600      	movs	r6, #0
	      sprintf(metrics[7], "Snow:False");
 8002818:	0c12      	lsrs	r2, r2, #16
 800281a:	701a      	strb	r2, [r3, #0]
	  else if (snow < 1.2){
	      snowoutput = 1;	     
	      sprintf(metrics[7], "Snow: True");
	  }
	  else{
	      snowoutput = 0;
 800281c:	602e      	str	r6, [r5, #0]
 800281e:	e755      	b.n	80026cc <main+0x135c>
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .05){
	      snowoutput = 2;
	      sprintf(metrics[7], "Snow:  N/C");
 8002820:	4a1f      	ldr	r2, [pc, #124]	; (80028a0 <main+0x1530>)
 8002822:	4b0f      	ldr	r3, [pc, #60]	; (8002860 <main+0x14f0>)
	  if (palReadPad(GPIOC,7) == 0)
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .05){
	      snowoutput = 2;
 8002824:	4d0f      	ldr	r5, [pc, #60]	; (8002864 <main+0x14f4>)
	      sprintf(metrics[7], "Snow:  N/C");
 8002826:	ca07      	ldmia	r2, {r0, r1, r2}
 8002828:	c303      	stmia	r3!, {r0, r1}
 800282a:	f823 2b02 	strh.w	r2, [r3], #2
	  if (palReadPad(GPIOC,7) == 0)
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .05){
	      snowoutput = 2;
 800282e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	      sprintf(metrics[7], "Snow:  N/C");
 8002832:	0c12      	lsrs	r2, r2, #16
 8002834:	701a      	strb	r2, [r3, #0]
	  if (palReadPad(GPIOC,7) == 0)
	      sprintf(metrics[6],"Rain: %4.2f",rainRate);
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .05){
	      snowoutput = 2;
 8002836:	6029      	str	r1, [r5, #0]
 8002838:	e748      	b.n	80026cc <main+0x135c>
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
    adcp->adcm->CR |= ADC_CR_ADSTP;
 800283a:	689a      	ldr	r2, [r3, #8]
 800283c:	f042 0210 	orr.w	r2, r2, #16
 8002840:	609a      	str	r2, [r3, #8]
    while (adcp->adcm->CR & ADC_CR_ADSTP)
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	06d4      	lsls	r4, r2, #27
 8002846:	d4fc      	bmi.n	8002842 <main+0x14d2>
 8002848:	e78d      	b.n	8002766 <main+0x13f6>
 800284a:	bf00      	nop
 800284c:	f3af 8000 	nop.w
 8002850:	4189374c 	.word	0x4189374c
 8002854:	4001e560 	.word	0x4001e560
 8002858:	3ff33333 	.word	0x3ff33333
 800285c:	08016434 	.word	0x08016434
 8002860:	20002d68 	.word	0x20002d68
 8002864:	20002dac 	.word	0x20002dac
 8002868:	20001280 	.word	0x20001280
 800286c:	20004c1c 	.word	0x20004c1c
 8002870:	0800a120 	.word	0x0800a120
 8002874:	2000424c 	.word	0x2000424c
 8002878:	0801644c 	.word	0x0801644c
 800287c:	200042ac 	.word	0x200042ac
 8002880:	20004c18 	.word	0x20004c18
 8002884:	20005c28 	.word	0x20005c28
 8002888:	40021000 	.word	0x40021000
 800288c:	08019c00 	.word	0x08019c00
 8002890:	20002d5c 	.word	0x20002d5c
 8002894:	20002bd4 	.word	0x20002bd4
 8002898:	08016410 	.word	0x08016410
 800289c:	08016440 	.word	0x08016440
 80028a0:	08016428 	.word	0x08016428
 80028a4:	9999999a 	.word	0x9999999a
 80028a8:	3fa99999 	.word	0x3fa99999
 80028ac:	20001278 	.word	0x20001278

080028b0 <adc_lld_serve_dma_interrupt.lto_priv.42>:
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_dma_interrupt(ADCDriver *adcp, uint32_t flags) {
 80028b0:	b570      	push	{r4, r5, r6, lr}

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80028b2:	070e      	lsls	r6, r1, #28
 * @brief   ADC DMA ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void adc_lld_serve_dma_interrupt(ADCDriver *adcp, uint32_t flags) {
 80028b4:	4604      	mov	r4, r0

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80028b6:	d419      	bmi.n	80028ec <adc_lld_serve_dma_interrupt.lto_priv.42+0x3c>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
  }
  else {
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
 80028b8:	6903      	ldr	r3, [r0, #16]
 80028ba:	b1b3      	cbz	r3, 80028ea <adc_lld_serve_dma_interrupt.lto_priv.42+0x3a>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 80028bc:	078d      	lsls	r5, r1, #30
 80028be:	d512      	bpl.n	80028e6 <adc_lld_serve_dma_interrupt.lto_priv.42+0x36>
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 80028c0:	781a      	ldrb	r2, [r3, #0]
 80028c2:	2a00      	cmp	r2, #0
 80028c4:	d043      	beq.n	800294e <adc_lld_serve_dma_interrupt.lto_priv.42+0x9e>
 80028c6:	685d      	ldr	r5, [r3, #4]
 80028c8:	b17d      	cbz	r5, 80028ea <adc_lld_serve_dma_interrupt.lto_priv.42+0x3a>
 80028ca:	68c2      	ldr	r2, [r0, #12]
 80028cc:	2a01      	cmp	r2, #1
 80028ce:	d939      	bls.n	8002944 <adc_lld_serve_dma_interrupt.lto_priv.42+0x94>
 80028d0:	885b      	ldrh	r3, [r3, #2]
 80028d2:	6881      	ldr	r1, [r0, #8]
 80028d4:	0852      	lsrs	r2, r2, #1
 80028d6:	fb03 f302 	mul.w	r3, r3, r2
 80028da:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 80028de:	462b      	mov	r3, r5
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 80028e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 80028e4:	4718      	bx	r3
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80028e6:	074a      	lsls	r2, r1, #29
 80028e8:	d423      	bmi.n	8002932 <adc_lld_serve_dma_interrupt.lto_priv.42+0x82>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 80028ec:	f002 f9c8 	bl	8004c80 <adc_lld_stop_conversion>
 80028f0:	6923      	ldr	r3, [r4, #16]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d04d      	beq.n	8002994 <adc_lld_serve_dma_interrupt.lto_priv.42+0xe4>
 80028f8:	2205      	movs	r2, #5
 80028fa:	7022      	strb	r2, [r4, #0]
 80028fc:	4620      	mov	r0, r4
 80028fe:	2100      	movs	r1, #0
 8002900:	4798      	blx	r3
 8002902:	7823      	ldrb	r3, [r4, #0]
 8002904:	2b05      	cmp	r3, #5
 8002906:	bf04      	itt	eq
 8002908:	2302      	moveq	r3, #2
 800290a:	7023      	strbeq	r3, [r4, #0]
 800290c:	2300      	movs	r3, #0
 800290e:	6123      	str	r3, [r4, #16]
 8002910:	2320      	movs	r3, #32
 8002912:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002916:	f001 f8ab 	bl	8003a70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 800291a:	f104 0014 	add.w	r0, r4, #20
 800291e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002922:	f001 f845 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002926:	f001 f88b 	bl	8003a40 <_dbg_check_unlock_from_isr>
 800292a:	2300      	movs	r3, #0
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	bd70      	pop	{r4, r5, r6, pc}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d0d8      	beq.n	80028ea <adc_lld_serve_dma_interrupt.lto_priv.42+0x3a>
 8002938:	68c2      	ldr	r2, [r0, #12]
 800293a:	6881      	ldr	r1, [r0, #8]
 800293c:	0852      	lsrs	r2, r2, #1
      }
    }
  }
}
 800293e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
      }
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
 8002942:	4718      	bx	r3
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 8002944:	462b      	mov	r3, r5
 8002946:	6881      	ldr	r1, [r0, #8]
        /* Half transfer processing.*/
        _adc_isr_half_code(adcp);
      }
    }
  }
}
 8002948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* It is possible that the conversion group has already be reset by the
       ADC error handler, in this case this interrupt is spurious.*/
    if (adcp->grpp != NULL) {
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
        /* Transfer complete processing.*/
        _adc_isr_full_code(adcp);
 800294c:	4718      	bx	r3
 800294e:	f002 f997 	bl	8004c80 <adc_lld_stop_conversion>
 8002952:	6923      	ldr	r3, [r4, #16]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	b1c3      	cbz	r3, 800298a <adc_lld_serve_dma_interrupt.lto_priv.42+0xda>
 8002958:	2204      	movs	r2, #4
 800295a:	7022      	strb	r2, [r4, #0]
 800295c:	4620      	mov	r0, r4
 800295e:	68a1      	ldr	r1, [r4, #8]
 8002960:	68e2      	ldr	r2, [r4, #12]
 8002962:	4798      	blx	r3
 8002964:	7823      	ldrb	r3, [r4, #0]
 8002966:	2b04      	cmp	r3, #4
 8002968:	d00f      	beq.n	800298a <adc_lld_serve_dma_interrupt.lto_priv.42+0xda>
 800296a:	2320      	movs	r3, #32
 800296c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002970:	f001 f87e 	bl	8003a70 <_dbg_check_lock_from_isr>
 8002974:	f104 0014 	add.w	r0, r4, #20
 8002978:	2100      	movs	r1, #0
 800297a:	f001 f819 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800297e:	f001 f85f 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8002982:	2300      	movs	r3, #0
 8002984:	f383 8811 	msr	BASEPRI, r3
 8002988:	bd70      	pop	{r4, r5, r6, pc}
 800298a:	2202      	movs	r2, #2
 800298c:	2300      	movs	r3, #0
 800298e:	7022      	strb	r2, [r4, #0]
 8002990:	6123      	str	r3, [r4, #16]
 8002992:	e7ea      	b.n	800296a <adc_lld_serve_dma_interrupt.lto_priv.42+0xba>

  /* DMA errors handling.*/
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
    /* DMA, this could help only if the DMA tries to access an unmapped
       address space or violates alignment rules.*/
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8002994:	2202      	movs	r2, #2
 8002996:	6123      	str	r3, [r4, #16]
 8002998:	7022      	strb	r2, [r4, #0]
 800299a:	e7b9      	b.n	8002910 <adc_lld_serve_dma_interrupt.lto_priv.42+0x60>
 800299c:	0000      	movs	r0, r0
	...

080029a0 <_ctl.lto_priv.76>:
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80029a0:	b508      	push	{r3, lr}
  SerialDriver *sdp = (SerialDriver *)ip;

  osalDbgCheck(sdp != NULL);
 80029a2:	b118      	cbz	r0, 80029ac <_ctl.lto_priv.76+0xc>

  switch (operation) {
 80029a4:	b111      	cbz	r1, 80029ac <_ctl.lto_priv.76+0xc>
 80029a6:	2901      	cmp	r1, #1
 80029a8:	d103      	bne.n	80029b2 <_ctl.lto_priv.76+0x12>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 80029aa:	b112      	cbz	r2, 80029b2 <_ctl.lto_priv.76+0x12>
    break;
  case CHN_CTL_INVALID:
    osalDbgAssert(false, "invalid CTL operation");
 80029ac:	4802      	ldr	r0, [pc, #8]	; (80029b8 <_ctl.lto_priv.76+0x18>)
 80029ae:	f000 fe27 	bl	8003600 <chSysHalt>
#else
    break;
#endif
  }
  return MSG_OK;
}
 80029b2:	2000      	movs	r0, #0
 80029b4:	bd08      	pop	{r3, pc}
 80029b6:	bf00      	nop
 80029b8:	08016474 	.word	0x08016474
 80029bc:	00000000 	.word	0x00000000

080029c0 <adc_lld_serve_interrupt.lto_priv.116>:
 * @brief   ADC ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] isr       content of the ISR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 80029c0:	b538      	push	{r3, r4, r5, lr}

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 80029c2:	6903      	ldr	r3, [r0, #16]
 * @brief   ADC ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] isr       content of the ISR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 80029c4:	4604      	mov	r4, r0

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 80029c6:	b143      	cbz	r3, 80029da <adc_lld_serve_interrupt.lto_priv.116+0x1a>
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 80029c8:	06cb      	lsls	r3, r1, #27
 80029ca:	460d      	mov	r5, r1
 80029cc:	d406      	bmi.n	80029dc <adc_lld_serve_interrupt.lto_priv.116+0x1c>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
 80029ce:	0629      	lsls	r1, r5, #24
 80029d0:	d42e      	bmi.n	8002a30 <adc_lld_serve_interrupt.lto_priv.116+0x70>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
    }
    if (isr & ADC_ISR_AWD2) {
 80029d2:	05ea      	lsls	r2, r5, #23
 80029d4:	d451      	bmi.n	8002a7a <adc_lld_serve_interrupt.lto_priv.116+0xba>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
    }
    if (isr & ADC_ISR_AWD3) {
 80029d6:	05ab      	lsls	r3, r5, #22
 80029d8:	d474      	bmi.n	8002ac4 <adc_lld_serve_interrupt.lto_priv.116+0x104>
 80029da:	bd38      	pop	{r3, r4, r5, pc}
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
 80029dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d0f3      	beq.n	80029ce <adc_lld_serve_interrupt.lto_priv.116+0xe>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 80029e6:	f002 f94b 	bl	8004c80 <adc_lld_stop_conversion>
 80029ea:	6923      	ldr	r3, [r4, #16]
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 8097 	beq.w	8002b22 <adc_lld_serve_interrupt.lto_priv.116+0x162>
 80029f4:	2205      	movs	r2, #5
 80029f6:	7022      	strb	r2, [r4, #0]
 80029f8:	4620      	mov	r0, r4
 80029fa:	2101      	movs	r1, #1
 80029fc:	4798      	blx	r3
 80029fe:	7823      	ldrb	r3, [r4, #0]
 8002a00:	2b05      	cmp	r3, #5
 8002a02:	bf04      	itt	eq
 8002a04:	2302      	moveq	r3, #2
 8002a06:	7023      	strbeq	r3, [r4, #0]
 8002a08:	2300      	movs	r3, #0
 8002a0a:	6123      	str	r3, [r4, #16]
 8002a0c:	2320      	movs	r3, #32
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002a12:	f001 f82d 	bl	8003a70 <_dbg_check_lock_from_isr>
 8002a16:	f104 0014 	add.w	r0, r4, #20
 8002a1a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a1e:	f000 ffc7 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002a22:	f001 f80d 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8002a26:	2300      	movs	r3, #0
 8002a28:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD1) {
 8002a2c:	0629      	lsls	r1, r5, #24
 8002a2e:	d5d0      	bpl.n	80029d2 <adc_lld_serve_interrupt.lto_priv.116+0x12>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 8002a30:	4620      	mov	r0, r4
 8002a32:	f002 f925 	bl	8004c80 <adc_lld_stop_conversion>
 8002a36:	6923      	ldr	r3, [r4, #16]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d065      	beq.n	8002b0a <adc_lld_serve_interrupt.lto_priv.116+0x14a>
 8002a3e:	2205      	movs	r2, #5
 8002a40:	7022      	strb	r2, [r4, #0]
 8002a42:	4620      	mov	r0, r4
 8002a44:	2102      	movs	r1, #2
 8002a46:	4798      	blx	r3
 8002a48:	7823      	ldrb	r3, [r4, #0]
 8002a4a:	2b05      	cmp	r3, #5
 8002a4c:	bf04      	itt	eq
 8002a4e:	2302      	moveq	r3, #2
 8002a50:	7023      	strbeq	r3, [r4, #0]
 8002a52:	2300      	movs	r3, #0
 8002a54:	6123      	str	r3, [r4, #16]
 8002a56:	2320      	movs	r3, #32
 8002a58:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002a5c:	f001 f808 	bl	8003a70 <_dbg_check_lock_from_isr>
 8002a60:	f104 0014 	add.w	r0, r4, #20
 8002a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a68:	f000 ffa2 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002a6c:	f000 ffe8 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8002a70:	2300      	movs	r3, #0
 8002a72:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD2) {
 8002a76:	05ea      	lsls	r2, r5, #23
 8002a78:	d5ad      	bpl.n	80029d6 <adc_lld_serve_interrupt.lto_priv.116+0x16>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 8002a7a:	4620      	mov	r0, r4
 8002a7c:	f002 f900 	bl	8004c80 <adc_lld_stop_conversion>
 8002a80:	6923      	ldr	r3, [r4, #16]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d044      	beq.n	8002b12 <adc_lld_serve_interrupt.lto_priv.116+0x152>
 8002a88:	2205      	movs	r2, #5
 8002a8a:	7022      	strb	r2, [r4, #0]
 8002a8c:	4620      	mov	r0, r4
 8002a8e:	2103      	movs	r1, #3
 8002a90:	4798      	blx	r3
 8002a92:	7823      	ldrb	r3, [r4, #0]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	bf04      	itt	eq
 8002a98:	2302      	moveq	r3, #2
 8002a9a:	7023      	strbeq	r3, [r4, #0]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	6123      	str	r3, [r4, #16]
 8002aa0:	2320      	movs	r3, #32
 8002aa2:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002aa6:	f000 ffe3 	bl	8003a70 <_dbg_check_lock_from_isr>
 8002aaa:	f104 0014 	add.w	r0, r4, #20
 8002aae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ab2:	f000 ff7d 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002ab6:	f000 ffc3 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8002aba:	2300      	movs	r3, #0
 8002abc:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD3) {
 8002ac0:	05ab      	lsls	r3, r5, #22
 8002ac2:	d58a      	bpl.n	80029da <adc_lld_serve_interrupt.lto_priv.116+0x1a>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 8002ac4:	4620      	mov	r0, r4
 8002ac6:	f002 f8db 	bl	8004c80 <adc_lld_stop_conversion>
 8002aca:	6923      	ldr	r3, [r4, #16]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	b323      	cbz	r3, 8002b1a <adc_lld_serve_interrupt.lto_priv.116+0x15a>
 8002ad0:	2205      	movs	r2, #5
 8002ad2:	7022      	strb	r2, [r4, #0]
 8002ad4:	4620      	mov	r0, r4
 8002ad6:	2104      	movs	r1, #4
 8002ad8:	4798      	blx	r3
 8002ada:	7823      	ldrb	r3, [r4, #0]
 8002adc:	2b05      	cmp	r3, #5
 8002ade:	bf04      	itt	eq
 8002ae0:	2302      	moveq	r3, #2
 8002ae2:	7023      	strbeq	r3, [r4, #0]
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	6123      	str	r3, [r4, #16]
 8002ae8:	2320      	movs	r3, #32
 8002aea:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002aee:	f000 ffbf 	bl	8003a70 <_dbg_check_lock_from_isr>
 8002af2:	f104 0014 	add.w	r0, r4, #20
 8002af6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002afa:	f000 ff59 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002afe:	f000 ff9f 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8002b02:	2300      	movs	r3, #0
 8002b04:	f383 8811 	msr	BASEPRI, r3
 8002b08:	bd38      	pop	{r3, r4, r5, pc}
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	6123      	str	r3, [r4, #16]
 8002b0e:	7022      	strb	r2, [r4, #0]
 8002b10:	e7a1      	b.n	8002a56 <adc_lld_serve_interrupt.lto_priv.116+0x96>
    }
    if (isr & ADC_ISR_AWD2) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 8002b12:	2202      	movs	r2, #2
 8002b14:	6123      	str	r3, [r4, #16]
 8002b16:	7022      	strb	r2, [r4, #0]
 8002b18:	e7c2      	b.n	8002aa0 <adc_lld_serve_interrupt.lto_priv.116+0xe0>
    }
    if (isr & ADC_ISR_AWD3) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	6123      	str	r3, [r4, #16]
 8002b1e:	7022      	strb	r2, [r4, #0]
 8002b20:	e7e2      	b.n	8002ae8 <adc_lld_serve_interrupt.lto_priv.116+0x128>
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 8002b22:	2202      	movs	r2, #2
 8002b24:	6123      	str	r3, [r4, #16]
 8002b26:	7022      	strb	r2, [r4, #0]
 8002b28:	e770      	b.n	8002a0c <adc_lld_serve_interrupt.lto_priv.116+0x4c>
 8002b2a:	bf00      	nop
 8002b2c:	0000      	movs	r0, r0
	...

08002b30 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8002b30:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8002b32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002b36:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8002b38:	0792      	lsls	r2, r2, #30
 8002b3a:	d501      	bpl.n	8002b40 <stSetAlarm+0x10>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002b3c:	6358      	str	r0, [r3, #52]	; 0x34
 8002b3e:	bd08      	pop	{r3, pc}
 8002b40:	4801      	ldr	r0, [pc, #4]	; (8002b48 <stSetAlarm+0x18>)
 8002b42:	f000 fd5d 	bl	8003600 <chSysHalt>
 8002b46:	bf00      	nop
 8002b48:	080164c0 	.word	0x080164c0
 8002b4c:	00000000 	.word	0x00000000

08002b50 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8002b50:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8002b52:	4e11      	ldr	r6, [pc, #68]	; (8002b98 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8002b54:	2500      	movs	r5, #0
 8002b56:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 8002b5a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002b5e:	42a3      	cmp	r3, r4
 8002b60:	d20d      	bcs.n	8002b7e <__init_ram_areas+0x2e>
 8002b62:	3904      	subs	r1, #4
 8002b64:	461a      	mov	r2, r3
      *p = *tp;
 8002b66:	f851 0f04 	ldr.w	r0, [r1, #4]!
 8002b6a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 8002b6e:	42a2      	cmp	r2, r4
 8002b70:	d3f9      	bcc.n	8002b66 <__init_ram_areas+0x16>
 8002b72:	43da      	mvns	r2, r3
 8002b74:	4414      	add	r4, r2
 8002b76:	f024 0403 	bic.w	r4, r4, #3
 8002b7a:	3404      	adds	r4, #4
 8002b7c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002b7e:	68f2      	ldr	r2, [r6, #12]
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d203      	bcs.n	8002b8c <__init_ram_areas+0x3c>
      *p = 0;
 8002b84:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d3fb      	bcc.n	8002b84 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 8002b8c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8002b8e:	42be      	cmp	r6, r7
 8002b90:	d3e3      	bcc.n	8002b5a <__init_ram_areas+0xa>
#endif
}
 8002b92:	bcf0      	pop	{r4, r5, r6, r7}
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	080164d4 	.word	0x080164d4
 8002b9c:	00000000 	.word	0x00000000

08002ba0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 8002ba0:	e7fe      	b.n	8002ba0 <__default_exit>
 8002ba2:	bf00      	nop
	...

08002bb0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
	...

08002bc0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 8002bc0:	4770      	bx	lr
 8002bc2:	bf00      	nop
	...

08002bd0 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8002bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	b180      	cbz	r0, 8002bf8 <spiSend+0x28>
 8002bd6:	460d      	mov	r5, r1
 8002bd8:	b171      	cbz	r1, 8002bf8 <spiSend+0x28>
 8002bda:	4616      	mov	r6, r2
 8002bdc:	b162      	cbz	r2, 8002bf8 <spiSend+0x28>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8002bde:	6843      	ldr	r3, [r0, #4]
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	b10b      	cbz	r3, 8002be8 <spiSend+0x18>
 8002be4:	07cb      	lsls	r3, r1, #31
 8002be6:	d407      	bmi.n	8002bf8 <spiSend+0x28>
 8002be8:	2320      	movs	r3, #32
 8002bea:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002bee:	f000 ffb7 	bl	8003b60 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8002bf2:	7823      	ldrb	r3, [r4, #0]
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d002      	beq.n	8002bfe <spiSend+0x2e>
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8002bf8:	481b      	ldr	r0, [pc, #108]	; (8002c68 <spiSend+0x98>)
 8002bfa:	f000 fd01 	bl	8003600 <chSysHalt>
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiStartSendI(spip, n, txbuf);
 8002bfe:	2303      	movs	r3, #3
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8002c00:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8002c04:	7023      	strb	r3, [r4, #0]
 8002c06:	d229      	bcs.n	8002c5c <spiSend+0x8c>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002c08:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002c0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002c0c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002c0e:	685b      	ldr	r3, [r3, #4]
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002c10:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002c12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8002c14:	4f15      	ldr	r7, [pc, #84]	; (8002c6c <spiSend+0x9c>)
 8002c16:	60d7      	str	r7, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);

  dmaStreamSetMemory0(spip->dmatx, txbuf);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002c18:	f041 0180 	orr.w	r1, r1, #128	; 0x80
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8002c1c:	6055      	str	r5, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8002c1e:	6010      	str	r0, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8002c20:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8002c22:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8002c24:	6019      	str	r1, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8002c26:	6811      	ldr	r1, [r2, #0]
 8002c28:	f041 0101 	orr.w	r1, r1, #1
 8002c2c:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	f042 0201 	orr.w	r2, r2, #1
 8002c34:	601a      	str	r2, [r3, #0]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8002c36:	f104 0008 	add.w	r0, r4, #8
 8002c3a:	f002 fee1 	bl	8005a00 <chThdSuspendTimeoutS.constprop.28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002c3e:	f000 ff67 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002c42:	4b0b      	ldr	r3, [pc, #44]	; (8002c70 <spiSend+0xa0>)
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d004      	beq.n	8002c54 <spiSend+0x84>
 8002c4a:	6999      	ldr	r1, [r3, #24]
 8002c4c:	6893      	ldr	r3, [r2, #8]
 8002c4e:	688a      	ldr	r2, [r1, #8]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d306      	bcc.n	8002c62 <spiSend+0x92>
 8002c54:	2300      	movs	r3, #0
 8002c56:	f383 8811 	msr	BASEPRI, r3
 8002c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8002c5c:	4805      	ldr	r0, [pc, #20]	; (8002c74 <spiSend+0xa4>)
 8002c5e:	f000 fccf 	bl	8003600 <chSysHalt>
 8002c62:	4805      	ldr	r0, [pc, #20]	; (8002c78 <spiSend+0xa8>)
 8002c64:	f000 fccc 	bl	8003600 <chSysHalt>
 8002c68:	080164b8 	.word	0x080164b8
 8002c6c:	20002e2e 	.word	0x20002e2e
 8002c70:	200042b0 	.word	0x200042b0
 8002c74:	0801647c 	.word	0x0801647c
 8002c78:	08016820 	.word	0x08016820
 8002c7c:	00000000 	.word	0x00000000

08002c80 <spiUnselect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {
 8002c80:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8002c82:	4604      	mov	r4, r0
 8002c84:	b138      	cbz	r0, 8002c96 <spiUnselect+0x16>
 8002c86:	2320      	movs	r3, #32
 8002c88:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002c8c:	f000 ff68 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8002c90:	7823      	ldrb	r3, [r4, #0]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d002      	beq.n	8002c9c <spiUnselect+0x1c>
 *
 * @api
 */
void spiUnselect(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8002c96:	480e      	ldr	r0, [pc, #56]	; (8002cd0 <spiUnselect+0x50>)
 8002c98:	f000 fcb2 	bl	8003600 <chSysHalt>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiUnselectI(spip);
 8002c9c:	6863      	ldr	r3, [r4, #4]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	408b      	lsls	r3, r1
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	8313      	strh	r3, [r2, #24]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002caa:	f000 ff31 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002cae:	4b09      	ldr	r3, [pc, #36]	; (8002cd4 <spiUnselect+0x54>)
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d004      	beq.n	8002cc0 <spiUnselect+0x40>
 8002cb6:	6999      	ldr	r1, [r3, #24]
 8002cb8:	6893      	ldr	r3, [r2, #8]
 8002cba:	688a      	ldr	r2, [r1, #8]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d303      	bcc.n	8002cc8 <spiUnselect+0x48>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f383 8811 	msr	BASEPRI, r3
 8002cc6:	bd10      	pop	{r4, pc}
 8002cc8:	4803      	ldr	r0, [pc, #12]	; (8002cd8 <spiUnselect+0x58>)
 8002cca:	f000 fc99 	bl	8003600 <chSysHalt>
 8002cce:	bf00      	nop
 8002cd0:	08016564 	.word	0x08016564
 8002cd4:	200042b0 	.word	0x200042b0
 8002cd8:	08016820 	.word	0x08016820
 8002cdc:	00000000 	.word	0x00000000

08002ce0 <spiSelect>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {
 8002ce0:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	b138      	cbz	r0, 8002cf6 <spiSelect+0x16>
 8002ce6:	2320      	movs	r3, #32
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002cec:	f000 ff38 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8002cf0:	7823      	ldrb	r3, [r4, #0]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d002      	beq.n	8002cfc <spiSelect+0x1c>
 *
 * @api
 */
void spiSelect(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8002cf6:	480e      	ldr	r0, [pc, #56]	; (8002d30 <spiSelect+0x50>)
 8002cf8:	f000 fc82 	bl	8003600 <chSysHalt>

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
  spiSelectI(spip);
 8002cfc:	6863      	ldr	r3, [r4, #4]
 8002cfe:	68d9      	ldr	r1, [r3, #12]
 8002d00:	689a      	ldr	r2, [r3, #8]
 8002d02:	2301      	movs	r3, #1
 8002d04:	408b      	lsls	r3, r1
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	8353      	strh	r3, [r2, #26]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002d0a:	f000 ff01 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d0e:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <spiSelect+0x54>)
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d004      	beq.n	8002d20 <spiSelect+0x40>
 8002d16:	6999      	ldr	r1, [r3, #24]
 8002d18:	6893      	ldr	r3, [r2, #8]
 8002d1a:	688a      	ldr	r2, [r1, #8]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d303      	bcc.n	8002d28 <spiSelect+0x48>
 8002d20:	2300      	movs	r3, #0
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	bd10      	pop	{r4, pc}
 8002d28:	4803      	ldr	r0, [pc, #12]	; (8002d38 <spiSelect+0x58>)
 8002d2a:	f000 fc69 	bl	8003600 <chSysHalt>
 8002d2e:	bf00      	nop
 8002d30:	0801648c 	.word	0x0801648c
 8002d34:	200042b0 	.word	0x200042b0
 8002d38:	08016820 	.word	0x08016820
 8002d3c:	00000000 	.word	0x00000000

08002d40 <spiStop>:
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 *
 * @api
 */
void spiStop(SPIDriver *spip) {
 8002d40:	b510      	push	{r4, lr}

  osalDbgCheck(spip != NULL);
 8002d42:	4604      	mov	r4, r0
 8002d44:	b140      	cbz	r0, 8002d58 <spiStop+0x18>
 8002d46:	2320      	movs	r3, #32
 8002d48:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002d4c:	f000 ff08 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8002d50:	7823      	ldrb	r3, [r4, #0]
 8002d52:	1e5a      	subs	r2, r3, #1
 8002d54:	2a01      	cmp	r2, #1
 8002d56:	d902      	bls.n	8002d5e <spiStop+0x1e>
 *
 * @api
 */
void spiStop(SPIDriver *spip) {

  osalDbgCheck(spip != NULL);
 8002d58:	4821      	ldr	r0, [pc, #132]	; (8002de0 <spiStop+0xa0>)
 8002d5a:	f000 fc51 	bl	8003600 <chSysHalt>
 * @notapi
 */
void spi_lld_stop(SPIDriver *spip) {

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d015      	beq.n	8002d8e <spiStop+0x4e>

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");

  spi_lld_stop(spip);
  spip->config = NULL;
 8002d62:	2200      	movs	r2, #0
  spip->state  = SPI_STOP;
 8002d64:	2301      	movs	r3, #1

  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");

  spi_lld_stop(spip);
  spip->config = NULL;
 8002d66:	6062      	str	r2, [r4, #4]
  spip->state  = SPI_STOP;
 8002d68:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002d6a:	f000 fed1 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002d6e:	4b1d      	ldr	r3, [pc, #116]	; (8002de4 <spiStop+0xa4>)
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d004      	beq.n	8002d80 <spiStop+0x40>
 8002d76:	6999      	ldr	r1, [r3, #24]
 8002d78:	6893      	ldr	r3, [r2, #8]
 8002d7a:	688a      	ldr	r2, [r1, #8]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d303      	bcc.n	8002d88 <spiStop+0x48>
 8002d80:	2300      	movs	r3, #0
 8002d82:	f383 8811 	msr	BASEPRI, r3
 8002d86:	bd10      	pop	{r4, pc}
 8002d88:	4817      	ldr	r0, [pc, #92]	; (8002de8 <spiStop+0xa8>)
 8002d8a:	f000 fc39 	bl	8003600 <chSysHalt>

    /* SPI disable.*/
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002d8e:	69e3      	ldr	r3, [r4, #28]
    spip->spi->CR1  = 0;
    spip->spi->CR2  = 0;
    dmaStreamRelease(spip->dmarx);
 8002d90:	6a20      	ldr	r0, [r4, #32]

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {

    /* SPI disable.*/
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002d92:	681a      	ldr	r2, [r3, #0]
    spip->spi->CR1  = 0;
 8002d94:	2100      	movs	r1, #0

  /* If in ready state then disables the SPI clock.*/
  if (spip->state == SPI_READY) {

    /* SPI disable.*/
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d9a:	601a      	str	r2, [r3, #0]
    spip->spi->CR1  = 0;
 8002d9c:	6019      	str	r1, [r3, #0]
    spip->spi->CR2  = 0;
 8002d9e:	6059      	str	r1, [r3, #4]
    dmaStreamRelease(spip->dmarx);
 8002da0:	f001 fcd6 	bl	8004750 <dmaStreamRelease>
    dmaStreamRelease(spip->dmatx);
 8002da4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002da6:	f001 fcd3 	bl	8004750 <dmaStreamRelease>

#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip)
 8002daa:	4b10      	ldr	r3, [pc, #64]	; (8002dec <spiStop+0xac>)
 8002dac:	429c      	cmp	r4, r3
 8002dae:	d011      	beq.n	8002dd4 <spiStop+0x94>
      rccDisableSPI1();
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip)
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <spiStop+0xb0>)
 8002db2:	429c      	cmp	r4, r3
 8002db4:	d008      	beq.n	8002dc8 <spiStop+0x88>
      rccDisableSPI2();
#endif
#if STM32_SPI_USE_SPI3
    if (&SPID3 == spip)
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <spiStop+0xb4>)
 8002db8:	429c      	cmp	r4, r3
 8002dba:	d1d2      	bne.n	8002d62 <spiStop+0x22>
      rccDisableSPI3();
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	; (8002df8 <spiStop+0xb8>)
 8002dbe:	69d3      	ldr	r3, [r2, #28]
 8002dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002dc4:	61d3      	str	r3, [r2, #28]
 8002dc6:	e7cc      	b.n	8002d62 <spiStop+0x22>
    if (&SPID1 == spip)
      rccDisableSPI1();
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip)
      rccDisableSPI2();
 8002dc8:	4a0b      	ldr	r2, [pc, #44]	; (8002df8 <spiStop+0xb8>)
 8002dca:	69d3      	ldr	r3, [r2, #28]
 8002dcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dd0:	61d3      	str	r3, [r2, #28]
 8002dd2:	e7c6      	b.n	8002d62 <spiStop+0x22>
    dmaStreamRelease(spip->dmarx);
    dmaStreamRelease(spip->dmatx);

#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip)
      rccDisableSPI1();
 8002dd4:	4a08      	ldr	r2, [pc, #32]	; (8002df8 <spiStop+0xb8>)
 8002dd6:	6993      	ldr	r3, [r2, #24]
 8002dd8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ddc:	6193      	str	r3, [r2, #24]
 8002dde:	e7c0      	b.n	8002d62 <spiStop+0x22>
 8002de0:	080164cc 	.word	0x080164cc
 8002de4:	200042b0 	.word	0x200042b0
 8002de8:	08016820 	.word	0x08016820
 8002dec:	20002dc8 	.word	0x20002dc8
 8002df0:	20002a44 	.word	0x20002a44
 8002df4:	20002df8 	.word	0x20002df8
 8002df8:	40021000 	.word	0x40021000
 8002dfc:	00000000 	.word	0x00000000

08002e00 <spiStart>:
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] config    pointer to the @p SPIConfig object
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 8002e00:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheck((spip != NULL) && (config != NULL));
 8002e02:	4604      	mov	r4, r0
 8002e04:	b150      	cbz	r0, 8002e1c <spiStart+0x1c>
 8002e06:	460d      	mov	r5, r1
 8002e08:	b141      	cbz	r1, 8002e1c <spiStart+0x1c>
 8002e0a:	2320      	movs	r3, #32
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002e10:	f000 fea6 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8002e14:	7823      	ldrb	r3, [r4, #0]
 8002e16:	1e5a      	subs	r2, r3, #1
 8002e18:	2a01      	cmp	r2, #1
 8002e1a:	d902      	bls.n	8002e22 <spiStart+0x22>
 *
 * @api
 */
void spiStart(SPIDriver *spip, const SPIConfig *config) {

  osalDbgCheck((spip != NULL) && (config != NULL));
 8002e1c:	4853      	ldr	r0, [pc, #332]	; (8002f6c <spiStart+0x16c>)
 8002e1e:	f000 fbef 	bl	8003600 <chSysHalt>
 */
void spi_lld_start(SPIDriver *spip) {
  uint32_t ds;

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
 8002e22:	2b01      	cmp	r3, #1

  osalSysLock();
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
                "invalid state");
  spip->config = config;
 8002e24:	6065      	str	r5, [r4, #4]
 8002e26:	d048      	beq.n	8002eba <spiStart+0xba>
 8002e28:	69e0      	ldr	r0, [r4, #28]
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
 8002e2a:	8a6b      	ldrh	r3, [r5, #18]
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002e2c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8002e2e:	782e      	ldrb	r6, [r5, #0]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
  }

  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 8002e30:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8002e34:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002e38:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  /* Configuration-specific DMA setup.*/
  ds = spip->config->cr2 & SPI_CR2_DS;
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
    /* Frame width is 8 bits or smaller.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002e3a:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8002e3e:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002e42:	bf84      	itt	hi
 8002e44:	f441 61a0 	orrhi.w	r1, r1, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8002e48:	f442 62a0 	orrhi.w	r2, r2, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
  }
  else {
    /* Frame width is larger than 8 bits.*/
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002e4c:	62a1      	str	r1, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8002e4e:	62e2      	str	r2, [r4, #44]	; 0x2c
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
 8002e50:	bb4e      	cbnz	r6, 8002ea6 <spiStart+0xa6>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002e52:	f021 0124 	bic.w	r1, r1, #36	; 0x24
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002e56:	f022 0224 	bic.w	r2, r2, #36	; 0x24
  if (spip->config->circular) {
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }
  else {
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002e5a:	62a1      	str	r1, [r4, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002e5c:	62e2      	str	r2, [r4, #44]	; 0x2c
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002e5e:	8a2a      	ldrh	r2, [r5, #16]
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002e60:	6801      	ldr	r1, [r0, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8002e62:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002e66:	f042 0204 	orr.w	r2, r2, #4
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8002e6a:	f043 0307 	orr.w	r3, r3, #7
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002e6e:	b292      	uxth	r2, r2
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8002e70:	b29b      	uxth	r3, r3
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
  }

  /* SPI setup and enable.*/
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 8002e72:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002e76:	6001      	str	r1, [r0, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8002e78:	6002      	str	r2, [r0, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8002e7a:	6043      	str	r3, [r0, #4]
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
  spip->spi->CR1 |= SPI_CR1_SPE;
 8002e7c:	6803      	ldr	r3, [r0, #0]
  spi_lld_start(spip);
  spip->state = SPI_READY;
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e84:	6003      	str	r3, [r0, #0]
 8002e86:	7022      	strb	r2, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002e88:	f000 fe42 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002e8c:	4b38      	ldr	r3, [pc, #224]	; (8002f70 <spiStart+0x170>)
 8002e8e:	681a      	ldr	r2, [r3, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d004      	beq.n	8002e9e <spiStart+0x9e>
 8002e94:	6999      	ldr	r1, [r3, #24]
 8002e96:	6893      	ldr	r3, [r2, #8]
 8002e98:	688a      	ldr	r2, [r1, #8]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d30a      	bcc.n	8002eb4 <spiStart+0xb4>
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	f383 8811 	msr	BASEPRI, r3
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002ea6:	f041 0124 	orr.w	r1, r1, #36	; 0x24
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eaa:	f042 0224 	orr.w	r2, r2, #36	; 0x24
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
  }

  if (spip->config->circular) {
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eae:	62a1      	str	r1, [r4, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8002eb0:	62e2      	str	r2, [r4, #44]	; 0x2c
 8002eb2:	e7d4      	b.n	8002e5e <spiStart+0x5e>
 8002eb4:	482f      	ldr	r0, [pc, #188]	; (8002f74 <spiStart+0x174>)
 8002eb6:	f000 fba3 	bl	8003600 <chSysHalt>
  uint32_t ds;

  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <spiStart+0x178>)
 8002ebc:	429c      	cmp	r4, r3
 8002ebe:	d00f      	beq.n	8002ee0 <spiStart+0xe0>
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI1(true);
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
 8002ec0:	4b2e      	ldr	r3, [pc, #184]	; (8002f7c <spiStart+0x17c>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d024      	beq.n	8002f10 <spiStart+0x110>
      osalDbgAssert(!b, "stream already allocated");
      rccEnableSPI2(true);
    }
#endif
#if STM32_SPI_USE_SPI3
    if (&SPID3 == spip) {
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <spiStart+0x180>)
 8002ec8:	429c      	cmp	r4, r3
 8002eca:	d038      	beq.n	8002f3e <spiStart+0x13e>
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002ecc:	f104 001c 	add.w	r0, r4, #28
 8002ed0:	c80d      	ldmia	r0, {r0, r2, r3}
 8002ed2:	6851      	ldr	r1, [r2, #4]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002ed4:	685a      	ldr	r2, [r3, #4]
      rccEnableSPI6(true);
    }
#endif

    /* DMA setup.*/
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 8002ed6:	f100 030c 	add.w	r3, r0, #12
 8002eda:	608b      	str	r3, [r1, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 8002edc:	6093      	str	r3, [r2, #8]
 8002ede:	e7a4      	b.n	8002e2a <spiStart+0x2a>
  /* If in stopped state then enables the SPI and DMA clocks.*/
  if (spip->state == SPI_STOP) {
#if STM32_SPI_USE_SPI1
    if (&SPID1 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8002ee0:	6a20      	ldr	r0, [r4, #32]
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <spiStart+0x184>)
 8002ee4:	210a      	movs	r1, #10
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	f001 fc82 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002eec:	b968      	cbnz	r0, 8002f0a <spiStart+0x10a>
      b = dmaStreamAllocate(spip->dmatx,
 8002eee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002ef0:	4a25      	ldr	r2, [pc, #148]	; (8002f88 <spiStart+0x188>)
 8002ef2:	210a      	movs	r1, #10
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f001 fc7b 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002efa:	b930      	cbnz	r0, 8002f0a <spiStart+0x10a>
      rccEnableSPI1(true);
 8002efc:	4a23      	ldr	r2, [pc, #140]	; (8002f8c <spiStart+0x18c>)
 8002efe:	6865      	ldr	r5, [r4, #4]
 8002f00:	6993      	ldr	r3, [r2, #24]
 8002f02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f06:	6193      	str	r3, [r2, #24]
 8002f08:	e7e0      	b.n	8002ecc <spiStart+0xcc>
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
                            STM32_SPI_SPI1_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002f0a:	4821      	ldr	r0, [pc, #132]	; (8002f90 <spiStart+0x190>)
 8002f0c:	f000 fb78 	bl	8003600 <chSysHalt>
    }
#endif
#if STM32_SPI_USE_SPI2
    if (&SPID2 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8002f10:	6a20      	ldr	r0, [r4, #32]
 8002f12:	4a1c      	ldr	r2, [pc, #112]	; (8002f84 <spiStart+0x184>)
 8002f14:	210a      	movs	r1, #10
 8002f16:	4623      	mov	r3, r4
 8002f18:	f001 fc6a 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	d1f4      	bne.n	8002f0a <spiStart+0x10a>
      b = dmaStreamAllocate(spip->dmatx,
 8002f20:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <spiStart+0x188>)
 8002f24:	210a      	movs	r1, #10
 8002f26:	4623      	mov	r3, r4
 8002f28:	f001 fc62 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI2_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d1ec      	bne.n	8002f0a <spiStart+0x10a>
      rccEnableSPI2(true);
 8002f30:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <spiStart+0x18c>)
 8002f32:	6865      	ldr	r5, [r4, #4]
 8002f34:	69d3      	ldr	r3, [r2, #28]
 8002f36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f3a:	61d3      	str	r3, [r2, #28]
 8002f3c:	e7c6      	b.n	8002ecc <spiStart+0xcc>
    }
#endif
#if STM32_SPI_USE_SPI3
    if (&SPID3 == spip) {
      bool b;
      b = dmaStreamAllocate(spip->dmarx,
 8002f3e:	6a20      	ldr	r0, [r4, #32]
 8002f40:	4a10      	ldr	r2, [pc, #64]	; (8002f84 <spiStart+0x184>)
 8002f42:	210a      	movs	r1, #10
 8002f44:	4623      	mov	r3, r4
 8002f46:	f001 fc53 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_rx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002f4a:	2800      	cmp	r0, #0
 8002f4c:	d1dd      	bne.n	8002f0a <spiStart+0x10a>
      b = dmaStreamAllocate(spip->dmatx,
 8002f4e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002f50:	4a0d      	ldr	r2, [pc, #52]	; (8002f88 <spiStart+0x188>)
 8002f52:	210a      	movs	r1, #10
 8002f54:	4623      	mov	r3, r4
 8002f56:	f001 fc4b 	bl	80047f0 <dmaStreamAllocate>
                            STM32_SPI_SPI3_IRQ_PRIORITY,
                            (stm32_dmaisr_t)spi_lld_serve_tx_interrupt,
                            (void *)spip);
      osalDbgAssert(!b, "stream already allocated");
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d1d5      	bne.n	8002f0a <spiStart+0x10a>
      rccEnableSPI3(true);
 8002f5e:	4a0b      	ldr	r2, [pc, #44]	; (8002f8c <spiStart+0x18c>)
 8002f60:	6865      	ldr	r5, [r4, #4]
 8002f62:	69d3      	ldr	r3, [r2, #28]
 8002f64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f68:	61d3      	str	r3, [r2, #28]
 8002f6a:	e7af      	b.n	8002ecc <spiStart+0xcc>
 8002f6c:	080164ac 	.word	0x080164ac
 8002f70:	200042b0 	.word	0x200042b0
 8002f74:	08016820 	.word	0x08016820
 8002f78:	20002dc8 	.word	0x20002dc8
 8002f7c:	20002a44 	.word	0x20002a44
 8002f80:	20002df8 	.word	0x20002df8
 8002f84:	08004291 	.word	0x08004291
 8002f88:	08004271 	.word	0x08004271
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	08016554 	.word	0x08016554
	...

08002fa0 <chSysUnlock.lto_priv.77>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8002fa0:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8002fa2:	f000 fdb5 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002fa6:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <chSysUnlock.lto_priv.77+0x28>)
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d004      	beq.n	8002fb8 <chSysUnlock.lto_priv.77+0x18>
 8002fae:	6999      	ldr	r1, [r3, #24]
 8002fb0:	6893      	ldr	r3, [r2, #8]
 8002fb2:	688a      	ldr	r2, [r1, #8]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d303      	bcc.n	8002fc0 <chSysUnlock.lto_priv.77+0x20>
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	bd08      	pop	{r3, pc}
 8002fc0:	4802      	ldr	r0, [pc, #8]	; (8002fcc <chSysUnlock.lto_priv.77+0x2c>)
 8002fc2:	f000 fb1d 	bl	8003600 <chSysHalt>
 8002fc6:	bf00      	nop
 8002fc8:	200042b0 	.word	0x200042b0
 8002fcc:	08016498 	.word	0x08016498

08002fd0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(sdp != NULL);
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	b148      	cbz	r0, 8002fea <sdStart+0x1a>
 8002fd6:	460d      	mov	r5, r1
 8002fd8:	2320      	movs	r3, #32
 8002fda:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002fde:	f000 fdbf 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 8002fe2:	7a23      	ldrb	r3, [r4, #8]
 8002fe4:	1e5a      	subs	r2, r3, #1
 8002fe6:	2a01      	cmp	r2, #1
 8002fe8:	d902      	bls.n	8002ff0 <sdStart+0x20>
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {

  osalDbgCheck(sdp != NULL);
 8002fea:	4825      	ldr	r0, [pc, #148]	; (8003080 <sdStart+0xb0>)
 8002fec:	f000 fb08 	bl	8003600 <chSysHalt>
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8002ff0:	4a24      	ldr	r2, [pc, #144]	; (8003084 <sdStart+0xb4>)
 8002ff2:	2d00      	cmp	r5, #0
 8002ff4:	bf08      	it	eq
 8002ff6:	4615      	moveq	r5, r2

  if (sdp->state == SD_STOP) {
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d02a      	beq.n	8003052 <sdStart+0x82>
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8002ffc:	686a      	ldr	r2, [r5, #4]
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8002ffe:	68ae      	ldr	r6, [r5, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003000:	68e8      	ldr	r0, [r5, #12]
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8003002:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003004:	682f      	ldr	r7, [r5, #0]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8003006:	6d63      	ldr	r3, [r4, #84]	; 0x54
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8003008:	fbb1 f7f7 	udiv	r7, r1, r7

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800300c:	f442 7196 	orr.w	r1, r2, #300	; 0x12c
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003010:	f046 0540 	orr.w	r5, r6, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003014:	f040 0001 	orr.w	r0, r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8003018:	f041 0101 	orr.w	r1, r1, #1
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 800301c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8003020:	60df      	str	r7, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003022:	605d      	str	r5, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003024:	6098      	str	r0, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8003026:	6019      	str	r1, [r3, #0]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8003028:	621e      	str	r6, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 800302a:	0553      	lsls	r3, r2, #21
 800302c:	d509      	bpl.n	8003042 <sdStart+0x72>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 800302e:	f012 2210 	ands.w	r2, r2, #268439552	; 0x10001000
 8003032:	d01a      	beq.n	800306a <sdStart+0x9a>
 8003034:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003038:	d103      	bne.n	8003042 <sdStart+0x72>
    case 0:
      sdp->rxmask = 0x7F;
      break;
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
 800303a:	233f      	movs	r3, #63	; 0x3f
 800303c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8003040:	e001      	b.n	8003046 <sdStart+0x76>
    default:
      sdp->rxmask = 0xFF;
    }
  }
  else {
    sdp->rxmask = 0xFF;
 8003042:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003046:	2302      	movs	r3, #2
 8003048:	7223      	strb	r3, [r4, #8]
  osalSysUnlock();
}
 800304a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 *
 * @special
 */
static inline void osalSysUnlock(void) {

  chSysUnlock();
 800304e:	f7ff bfa7 	b.w	8002fa0 <chSysUnlock.lto_priv.77>
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 8003052:	4b0d      	ldr	r3, [pc, #52]	; (8003088 <sdStart+0xb8>)
 8003054:	429c      	cmp	r4, r3
 8003056:	d00c      	beq.n	8003072 <sdStart+0xa2>
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8003058:	4b0c      	ldr	r3, [pc, #48]	; (800308c <sdStart+0xbc>)
 800305a:	429c      	cmp	r4, r3
 800305c:	d1ce      	bne.n	8002ffc <sdStart+0x2c>
      rccEnableUSART2(true);
 800305e:	4a0c      	ldr	r2, [pc, #48]	; (8003090 <sdStart+0xc0>)
 8003060:	69d3      	ldr	r3, [r2, #28]
 8003062:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003066:	61d3      	str	r3, [r2, #28]
 8003068:	e7c8      	b.n	8002ffc <sdStart+0x2c>
  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
    case 0:
      sdp->rxmask = 0x7F;
 800306a:	237f      	movs	r3, #127	; 0x7f
 800306c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8003070:	e7e9      	b.n	8003046 <sdStart+0x76>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 8003072:	4a07      	ldr	r2, [pc, #28]	; (8003090 <sdStart+0xc0>)
 8003074:	6993      	ldr	r3, [r2, #24]
 8003076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800307a:	6193      	str	r3, [r2, #24]
 800307c:	e7be      	b.n	8002ffc <sdStart+0x2c>
 800307e:	bf00      	nop
 8003080:	080164a4 	.word	0x080164a4
 8003084:	08016454 	.word	0x08016454
 8003088:	2000424c 	.word	0x2000424c
 800308c:	20002b04 	.word	0x20002b04
 8003090:	40021000 	.word	0x40021000
	...

080030a0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b085      	sub	sp, #20
 80030a6:	4604      	mov	r4, r0
 80030a8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80030aa:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t wr = 0;

  osalDbgCheck(n > 0U);
 80030ae:	4615      	mov	r5, r2
 80030b0:	2a00      	cmp	r2, #0
 80030b2:	d075      	beq.n	80031a0 <oqWriteTimeout+0x100>
 80030b4:	460e      	mov	r6, r1
 80030b6:	2320      	movs	r3, #32
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f000 fd50 	bl	8003b60 <_dbg_check_lock>
 80030c0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80031bc <oqWriteTimeout+0x11c>
 80030c4:	2700      	movs	r7, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80030c6:	46c3      	mov	fp, r8
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80030c8:	68a3      	ldr	r3, [r4, #8]
    n = oqGetEmptyI(oqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80030ca:	6960      	ldr	r0, [r4, #20]
 80030cc:	6922      	ldr	r2, [r4, #16]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80030ce:	429d      	cmp	r5, r3
    n = oqGetEmptyI(oqp);
 80030d0:	bf8c      	ite	hi
 80030d2:	f8d4 a008 	ldrhi.w	sl, [r4, #8]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80030d6:	46aa      	movls	sl, r5
    n = oqGetEmptyI(oqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80030d8:	ebc0 0c02 	rsb	ip, r0, r2
  /*lint -restore*/
  if (n < s1) {
 80030dc:	45d4      	cmp	ip, sl
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80030de:	4631      	mov	r1, r6

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  /*lint -restore*/
  if (n < s1) {
 80030e0:	d864      	bhi.n	80031ac <oqWriteTimeout+0x10c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
 80030e2:	d33b      	bcc.n	800315c <oqWriteTimeout+0xbc>
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
    oqp->q_wrptr = oqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80030e4:	4652      	mov	r2, sl
 80030e6:	f7fd fdd7 	bl	8000c98 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 80030ea:	68e2      	ldr	r2, [r4, #12]
 80030ec:	6162      	str	r2, [r4, #20]
  }

  oqp->q_counter -= n;
 80030ee:	68a2      	ldr	r2, [r4, #8]
 80030f0:	ebca 0202 	rsb	r2, sl, r2
 80030f4:	60a2      	str	r2, [r4, #8]

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80030f6:	f1ba 0f00 	cmp.w	sl, #0
 80030fa:	d04a      	beq.n	8003192 <oqWriteTimeout+0xf2>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 80030fc:	f1b9 0f00 	cmp.w	r9, #0
 8003100:	d001      	beq.n	8003106 <oqWriteTimeout+0x66>
        nfy(oqp);
 8003102:	4620      	mov	r0, r4
 8003104:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003106:	f000 fd03 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800310a:	f8d8 2000 	ldr.w	r2, [r8]
 800310e:	4542      	cmp	r2, r8
 8003110:	d005      	beq.n	800311e <oqWriteTimeout+0x7e>
 8003112:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003116:	6892      	ldr	r2, [r2, #8]
 8003118:	6889      	ldr	r1, [r1, #8]
 800311a:	4291      	cmp	r1, r2
 800311c:	d343      	bcc.n	80031a6 <oqWriteTimeout+0x106>
 800311e:	2300      	movs	r3, #0
 8003120:	f383 8811 	msr	BASEPRI, r3
 8003124:	2220      	movs	r2, #32
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8003126:	4457      	add	r7, sl
      bp += done;
 8003128:	4456      	add	r6, sl
 800312a:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800312e:	f000 fd17 	bl	8003b60 <_dbg_check_lock>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8003132:	42bd      	cmp	r5, r7
 8003134:	d8c8      	bhi.n	80030c8 <oqWriteTimeout+0x28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003136:	f000 fceb 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800313a:	f8d8 3000 	ldr.w	r3, [r8]
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <oqWriteTimeout+0x11c>)
 8003140:	4543      	cmp	r3, r8
 8003142:	d004      	beq.n	800314e <oqWriteTimeout+0xae>
 8003144:	6992      	ldr	r2, [r2, #24]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	6892      	ldr	r2, [r2, #8]
 800314a:	429a      	cmp	r2, r3
 800314c:	d32b      	bcc.n	80031a6 <oqWriteTimeout+0x106>
 800314e:	2300      	movs	r3, #0
 8003150:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 8003154:	4638      	mov	r0, r7
 8003156:	b005      	add	sp, #20
 8003158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
    bp += s1;
    s2 = n - s1;
 800315c:	ebcc 030a 	rsb	r3, ip, sl
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003160:	4662      	mov	r2, ip
    bp += s1;
    s2 = n - s1;
 8003162:	9302      	str	r3, [sp, #8]
 8003164:	f8cd c00c 	str.w	ip, [sp, #12]
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8003168:	f7fd fd96 	bl	8000c98 <memcpy>
    bp += s1;
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800316c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003170:	9a02      	ldr	r2, [sp, #8]
 8003172:	68e0      	ldr	r0, [r4, #12]
 8003174:	eb06 010c 	add.w	r1, r6, ip
 8003178:	f7fd fd8e 	bl	8000c98 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800317c:	68e2      	ldr	r2, [r4, #12]
 800317e:	9b02      	ldr	r3, [sp, #8]
 8003180:	441a      	add	r2, r3
 8003182:	6162      	str	r2, [r4, #20]
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr = oqp->q_buffer;
  }

  oqp->q_counter -= n;
 8003184:	68a2      	ldr	r2, [r4, #8]
 8003186:	ebca 0202 	rsb	r2, sl, r2
 800318a:	60a2      	str	r2, [r4, #8]

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 800318c:	f1ba 0f00 	cmp.w	sl, #0
 8003190:	d1b4      	bne.n	80030fc <oqWriteTimeout+0x5c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 8003192:	4620      	mov	r0, r4
 8003194:	9901      	ldr	r1, [sp, #4]
 8003196:	f000 fb4b 	bl	8003830 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 800319a:	2800      	cmp	r0, #0
 800319c:	d0c9      	beq.n	8003132 <oqWriteTimeout+0x92>
 800319e:	e7ca      	b.n	8003136 <oqWriteTimeout+0x96>
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t wr = 0;

  osalDbgCheck(n > 0U);
 80031a0:	4807      	ldr	r0, [pc, #28]	; (80031c0 <oqWriteTimeout+0x120>)
 80031a2:	f000 fa2d 	bl	8003600 <chSysHalt>
 80031a6:	4807      	ldr	r0, [pc, #28]	; (80031c4 <oqWriteTimeout+0x124>)
 80031a8:	f000 fa2a 	bl	8003600 <chSysHalt>
  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  /*lint -restore*/
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80031ac:	4652      	mov	r2, sl
 80031ae:	f7fd fd73 	bl	8000c98 <memcpy>
    oqp->q_wrptr += n;
 80031b2:	6962      	ldr	r2, [r4, #20]
 80031b4:	4452      	add	r2, sl
 80031b6:	6162      	str	r2, [r4, #20]
 80031b8:	e799      	b.n	80030ee <oqWriteTimeout+0x4e>
 80031ba:	bf00      	nop
 80031bc:	200042b0 	.word	0x200042b0
 80031c0:	0801657c 	.word	0x0801657c
 80031c4:	08016570 	.word	0x08016570
	...

080031d0 <_writet.lto_priv.74>:
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80031d0:	3030      	adds	r0, #48	; 0x30
 80031d2:	f7ff bf65 	b.w	80030a0 <oqWriteTimeout>
 80031d6:	bf00      	nop
	...

080031e0 <_write.lto_priv.68>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80031e0:	3030      	adds	r0, #48	; 0x30
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031e6:	f7ff bf5b 	b.w	80030a0 <oqWriteTimeout>
 80031ea:	bf00      	nop
 80031ec:	0000      	movs	r0, r0
	...

080031f0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80031f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031f2:	4604      	mov	r4, r0
 80031f4:	460f      	mov	r7, r1
 80031f6:	4616      	mov	r6, r2
 80031f8:	2320      	movs	r3, #32
 80031fa:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80031fe:	f000 fcaf 	bl	8003b60 <_dbg_check_lock>
 8003202:	e005      	b.n	8003210 <oqPutTimeout+0x20>
 8003204:	4620      	mov	r0, r4
 8003206:	4631      	mov	r1, r6
 8003208:	f000 fb12 	bl	8003830 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800320c:	1e05      	subs	r5, r0, #0
 800320e:	db22      	blt.n	8003256 <oqPutTimeout+0x66>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8003210:	68a3      	ldr	r3, [r4, #8]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d0f6      	beq.n	8003204 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8003216:	6962      	ldr	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8003218:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800321a:	1c51      	adds	r1, r2, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800321c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800321e:	6161      	str	r1, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8003220:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8003222:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8003224:	6923      	ldr	r3, [r4, #16]
 8003226:	6962      	ldr	r2, [r4, #20]
 8003228:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800322a:	bf24      	itt	cs
 800322c:	68e3      	ldrcs	r3, [r4, #12]
 800322e:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8003230:	69e3      	ldr	r3, [r4, #28]
 8003232:	b10b      	cbz	r3, 8003238 <oqPutTimeout+0x48>
    oqp->q_notify(oqp);
 8003234:	4620      	mov	r0, r4
 8003236:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003238:	f000 fc6a 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800323c:	4b0f      	ldr	r3, [pc, #60]	; (800327c <oqPutTimeout+0x8c>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	429a      	cmp	r2, r3
 8003242:	d004      	beq.n	800324e <oqPutTimeout+0x5e>
 8003244:	6999      	ldr	r1, [r3, #24]
 8003246:	6893      	ldr	r3, [r2, #8]
 8003248:	688a      	ldr	r2, [r1, #8]
 800324a:	429a      	cmp	r2, r3
 800324c:	d313      	bcc.n	8003276 <oqPutTimeout+0x86>
 800324e:	2000      	movs	r0, #0
 8003250:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8003254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003256:	f000 fc5b 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800325a:	4b08      	ldr	r3, [pc, #32]	; (800327c <oqPutTimeout+0x8c>)
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	429a      	cmp	r2, r3
 8003260:	d004      	beq.n	800326c <oqPutTimeout+0x7c>
 8003262:	6999      	ldr	r1, [r3, #24]
 8003264:	6893      	ldr	r3, [r2, #8]
 8003266:	688a      	ldr	r2, [r1, #8]
 8003268:	429a      	cmp	r2, r3
 800326a:	d304      	bcc.n	8003276 <oqPutTimeout+0x86>
 800326c:	2300      	movs	r3, #0
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	4628      	mov	r0, r5
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003276:	4802      	ldr	r0, [pc, #8]	; (8003280 <oqPutTimeout+0x90>)
 8003278:	f000 f9c2 	bl	8003600 <chSysHalt>
 800327c:	200042b0 	.word	0x200042b0
 8003280:	08016570 	.word	0x08016570
	...

08003290 <_putt.lto_priv.72>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8003290:	3030      	adds	r0, #48	; 0x30
 8003292:	f7ff bfad 	b.w	80031f0 <oqPutTimeout>
 8003296:	bf00      	nop
	...

080032a0 <_put.lto_priv.70>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80032a0:	3030      	adds	r0, #48	; 0x30
 80032a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032a6:	f7ff bfa3 	b.w	80031f0 <oqPutTimeout>
 80032aa:	bf00      	nop
 80032ac:	0000      	movs	r0, r0
	...

080032b0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 80032b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b4:	b085      	sub	sp, #20
 80032b6:	4604      	mov	r4, r0
 80032b8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 80032ba:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t rd = 0;

  osalDbgCheck(n > 0U);
 80032be:	4615      	mov	r5, r2
 80032c0:	2a00      	cmp	r2, #0
 80032c2:	d075      	beq.n	80033b0 <iqReadTimeout+0x100>
 80032c4:	460e      	mov	r6, r1
 80032c6:	2320      	movs	r3, #32
 80032c8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80032cc:	f000 fc48 	bl	8003b60 <_dbg_check_lock>
 80032d0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80033cc <iqReadTimeout+0x11c>
 80032d4:	2700      	movs	r7, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80032d6:	46c3      	mov	fp, r8
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80032d8:	68a3      	ldr	r3, [r4, #8]
    n = iqGetFullI(iqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80032da:	69a1      	ldr	r1, [r4, #24]
 80032dc:	6922      	ldr	r2, [r4, #16]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80032de:	429d      	cmp	r5, r3
    n = iqGetFullI(iqp);
 80032e0:	bf8c      	ite	hi
 80032e2:	f8d4 a008 	ldrhi.w	sl, [r4, #8]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80032e6:	46aa      	movls	sl, r5
    n = iqGetFullI(iqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80032e8:	ebc1 0c02 	rsb	ip, r1, r2
  /*lint -restore*/
  if (n < s1) {
 80032ec:	45d4      	cmp	ip, sl
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80032ee:	4630      	mov	r0, r6

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  /*lint -restore*/
  if (n < s1) {
 80032f0:	d864      	bhi.n	80033bc <iqReadTimeout+0x10c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
 80032f2:	d33b      	bcc.n	800336c <iqReadTimeout+0xbc>
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
    iqp->q_rdptr = iqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80032f4:	4652      	mov	r2, sl
 80032f6:	f7fd fccf 	bl	8000c98 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 80032fa:	68e2      	ldr	r2, [r4, #12]
 80032fc:	61a2      	str	r2, [r4, #24]
  }

  iqp->q_counter -= n;
 80032fe:	68a2      	ldr	r2, [r4, #8]
 8003300:	ebca 0202 	rsb	r2, sl, r2
 8003304:	60a2      	str	r2, [r4, #8]

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 8003306:	f1ba 0f00 	cmp.w	sl, #0
 800330a:	d04a      	beq.n	80033a2 <iqReadTimeout+0xf2>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 800330c:	f1b9 0f00 	cmp.w	r9, #0
 8003310:	d001      	beq.n	8003316 <iqReadTimeout+0x66>
        nfy(iqp);
 8003312:	4620      	mov	r0, r4
 8003314:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003316:	f000 fbfb 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800331a:	f8d8 2000 	ldr.w	r2, [r8]
 800331e:	4542      	cmp	r2, r8
 8003320:	d005      	beq.n	800332e <iqReadTimeout+0x7e>
 8003322:	f8db 1018 	ldr.w	r1, [fp, #24]
 8003326:	6892      	ldr	r2, [r2, #8]
 8003328:	6889      	ldr	r1, [r1, #8]
 800332a:	4291      	cmp	r1, r2
 800332c:	d343      	bcc.n	80033b6 <iqReadTimeout+0x106>
 800332e:	2300      	movs	r3, #0
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	2220      	movs	r2, #32
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      rd += done;
 8003336:	4457      	add	r7, sl
      bp += done;
 8003338:	4456      	add	r6, sl
 800333a:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800333e:	f000 fc0f 	bl	8003b60 <_dbg_check_lock>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (rd < n) {
 8003342:	42bd      	cmp	r5, r7
 8003344:	d8c8      	bhi.n	80032d8 <iqReadTimeout+0x28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003346:	f000 fbe3 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800334a:	f8d8 3000 	ldr.w	r3, [r8]
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <iqReadTimeout+0x11c>)
 8003350:	4543      	cmp	r3, r8
 8003352:	d004      	beq.n	800335e <iqReadTimeout+0xae>
 8003354:	6992      	ldr	r2, [r2, #24]
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	6892      	ldr	r2, [r2, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d32b      	bcc.n	80033b6 <iqReadTimeout+0x106>
 800335e:	2300      	movs	r3, #0
 8003360:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return rd;
}
 8003364:	4638      	mov	r0, r7
 8003366:	b005      	add	sp, #20
 8003368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
    bp += s1;
    s2 = n - s1;
 800336c:	ebcc 030a 	rsb	r3, ip, sl
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003370:	4662      	mov	r2, ip
    bp += s1;
    s2 = n - s1;
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	f8cd c00c 	str.w	ip, [sp, #12]
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8003378:	f7fd fc8e 	bl	8000c98 <memcpy>
    bp += s1;
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800337c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8003380:	9a02      	ldr	r2, [sp, #8]
 8003382:	68e1      	ldr	r1, [r4, #12]
 8003384:	eb06 000c 	add.w	r0, r6, ip
 8003388:	f7fd fc86 	bl	8000c98 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800338c:	68e2      	ldr	r2, [r4, #12]
 800338e:	9b02      	ldr	r3, [sp, #8]
 8003390:	441a      	add	r2, r3
 8003392:	61a2      	str	r2, [r4, #24]
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr = iqp->q_buffer;
  }

  iqp->q_counter -= n;
 8003394:	68a2      	ldr	r2, [r4, #8]
 8003396:	ebca 0202 	rsb	r2, sl, r2
 800339a:	60a2      	str	r2, [r4, #8]

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 800339c:	f1ba 0f00 	cmp.w	sl, #0
 80033a0:	d1b4      	bne.n	800330c <iqReadTimeout+0x5c>
 80033a2:	4620      	mov	r0, r4
 80033a4:	9901      	ldr	r1, [sp, #4]
 80033a6:	f000 fa43 	bl	8003830 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80033aa:	2800      	cmp	r0, #0
 80033ac:	d0c9      	beq.n	8003342 <iqReadTimeout+0x92>
 80033ae:	e7ca      	b.n	8003346 <iqReadTimeout+0x96>
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
  qnotify_t nfy = iqp->q_notify;
  size_t rd = 0;

  osalDbgCheck(n > 0U);
 80033b0:	4807      	ldr	r0, [pc, #28]	; (80033d0 <iqReadTimeout+0x120>)
 80033b2:	f000 f925 	bl	8003600 <chSysHalt>
 80033b6:	4807      	ldr	r0, [pc, #28]	; (80033d4 <iqReadTimeout+0x124>)
 80033b8:	f000 f922 	bl	8003600 <chSysHalt>
  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  /*lint -restore*/
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80033bc:	4652      	mov	r2, sl
 80033be:	f7fd fc6b 	bl	8000c98 <memcpy>
    iqp->q_rdptr += n;
 80033c2:	69a2      	ldr	r2, [r4, #24]
 80033c4:	4452      	add	r2, sl
 80033c6:	61a2      	str	r2, [r4, #24]
 80033c8:	e799      	b.n	80032fe <iqReadTimeout+0x4e>
 80033ca:	bf00      	nop
 80033cc:	200042b0 	.word	0x200042b0
 80033d0:	08016464 	.word	0x08016464
 80033d4:	08016570 	.word	0x08016570
	...

080033e0 <_readt.lto_priv.75>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 80033e0:	300c      	adds	r0, #12
 80033e2:	f7ff bf65 	b.w	80032b0 <iqReadTimeout>
 80033e6:	bf00      	nop
	...

080033f0 <_read.lto_priv.69>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80033f0:	300c      	adds	r0, #12
 80033f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033f6:	f7ff bf5b 	b.w	80032b0 <iqReadTimeout>
 80033fa:	bf00      	nop
 80033fc:	0000      	movs	r0, r0
	...

08003400 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8003400:	b570      	push	{r4, r5, r6, lr}
 8003402:	2320      	movs	r3, #32
 8003404:	4604      	mov	r4, r0
 8003406:	460e      	mov	r6, r1
 8003408:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800340c:	f000 fba8 	bl	8003b60 <_dbg_check_lock>
 8003410:	e005      	b.n	800341e <iqGetTimeout+0x1e>
 8003412:	4620      	mov	r0, r4
 8003414:	4631      	mov	r1, r6
 8003416:	f000 fa0b 	bl	8003830 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800341a:	1e05      	subs	r5, r0, #0
 800341c:	db13      	blt.n	8003446 <iqGetTimeout+0x46>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f6      	beq.n	8003412 <iqGetTimeout+0x12>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003424:	69a1      	ldr	r1, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8003426:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8003428:	6920      	ldr	r0, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800342a:	1c4a      	adds	r2, r1, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800342c:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800342e:	4282      	cmp	r2, r0
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8003430:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8003432:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8003434:	bf28      	it	cs
 8003436:	68e3      	ldrcs	r3, [r4, #12]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8003438:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800343a:	bf28      	it	cs
 800343c:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800343e:	69e3      	ldr	r3, [r4, #28]
 8003440:	b10b      	cbz	r3, 8003446 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8003442:	4620      	mov	r0, r4
 8003444:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003446:	f000 fb63 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <iqGetTimeout+0x6c>)
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d004      	beq.n	800345c <iqGetTimeout+0x5c>
 8003452:	6999      	ldr	r1, [r3, #24]
 8003454:	6893      	ldr	r3, [r2, #8]
 8003456:	688a      	ldr	r2, [r1, #8]
 8003458:	429a      	cmp	r2, r3
 800345a:	d304      	bcc.n	8003466 <iqGetTimeout+0x66>
 800345c:	2300      	movs	r3, #0
 800345e:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8003462:	4628      	mov	r0, r5
}
 8003464:	bd70      	pop	{r4, r5, r6, pc}
 8003466:	4802      	ldr	r0, [pc, #8]	; (8003470 <iqGetTimeout+0x70>)
 8003468:	f000 f8ca 	bl	8003600 <chSysHalt>
 800346c:	200042b0 	.word	0x200042b0
 8003470:	08016570 	.word	0x08016570
	...

08003480 <_gett.lto_priv.73>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, sysinterval_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8003480:	300c      	adds	r0, #12
 8003482:	f7ff bfbd 	b.w	8003400 <iqGetTimeout>
 8003486:	bf00      	nop
	...

08003490 <_get.lto_priv.71>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 8003490:	300c      	adds	r0, #12
 8003492:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003496:	f7ff bfb3 	b.w	8003400 <iqGetTimeout>
 800349a:	bf00      	nop
 800349c:	0000      	movs	r0, r0
	...

080034a0 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
 80034a0:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80034a2:	4a0b      	ldr	r2, [pc, #44]	; (80034d0 <trace_next+0x30>)
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80034a4:	480b      	ldr	r0, [pc, #44]	; (80034d4 <trace_next+0x34>)
 80034a6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80034a8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80034ac:	6819      	ldr	r1, [r3, #0]
 80034ae:	6a64      	ldr	r4, [r4, #36]	; 0x24
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80034b0:	605c      	str	r4, [r3, #4]
 80034b2:	6840      	ldr	r0, [r0, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80034b4:	f360 211f 	bfi	r1, r0, #8, #24
 80034b8:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 80034bc:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 80034c0:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 80034c2:	bf28      	it	cs
 80034c4:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 80034c8:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 80034ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80034ce:	4770      	bx	lr
 80034d0:	200042b0 	.word	0x200042b0
 80034d4:	e0001000 	.word	0xe0001000
	...

080034e0 <_idle_thread.lto_priv.67>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 80034e0:	e7fe      	b.n	80034e0 <_idle_thread.lto_priv.67>
 80034e2:	bf00      	nop
	...

080034f0 <chTMStopMeasurementX>:
 80034f0:	4b0f      	ldr	r3, [pc, #60]	; (8003530 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80034f2:	4910      	ldr	r1, [pc, #64]	; (8003534 <chTMStopMeasurementX+0x44>)
 80034f4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80034f6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80034f8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80034fa:	f8d1 7884 	ldr.w	r7, [r1, #2180]	; 0x884
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80034fe:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003500:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003502:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 8003506:	1ad3      	subs	r3, r2, r3
 8003508:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 800350a:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 800350c:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 800350e:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8003510:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 8003514:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003516:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 800351a:	bf88      	it	hi
 800351c:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 800351e:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 8003520:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 8003522:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 8003526:	bf38      	it	cc
 8003528:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 800352a:	bcf0      	pop	{r4, r5, r6, r7}
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	e0001000 	.word	0xe0001000
 8003534:	200042b0 	.word	0x200042b0
	...

08003540 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <_trace_isr_leave+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {
 8003542:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8003544:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8003546:	f004 0402 	and.w	r4, r4, #2
 800354a:	b2a4      	uxth	r4, r4
 800354c:	b97c      	cbnz	r4, 800356e <_trace_isr_leave+0x2e>
 800354e:	2220      	movs	r2, #32
 8003550:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8003554:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003556:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8003558:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800355a:	2103      	movs	r1, #3
 800355c:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8003560:	f364 03c7 	bfi	r3, r4, #3, #5
 8003564:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 8003566:	f7ff ff9b 	bl	80034a0 <trace_next>
 800356a:	f384 8811 	msr	BASEPRI, r4
 800356e:	bd10      	pop	{r4, pc}
 8003570:	200042b0 	.word	0x200042b0
	...

08003580 <_trace_isr_enter>:
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <_trace_isr_enter+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {
 8003582:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8003584:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8003586:	f004 0402 	and.w	r4, r4, #2
 800358a:	b2a4      	uxth	r4, r4
 800358c:	b97c      	cbnz	r4, 80035ae <_trace_isr_enter+0x2e>
 800358e:	2220      	movs	r2, #32
 8003590:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8003594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003596:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8003598:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 800359a:	2102      	movs	r1, #2
 800359c:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 80035a0:	f364 03c7 	bfi	r3, r4, #3, #5
 80035a4:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 80035a6:	f7ff ff7b 	bl	80034a0 <trace_next>
 80035aa:	f384 8811 	msr	BASEPRI, r4
 80035ae:	bd10      	pop	{r4, pc}
 80035b0:	200042b0 	.word	0x200042b0
	...

080035c0 <_trace_switch>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <_trace_switch+0x34>)
 80035c2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80035c4:	07d2      	lsls	r2, r2, #31
 80035c6:	d500      	bpl.n	80035ca <_trace_switch+0xa>
 80035c8:	4770      	bx	lr
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 80035ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {
 80035cc:	b410      	push	{r4}
  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 80035ce:	699c      	ldr	r4, [r3, #24]
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 80035d0:	7813      	ldrb	r3, [r2, #0]
 80035d2:	2001      	movs	r0, #1
 80035d4:	f360 0302 	bfi	r3, r0, #0, #3
 80035d8:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 80035da:	f891 0020 	ldrb.w	r0, [r1, #32]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 80035de:	6094      	str	r4, [r2, #8]

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 80035e0:	f360 03c7 	bfi	r3, r0, #3, #5
 80035e4:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 80035e6:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80035e8:	60d3      	str	r3, [r2, #12]
    trace_next();
  }
}
 80035ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
    trace_next();
 80035ee:	f7ff bf57 	b.w	80034a0 <trace_next>
 80035f2:	bf00      	nop
 80035f4:	200042b0 	.word	0x200042b0
	...

08003600 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8003600:	b508      	push	{r3, lr}
 8003602:	4605      	mov	r5, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8003606:	4c0a      	ldr	r4, [pc, #40]	; (8003630 <chSysHalt+0x30>)
 8003608:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	b29b      	uxth	r3, r3
 8003610:	b10b      	cbz	r3, 8003616 <chSysHalt+0x16>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8003612:	62e5      	str	r5, [r4, #44]	; 0x2c
 8003614:	e7fe      	b.n	8003614 <chSysHalt+0x14>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8003616:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8003618:	780a      	ldrb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 800361a:	6088      	str	r0, [r1, #8]
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 800361c:	2004      	movs	r0, #4
 800361e:	f360 0202 	bfi	r2, r0, #0, #3
    ch.dbg.trace_buffer.ptr->state         = 0;
 8003622:	f363 02c7 	bfi	r2, r3, #3, #5
 8003626:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
    trace_next();
 8003628:	f7ff ff3a 	bl	80034a0 <trace_next>
 800362c:	e7f1      	b.n	8003612 <chSysHalt+0x12>
 800362e:	bf00      	nop
 8003630:	200042b0 	.word	0x200042b0
	...

08003640 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8003640:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <chDbgCheckClassS+0x18>)
 8003644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003646:	b91a      	cbnz	r2, 8003650 <chDbgCheckClassS+0x10>
 8003648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364a:	2b00      	cmp	r3, #0
 800364c:	dd00      	ble.n	8003650 <chDbgCheckClassS+0x10>
 800364e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8003650:	4802      	ldr	r0, [pc, #8]	; (800365c <chDbgCheckClassS+0x1c>)
 8003652:	f7ff ffd5 	bl	8003600 <chSysHalt>
 8003656:	bf00      	nop
 8003658:	200042b0 	.word	0x200042b0
 800365c:	08016608 	.word	0x08016608

08003660 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003660:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8003662:	4c11      	ldr	r4, [pc, #68]	; (80036a8 <chSchGoSleepS+0x48>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8003664:	4606      	mov	r6, r0
  thread_t *otp = currp;

  chDbgCheckClassS();
 8003666:	f7ff ffeb 	bl	8003640 <chDbgCheckClassS>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800366a:	6823      	ldr	r3, [r4, #0]
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 800366c:	69a5      	ldr	r5, [r4, #24]

  tqp->next             = tp->queue.next;
 800366e:	681a      	ldr	r2, [r3, #0]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8003670:	f885 6020 	strb.w	r6, [r5, #32]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8003674:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8003676:	6054      	str	r4, [r2, #4]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003678:	4618      	mov	r0, r3
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800367a:	f883 1020 	strb.w	r1, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800367e:	4629      	mov	r1, r5
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8003680:	6022      	str	r2, [r4, #0]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003682:	61a3      	str	r3, [r4, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003684:	f7ff ff9c 	bl	80035c0 <_trace_switch>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003688:	f3ef 8309 	mrs	r3, PSP
 800368c:	69ea      	ldr	r2, [r5, #28]
 800368e:	3b64      	subs	r3, #100	; 0x64
 8003690:	429a      	cmp	r2, r3
 8003692:	d805      	bhi.n	80036a0 <chSchGoSleepS+0x40>
 8003694:	69a0      	ldr	r0, [r4, #24]
 8003696:	4629      	mov	r1, r5
}
 8003698:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800369c:	f7fc be14 	b.w	80002c8 <_port_switch>
 80036a0:	4802      	ldr	r0, [pc, #8]	; (80036ac <chSchGoSleepS+0x4c>)
 80036a2:	f7ff ffad 	bl	8003600 <chSysHalt>
 80036a6:	bf00      	nop
 80036a8:	200042b0 	.word	0x200042b0
 80036ac:	08016610 	.word	0x08016610

080036b0 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 80036b0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80036b2:	4b05      	ldr	r3, [pc, #20]	; (80036c8 <chDbgCheckClassI+0x18>)
 80036b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	db03      	blt.n	80036c2 <chDbgCheckClassI+0x12>
 80036ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036bc:	2b00      	cmp	r3, #0
 80036be:	dd00      	ble.n	80036c2 <chDbgCheckClassI+0x12>
 80036c0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 80036c2:	4802      	ldr	r0, [pc, #8]	; (80036cc <chDbgCheckClassI+0x1c>)
 80036c4:	f7ff ff9c 	bl	8003600 <chSysHalt>
 80036c8:	200042b0 	.word	0x200042b0
 80036cc:	08016620 	.word	0x08016620

080036d0 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 80036d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036d4:	460d      	mov	r5, r1
 80036d6:	b086      	sub	sp, #24
 80036d8:	4681      	mov	r9, r0

  chDbgCheckClassS();
 80036da:	f7ff ffb1 	bl	8003640 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 80036de:	1c6b      	adds	r3, r5, #1
 80036e0:	d055      	beq.n	800378e <chSchGoSleepTimeoutS+0xbe>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 80036e2:	4f4f      	ldr	r7, [pc, #316]	; (8003820 <chSchGoSleepTimeoutS+0x150>)
 80036e4:	69bc      	ldr	r4, [r7, #24]
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 80036e6:	f7ff ffe3 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80036ea:	2d00      	cmp	r5, #0
 80036ec:	d04c      	beq.n	8003788 <chSchGoSleepTimeoutS+0xb8>
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80036ee:	46ba      	mov	sl, r7
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80036f0:	2d01      	cmp	r5, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80036f2:	f85a 6f1c 	ldr.w	r6, [sl, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 80036f6:	4a4b      	ldr	r2, [pc, #300]	; (8003824 <chSchGoSleepTimeoutS+0x154>)
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 80036f8:	9405      	str	r4, [sp, #20]
 80036fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80036fe:	bf08      	it	eq
 8003700:	2502      	moveq	r5, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003702:	4556      	cmp	r6, sl
 8003704:	6a5c      	ldr	r4, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8003706:	9204      	str	r2, [sp, #16]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8003708:	d06e      	beq.n	80037e8 <chSchGoSleepTimeoutS+0x118>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800370a:	6ab8      	ldr	r0, [r7, #40]	; 0x28

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800370c:	68b3      	ldr	r3, [r6, #8]
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 800370e:	1a24      	subs	r4, r4, r0

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8003710:	192c      	adds	r4, r5, r4
 8003712:	d245      	bcs.n	80037a0 <chSchGoSleepTimeoutS+0xd0>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8003714:	429c      	cmp	r4, r3
 8003716:	d347      	bcc.n	80037a8 <chSchGoSleepTimeoutS+0xd8>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8003718:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 800371a:	f10d 0804 	add.w	r8, sp, #4
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800371e:	d906      	bls.n	800372e <chSchGoSleepTimeoutS+0x5e>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8003720:	4546      	cmp	r6, r8
 8003722:	d031      	beq.n	8003788 <chSchGoSleepTimeoutS+0xb8>

    delta -= p->delta;
    p = p->next;
 8003724:	6836      	ldr	r6, [r6, #0]
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8003726:	1ae4      	subs	r4, r4, r3
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8003728:	68b3      	ldr	r3, [r6, #8]
 800372a:	429c      	cmp	r4, r3
 800372c:	d8f8      	bhi.n	8003720 <chSchGoSleepTimeoutS+0x50>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800372e:	6873      	ldr	r3, [r6, #4]
 8003730:	9302      	str	r3, [sp, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8003732:	9601      	str	r6, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 8003734:	f8c3 8000 	str.w	r8, [r3]
  p->prev = vtp;
 8003738:	f8c6 8004 	str.w	r8, [r6, #4]
  vtp->delta = delta;
 800373c:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800373e:	68b1      	ldr	r1, [r6, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8003740:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  vtp->prev->next = vtp;
  p->prev = vtp;
  vtp->delta = delta;

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8003744:	1b09      	subs	r1, r1, r4
 8003746:	60b1      	str	r1, [r6, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 800374a:	4648      	mov	r0, r9
 800374c:	f7ff ff88 	bl	8003660 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8003750:	f7ff ffae 	bl	80036b0 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8003754:	9b04      	ldr	r3, [sp, #16]
 8003756:	b1f3      	cbz	r3, 8003796 <chSchGoSleepTimeoutS+0xc6>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8003758:	f7ff ffaa 	bl	80036b0 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	4930      	ldr	r1, [pc, #192]	; (8003820 <chSchGoSleepTimeoutS+0x150>)
 8003760:	4543      	cmp	r3, r8
 8003762:	d026      	beq.n	80037b2 <chSchGoSleepTimeoutS+0xe2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8003764:	9a02      	ldr	r2, [sp, #8]
 8003766:	9b01      	ldr	r3, [sp, #4]
 8003768:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800376a:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 800376c:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800376e:	4553      	cmp	r3, sl
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 8003770:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8003772:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 8003774:	d00f      	beq.n	8003796 <chSchGoSleepTimeoutS+0xc6>
      vtp->next->delta += vtp->delta;
 8003776:	6899      	ldr	r1, [r3, #8]
 8003778:	9a03      	ldr	r2, [sp, #12]
 800377a:	440a      	add	r2, r1
 800377c:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 8003782:	b006      	add	sp, #24
 8003784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8003788:	4827      	ldr	r0, [pc, #156]	; (8003828 <chSchGoSleepTimeoutS+0x158>)
 800378a:	f7ff ff39 	bl	8003600 <chSysHalt>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 800378e:	4648      	mov	r0, r9
 8003790:	f7ff ff66 	bl	8003660 <chSchGoSleepS>
 8003794:	4f22      	ldr	r7, [pc, #136]	; (8003820 <chSchGoSleepTimeoutS+0x150>)
  }

  return currp->u.rdymsg;
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 800379a:	b006      	add	sp, #24
 800379c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 80037a0:	6836      	ldr	r6, [r6, #0]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80037a2:	1ae4      	subs	r4, r4, r3
 80037a4:	68b3      	ldr	r3, [r6, #8]
 80037a6:	e7b7      	b.n	8003718 <chSchGoSleepTimeoutS+0x48>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80037a8:	4420      	add	r0, r4
 80037aa:	f7ff f9c1 	bl	8002b30 <stSetAlarm>
 80037ae:	68b3      	ldr	r3, [r6, #8]
 80037b0:	e7b2      	b.n	8003718 <chSchGoSleepTimeoutS+0x48>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80037b2:	9a01      	ldr	r2, [sp, #4]
 80037b4:	61ca      	str	r2, [r1, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80037b6:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80037b8:	4552      	cmp	r2, sl
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80037ba:	f8c2 a004 	str.w	sl, [r2, #4]
  vtp->func = NULL;
 80037be:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80037c0:	d029      	beq.n	8003816 <chSchGoSleepTimeoutS+0x146>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80037c2:	6893      	ldr	r3, [r2, #8]
 80037c4:	9c03      	ldr	r4, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80037c6:	6a88      	ldr	r0, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80037c8:	4423      	add	r3, r4
 80037ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80037ce:	6093      	str	r3, [r2, #8]
 80037d0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 80037d2:	1a12      	subs	r2, r2, r0
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d9de      	bls.n	8003796 <chSchGoSleepTimeoutS+0xc6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 80037d8:	1a99      	subs	r1, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 80037da:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 80037dc:	bf98      	it	ls
 80037de:	1c93      	addls	r3, r2, #2
 80037e0:	4418      	add	r0, r3
 80037e2:	f7ff f9a5 	bl	8002b30 <stSetAlarm>
 80037e6:	e7d6      	b.n	8003796 <chSchGoSleepTimeoutS+0xc6>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 80037e8:	62bc      	str	r4, [r7, #40]	; 0x28
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;
 80037ea:	9503      	str	r5, [sp, #12]
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80037ec:	68da      	ldr	r2, [r3, #12]
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 80037ee:	9601      	str	r6, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 80037f0:	f10d 0804 	add.w	r8, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 80037f4:	f012 0202 	ands.w	r2, r2, #2
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 80037f8:	9602      	str	r6, [sp, #8]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 80037fa:	f8c7 801c 	str.w	r8, [r7, #28]
      ch.vtlist.prev = vtp;
 80037fe:	f8c7 8020 	str.w	r8, [r7, #32]
 8003802:	d105      	bne.n	8003810 <chSchGoSleepTimeoutS+0x140>

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8003804:	442c      	add	r4, r5
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8003806:	2102      	movs	r1, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8003808:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800380a:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800380c:	60d9      	str	r1, [r3, #12]
 800380e:	e79c      	b.n	800374a <chSchGoSleepTimeoutS+0x7a>
 8003810:	4806      	ldr	r0, [pc, #24]	; (800382c <chSchGoSleepTimeoutS+0x15c>)
 8003812:	f7ff fef5 	bl	8003600 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8003816:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800381a:	60d3      	str	r3, [r2, #12]
 800381c:	e7bb      	b.n	8003796 <chSchGoSleepTimeoutS+0xc6>
 800381e:	bf00      	nop
 8003820:	200042b0 	.word	0x200042b0
 8003824:	08003aa1 	.word	0x08003aa1
 8003828:	080165dc 	.word	0x080165dc
 800382c:	080165c0 	.word	0x080165c0

08003830 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8003830:	b169      	cbz	r1, 800384e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8003832:	4b08      	ldr	r3, [pc, #32]	; (8003854 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8003834:	b410      	push	{r4}
 8003836:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8003838:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800383a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800383c:	2004      	movs	r0, #4
 800383e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8003842:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8003844:	6053      	str	r3, [r2, #4]
}
 8003846:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800384a:	f7ff bf41 	b.w	80036d0 <chSchGoSleepTimeoutS>
}
 800384e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003852:	4770      	bx	lr
 8003854:	200042b0 	.word	0x200042b0
	...

08003860 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8003860:	b510      	push	{r4, lr}
 8003862:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8003864:	f7ff ff24 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8003868:	b1a4      	cbz	r4, 8003894 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800386a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800386e:	b18b      	cbz	r3, 8003894 <chSchReadyAheadI+0x34>
 8003870:	2b0f      	cmp	r3, #15
 8003872:	d00f      	beq.n	8003894 <chSchReadyAheadI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003874:	2200      	movs	r2, #0
 8003876:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8003878:	4b08      	ldr	r3, [pc, #32]	; (800389c <chSchReadyAheadI+0x3c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800387a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 800387e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8003880:	689a      	ldr	r2, [r3, #8]
 8003882:	428a      	cmp	r2, r1
 8003884:	d8fb      	bhi.n	800387e <chSchReadyAheadI+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800388a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800388c:	4620      	mov	r0, r4
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 800388e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8003890:	605c      	str	r4, [r3, #4]

  return tp;
}
 8003892:	bd10      	pop	{r4, pc}
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <chSchReadyAheadI+0x40>)
 8003896:	f7ff feb3 	bl	8003600 <chSysHalt>
 800389a:	bf00      	nop
 800389c:	200042b0 	.word	0x200042b0
 80038a0:	080165f4 	.word	0x080165f4
	...

080038b0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80038b0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80038b2:	4c10      	ldr	r4, [pc, #64]	; (80038f4 <chSchDoReschedule+0x44>)
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80038b4:	6823      	ldr	r3, [r4, #0]
 80038b6:	69a0      	ldr	r0, [r4, #24]

  tqp->next             = tp->queue.next;
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80038bc:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80038be:	6054      	str	r4, [r2, #4]
 80038c0:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80038c4:	61a3      	str	r3, [r4, #24]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 80038c6:	f7ff ffcb 	bl	8003860 <chSchReadyAheadI>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80038ca:	4601      	mov	r1, r0
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 80038cc:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80038ce:	69a0      	ldr	r0, [r4, #24]
 80038d0:	f7ff fe76 	bl	80035c0 <_trace_switch>
 80038d4:	f3ef 8309 	mrs	r3, PSP
 80038d8:	69ea      	ldr	r2, [r5, #28]
 80038da:	3b64      	subs	r3, #100	; 0x64
 80038dc:	429a      	cmp	r2, r3
 80038de:	d805      	bhi.n	80038ec <chSchDoReschedule+0x3c>
 80038e0:	69a0      	ldr	r0, [r4, #24]
 80038e2:	4629      	mov	r1, r5
}
 80038e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80038e8:	f7fc bcee 	b.w	80002c8 <_port_switch>
 80038ec:	4802      	ldr	r0, [pc, #8]	; (80038f8 <chSchDoReschedule+0x48>)
 80038ee:	f7ff fe87 	bl	8003600 <chSysHalt>
 80038f2:	bf00      	nop
 80038f4:	200042b0 	.word	0x200042b0
 80038f8:	08016610 	.word	0x08016610
 80038fc:	00000000 	.word	0x00000000

08003900 <chSchRescheduleS>:
 * @details If a thread with a higher priority than the current thread is in
 *          the ready list then make the higher priority thread running.
 *
 * @sclass
 */
void chSchRescheduleS(void) {
 8003900:	b538      	push	{r3, r4, r5, lr}
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();

  return firstprio(&ch.rlist.queue) > currp->prio;
 8003902:	4c14      	ldr	r4, [pc, #80]	; (8003954 <chSchRescheduleS+0x54>)

  chDbgCheckClassS();
 8003904:	f7ff fe9c 	bl	8003640 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8003908:	f7ff fed2 	bl	80036b0 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 800390c:	6823      	ldr	r3, [r4, #0]
 800390e:	69a0      	ldr	r0, [r4, #24]

  if (chSchIsRescRequiredI()) {
 8003910:	6899      	ldr	r1, [r3, #8]
 8003912:	6882      	ldr	r2, [r0, #8]
 8003914:	4291      	cmp	r1, r2
 8003916:	d800      	bhi.n	800391a <chSchRescheduleS+0x1a>
 8003918:	bd38      	pop	{r3, r4, r5, pc}
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	6022      	str	r2, [r4, #0]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800391e:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8003920:	6054      	str	r4, [r2, #4]
 8003922:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8003926:	61a3      	str	r3, [r4, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8003928:	f7ff ff9a 	bl	8003860 <chSchReadyAheadI>

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800392c:	4601      	mov	r1, r0
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 800392e:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003930:	69a0      	ldr	r0, [r4, #24]
 8003932:	f7ff fe45 	bl	80035c0 <_trace_switch>
 8003936:	f3ef 8309 	mrs	r3, PSP
 800393a:	69ea      	ldr	r2, [r5, #28]
 800393c:	3b64      	subs	r3, #100	; 0x64
 800393e:	429a      	cmp	r2, r3
 8003940:	d805      	bhi.n	800394e <chSchRescheduleS+0x4e>
 8003942:	69a0      	ldr	r0, [r4, #24]
 8003944:	4629      	mov	r1, r5
  chDbgCheckClassS();

  if (chSchIsRescRequiredI()) {
    chSchDoRescheduleAhead();
  }
}
 8003946:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800394a:	f7fc bcbd 	b.w	80002c8 <_port_switch>
 800394e:	4802      	ldr	r0, [pc, #8]	; (8003958 <chSchRescheduleS+0x58>)
 8003950:	f7ff fe56 	bl	8003600 <chSysHalt>
 8003954:	200042b0 	.word	0x200042b0
 8003958:	08016610 	.word	0x08016610
 800395c:	00000000 	.word	0x00000000

08003960 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8003960:	b510      	push	{r4, lr}
 8003962:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8003964:	f7ff fea4 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8003968:	b1a4      	cbz	r4, 8003994 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800396a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800396e:	b18b      	cbz	r3, 8003994 <chSchReadyI+0x34>
 8003970:	2b0f      	cmp	r3, #15
 8003972:	d00f      	beq.n	8003994 <chSchReadyI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8003974:	2200      	movs	r2, #0
 8003976:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8003978:	4b08      	ldr	r3, [pc, #32]	; (800399c <chSchReadyI+0x3c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800397a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 800397e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	428a      	cmp	r2, r1
 8003984:	d2fb      	bcs.n	800397e <chSchReadyI+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003986:	685a      	ldr	r2, [r3, #4]
 8003988:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800398a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800398c:	4620      	mov	r0, r4
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 800398e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8003990:	605c      	str	r4, [r3, #4]

  return tp;
}
 8003992:	bd10      	pop	{r4, pc}
 */
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8003994:	4802      	ldr	r0, [pc, #8]	; (80039a0 <chSchReadyI+0x40>)
 8003996:	f7ff fe33 	bl	8003600 <chSysHalt>
 800399a:	bf00      	nop
 800399c:	200042b0 	.word	0x200042b0
 80039a0:	0801658c 	.word	0x0801658c
	...

080039b0 <chThdResumeI>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 80039b0:	b508      	push	{r3, lr}

  if (*trp != NULL) {
 80039b2:	6803      	ldr	r3, [r0, #0]
 80039b4:	b173      	cbz	r3, 80039d4 <chThdResumeI+0x24>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 80039b6:	f893 2020 	ldrb.w	r2, [r3, #32]
 80039ba:	2a03      	cmp	r2, #3
 80039bc:	d002      	beq.n	80039c4 <chThdResumeI+0x14>
 80039be:	4806      	ldr	r0, [pc, #24]	; (80039d8 <chThdResumeI+0x28>)
 80039c0:	f7ff fe1e 	bl	8003600 <chSysHalt>

    *trp = NULL;
 80039c4:	2200      	movs	r2, #0
 80039c6:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
 80039c8:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 80039ca:	4618      	mov	r0, r3
  }
}
 80039cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 80039d0:	f7ff bfc6 	b.w	8003960 <chSchReadyI>
 80039d4:	bd08      	pop	{r3, pc}
 80039d6:	bf00      	nop
 80039d8:	080165a4 	.word	0x080165a4
 80039dc:	00000000 	.word	0x00000000

080039e0 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 80039e0:	b508      	push	{r3, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80039e2:	2320      	movs	r3, #32
 80039e4:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80039e8:	4a06      	ldr	r2, [pc, #24]	; (8003a04 <_dbg_check_leave_isr+0x24>)
 80039ea:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	dd01      	ble.n	80039f4 <_dbg_check_leave_isr+0x14>
 80039f0:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80039f2:	b111      	cbz	r1, 80039fa <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 80039f4:	4804      	ldr	r0, [pc, #16]	; (8003a08 <_dbg_check_leave_isr+0x28>)
 80039f6:	f7ff fe03 	bl	8003600 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 80039fa:	3b01      	subs	r3, #1
 80039fc:	6313      	str	r3, [r2, #48]	; 0x30
 80039fe:	f381 8811 	msr	BASEPRI, r1
 8003a02:	bd08      	pop	{r3, pc}
 8003a04:	200042b0 	.word	0x200042b0
 8003a08:	08016628 	.word	0x08016628
 8003a0c:	00000000 	.word	0x00000000

08003a10 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8003a10:	b508      	push	{r3, lr}
 8003a12:	2320      	movs	r3, #32
 8003a14:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <_dbg_check_enter_isr+0x24>)
 8003a1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	db01      	blt.n	8003a24 <_dbg_check_enter_isr+0x14>
 8003a20:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8003a22:	b111      	cbz	r1, 8003a2a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8003a24:	4804      	ldr	r0, [pc, #16]	; (8003a38 <_dbg_check_enter_isr+0x28>)
 8003a26:	f7ff fdeb 	bl	8003600 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2e:	f381 8811 	msr	BASEPRI, r1
 8003a32:	bd08      	pop	{r3, pc}
 8003a34:	200042b0 	.word	0x200042b0
 8003a38:	08016630 	.word	0x08016630
 8003a3c:	00000000 	.word	0x00000000

08003a40 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8003a40:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003a42:	4b06      	ldr	r3, [pc, #24]	; (8003a5c <_dbg_check_unlock_from_isr+0x1c>)
 8003a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	dd05      	ble.n	8003a56 <_dbg_check_unlock_from_isr+0x16>
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4c:	2a00      	cmp	r2, #0
 8003a4e:	dd02      	ble.n	8003a56 <_dbg_check_unlock_from_isr+0x16>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8003a50:	2200      	movs	r2, #0
 8003a52:	635a      	str	r2, [r3, #52]	; 0x34
 8003a54:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#7");
 8003a56:	4802      	ldr	r0, [pc, #8]	; (8003a60 <_dbg_check_unlock_from_isr+0x20>)
 8003a58:	f7ff fdd2 	bl	8003600 <chSysHalt>
 8003a5c:	200042b0 	.word	0x200042b0
 8003a60:	08016638 	.word	0x08016638
	...

08003a70 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8003a70:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003a72:	4b06      	ldr	r3, [pc, #24]	; (8003a8c <_dbg_check_lock_from_isr+0x1c>)
 8003a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a76:	2a00      	cmp	r2, #0
 8003a78:	dd01      	ble.n	8003a7e <_dbg_check_lock_from_isr+0xe>
 8003a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a7c:	b112      	cbz	r2, 8003a84 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 8003a7e:	4804      	ldr	r0, [pc, #16]	; (8003a90 <_dbg_check_lock_from_isr+0x20>)
 8003a80:	f7ff fdbe 	bl	8003600 <chSysHalt>
  }
  _dbg_enter_lock();
 8003a84:	2201      	movs	r2, #1
 8003a86:	635a      	str	r2, [r3, #52]	; 0x34
 8003a88:	bd08      	pop	{r3, pc}
 8003a8a:	bf00      	nop
 8003a8c:	200042b0 	.word	0x200042b0
 8003a90:	08016640 	.word	0x08016640
	...

08003aa0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	2320      	movs	r3, #32
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8003aaa:	f7ff ffe1 	bl	8003a70 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8003aae:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ab2:	2b07      	cmp	r3, #7
 8003ab4:	d810      	bhi.n	8003ad8 <wakeup+0x38>
 8003ab6:	e8df f003 	tbb	[pc, r3]
 8003aba:	0f15      	.short	0x0f15
 8003abc:	040a1b0f 	.word	0x040a1b0f
 8003ac0:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8003ac2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8003ac4:	f7ff fdf4 	bl	80036b0 <chDbgCheckClassI>

  sp->cnt++;
 8003ac8:	68ab      	ldr	r3, [r5, #8]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8003ace:	e894 000c 	ldmia.w	r4, {r2, r3}
 8003ad2:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003ad4:	6822      	ldr	r2, [r4, #0]
 8003ad6:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8003ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003adc:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003ade:	4620      	mov	r0, r4
 8003ae0:	f7ff ff3e 	bl	8003960 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8003ae4:	f7ff ffac 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f383 8811 	msr	BASEPRI, r3
 8003aee:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8003af0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003af2:	2200      	movs	r2, #0
 8003af4:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003afa:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8003afc:	4620      	mov	r0, r4
 8003afe:	f7ff ff2f 	bl	8003960 <chSchReadyI>
 8003b02:	e7ef      	b.n	8003ae4 <wakeup+0x44>
	...

08003b10 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8003b10:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8003b12:	4b05      	ldr	r3, [pc, #20]	; (8003b28 <_dbg_check_unlock+0x18>)
 8003b14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b16:	b922      	cbnz	r2, 8003b22 <_dbg_check_unlock+0x12>
 8003b18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003b1a:	2900      	cmp	r1, #0
 8003b1c:	dd01      	ble.n	8003b22 <_dbg_check_unlock+0x12>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 8003b1e:	635a      	str	r2, [r3, #52]	; 0x34
 8003b20:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#5");
 8003b22:	4802      	ldr	r0, [pc, #8]	; (8003b2c <_dbg_check_unlock+0x1c>)
 8003b24:	f7ff fd6c 	bl	8003600 <chSysHalt>
 8003b28:	200042b0 	.word	0x200042b0
 8003b2c:	08016648 	.word	0x08016648

08003b30 <chSysUnlock.lto_priv.47>:
/**
 * @brief   Leaves the kernel lock state.
 *
 * @special
 */
static inline void chSysUnlock(void) {
 8003b30:	b508      	push	{r3, lr}

  _dbg_check_unlock();
 8003b32:	f7ff ffed 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <chSysUnlock.lto_priv.47+0x28>)
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d004      	beq.n	8003b48 <chSysUnlock.lto_priv.47+0x18>
 8003b3e:	6999      	ldr	r1, [r3, #24]
 8003b40:	6893      	ldr	r3, [r2, #8]
 8003b42:	688a      	ldr	r2, [r1, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d303      	bcc.n	8003b50 <chSysUnlock.lto_priv.47+0x20>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	bd08      	pop	{r3, pc}
 8003b50:	4802      	ldr	r0, [pc, #8]	; (8003b5c <chSysUnlock.lto_priv.47+0x2c>)
 8003b52:	f7ff fd55 	bl	8003600 <chSysHalt>
 8003b56:	bf00      	nop
 8003b58:	200042b0 	.word	0x200042b0
 8003b5c:	08016670 	.word	0x08016670

08003b60 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8003b60:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <_dbg_check_lock+0x18>)
 8003b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b66:	b90a      	cbnz	r2, 8003b6c <_dbg_check_lock+0xc>
 8003b68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b6a:	b112      	cbz	r2, 8003b72 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 8003b6c:	4803      	ldr	r0, [pc, #12]	; (8003b7c <_dbg_check_lock+0x1c>)
 8003b6e:	f7ff fd47 	bl	8003600 <chSysHalt>
  }
  _dbg_enter_lock();
 8003b72:	2201      	movs	r2, #1
 8003b74:	635a      	str	r2, [r3, #52]	; 0x34
 8003b76:	bd08      	pop	{r3, pc}
 8003b78:	200042b0 	.word	0x200042b0
 8003b7c:	08016650 	.word	0x08016650

08003b80 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8003b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b84:	2320      	movs	r3, #32
 8003b86:	b085      	sub	sp, #20
 8003b88:	4680      	mov	r8, r0
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8003b8e:	4daa      	ldr	r5, [pc, #680]	; (8003e38 <chRegFindThreadByWorkingArea+0x2b8>)
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003b90:	f7ff ffe6 	bl	8003b60 <_dbg_check_lock>
 8003b94:	f8d5 a010 	ldr.w	sl, [r5, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8003b98:	f89a 3022 	ldrb.w	r3, [sl, #34]	; 0x22
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003ba2:	f7ff ffb5 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003ba6:	682b      	ldr	r3, [r5, #0]
 8003ba8:	42ab      	cmp	r3, r5
 8003baa:	d004      	beq.n	8003bb6 <chRegFindThreadByWorkingArea+0x36>
 8003bac:	69aa      	ldr	r2, [r5, #24]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d349      	bcc.n	8003c4a <chRegFindThreadByWorkingArea+0xca>
 8003bb6:	2600      	movs	r6, #0
 8003bb8:	f386 8811 	msr	BASEPRI, r6
 8003bbc:	f8df 9278 	ldr.w	r9, [pc, #632]	; 8003e38 <chRegFindThreadByWorkingArea+0x2b8>
 8003bc0:	2720      	movs	r7, #32
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8003bc2:	f8da 301c 	ldr.w	r3, [sl, #28]
 8003bc6:	4543      	cmp	r3, r8
 8003bc8:	f000 80f2 	beq.w	8003db0 <chRegFindThreadByWorkingArea+0x230>
 8003bcc:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003bd0:	f7ff ffc6 	bl	8003b60 <_dbg_check_lock>
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8003bd4:	f8da 4010 	ldr.w	r4, [sl, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8003bd8:	42ac      	cmp	r4, r5
 8003bda:	f000 80ed 	beq.w	8003db8 <chRegFindThreadByWorkingArea+0x238>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8003bde:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8003be2:	2bff      	cmp	r3, #255	; 0xff
 8003be4:	d04d      	beq.n	8003c82 <chRegFindThreadByWorkingArea+0x102>
    ntp->refs++;
 8003be6:	3301      	adds	r3, #1
 8003be8:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003bec:	f7ff ff90 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003bf0:	682b      	ldr	r3, [r5, #0]
 8003bf2:	42ab      	cmp	r3, r5
 8003bf4:	d005      	beq.n	8003c02 <chRegFindThreadByWorkingArea+0x82>
 8003bf6:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	6892      	ldr	r2, [r2, #8]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d323      	bcc.n	8003c4a <chRegFindThreadByWorkingArea+0xca>
 8003c02:	f386 8811 	msr	BASEPRI, r6
 8003c06:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003c0a:	f7ff ffa9 	bl	8003b60 <_dbg_check_lock>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8003c0e:	f89a 3022 	ldrb.w	r3, [sl, #34]	; 0x22
 8003c12:	b39b      	cbz	r3, 8003c7c <chRegFindThreadByWorkingArea+0xfc>
  tp->refs--;
 8003c14:	3b01      	subs	r3, #1
 8003c16:	f88a 3022 	strb.w	r3, [sl, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8003c1a:	f8da 3020 	ldr.w	r3, [sl, #32]
 8003c1e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8003c22:	2b0f      	cmp	r3, #15
 8003c24:	d014      	beq.n	8003c50 <chRegFindThreadByWorkingArea+0xd0>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003c26:	f7ff ff73 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003c2a:	682b      	ldr	r3, [r5, #0]
 8003c2c:	42ab      	cmp	r3, r5
 8003c2e:	d005      	beq.n	8003c3c <chRegFindThreadByWorkingArea+0xbc>
 8003c30:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	6892      	ldr	r2, [r2, #8]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d31c      	bcc.n	8003c76 <chRegFindThreadByWorkingArea+0xf6>
 8003c3c:	f386 8811 	msr	BASEPRI, r6
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8003c40:	2c00      	cmp	r4, #0
 8003c42:	f000 80c1 	beq.w	8003dc8 <chRegFindThreadByWorkingArea+0x248>
 8003c46:	46a2      	mov	sl, r4
 8003c48:	e7bb      	b.n	8003bc2 <chRegFindThreadByWorkingArea+0x42>
 8003c4a:	487c      	ldr	r0, [pc, #496]	; (8003e3c <chRegFindThreadByWorkingArea+0x2bc>)
 8003c4c:	f7ff fcd8 	bl	8003600 <chSysHalt>
    REG_REMOVE(tp);
 8003c50:	f8da 3014 	ldr.w	r3, [sl, #20]
 8003c54:	f8da 2010 	ldr.w	r2, [sl, #16]
 8003c58:	611a      	str	r2, [r3, #16]
 8003c5a:	f8da 2010 	ldr.w	r2, [sl, #16]
 8003c5e:	6153      	str	r3, [r2, #20]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003c60:	f7ff ff56 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	42ab      	cmp	r3, r5
 8003c68:	d00e      	beq.n	8003c88 <chRegFindThreadByWorkingArea+0x108>
 8003c6a:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	6892      	ldr	r2, [r2, #8]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d208      	bcs.n	8003c88 <chRegFindThreadByWorkingArea+0x108>
 8003c76:	4872      	ldr	r0, [pc, #456]	; (8003e40 <chRegFindThreadByWorkingArea+0x2c0>)
 8003c78:	f7ff fcc2 	bl	8003600 <chSysHalt>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8003c7c:	4871      	ldr	r0, [pc, #452]	; (8003e44 <chRegFindThreadByWorkingArea+0x2c4>)
 8003c7e:	f7ff fcbf 	bl	8003600 <chSysHalt>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8003c82:	4871      	ldr	r0, [pc, #452]	; (8003e48 <chRegFindThreadByWorkingArea+0x2c8>)
 8003c84:	f7ff fcbc 	bl	8003600 <chSysHalt>
 8003c88:	f386 8811 	msr	BASEPRI, r6
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8003c8c:	f89a 3021 	ldrb.w	r3, [sl, #33]	; 0x21
 8003c90:	f003 0303 	and.w	r3, r3, #3
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d02d      	beq.n	8003cf4 <chRegFindThreadByWorkingArea+0x174>
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d1d1      	bne.n	8003c40 <chRegFindThreadByWorkingArea+0xc0>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8003c9c:	f8da b040 	ldr.w	fp, [sl, #64]	; 0x40
 8003ca0:	f8da a01c 	ldr.w	sl, [sl, #28]
 8003ca4:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003ca8:	f7ff ff5a 	bl	8003b60 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8003cac:	f7ff fd00 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8003cb0:	f1bb 0f00 	cmp.w	fp, #0
 8003cb4:	f000 8085 	beq.w	8003dc2 <chRegFindThreadByWorkingArea+0x242>
 8003cb8:	f1ba 0f00 	cmp.w	sl, #0
 8003cbc:	f000 8081 	beq.w	8003dc2 <chRegFindThreadByWorkingArea+0x242>

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8003cc0:	f8db 3008 	ldr.w	r3, [fp, #8]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	ea1a 0f03 	tst.w	sl, r3
 8003cca:	d17a      	bne.n	8003dc2 <chRegFindThreadByWorkingArea+0x242>
              "unaligned object");

  php->next = mp->next;
 8003ccc:	f8db 3000 	ldr.w	r3, [fp]
 8003cd0:	f8ca 3000 	str.w	r3, [sl]
  mp->next = php;
 8003cd4:	f8cb a000 	str.w	sl, [fp]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003cd8:	f7ff ff1a 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003cdc:	682b      	ldr	r3, [r5, #0]
 8003cde:	42ab      	cmp	r3, r5
 8003ce0:	d0ac      	beq.n	8003c3c <chRegFindThreadByWorkingArea+0xbc>
 8003ce2:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	6892      	ldr	r2, [r2, #8]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d2a6      	bcs.n	8003c3c <chRegFindThreadByWorkingArea+0xbc>
 8003cee:	4857      	ldr	r0, [pc, #348]	; (8003e4c <chRegFindThreadByWorkingArea+0x2cc>)
 8003cf0:	f7ff fc86 	bl	8003600 <chSysHalt>
 8003cf4:	f8da 101c 	ldr.w	r1, [sl, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8003cf8:	2900      	cmp	r1, #0
 8003cfa:	d05f      	beq.n	8003dbc <chRegFindThreadByWorkingArea+0x23c>
 8003cfc:	074b      	lsls	r3, r1, #29
 8003cfe:	d15d      	bne.n	8003dbc <chRegFindThreadByWorkingArea+0x23c>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8003d00:	e911 000c 	ldmdb	r1, {r2, r3}
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003d04:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 8003d06:	08db      	lsrs	r3, r3, #3
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8003d08:	9200      	str	r2, [sp, #0]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8003d0a:	f841 3c04 	str.w	r3, [r1, #-4]
 8003d0e:	9101      	str	r1, [sp, #4]
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8003d10:	f102 0b0c 	add.w	fp, r2, #12
 8003d14:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003d18:	f7ff ff22 	bl	8003b60 <_dbg_check_lock>
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
 8003d1c:	f7ff fc90 	bl	8003640 <chDbgCheckClassS>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 8003d20:	f8d5 a018 	ldr.w	sl, [r5, #24]

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);
 8003d24:	9901      	ldr	r1, [sp, #4]
 8003d26:	f1bb 0f00 	cmp.w	fp, #0
 8003d2a:	d030      	beq.n	8003d8e <chRegFindThreadByWorkingArea+0x20e>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8003d2c:	9b00      	ldr	r3, [sp, #0]
 8003d2e:	6958      	ldr	r0, [r3, #20]
 8003d30:	2800      	cmp	r0, #0
 8003d32:	f000 80e3 	beq.w	8003efc <chRegFindThreadByWorkingArea+0x37c>
 8003d36:	9101      	str	r1, [sp, #4]
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 8003d38:	f8da 2008 	ldr.w	r2, [sl, #8]
 8003d3c:	6883      	ldr	r3, [r0, #8]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	f240 810e 	bls.w	8003f60 <chRegFindThreadByWorkingArea+0x3e0>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8003d44:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 8003d48:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8003d4a:	2b06      	cmp	r3, #6
 8003d4c:	d05a      	beq.n	8003e04 <chRegFindThreadByWorkingArea+0x284>
 8003d4e:	2b07      	cmp	r3, #7
 8003d50:	9901      	ldr	r1, [sp, #4]
 8003d52:	d03b      	beq.n	8003dcc <chRegFindThreadByWorkingArea+0x24c>
 8003d54:	b1f3      	cbz	r3, 8003d94 <chRegFindThreadByWorkingArea+0x214>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003d56:	465a      	mov	r2, fp
 8003d58:	e004      	b.n	8003d64 <chRegFindThreadByWorkingArea+0x1e4>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003d5a:	6890      	ldr	r0, [r2, #8]
 8003d5c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8003d60:	4298      	cmp	r0, r3
 8003d62:	d302      	bcc.n	8003d6a <chRegFindThreadByWorkingArea+0x1ea>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8003d64:	6812      	ldr	r2, [r2, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003d66:	4593      	cmp	fp, r2
 8003d68:	d1f7      	bne.n	8003d5a <chRegFindThreadByWorkingArea+0x1da>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003d6a:	6853      	ldr	r3, [r2, #4]
 8003d6c:	9101      	str	r1, [sp, #4]
 8003d6e:	e88a 000c 	stmia.w	sl, {r2, r3}
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8003d72:	2006      	movs	r0, #6
  tp->queue.prev->queue.next = tp;
 8003d74:	f8c3 a000 	str.w	sl, [r3]
  cp->queue.prev             = tp;
 8003d78:	f8c2 a004 	str.w	sl, [r2, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 8003d7c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 8003d80:	f7ff fc6e 	bl	8003660 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 8003d84:	9b00      	ldr	r3, [sp, #0]
 8003d86:	9901      	ldr	r1, [sp, #4]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	459a      	cmp	sl, r3
 8003d8c:	d066      	beq.n	8003e5c <chRegFindThreadByWorkingArea+0x2dc>
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);
 8003d8e:	4830      	ldr	r0, [pc, #192]	; (8003e50 <chRegFindThreadByWorkingArea+0x2d0>)
 8003d90:	f7ff fc36 	bl	8003600 <chSysHalt>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8003d94:	6842      	ldr	r2, [r0, #4]
 8003d96:	6803      	ldr	r3, [r0, #0]
 8003d98:	9101      	str	r1, [sp, #4]
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
 8003d9a:	f04f 0e01 	mov.w	lr, #1
 8003d9e:	f880 e020 	strb.w	lr, [r0, #32]
 8003da2:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8003da4:	6803      	ldr	r3, [r0, #0]
 8003da6:	605a      	str	r2, [r3, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 8003da8:	f7ff fdda 	bl	8003960 <chSchReadyI>
 8003dac:	9901      	ldr	r1, [sp, #4]
 8003dae:	e7d2      	b.n	8003d56 <chRegFindThreadByWorkingArea+0x1d6>
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8003db0:	4650      	mov	r0, sl
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);

  return NULL;
}
 8003db2:	b005      	add	sp, #20
 8003db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8003db8:	2400      	movs	r4, #0
 8003dba:	e717      	b.n	8003bec <chRegFindThreadByWorkingArea+0x6c>
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8003dbc:	4825      	ldr	r0, [pc, #148]	; (8003e54 <chRegFindThreadByWorkingArea+0x2d4>)
 8003dbe:	f7ff fc1f 	bl	8003600 <chSysHalt>
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));
 8003dc2:	4825      	ldr	r0, [pc, #148]	; (8003e58 <chRegFindThreadByWorkingArea+0x2d8>)
 8003dc4:	f7ff fc1c 	bl	8003600 <chSysHalt>
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);

  return NULL;
 8003dc8:	4620      	mov	r0, r4
 8003dca:	e7f2      	b.n	8003db2 <chRegFindThreadByWorkingArea+0x232>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8003dcc:	e890 1008 	ldmia.w	r0, {r3, ip}
 8003dd0:	f8cc 3000 	str.w	r3, [ip]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003dd4:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8003dd8:	6803      	ldr	r3, [r0, #0]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003dda:	9101      	str	r1, [sp, #4]
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
  tp->queue.next->queue.prev = tp->queue.prev;
 8003ddc:	f8c3 c004 	str.w	ip, [r3, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003de0:	4673      	mov	r3, lr
 8003de2:	e002      	b.n	8003dea <chRegFindThreadByWorkingArea+0x26a>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003de4:	6899      	ldr	r1, [r3, #8]
 8003de6:	428a      	cmp	r2, r1
 8003de8:	d802      	bhi.n	8003df0 <chRegFindThreadByWorkingArea+0x270>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8003dea:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003dec:	459e      	cmp	lr, r3
 8003dee:	d1f9      	bne.n	8003de4 <chRegFindThreadByWorkingArea+0x264>
 8003df0:	469c      	mov	ip, r3
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	6043      	str	r3, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8003df6:	f8c0 c000 	str.w	ip, [r0]
 8003dfa:	9901      	ldr	r1, [sp, #4]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8003dfc:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8003dfe:	f8cc 0004 	str.w	r0, [ip, #4]
 8003e02:	e7a8      	b.n	8003d56 <chRegFindThreadByWorkingArea+0x1d6>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8003e04:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003e08:	6019      	str	r1, [r3, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8003e0a:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8003e0e:	6801      	ldr	r1, [r0, #0]
 8003e10:	604b      	str	r3, [r1, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 8003e12:	4673      	mov	r3, lr
 8003e14:	e002      	b.n	8003e1c <chRegFindThreadByWorkingArea+0x29c>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003e16:	6899      	ldr	r1, [r3, #8]
 8003e18:	428a      	cmp	r2, r1
 8003e1a:	d802      	bhi.n	8003e22 <chRegFindThreadByWorkingArea+0x2a2>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8003e1c:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8003e1e:	459e      	cmp	lr, r3
 8003e20:	d1f9      	bne.n	8003e16 <chRegFindThreadByWorkingArea+0x296>
 8003e22:	469c      	mov	ip, r3
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	6043      	str	r3, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8003e28:	f8c0 c000 	str.w	ip, [r0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8003e2c:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8003e2e:	f8cc 0004 	str.w	r0, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 8003e32:	f8de 0008 	ldr.w	r0, [lr, #8]
 8003e36:	e77f      	b.n	8003d38 <chRegFindThreadByWorkingArea+0x1b8>
 8003e38:	200042b0 	.word	0x200042b0
 8003e3c:	08016688 	.word	0x08016688
 8003e40:	08016670 	.word	0x08016670
 8003e44:	08016694 	.word	0x08016694
 8003e48:	080166b0 	.word	0x080166b0
 8003e4c:	080165b4 	.word	0x080165b4
 8003e50:	080165e8 	.word	0x080165e8
 8003e54:	08016664 	.word	0x08016664
 8003e58:	08016598 	.word	0x08016598
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8003e5c:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8003e60:	459b      	cmp	fp, r3
 8003e62:	d194      	bne.n	8003d8e <chRegFindThreadByWorkingArea+0x20e>
 8003e64:	9101      	str	r1, [sp, #4]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003e66:	f7ff fe53 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003e6a:	682a      	ldr	r2, [r5, #0]
 8003e6c:	9901      	ldr	r1, [sp, #4]
 8003e6e:	42aa      	cmp	r2, r5
 8003e70:	d005      	beq.n	8003e7e <chRegFindThreadByWorkingArea+0x2fe>
 8003e72:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8003e76:	6892      	ldr	r2, [r2, #8]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d36d      	bcc.n	8003f5a <chRegFindThreadByWorkingArea+0x3da>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8003e7e:	9b00      	ldr	r3, [sp, #0]
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 8003e80:	f1a1 0008 	sub.w	r0, r1, #8
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8003e84:	f103 0e04 	add.w	lr, r3, #4
 8003e88:	f386 8811 	msr	BASEPRI, r6
 8003e8c:	4672      	mov	r2, lr

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8003e8e:	4290      	cmp	r0, r2
 8003e90:	d305      	bcc.n	8003e9e <chRegFindThreadByWorkingArea+0x31e>
 8003e92:	6853      	ldr	r3, [r2, #4]
 8003e94:	3301      	adds	r3, #1
 8003e96:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003e9a:	4298      	cmp	r0, r3
 8003e9c:	d38e      	bcc.n	8003dbc <chRegFindThreadByWorkingArea+0x23c>

    if (((qp == &heapp->header) || (hp > qp)) &&
 8003e9e:	4596      	cmp	lr, r2
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8003ea0:	6813      	ldr	r3, [r2, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 8003ea2:	d001      	beq.n	8003ea8 <chRegFindThreadByWorkingArea+0x328>
 8003ea4:	4290      	cmp	r0, r2
 8003ea6:	d927      	bls.n	8003ef8 <chRegFindThreadByWorkingArea+0x378>
 8003ea8:	b10b      	cbz	r3, 8003eae <chRegFindThreadByWorkingArea+0x32e>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8003eaa:	4298      	cmp	r0, r3
 8003eac:	d224      	bcs.n	8003ef8 <chRegFindThreadByWorkingArea+0x378>
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8003eae:	f851 ac04 	ldr.w	sl, [r1, #-4]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 8003eb2:	f841 3c08 	str.w	r3, [r1, #-8]
      H_NEXT(qp) = hp;
 8003eb6:	6010      	str	r0, [r2, #0]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 8003eb8:	f10a 0e01 	add.w	lr, sl, #1
 8003ebc:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003ec0:	eb00 0cce 	add.w	ip, r0, lr, lsl #3
 8003ec4:	459c      	cmp	ip, r3
 8003ec6:	f000 8082 	beq.w	8003fce <chRegFindThreadByWorkingArea+0x44e>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 8003eca:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8003ece:	f10e 0301 	add.w	r3, lr, #1
 8003ed2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003ed6:	4298      	cmp	r0, r3
 8003ed8:	d06d      	beq.n	8003fb6 <chRegFindThreadByWorkingArea+0x436>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8003eda:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8003ede:	f387 8811 	msr	BASEPRI, r7
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003ee2:	f7ff fe3d 	bl	8003b60 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8003ee6:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 8003eea:	b112      	cbz	r2, 8003ef2 <chRegFindThreadByWorkingArea+0x372>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 8003eec:	6893      	ldr	r3, [r2, #8]
 8003eee:	459a      	cmp	sl, r3
 8003ef0:	d038      	beq.n	8003f64 <chRegFindThreadByWorkingArea+0x3e4>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8003ef2:	483d      	ldr	r0, [pc, #244]	; (8003fe8 <chRegFindThreadByWorkingArea+0x468>)
 8003ef4:	f7ff fb84 	bl	8003600 <chSysHalt>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8003ef8:	461a      	mov	r2, r3
 8003efa:	e7c8      	b.n	8003e8e <chRegFindThreadByWorkingArea+0x30e>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 8003efc:	9800      	ldr	r0, [sp, #0]
    mp->next = ctp->mtxlist;
 8003efe:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8003f02:	6183      	str	r3, [r0, #24]
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 8003f04:	f8c0 a014 	str.w	sl, [r0, #20]
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
 8003f08:	f8ca b038 	str.w	fp, [sl, #56]	; 0x38
 8003f0c:	e7aa      	b.n	8003e64 <chRegFindThreadByWorkingArea+0x2e4>
 8003f0e:	4654      	mov	r4, sl
 8003f10:	f8dd a004 	ldr.w	sl, [sp, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 8003f14:	f8d3 e038 	ldr.w	lr, [r3, #56]	; 0x38
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4641      	mov	r1, r8
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8003f1c:	f8ca 1008 	str.w	r1, [sl, #8]
 8003f20:	9900      	ldr	r1, [sp, #0]
 8003f22:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8003f26:	60ca      	str	r2, [r1, #12]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8003f28:	4618      	mov	r0, r3
  tqp->next->queue.prev = (thread_t *)tqp;
 8003f2a:	f8c2 b004 	str.w	fp, [r2, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8003f2e:	614b      	str	r3, [r1, #20]
      mp->next = tp->mtxlist;
 8003f30:	f8c1 e018 	str.w	lr, [r1, #24]
      tp->mtxlist = mp;
 8003f34:	f8c3 b038 	str.w	fp, [r3, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8003f38:	f7ff fd12 	bl	8003960 <chSchReadyI>
      chSchRescheduleS();
 8003f3c:	f7ff fce0 	bl	8003900 <chSchRescheduleS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8003f40:	f7ff fde6 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8003f44:	682b      	ldr	r3, [r5, #0]
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	f43f ae78 	beq.w	8003c3c <chRegFindThreadByWorkingArea+0xbc>
 8003f4c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	6892      	ldr	r2, [r2, #8]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	f4bf ae71 	bcs.w	8003c3c <chRegFindThreadByWorkingArea+0xbc>
 8003f5a:	4824      	ldr	r0, [pc, #144]	; (8003fec <chRegFindThreadByWorkingArea+0x46c>)
 8003f5c:	f7ff fb50 	bl	8003600 <chSysHalt>
 8003f60:	9901      	ldr	r1, [sp, #4]
 8003f62:	e6f8      	b.n	8003d56 <chRegFindThreadByWorkingArea+0x1d6>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 8003f64:	4593      	cmp	fp, r2
 8003f66:	d1c4      	bne.n	8003ef2 <chRegFindThreadByWorkingArea+0x372>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 8003f68:	9b00      	ldr	r3, [sp, #0]
 8003f6a:	699a      	ldr	r2, [r3, #24]
 8003f6c:	f8ca 2038 	str.w	r2, [sl, #56]	; 0x38
 8003f70:	9202      	str	r2, [sp, #8]
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8003f72:	f7ff fb65 	bl	8003640 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8003f76:	9b00      	ldr	r3, [sp, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 8003f7a:	459b      	cmp	fp, r3
 8003f7c:	d018      	beq.n	8003fb0 <chRegFindThreadByWorkingArea+0x430>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8003f7e:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 8003f82:	9a02      	ldr	r2, [sp, #8]
 8003f84:	f8cd a004 	str.w	sl, [sp, #4]
 8003f88:	f8cd 8008 	str.w	r8, [sp, #8]
 8003f8c:	46a2      	mov	sl, r4
 8003f8e:	4688      	mov	r8, r1
 8003f90:	4614      	mov	r4, r2
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 8003f92:	2c00      	cmp	r4, #0
 8003f94:	d0bb      	beq.n	8003f0e <chRegFindThreadByWorkingArea+0x38e>
 8003f96:	9303      	str	r3, [sp, #12]
 8003f98:	f7ff fb52 	bl	8003640 <chDbgCheckClassS>
 8003f9c:	6822      	ldr	r2, [r4, #0]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 8003f9e:	9b03      	ldr	r3, [sp, #12]
 8003fa0:	4294      	cmp	r4, r2
 8003fa2:	d003      	beq.n	8003fac <chRegFindThreadByWorkingArea+0x42c>
            (lmp->queue.next->prio > newprio)) {
 8003fa4:	6892      	ldr	r2, [r2, #8]
 8003fa6:	4590      	cmp	r8, r2
 8003fa8:	bf38      	it	cc
 8003faa:	4690      	movcc	r8, r2
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8003fac:	68e4      	ldr	r4, [r4, #12]
 8003fae:	e7f0      	b.n	8003f92 <chRegFindThreadByWorkingArea+0x412>
         just changed priority.*/
      (void) chSchReadyI(tp);
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 8003fb0:	9b00      	ldr	r3, [sp, #0]
 8003fb2:	615e      	str	r6, [r3, #20]
 8003fb4:	e7c4      	b.n	8003f40 <chRegFindThreadByWorkingArea+0x3c0>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8003fb6:	f851 0c04 	ldr.w	r0, [r1, #-4]
        H_NEXT(qp) = H_NEXT(hp);
 8003fba:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003fbe:	6013      	str	r3, [r2, #0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8003fc0:	eb0e 0300 	add.w	r3, lr, r0
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	6053      	str	r3, [r2, #4]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8003fc8:	f8d5 a018 	ldr.w	sl, [r5, #24]
 8003fcc:	e787      	b.n	8003ede <chRegFindThreadByWorkingArea+0x35e>
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8003fce:	f8dc c004 	ldr.w	ip, [ip, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 8003fd2:	f850 303e 	ldr.w	r3, [r0, lr, lsl #3]
 8003fd6:	f841 3c08 	str.w	r3, [r1, #-8]
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8003fda:	eb0c 030a 	add.w	r3, ip, sl
 8003fde:	3301      	adds	r3, #1
 8003fe0:	f841 3c04 	str.w	r3, [r1, #-4]
 8003fe4:	e771      	b.n	8003eca <chRegFindThreadByWorkingArea+0x34a>
 8003fe6:	bf00      	nop
 8003fe8:	080166a4 	.word	0x080166a4
 8003fec:	0801667c 	.word	0x0801667c

08003ff0 <chThdSleep>:
 *                      - @a TIME_IMMEDIATE this value is not allowed.
 *                      .
 *
 * @api
 */
void chThdSleep(sysinterval_t time) {
 8003ff0:	b510      	push	{r4, lr}
 8003ff2:	2320      	movs	r3, #32
 8003ff4:	4604      	mov	r4, r0
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8003ffa:	f7ff fdb1 	bl	8003b60 <_dbg_check_lock>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 8003ffe:	b1ac      	cbz	r4, 800402c <chThdSleep+0x3c>

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8004000:	4621      	mov	r1, r4
 8004002:	2008      	movs	r0, #8
 8004004:	f7ff fb64 	bl	80036d0 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8004008:	f7ff fd82 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800400c:	4b09      	ldr	r3, [pc, #36]	; (8004034 <chThdSleep+0x44>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d004      	beq.n	800401e <chThdSleep+0x2e>
 8004014:	6999      	ldr	r1, [r3, #24]
 8004016:	6893      	ldr	r3, [r2, #8]
 8004018:	688a      	ldr	r2, [r1, #8]
 800401a:	429a      	cmp	r2, r3
 800401c:	d303      	bcc.n	8004026 <chThdSleep+0x36>
 800401e:	2300      	movs	r3, #0
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	bd10      	pop	{r4, pc}
 8004026:	4804      	ldr	r0, [pc, #16]	; (8004038 <chThdSleep+0x48>)
 8004028:	f7ff faea 	bl	8003600 <chSysHalt>
 *
 * @sclass
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);
 800402c:	4803      	ldr	r0, [pc, #12]	; (800403c <chThdSleep+0x4c>)
 800402e:	f7ff fae7 	bl	8003600 <chSysHalt>
 8004032:	bf00      	nop
 8004034:	200042b0 	.word	0x200042b0
 8004038:	08016670 	.word	0x08016670
 800403c:	08016658 	.word	0x08016658

08004040 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8004040:	b508      	push	{r3, lr}
 8004042:	4605      	mov	r5, r0
 8004044:	2320      	movs	r3, #32
 8004046:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800404a:	f7ff fd89 	bl	8003b60 <_dbg_check_lock>
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 800404e:	4b10      	ldr	r3, [pc, #64]	; (8004090 <chThdExit+0x50>)
 8004050:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004052:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8004054:	6265      	str	r5, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004056:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800405a:	42a8      	cmp	r0, r5
 800405c:	d006      	beq.n	800406c <chThdExit+0x2c>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 800405e:	6803      	ldr	r3, [r0, #0]
 8004060:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8004062:	f7ff fc7d 	bl	8003960 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8004066:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8004068:	42a8      	cmp	r0, r5
 800406a:	d1f8      	bne.n	800405e <chThdExit+0x1e>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 800406c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004070:	b943      	cbnz	r3, 8004084 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8004072:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8004076:	079b      	lsls	r3, r3, #30
 8004078:	d104      	bne.n	8004084 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 800407a:	6963      	ldr	r3, [r4, #20]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	611a      	str	r2, [r3, #16]
 8004080:	6922      	ldr	r2, [r4, #16]
 8004082:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8004084:	200f      	movs	r0, #15
 8004086:	f7ff faeb 	bl	8003660 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 800408a:	4802      	ldr	r0, [pc, #8]	; (8004094 <chThdExit+0x54>)
 800408c:	f7ff fab8 	bl	8003600 <chSysHalt>
 8004090:	200042b0 	.word	0x200042b0
 8004094:	080165d0 	.word	0x080165d0
	...

080040a0 <notify2.lto_priv.65>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80040a0:	4a02      	ldr	r2, [pc, #8]	; (80040ac <notify2.lto_priv.65+0xc>)
 80040a2:	6813      	ldr	r3, [r2, #0]
 80040a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4770      	bx	lr
 80040ac:	40004400 	.word	0x40004400

080040b0 <notify1.lto_priv.64>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 80040b0:	4a02      	ldr	r2, [pc, #8]	; (80040bc <notify1.lto_priv.64+0xc>)
 80040b2:	6813      	ldr	r3, [r2, #0]
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	6013      	str	r3, [r2, #0]
 80040ba:	4770      	bx	lr
 80040bc:	40013800 	.word	0x40013800

080040c0 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80040c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
 80040c4:	6d46      	ldr	r6, [r0, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 80040c6:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 80040c8:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 80040ca:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 80040cc:	0723      	lsls	r3, r4, #28
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 80040ce:	4605      	mov	r5, r0
  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 80040d0:	d144      	bne.n	800415c <serve_interrupt+0x9c>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 80040d2:	05e3      	lsls	r3, r4, #23
 80040d4:	d465      	bmi.n	80041a2 <serve_interrupt+0xe2>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 80040d6:	06a0      	lsls	r0, r4, #26
 80040d8:	d474      	bmi.n	80041c4 <serve_interrupt+0x104>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 80040da:	0639      	lsls	r1, r7, #24
 80040dc:	d403      	bmi.n	80040e6 <serve_interrupt+0x26>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 80040de:	0663      	lsls	r3, r4, #25
 80040e0:	d429      	bmi.n	8004136 <serve_interrupt+0x76>
 80040e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 80040e6:	0622      	lsls	r2, r4, #24
 80040e8:	d5f9      	bpl.n	80040de <serve_interrupt+0x1e>
 80040ea:	2320      	movs	r3, #32
 80040ec:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80040f0:	f7ff fcbe 	bl	8003a70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 80040f4:	f7ff fadc 	bl	80036b0 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80040f8:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80040fa:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80040fc:	429a      	cmp	r2, r3
 80040fe:	f000 80a3 	beq.w	8004248 <serve_interrupt+0x188>
    uint8_t b;

    oqp->q_counter++;
 8004102:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8004104:	6c29      	ldr	r1, [r5, #64]	; 0x40
  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
    b = *oqp->q_rdptr++;
 8004106:	1c58      	adds	r0, r3, #1

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
 8004108:	3201      	adds	r2, #1
 800410a:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800410c:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800410e:	4288      	cmp	r0, r1
  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
    b = *oqp->q_rdptr++;
 8004110:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 8004114:	d301      	bcc.n	800411a <serve_interrupt+0x5a>
      oqp->q_rdptr = oqp->q_buffer;
 8004116:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8004118:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 800411a:	f105 0030 	add.w	r0, r5, #48	; 0x30
 800411e:	f001 fc57 	bl	80059d0 <chThdDequeueNextI.constprop.36>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 8004122:	fa1f f388 	uxth.w	r3, r8
 8004126:	8533      	strh	r3, [r6, #40]	; 0x28
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004128:	f7ff fc8a 	bl	8003a40 <_dbg_check_unlock_from_isr>
 800412c:	2300      	movs	r3, #0
 800412e:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 8004132:	0663      	lsls	r3, r4, #25
 8004134:	d5d5      	bpl.n	80040e2 <serve_interrupt+0x22>
 8004136:	2320      	movs	r3, #32
 8004138:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800413c:	f7ff fc98 	bl	8003a70 <_dbg_check_lock_from_isr>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8004140:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8004142:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8004144:	429a      	cmp	r2, r3
 8004146:	d06e      	beq.n	8004226 <serve_interrupt+0x166>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 8004148:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 800414c:	6037      	str	r7, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800414e:	f7ff fc77 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8004152:	2300      	movs	r3, #0
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 800415c:	f014 0f08 	tst.w	r4, #8
 8004160:	bf0c      	ite	eq
 8004162:	f04f 0800 	moveq.w	r8, #0
 8004166:	f04f 0880 	movne.w	r8, #128	; 0x80
  if (isr & USART_ISR_PE)
 800416a:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 800416c:	bf48      	it	mi
 800416e:	f048 0820 	orrmi.w	r8, r8, #32
  if (isr & USART_ISR_FE)
 8004172:	07a1      	lsls	r1, r4, #30
    sts |= SD_FRAMING_ERROR;
 8004174:	bf48      	it	mi
 8004176:	f048 0840 	orrmi.w	r8, r8, #64	; 0x40
  if (isr & USART_ISR_NE)
 800417a:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 800417c:	bf48      	it	mi
 800417e:	f448 7880 	orrmi.w	r8, r8, #256	; 0x100
 8004182:	2320      	movs	r3, #32
 8004184:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8004188:	f7ff fc72 	bl	8003a70 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800418c:	4641      	mov	r1, r8
 800418e:	1d28      	adds	r0, r5, #4
 8004190:	f001 f846 	bl	8005220 <chEvtBroadcastFlagsI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004194:	f7ff fc54 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8004198:	2300      	movs	r3, #0
 800419a:	f383 8811 	msr	BASEPRI, r3
  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 800419e:	05e3      	lsls	r3, r4, #23
 80041a0:	d599      	bpl.n	80040d6 <serve_interrupt+0x16>
 80041a2:	2320      	movs	r3, #32
 80041a4:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80041a8:	f7ff fc62 	bl	8003a70 <_dbg_check_lock_from_isr>
 80041ac:	1d28      	adds	r0, r5, #4
 80041ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041b2:	f001 f835 	bl	8005220 <chEvtBroadcastFlagsI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80041b6:	f7ff fc43 	bl	8003a40 <_dbg_check_unlock_from_isr>
 80041ba:	2300      	movs	r3, #0
 80041bc:	f383 8811 	msr	BASEPRI, r3
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 80041c0:	06a0      	lsls	r0, r4, #26
 80041c2:	d58a      	bpl.n	80040da <serve_interrupt+0x1a>
 80041c4:	2320      	movs	r3, #32
 80041c6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80041ca:	f7ff fc51 	bl	8003a70 <_dbg_check_lock_from_isr>
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 80041ce:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 80041d0:	f895 805c 	ldrb.w	r8, [r5, #92]	; 0x5c
 80041d4:	ea08 0803 	and.w	r8, r8, r3
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 80041d8:	f7ff fa6a 	bl	80036b0 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80041dc:	696b      	ldr	r3, [r5, #20]
 80041de:	b1eb      	cbz	r3, 800421c <serve_interrupt+0x15c>
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();
 80041e0:	f7ff fa66 	bl	80036b0 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 80041e4:	6a2b      	ldr	r3, [r5, #32]
 80041e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d024      	beq.n	8004236 <serve_interrupt+0x176>
    iqp->q_counter++;
 80041ec:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80041ee:	1c59      	adds	r1, r3, #1

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
    iqp->q_counter++;
 80041f0:	3201      	adds	r2, #1
 80041f2:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 80041f4:	6229      	str	r1, [r5, #32]
 80041f6:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 80041fa:	6a2a      	ldr	r2, [r5, #32]
 80041fc:	69eb      	ldr	r3, [r5, #28]
 80041fe:	429a      	cmp	r2, r3
 8004200:	d209      	bcs.n	8004216 <serve_interrupt+0x156>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8004202:	f105 000c 	add.w	r0, r5, #12
 8004206:	f001 fbe3 	bl	80059d0 <chThdDequeueNextI.constprop.36>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800420a:	f7ff fc19 	bl	8003a40 <_dbg_check_unlock_from_isr>
 800420e:	2300      	movs	r3, #0
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	e761      	b.n	80040da <serve_interrupt+0x1a>
      iqp->q_wrptr = iqp->q_buffer;
 8004216:	69ab      	ldr	r3, [r5, #24]
 8004218:	622b      	str	r3, [r5, #32]
 800421a:	e7f2      	b.n	8004202 <serve_interrupt+0x142>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800421c:	1d28      	adds	r0, r5, #4
 800421e:	2104      	movs	r1, #4
 8004220:	f000 fffe 	bl	8005220 <chEvtBroadcastFlagsI>
 8004224:	e7dc      	b.n	80041e0 <serve_interrupt+0x120>
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 8004226:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8004228:	2b00      	cmp	r3, #0
 800422a:	d08d      	beq.n	8004148 <serve_interrupt+0x88>
 800422c:	1d28      	adds	r0, r5, #4
 800422e:	2110      	movs	r1, #16
 8004230:	f000 fff6 	bl	8005220 <chEvtBroadcastFlagsI>
 8004234:	e788      	b.n	8004148 <serve_interrupt+0x88>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8004236:	696a      	ldr	r2, [r5, #20]
 8004238:	2a00      	cmp	r2, #0
 800423a:	d0d7      	beq.n	80041ec <serve_interrupt+0x12c>
 800423c:	1d28      	adds	r0, r5, #4
 800423e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004242:	f000 ffed 	bl	8005220 <chEvtBroadcastFlagsI>
 8004246:	e7e0      	b.n	800420a <serve_interrupt+0x14a>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8004248:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800424a:	2a00      	cmp	r2, #0
 800424c:	f43f af59 	beq.w	8004102 <serve_interrupt+0x42>
 8004250:	1d28      	adds	r0, r5, #4
 8004252:	2108      	movs	r1, #8
 8004254:	f000 ffe4 	bl	8005220 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 8004258:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 800425c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004260:	6033      	str	r3, [r6, #0]
 8004262:	e761      	b.n	8004128 <serve_interrupt+0x68>
	...

08004270 <spi_lld_serve_tx_interrupt.lto_priv.120>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004270:	070a      	lsls	r2, r1, #28
 8004272:	d400      	bmi.n	8004276 <spi_lld_serve_tx_interrupt.lto_priv.120+0x6>
 8004274:	4770      	bx	lr
 * @brief   Shared end-of-tx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004276:	b508      	push	{r3, lr}
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 8004278:	4801      	ldr	r0, [pc, #4]	; (8004280 <spi_lld_serve_tx_interrupt.lto_priv.120+0x10>)
 800427a:	f7ff f9c1 	bl	8003600 <chSysHalt>
 800427e:	bf00      	nop
 8004280:	08016750 	.word	0x08016750
	...

08004290 <spi_lld_serve_rx_interrupt.lto_priv.119>:
 * @brief   Shared end-of-rx service routine.
 *
 * @param[in] spip      pointer to the @p SPIDriver object
 * @param[in] flags     pre-shifted content of the ISR register
 */
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 8004290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 8004294:	070c      	lsls	r4, r1, #28
 8004296:	d450      	bmi.n	800433a <spi_lld_serve_rx_interrupt.lto_priv.119+0xaa>
  }
#else
  (void)flags;
#endif

  if (spip->config->circular) {
 8004298:	6843      	ldr	r3, [r0, #4]
 800429a:	781a      	ldrb	r2, [r3, #0]
 800429c:	4604      	mov	r4, r0
 800429e:	b13a      	cbz	r2, 80042b0 <spi_lld_serve_rx_interrupt.lto_priv.119+0x20>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80042a0:	074a      	lsls	r2, r1, #29
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
 80042a2:	685b      	ldr	r3, [r3, #4]
#else
  (void)flags;
#endif

  if (spip->config->circular) {
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80042a4:	d53a      	bpl.n	800431c <spi_lld_serve_rx_interrupt.lto_priv.119+0x8c>
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d036      	beq.n	8004318 <spi_lld_serve_rx_interrupt.lto_priv.119+0x88>

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
  }
}
 80042aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
#endif

  if (spip->config->circular) {
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
 80042ae:	4718      	bx	r3
      _spi_isr_code_half2(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80042b0:	6a41      	ldr	r1, [r0, #36]	; 0x24
    dmaStreamDisable(spip->dmarx);
 80042b2:	6a02      	ldr	r2, [r0, #32]
      _spi_isr_code_half2(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80042b4:	684f      	ldr	r7, [r1, #4]
    dmaStreamDisable(spip->dmarx);

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 80042b6:	f8d3 c004 	ldr.w	ip, [r3, #4]
      _spi_isr_code_half2(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80042ba:	683d      	ldr	r5, [r7, #0]
    dmaStreamDisable(spip->dmarx);
 80042bc:	6856      	ldr	r6, [r2, #4]
      _spi_isr_code_half2(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80042be:	f8d1 8000 	ldr.w	r8, [r1]
    dmaStreamDisable(spip->dmarx);
 80042c2:	f8d2 e000 	ldr.w	lr, [r2]
      _spi_isr_code_half2(spip);
    }
  }
  else {
    /* Stopping DMAs.*/
    dmaStreamDisable(spip->dmatx);
 80042c6:	f025 030f 	bic.w	r3, r5, #15
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	7c09      	ldrb	r1, [r1, #16]
 80042ce:	230e      	movs	r3, #14
 80042d0:	fa03 f101 	lsl.w	r1, r3, r1
 80042d4:	f8c8 1004 	str.w	r1, [r8, #4]
    dmaStreamDisable(spip->dmarx);
 80042d8:	6831      	ldr	r1, [r6, #0]
 80042da:	f021 010f 	bic.w	r1, r1, #15
 80042de:	6031      	str	r1, [r6, #0]
 80042e0:	7c12      	ldrb	r2, [r2, #16]
 80042e2:	4093      	lsls	r3, r2
 80042e4:	f8ce 3004 	str.w	r3, [lr, #4]

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 80042e8:	f1bc 0f00 	cmp.w	ip, #0
 80042ec:	d022      	beq.n	8004334 <spi_lld_serve_rx_interrupt.lto_priv.119+0xa4>
 80042ee:	2304      	movs	r3, #4
 80042f0:	7003      	strb	r3, [r0, #0]
 80042f2:	47e0      	blx	ip
 80042f4:	7823      	ldrb	r3, [r4, #0]
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d01c      	beq.n	8004334 <spi_lld_serve_rx_interrupt.lto_priv.119+0xa4>
 80042fa:	2320      	movs	r3, #32
 80042fc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8004300:	f7ff fbb6 	bl	8003a70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8004304:	f104 0008 	add.w	r0, r4, #8
 8004308:	2100      	movs	r1, #0
 800430a:	f7ff fb51 	bl	80039b0 <chThdResumeI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800430e:	f7ff fb97 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8004312:	2300      	movs	r3, #0
 8004314:	f383 8811 	msr	BASEPRI, r3
 8004318:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      /* Half buffer interrupt.*/
      _spi_isr_code_half1(spip);
    }
    else {
      /* End buffer interrupt.*/
      _spi_isr_code_half2(spip);
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0fb      	beq.n	8004318 <spi_lld_serve_rx_interrupt.lto_priv.119+0x88>
 8004320:	2204      	movs	r2, #4
 8004322:	7002      	strb	r2, [r0, #0]
 8004324:	4798      	blx	r3
 8004326:	7823      	ldrb	r3, [r4, #0]
 8004328:	2b04      	cmp	r3, #4
 800432a:	d1f5      	bne.n	8004318 <spi_lld_serve_rx_interrupt.lto_priv.119+0x88>
 800432c:	2303      	movs	r3, #3
 800432e:	7023      	strb	r3, [r4, #0]
 8004330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dmaStreamDisable(spip->dmatx);
    dmaStreamDisable(spip->dmarx);

    /* Portable SPI ISR code defined in the high level driver, note, it is
       a macro.*/
    _spi_isr_code(spip);
 8004334:	2302      	movs	r3, #2
 8004336:	7023      	strb	r3, [r4, #0]
 8004338:	e7df      	b.n	80042fa <spi_lld_serve_rx_interrupt.lto_priv.119+0x6a>
 *
 * @api
 */
static inline void osalSysHalt(const char *reason) {

  chSysHalt(reason);
 800433a:	4801      	ldr	r0, [pc, #4]	; (8004340 <spi_lld_serve_rx_interrupt.lto_priv.119+0xb0>)
 800433c:	f7ff f960 	bl	8003600 <chSysHalt>
 8004340:	08016750 	.word	0x08016750
	...

08004350 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8004350:	495e      	ldr	r1, [pc, #376]	; (80044cc <__early_init+0x17c>)

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004352:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80044f4 <__early_init+0x1a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004356:	485e      	ldr	r0, [pc, #376]	; (80044d0 <__early_init+0x180>)
 8004358:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <__early_init+0x184>)
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800435a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 800435e:	6a8f      	ldr	r7, [r1, #40]	; 0x28
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004360:	4e5d      	ldr	r6, [pc, #372]	; (80044d8 <__early_init+0x188>)
  gpiop->OSPEEDR = config->ospeedr;
 8004362:	f8df b194 	ldr.w	fp, [pc, #404]	; 80044f8 <__early_init+0x1a8>
  gpiop->PUPDR   = config->pupdr;
 8004366:	f8df a194 	ldr.w	sl, [pc, #404]	; 80044fc <__early_init+0x1ac>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800436a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8004500 <__early_init+0x1b0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800436e:	4d5b      	ldr	r5, [pc, #364]	; (80044dc <__early_init+0x18c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8004370:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8004504 <__early_init+0x1b4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004374:	4c5a      	ldr	r4, [pc, #360]	; (80044e0 <__early_init+0x190>)

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8004376:	2300      	movs	r3, #0
 8004378:	f447 07fc 	orr.w	r7, r7, #8257536	; 0x7e0000
 800437c:	628f      	str	r7, [r1, #40]	; 0x28
 800437e:	628b      	str	r3, [r1, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8004380:	f8d1 e014 	ldr.w	lr, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004384:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 8004388:	f44e 0efc 	orr.w	lr, lr, #8257536	; 0x7e0000
 800438c:	f8c1 e014 	str.w	lr, [r1, #20]
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 8004390:	f64f 7eff 	movw	lr, #65535	; 0xffff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004394:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8004396:	f8c7 b008 	str.w	fp, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 800439a:	f8c7 a00c 	str.w	sl, [r7, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 800439e:	f44f 2b6e 	mov.w	fp, #974848	; 0xee000
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80043a2:	f8c7 e014 	str.w	lr, [r7, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80043a6:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80043aa:	f8c7 9020 	str.w	r9, [r7, #32]
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80043ae:	f24f 09c0 	movw	r9, #61632	; 0xf0c0
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80043b2:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80043b6:	f8c7 8000 	str.w	r8, [r7]

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80043ba:	f04f 4b88 	mov.w	fp, #1140850688	; 0x44000000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80043be:	f8c6 a004 	str.w	sl, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80043c2:	f24a 0880 	movw	r8, #41088	; 0xa080
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80043c6:	f8c6 9008 	str.w	r9, [r6, #8]
 80043ca:	f04f 4770 	mov.w	r7, #4026531840	; 0xf0000000
  gpiop->PUPDR   = config->pupdr;
 80043ce:	f8c6 c00c 	str.w	ip, [r6, #12]
 80043d2:	f8df a134 	ldr.w	sl, [pc, #308]	; 8004508 <__early_init+0x1b8>
  gpiop->ODR     = config->odr;
 80043d6:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80043da:	f44f 09ee 	mov.w	r9, #7798784	; 0x770000
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80043de:	f44f 6c20 	mov.w	ip, #2560	; 0xa00

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80043e2:	f8c6 b020 	str.w	fp, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80043e6:	6273      	str	r3, [r6, #36]	; 0x24

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 80043e8:	f04f 3b55 	mov.w	fp, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80043ec:	f8c6 8000 	str.w	r8, [r6]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80043f0:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80043f2:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800450c <__early_init+0x1bc>
 80043f6:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80043f8:	4e3a      	ldr	r6, [pc, #232]	; (80044e4 <__early_init+0x194>)
 80043fa:	f8c5 a00c 	str.w	sl, [r5, #12]
  gpiop->ODR     = config->odr;
 80043fe:	27ff      	movs	r7, #255	; 0xff
 8004400:	f8c5 e014 	str.w	lr, [r5, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8004404:	f8df a108 	ldr.w	sl, [pc, #264]	; 8004510 <__early_init+0x1c0>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8004408:	f8c5 9020 	str.w	r9, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800440c:	626b      	str	r3, [r5, #36]	; 0x24
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800440e:	f04f 090f 	mov.w	r9, #15
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8004412:	f8c5 c000 	str.w	ip, [r5]

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8004416:	4d34      	ldr	r5, [pc, #208]	; (80044e8 <__early_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8004418:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800441a:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800441c:	f8c4 b00c 	str.w	fp, [r4, #12]
  gpiop->ODR     = config->odr;
 8004420:	f8c4 e014 	str.w	lr, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8004424:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8004426:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004428:	6023      	str	r3, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800442a:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800442c:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8004430:	60c6      	str	r6, [r0, #12]
  gpiop->ODR     = config->odr;
 8004432:	6147      	str	r7, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8004434:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8004436:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8004438:	f8c0 a000 	str.w	sl, [r0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800443c:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800443e:	f8c2 9008 	str.w	r9, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8004442:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8004444:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8004448:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800444a:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800444c:	6013      	str	r3, [r2, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800444e:	680b      	ldr	r3, [r1, #0]
 8004450:	f043 0301 	orr.w	r3, r3, #1
 8004454:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8004456:	680a      	ldr	r2, [r1, #0]
 8004458:	4b1c      	ldr	r3, [pc, #112]	; (80044cc <__early_init+0x17c>)
 800445a:	0794      	lsls	r4, r2, #30
 800445c:	d5fb      	bpl.n	8004456 <__early_init+0x106>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	f022 0203 	bic.w	r2, r2, #3
 8004464:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8004466:	4619      	mov	r1, r3
 8004468:	684b      	ldr	r3, [r1, #4]
 800446a:	4a18      	ldr	r2, [pc, #96]	; (80044cc <__early_init+0x17c>)
 800446c:	f013 030c 	ands.w	r3, r3, #12
 8004470:	d1fa      	bne.n	8004468 <__early_init+0x118>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 8004472:	6811      	ldr	r1, [r2, #0]
 8004474:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 8004478:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800447a:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800447c:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8004484:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8004486:	4b11      	ldr	r3, [pc, #68]	; (80044cc <__early_init+0x17c>)
 8004488:	0788      	lsls	r0, r1, #30
 800448a:	d5fb      	bpl.n	8004484 <__early_init+0x134>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 800448c:	4a17      	ldr	r2, [pc, #92]	; (80044ec <__early_init+0x19c>)
 800448e:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8004490:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8004494:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 8004496:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80044a0:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80044a2:	6819      	ldr	r1, [r3, #0]
 80044a4:	4a09      	ldr	r2, [pc, #36]	; (80044cc <__early_init+0x17c>)
 80044a6:	0189      	lsls	r1, r1, #6
 80044a8:	d5fb      	bpl.n	80044a2 <__early_init+0x152>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80044aa:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <__early_init+0x1a0>)
 80044ac:	2111      	movs	r1, #17
 80044ae:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80044b0:	6853      	ldr	r3, [r2, #4]
 80044b2:	f043 0302 	orr.w	r3, r3, #2
 80044b6:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80044b8:	6853      	ldr	r3, [r2, #4]
 80044ba:	4904      	ldr	r1, [pc, #16]	; (80044cc <__early_init+0x17c>)
 80044bc:	f003 030c 	and.w	r3, r3, #12
 80044c0:	2b08      	cmp	r3, #8
 80044c2:	d1f9      	bne.n	80044b8 <__early_init+0x168>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_HRTIM1SW | STM32_TIM8SW | STM32_TIM1SW;
 80044c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80044c6:	630b      	str	r3, [r1, #48]	; 0x30
 80044c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	48001000 	.word	0x48001000
 80044d4:	48001400 	.word	0x48001400
 80044d8:	48000400 	.word	0x48000400
 80044dc:	48000800 	.word	0x48000800
 80044e0:	48000c00 	.word	0x48000c00
 80044e4:	01155515 	.word	0x01155515
 80044e8:	55555550 	.word	0x55555550
 80044ec:	001c2400 	.word	0x001c2400
 80044f0:	40022000 	.word	0x40022000
 80044f4:	55550515 	.word	0x55550515
 80044f8:	3cc0fc00 	.word	0x3cc0fc00
 80044fc:	64151154 	.word	0x64151154
 8004500:	55500000 	.word	0x55500000
 8004504:	2a80a800 	.word	0x2a80a800
 8004508:	05555555 	.word	0x05555555
 800450c:	ffff00c0 	.word	0xffff00c0
 8004510:	55550040 	.word	0x55550040
	...

08004520 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8004520:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004522:	4c09      	ldr	r4, [pc, #36]	; (8004548 <VectorD8+0x28>)
 8004524:	4620      	mov	r0, r4
 8004526:	f7ff f82b 	bl	8003580 <_trace_isr_enter>
 800452a:	f7ff fa71 	bl	8003a10 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 800452e:	4807      	ldr	r0, [pc, #28]	; (800454c <VectorD8+0x2c>)
 8004530:	f7ff fdc6 	bl	80040c0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004534:	f7ff fa54 	bl	80039e0 <_dbg_check_leave_isr>
 8004538:	4620      	mov	r0, r4
 800453a:	f7ff f801 	bl	8003540 <_trace_isr_leave>
}
 800453e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8004542:	f000 be25 	b.w	8005190 <_port_irq_epilogue>
 8004546:	bf00      	nop
 8004548:	080166c0 	.word	0x080166c0
 800454c:	20002b04 	.word	0x20002b04

08004550 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8004550:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004552:	4c09      	ldr	r4, [pc, #36]	; (8004578 <VectorD4+0x28>)
 8004554:	4620      	mov	r0, r4
 8004556:	f7ff f813 	bl	8003580 <_trace_isr_enter>
 800455a:	f7ff fa59 	bl	8003a10 <_dbg_check_enter_isr>

  serve_interrupt(&SD1);
 800455e:	4807      	ldr	r0, [pc, #28]	; (800457c <VectorD4+0x2c>)
 8004560:	f7ff fdae 	bl	80040c0 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8004564:	f7ff fa3c 	bl	80039e0 <_dbg_check_leave_isr>
 8004568:	4620      	mov	r0, r4
 800456a:	f7fe ffe9 	bl	8003540 <_trace_isr_leave>
}
 800456e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 8004572:	f000 be0d 	b.w	8005190 <_port_irq_epilogue>
 8004576:	bf00      	nop
 8004578:	080167b8 	.word	0x080167b8
 800457c:	2000424c 	.word	0x2000424c

08004580 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8004580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8004584:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8004588:	483a      	ldr	r0, [pc, #232]	; (8004674 <VectorB0+0xf4>)
 800458a:	f7fe fff9 	bl	8003580 <_trace_isr_enter>
 800458e:	f7ff fa3f 	bl	8003a10 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	079b      	lsls	r3, r3, #30
 8004596:	d408      	bmi.n	80045aa <VectorB0+0x2a>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8004598:	f7ff fa22 	bl	80039e0 <_dbg_check_leave_isr>
 800459c:	4835      	ldr	r0, [pc, #212]	; (8004674 <VectorB0+0xf4>)
 800459e:	f7fe ffcf 	bl	8003540 <_trace_isr_leave>
}
 80045a2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 80045a6:	f000 bdf3 	b.w	8005190 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 80045aa:	2300      	movs	r3, #0
 80045ac:	613b      	str	r3, [r7, #16]
 80045ae:	2320      	movs	r3, #32
 80045b0:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80045b4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8004678 <VectorB0+0xf8>
 80045b8:	46ca      	mov	sl, r9
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80045ba:	f7ff fa59 	bl	8003a70 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 80045be:	f7ff f877 	bl	80036b0 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 80045c2:	f7ff f875 	bl	80036b0 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80045c6:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 80045ca:	68a1      	ldr	r1, [r4, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 80045cc:	46bb      	mov	fp, r7
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80045ce:	464e      	mov	r6, r9
 80045d0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 80045d4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 80045d8:	4827      	ldr	r0, [pc, #156]	; (8004678 <VectorB0+0xf8>)
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80045da:	ebc3 0802 	rsb	r8, r3, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80045de:	4588      	cmp	r8, r1
 80045e0:	d322      	bcc.n	8004628 <VectorB0+0xa8>
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80045e2:	2500      	movs	r5, #0

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80045e4:	6822      	ldr	r2, [r4, #0]
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
 80045e6:	68e7      	ldr	r7, [r4, #12]
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 80045e8:	440b      	add	r3, r1
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 80045ea:	4552      	cmp	r2, sl
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 80045ec:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80045f0:	f8c2 a004 	str.w	sl, [r2, #4]
      ch.vtlist.next = vtp->next;
 80045f4:	f8c9 201c 	str.w	r2, [r9, #28]
      fn = vtp->func;
      vtp->func = NULL;
 80045f8:	60e5      	str	r5, [r4, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 80045fa:	bf08      	it	eq
 80045fc:	f8cb 500c 	streq.w	r5, [fp, #12]
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;
 8004600:	ebc1 0808 	rsb	r8, r1, r8
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004604:	f7ff fa1c 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8004608:	f385 8811 	msr	BASEPRI, r5
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800460c:	6920      	ldr	r0, [r4, #16]
 800460e:	47b8      	blx	r7
 8004610:	2320      	movs	r3, #32
 8004612:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8004616:	f7ff fa2b 	bl	8003a70 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800461a:	f8d9 401c 	ldr.w	r4, [r9, #28]
    }
    while (vtp->delta <= nowdelta);
 800461e:	68a1      	ldr	r1, [r4, #8]
 8004620:	4588      	cmp	r8, r1
 8004622:	d3d5      	bcc.n	80045d0 <VectorB0+0x50>
 8004624:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8004626:	e7dd      	b.n	80045e4 <VectorB0+0x64>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004628:	69c5      	ldr	r5, [r0, #28]
 800462a:	4555      	cmp	r5, sl
 800462c:	d018      	beq.n	8004660 <VectorB0+0xe0>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 800462e:	68a9      	ldr	r1, [r5, #8]
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8004630:	4443      	add	r3, r8
  ch.vtlist.next->delta -= nowdelta;
 8004632:	ebc8 0101 	rsb	r1, r8, r1
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8004636:	6283      	str	r3, [r0, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8004638:	60a9      	str	r1, [r5, #8]
 800463a:	68a4      	ldr	r4, [r4, #8]
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	4423      	add	r3, r4

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8004640:	2b01      	cmp	r3, #1
 8004642:	bf98      	it	ls
 8004644:	2302      	movls	r3, #2

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8004646:	189c      	adds	r4, r3, r2
 8004648:	4620      	mov	r0, r4
 800464a:	f7fe fa71 	bl	8002b30 <stSetAlarm>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800464e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8004652:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8004658:	1a62      	subs	r2, r4, r1
 800465a:	1a5b      	subs	r3, r3, r1
 800465c:	4293      	cmp	r3, r2
 800465e:	d805      	bhi.n	800466c <VectorB0+0xec>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8004660:	f7ff f9ee 	bl	8003a40 <_dbg_check_unlock_from_isr>
 8004664:	2300      	movs	r3, #0
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	e795      	b.n	8004598 <VectorB0+0x18>
 800466c:	4803      	ldr	r0, [pc, #12]	; (800467c <VectorB0+0xfc>)
 800466e:	f7fe ffc7 	bl	8003600 <chSysHalt>
 8004672:	bf00      	nop
 8004674:	08016714 	.word	0x08016714
 8004678:	200042b0 	.word	0x200042b0
 800467c:	08016794 	.word	0x08016794

08004680 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 8004680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004684:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 8004688:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 800468c:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 8004690:	f3c2 1e41 	ubfx	lr, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 8004694:	46d1      	mov	r9, sl
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 8004696:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 800469a:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 800469c:	f04f 0b0f 	mov.w	fp, #15
 80046a0:	e00f      	b.n	80046c2 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80046a2:	6a04      	ldr	r4, [r0, #32]
 80046a4:	ea24 0303 	bic.w	r3, r4, r3
 80046a8:	431d      	orrs	r5, r3
 80046aa:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80046ac:	0849      	lsrs	r1, r1, #1
 80046ae:	d039      	beq.n	8004724 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 80046b0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 80046b4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 80046b8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 80046bc:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 80046c0:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80046c2:	07cb      	lsls	r3, r1, #31
 80046c4:	d5f2      	bpl.n	80046ac <_pal_lld_setgroupmode+0x2c>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80046c6:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80046c8:	2401      	movs	r4, #1
 80046ca:	40bc      	lsls	r4, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80046cc:	ea23 0304 	bic.w	r3, r3, r4
 80046d0:	ea43 0308 	orr.w	r3, r3, r8
 80046d4:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80046d6:	2503      	movs	r5, #3
 80046d8:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80046da:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 80046dc:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 80046e0:	43e4      	mvns	r4, r4
 80046e2:	4023      	ands	r3, r4
 80046e4:	ea43 030c 	orr.w	r3, r3, ip
 80046e8:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80046ea:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80046ec:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80046f0:	4025      	ands	r5, r4
 80046f2:	ea45 050e 	orr.w	r5, r5, lr
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80046f6:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 80046f8:	f1ba 0f02 	cmp.w	sl, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 80046fc:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 80046fe:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8004702:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8004706:	d00f      	beq.n	8004728 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8004708:	6806      	ldr	r6, [r0, #0]
 800470a:	4034      	ands	r4, r6
 800470c:	ea44 0409 	orr.w	r4, r4, r9
        if (bit < 8)
 8004710:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8004712:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 8004714:	d9c5      	bls.n	80046a2 <_pal_lld_setgroupmode+0x22>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004716:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004718:	ea24 0303 	bic.w	r3, r4, r3
 800471c:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 800471e:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004720:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8004722:	d1c5      	bne.n	80046b0 <_pal_lld_setgroupmode+0x30>
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8004728:	2f07      	cmp	r7, #7
 800472a:	d80a      	bhi.n	8004742 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 800472c:	6a06      	ldr	r6, [r0, #32]
 800472e:	ea26 0303 	bic.w	r3, r6, r3
 8004732:	431d      	orrs	r5, r3
 8004734:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8004736:	6803      	ldr	r3, [r0, #0]
 8004738:	401c      	ands	r4, r3
 800473a:	ea44 0409 	orr.w	r4, r4, r9
 800473e:	6004      	str	r4, [r0, #0]
 8004740:	e7b4      	b.n	80046ac <_pal_lld_setgroupmode+0x2c>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8004742:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004744:	ea26 0303 	bic.w	r3, r6, r3
 8004748:	431d      	orrs	r5, r3
 800474a:	6245      	str	r5, [r0, #36]	; 0x24
 800474c:	e7f3      	b.n	8004736 <_pal_lld_setgroupmode+0xb6>
 800474e:	bf00      	nop

08004750 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8004750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);
 8004752:	b358      	cbz	r0, 80047ac <dmaStreamRelease+0x5c>

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
 8004754:	491f      	ldr	r1, [pc, #124]	; (80047d4 <dmaStreamRelease+0x84>)
 8004756:	7c44      	ldrb	r4, [r0, #17]
 8004758:	680b      	ldr	r3, [r1, #0]
 800475a:	2701      	movs	r7, #1
 800475c:	fa07 f204 	lsl.w	r2, r7, r4
 8004760:	421a      	tst	r2, r3
 8004762:	d023      	beq.n	80047ac <dmaStreamRelease+0x5c>
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 8004764:	684e      	ldr	r6, [r1, #4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8004766:	6885      	ldr	r5, [r0, #8]
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8004768:	43d2      	mvns	r2, r2
 800476a:	4013      	ands	r3, r2
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 800476c:	4032      	ands	r2, r6
 800476e:	604a      	str	r2, [r1, #4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8004770:	ea13 0205 	ands.w	r2, r3, r5
  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8004774:	600b      	str	r3, [r1, #0]
  dma.isr_mask &= ~(1U << dmastp->selfindex);

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 8004776:	d01c      	beq.n	80047b2 <dmaStreamRelease+0x62>
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8004778:	4a17      	ldr	r2, [pc, #92]	; (80047d8 <dmaStreamRelease+0x88>)
 800477a:	2100      	movs	r1, #0
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 800477c:	eb02 00c4 	add.w	r0, r2, r4, lsl #3
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 8004780:	f842 1034 	str.w	r1, [r2, r4, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004784:	065a      	lsls	r2, r3, #25
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 8004786:	6041      	str	r1, [r0, #4]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004788:	d107      	bne.n	800479a <dmaStreamRelease+0x4a>
    rccDisableDMA1();
 800478a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800478e:	f501 3104 	add.w	r1, r1, #135168	; 0x21000
 8004792:	694a      	ldr	r2, [r1, #20]
 8004794:	f022 0201 	bic.w	r2, r2, #1
 8004798:	614a      	str	r2, [r1, #20]
  }
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 800479a:	f413 6f78 	tst.w	r3, #3968	; 0xf80
 800479e:	d104      	bne.n	80047aa <dmaStreamRelease+0x5a>
    rccDisableDMA2();
 80047a0:	4a0e      	ldr	r2, [pc, #56]	; (80047dc <dmaStreamRelease+0x8c>)
 80047a2:	6953      	ldr	r3, [r2, #20]
 80047a4:	f023 0302 	bic.w	r3, r3, #2
 80047a8:	6153      	str	r3, [r2, #20]
 80047aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {

  osalDbgCheck(dmastp != NULL);
 80047ac:	480c      	ldr	r0, [pc, #48]	; (80047e0 <dmaStreamRelease+0x90>)
 80047ae:	f7fe ff27 	bl	8003600 <chSysHalt>
  dma.streams_mask &= ~(1U << dmastp->selfindex);
  dma.isr_mask &= ~(1U << dmastp->selfindex);

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
    nvicDisableVector(dmastp->vector);
 80047b2:	7c81      	ldrb	r1, [r0, #18]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80047b4:	4d0b      	ldr	r5, [pc, #44]	; (80047e4 <dmaStreamRelease+0x94>)
 80047b6:	094c      	lsrs	r4, r1, #5
 80047b8:	3420      	adds	r4, #32
 80047ba:	f001 061f 	and.w	r6, r1, #31
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80047be:	f101 4160 	add.w	r1, r1, #3758096384	; 0xe0000000
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80047c2:	40b7      	lsls	r7, r6
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80047c4:	f501 4161 	add.w	r1, r1, #57600	; 0xe100
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80047c8:	f845 7024 	str.w	r7, [r5, r4, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 80047cc:	f881 2300 	strb.w	r2, [r1, #768]	; 0x300
 80047d0:	7c44      	ldrb	r4, [r0, #17]
 80047d2:	e7d1      	b.n	8004778 <dmaStreamRelease+0x28>
 80047d4:	20002bd8 	.word	0x20002bd8
 80047d8:	20001210 	.word	0x20001210
 80047dc:	40021000 	.word	0x40021000
 80047e0:	08016774 	.word	0x08016774
 80047e4:	e000e100 	.word	0xe000e100
	...

080047f0 <dmaStreamAllocate>:
 * @special
 */
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {
 80047f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(dmastp != NULL);
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d058      	beq.n	80048a8 <dmaStreamAllocate+0xb8>

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 80047f6:	4e2e      	ldr	r6, [pc, #184]	; (80048b0 <dmaStreamAllocate+0xc0>)
 80047f8:	7c47      	ldrb	r7, [r0, #17]
 80047fa:	6834      	ldr	r4, [r6, #0]
 80047fc:	2501      	movs	r5, #1
 80047fe:	fa05 fe07 	lsl.w	lr, r5, r7
 8004802:	ea1e 0f04 	tst.w	lr, r4
 8004806:	d131      	bne.n	800486c <dmaStreamAllocate+0x7c>
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8004808:	4d2a      	ldr	r5, [pc, #168]	; (80048b4 <dmaStreamAllocate+0xc4>)
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800480a:	eb05 0ec7 	add.w	lr, r5, r7, lsl #3
  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;

  /* Installs the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 800480e:	f845 2037 	str.w	r2, [r5, r7, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 8004812:	f8ce 3004 	str.w	r3, [lr, #4]

  /* Enabling DMA clocks required by the current streams set.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8004816:	0663      	lsls	r3, r4, #25
 8004818:	d104      	bne.n	8004824 <dmaStreamAllocate+0x34>
    rccEnableDMA1(true);
 800481a:	4d27      	ldr	r5, [pc, #156]	; (80048b8 <dmaStreamAllocate+0xc8>)
 800481c:	696b      	ldr	r3, [r5, #20]
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	616b      	str	r3, [r5, #20]
  }
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8004824:	f414 6f78 	tst.w	r4, #3968	; 0xf80
 8004828:	d104      	bne.n	8004834 <dmaStreamAllocate+0x44>
    rccEnableDMA2(true);
 800482a:	4d23      	ldr	r5, [pc, #140]	; (80048b8 <dmaStreamAllocate+0xc8>)
 800482c:	696b      	ldr	r3, [r5, #20]
 800482e:	f043 0302 	orr.w	r3, r3, #2
 8004832:	616b      	str	r3, [r5, #20]
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 8004834:	6843      	ldr	r3, [r0, #4]
 8004836:	f8d0 e000 	ldr.w	lr, [r0]
 800483a:	681d      	ldr	r5, [r3, #0]
 800483c:	f025 050f 	bic.w	r5, r5, #15
 8004840:	601d      	str	r5, [r3, #0]
 8004842:	7c07      	ldrb	r7, [r0, #16]
 8004844:	250e      	movs	r5, #14
 8004846:	40bd      	lsls	r5, r7
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8004848:	2700      	movs	r7, #0
    rccEnableDMA2(true);
  }
#endif

  /* Putting the stream in a safe state.*/
  dmaStreamDisable(dmastp);
 800484a:	f8ce 5004 	str.w	r5, [lr, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 800484e:	601f      	str	r7, [r3, #0]

  /* Enables the associated IRQ vector if not already enabled and if a
     callback is defined.*/
  if (func != NULL) {
 8004850:	b172      	cbz	r2, 8004870 <dmaStreamAllocate+0x80>
    if ((dma.isr_mask & dmastp->cmask) == 0U) {
 8004852:	6872      	ldr	r2, [r6, #4]
 8004854:	6883      	ldr	r3, [r0, #8]
 8004856:	421a      	tst	r2, r3
 8004858:	d00e      	beq.n	8004878 <dmaStreamAllocate+0x88>
      nvicEnableVector(dmastp->vector, priority);
    }
    dma.isr_mask |= (1U << dmastp->selfindex);
 800485a:	7c41      	ldrb	r1, [r0, #17]
 800485c:	2301      	movs	r3, #1
 800485e:	408b      	lsls	r3, r1
 8004860:	431a      	orrs	r2, r3
 8004862:	6072      	str	r2, [r6, #4]
  }

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);
 8004864:	431c      	orrs	r4, r3
 8004866:	6034      	str	r4, [r6, #0]
 8004868:	2000      	movs	r0, #0
 800486a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

  osalDbgCheck(dmastp != NULL);

  /* Checks if the stream is already taken.*/
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
    return true;
 800486c:	4628      	mov	r0, r5

  /* Marks the stream as allocated.*/
  dma.streams_mask |= (1U << dmastp->selfindex);

  return false;
}
 800486e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004870:	7c42      	ldrb	r2, [r0, #17]
 8004872:	2301      	movs	r3, #1
 8004874:	4093      	lsls	r3, r2
 8004876:	e7f5      	b.n	8004864 <dmaStreamAllocate+0x74>

  /* Enables the associated IRQ vector if not already enabled and if a
     callback is defined.*/
  if (func != NULL) {
    if ((dma.isr_mask & dmastp->cmask) == 0U) {
      nvicEnableVector(dmastp->vector, priority);
 8004878:	7c85      	ldrb	r5, [r0, #18]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800487a:	096b      	lsrs	r3, r5, #5
 800487c:	009b      	lsls	r3, r3, #2

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800487e:	f105 4e60 	add.w	lr, r5, #3758096384	; 0xe0000000
 8004882:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8004886:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 800488a:	0109      	lsls	r1, r1, #4
 800488c:	f50e 4e61 	add.w	lr, lr, #57600	; 0xe100
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8004890:	f005 051f 	and.w	r5, r5, #31
 8004894:	2701      	movs	r7, #1
 8004896:	fa07 f505 	lsl.w	r5, r7, r5

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800489a:	b2c9      	uxtb	r1, r1
 800489c:	f88e 1300 	strb.w	r1, [lr, #768]	; 0x300
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80048a0:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80048a4:	601d      	str	r5, [r3, #0]
 80048a6:	e7d8      	b.n	800485a <dmaStreamAllocate+0x6a>
bool dmaStreamAllocate(const stm32_dma_stream_t *dmastp,
                       uint32_t priority,
                       stm32_dmaisr_t func,
                       void *param) {

  osalDbgCheck(dmastp != NULL);
 80048a8:	4804      	ldr	r0, [pc, #16]	; (80048bc <dmaStreamAllocate+0xcc>)
 80048aa:	f7fe fea9 	bl	8003600 <chSysHalt>
 80048ae:	bf00      	nop
 80048b0:	20002bd8 	.word	0x20002bd8
 80048b4:	20001210 	.word	0x20001210
 80048b8:	40021000 	.word	0x40021000
 80048bc:	080167c4 	.word	0x080167c4

080048c0 <Vector130>:
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 80048c0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 80048c2:	480f      	ldr	r0, [pc, #60]	; (8004900 <Vector130+0x40>)
 80048c4:	f7fe fe5c 	bl	8003580 <_trace_isr_enter>
 80048c8:	f7ff f8a2 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 80048cc:	4b0d      	ldr	r3, [pc, #52]	; (8004904 <Vector130+0x44>)
 80048ce:	4a0e      	ldr	r2, [pc, #56]	; (8004908 <Vector130+0x48>)
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	0c09      	lsrs	r1, r1, #16
 80048d6:	f001 010e 	and.w	r1, r1, #14
 80048da:	4211      	tst	r1, r2
 80048dc:	d006      	beq.n	80048ec <Vector130+0x2c>
 80048de:	480b      	ldr	r0, [pc, #44]	; (800490c <Vector130+0x4c>)
 80048e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80048e2:	040c      	lsls	r4, r1, #16
 80048e4:	605c      	str	r4, [r3, #4]
 80048e6:	b10a      	cbz	r2, 80048ec <Vector130+0x2c>
 80048e8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 80048ea:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80048ec:	f7ff f878 	bl	80039e0 <_dbg_check_leave_isr>
 80048f0:	4803      	ldr	r0, [pc, #12]	; (8004900 <Vector130+0x40>)
 80048f2:	f7fe fe25 	bl	8003540 <_trace_isr_leave>
}
 80048f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 80048fa:	f000 bc49 	b.w	8005190 <_port_irq_epilogue>
 80048fe:	bf00      	nop
 8004900:	08016720 	.word	0x08016720
 8004904:	40020400 	.word	0x40020400
 8004908:	40020458 	.word	0x40020458
 800490c:	20001210 	.word	0x20001210

08004910 <Vector12C>:
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004910:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004912:	480f      	ldr	r0, [pc, #60]	; (8004950 <Vector12C+0x40>)
 8004914:	f7fe fe34 	bl	8003580 <_trace_isr_enter>
 8004918:	f7ff f87a 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 800491c:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <Vector12C+0x44>)
 800491e:	4a0e      	ldr	r2, [pc, #56]	; (8004958 <Vector12C+0x48>)
 8004920:	6819      	ldr	r1, [r3, #0]
 8004922:	6812      	ldr	r2, [r2, #0]
 8004924:	0b09      	lsrs	r1, r1, #12
 8004926:	f001 010e 	and.w	r1, r1, #14
 800492a:	4211      	tst	r1, r2
 800492c:	d006      	beq.n	800493c <Vector12C+0x2c>
 800492e:	480b      	ldr	r0, [pc, #44]	; (800495c <Vector12C+0x4c>)
 8004930:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004932:	030c      	lsls	r4, r1, #12
 8004934:	605c      	str	r4, [r3, #4]
 8004936:	b10a      	cbz	r2, 800493c <Vector12C+0x2c>
 8004938:	6d40      	ldr	r0, [r0, #84]	; 0x54
 800493a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800493c:	f7ff f850 	bl	80039e0 <_dbg_check_leave_isr>
 8004940:	4803      	ldr	r0, [pc, #12]	; (8004950 <Vector12C+0x40>)
 8004942:	f7fe fdfd 	bl	8003540 <_trace_isr_leave>
}
 8004946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 800494a:	f000 bc21 	b.w	8005190 <_port_irq_epilogue>
 800494e:	bf00      	nop
 8004950:	08016788 	.word	0x08016788
 8004954:	40020400 	.word	0x40020400
 8004958:	40020444 	.word	0x40020444
 800495c:	20001210 	.word	0x20001210

08004960 <Vector128>:
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004960:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004962:	480f      	ldr	r0, [pc, #60]	; (80049a0 <Vector128+0x40>)
 8004964:	f7fe fe0c 	bl	8003580 <_trace_isr_enter>
 8004968:	f7ff f852 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 800496c:	4b0d      	ldr	r3, [pc, #52]	; (80049a4 <Vector128+0x44>)
 800496e:	4a0e      	ldr	r2, [pc, #56]	; (80049a8 <Vector128+0x48>)
 8004970:	6819      	ldr	r1, [r3, #0]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	0a09      	lsrs	r1, r1, #8
 8004976:	f001 010e 	and.w	r1, r1, #14
 800497a:	4211      	tst	r1, r2
 800497c:	d006      	beq.n	800498c <Vector128+0x2c>
 800497e:	480b      	ldr	r0, [pc, #44]	; (80049ac <Vector128+0x4c>)
 8004980:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8004982:	020c      	lsls	r4, r1, #8
 8004984:	605c      	str	r4, [r3, #4]
 8004986:	b10a      	cbz	r2, 800498c <Vector128+0x2c>
 8004988:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800498a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 800498c:	f7ff f828 	bl	80039e0 <_dbg_check_leave_isr>
 8004990:	4803      	ldr	r0, [pc, #12]	; (80049a0 <Vector128+0x40>)
 8004992:	f7fe fdd5 	bl	8003540 <_trace_isr_leave>
}
 8004996:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 800499a:	f000 bbf9 	b.w	8005190 <_port_irq_epilogue>
 800499e:	bf00      	nop
 80049a0:	08016708 	.word	0x08016708
 80049a4:	40020400 	.word	0x40020400
 80049a8:	40020430 	.word	0x40020430
 80049ac:	20001210 	.word	0x20001210

080049b0 <Vector124>:
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80049b0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 80049b2:	480f      	ldr	r0, [pc, #60]	; (80049f0 <Vector124+0x40>)
 80049b4:	f7fe fde4 	bl	8003580 <_trace_isr_enter>
 80049b8:	f7ff f82a 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 80049bc:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <Vector124+0x44>)
 80049be:	4a0e      	ldr	r2, [pc, #56]	; (80049f8 <Vector124+0x48>)
 80049c0:	6819      	ldr	r1, [r3, #0]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	0909      	lsrs	r1, r1, #4
 80049c6:	f001 010e 	and.w	r1, r1, #14
 80049ca:	4211      	tst	r1, r2
 80049cc:	d006      	beq.n	80049dc <Vector124+0x2c>
 80049ce:	480b      	ldr	r0, [pc, #44]	; (80049fc <Vector124+0x4c>)
 80049d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80049d2:	010c      	lsls	r4, r1, #4
 80049d4:	605c      	str	r4, [r3, #4]
 80049d6:	b10a      	cbz	r2, 80049dc <Vector124+0x2c>
 80049d8:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80049da:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 80049dc:	f7ff f800 	bl	80039e0 <_dbg_check_leave_isr>
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <Vector124+0x40>)
 80049e2:	f7fe fdad 	bl	8003540 <_trace_isr_leave>
}
 80049e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 80049ea:	f000 bbd1 	b.w	8005190 <_port_irq_epilogue>
 80049ee:	bf00      	nop
 80049f0:	080166d8 	.word	0x080166d8
 80049f4:	40020400 	.word	0x40020400
 80049f8:	4002041c 	.word	0x4002041c
 80049fc:	20001210 	.word	0x20001210

08004a00 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004a00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004a02:	480e      	ldr	r0, [pc, #56]	; (8004a3c <Vector120+0x3c>)
 8004a04:	f7fe fdbc 	bl	8003580 <_trace_isr_enter>
 8004a08:	f7ff f802 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	; (8004a40 <Vector120+0x40>)
 8004a0e:	4a0d      	ldr	r2, [pc, #52]	; (8004a44 <Vector120+0x44>)
 8004a10:	6819      	ldr	r1, [r3, #0]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	f001 010e 	and.w	r1, r1, #14
 8004a18:	4211      	tst	r1, r2
 8004a1a:	d005      	beq.n	8004a28 <Vector120+0x28>
 8004a1c:	4a0a      	ldr	r2, [pc, #40]	; (8004a48 <Vector120+0x48>)
 8004a1e:	6059      	str	r1, [r3, #4]
 8004a20:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8004a22:	b10b      	cbz	r3, 8004a28 <Vector120+0x28>
 8004a24:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8004a26:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004a28:	f7fe ffda 	bl	80039e0 <_dbg_check_leave_isr>
 8004a2c:	4803      	ldr	r0, [pc, #12]	; (8004a3c <Vector120+0x3c>)
 8004a2e:	f7fe fd87 	bl	8003540 <_trace_isr_leave>
}
 8004a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8004a36:	f000 bbab 	b.w	8005190 <_port_irq_epilogue>
 8004a3a:	bf00      	nop
 8004a3c:	080166e4 	.word	0x080166e4
 8004a40:	40020400 	.word	0x40020400
 8004a44:	40020408 	.word	0x40020408
 8004a48:	20001210 	.word	0x20001210
 8004a4c:	00000000 	.word	0x00000000

08004a50 <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8004a50:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004a52:	480f      	ldr	r0, [pc, #60]	; (8004a90 <Vector84+0x40>)
 8004a54:	f7fe fd94 	bl	8003580 <_trace_isr_enter>
 8004a58:	f7fe ffda 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8004a5c:	4b0d      	ldr	r3, [pc, #52]	; (8004a94 <Vector84+0x44>)
 8004a5e:	4a0e      	ldr	r2, [pc, #56]	; (8004a98 <Vector84+0x48>)
 8004a60:	6819      	ldr	r1, [r3, #0]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	0e09      	lsrs	r1, r1, #24
 8004a66:	f001 010e 	and.w	r1, r1, #14
 8004a6a:	4211      	tst	r1, r2
 8004a6c:	d006      	beq.n	8004a7c <Vector84+0x2c>
 8004a6e:	480b      	ldr	r0, [pc, #44]	; (8004a9c <Vector84+0x4c>)
 8004a70:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004a72:	060c      	lsls	r4, r1, #24
 8004a74:	605c      	str	r4, [r3, #4]
 8004a76:	b10a      	cbz	r2, 8004a7c <Vector84+0x2c>
 8004a78:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8004a7a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004a7c:	f7fe ffb0 	bl	80039e0 <_dbg_check_leave_isr>
 8004a80:	4803      	ldr	r0, [pc, #12]	; (8004a90 <Vector84+0x40>)
 8004a82:	f7fe fd5d 	bl	8003540 <_trace_isr_leave>
}
 8004a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8004a8a:	f000 bb81 	b.w	8005190 <_port_irq_epilogue>
 8004a8e:	bf00      	nop
 8004a90:	08016744 	.word	0x08016744
 8004a94:	40020000 	.word	0x40020000
 8004a98:	40020080 	.word	0x40020080
 8004a9c:	20001210 	.word	0x20001210

08004aa0 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8004aa0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004aa2:	480f      	ldr	r0, [pc, #60]	; (8004ae0 <Vector80+0x40>)
 8004aa4:	f7fe fd6c 	bl	8003580 <_trace_isr_enter>
 8004aa8:	f7fe ffb2 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8004aac:	4b0d      	ldr	r3, [pc, #52]	; (8004ae4 <Vector80+0x44>)
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <Vector80+0x48>)
 8004ab0:	6819      	ldr	r1, [r3, #0]
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	0d09      	lsrs	r1, r1, #20
 8004ab6:	f001 010e 	and.w	r1, r1, #14
 8004aba:	4211      	tst	r1, r2
 8004abc:	d006      	beq.n	8004acc <Vector80+0x2c>
 8004abe:	480b      	ldr	r0, [pc, #44]	; (8004aec <Vector80+0x4c>)
 8004ac0:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8004ac2:	050c      	lsls	r4, r1, #20
 8004ac4:	605c      	str	r4, [r3, #4]
 8004ac6:	b10a      	cbz	r2, 8004acc <Vector80+0x2c>
 8004ac8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8004aca:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004acc:	f7fe ff88 	bl	80039e0 <_dbg_check_leave_isr>
 8004ad0:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <Vector80+0x40>)
 8004ad2:	f7fe fd35 	bl	8003540 <_trace_isr_leave>
}
 8004ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8004ada:	f000 bb59 	b.w	8005190 <_port_irq_epilogue>
 8004ade:	bf00      	nop
 8004ae0:	080167ac 	.word	0x080167ac
 8004ae4:	40020000 	.word	0x40020000
 8004ae8:	4002006c 	.word	0x4002006c
 8004aec:	20001210 	.word	0x20001210

08004af0 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004af0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004af2:	480f      	ldr	r0, [pc, #60]	; (8004b30 <Vector7C+0x40>)
 8004af4:	f7fe fd44 	bl	8003580 <_trace_isr_enter>
 8004af8:	f7fe ff8a 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8004afc:	4b0d      	ldr	r3, [pc, #52]	; (8004b34 <Vector7C+0x44>)
 8004afe:	4a0e      	ldr	r2, [pc, #56]	; (8004b38 <Vector7C+0x48>)
 8004b00:	6819      	ldr	r1, [r3, #0]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	0c09      	lsrs	r1, r1, #16
 8004b06:	f001 010e 	and.w	r1, r1, #14
 8004b0a:	4211      	tst	r1, r2
 8004b0c:	d006      	beq.n	8004b1c <Vector7C+0x2c>
 8004b0e:	480b      	ldr	r0, [pc, #44]	; (8004b3c <Vector7C+0x4c>)
 8004b10:	6a02      	ldr	r2, [r0, #32]
 8004b12:	040c      	lsls	r4, r1, #16
 8004b14:	605c      	str	r4, [r3, #4]
 8004b16:	b10a      	cbz	r2, 8004b1c <Vector7C+0x2c>
 8004b18:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8004b1a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004b1c:	f7fe ff60 	bl	80039e0 <_dbg_check_leave_isr>
 8004b20:	4803      	ldr	r0, [pc, #12]	; (8004b30 <Vector7C+0x40>)
 8004b22:	f7fe fd0d 	bl	8003540 <_trace_isr_leave>
}
 8004b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8004b2a:	f000 bb31 	b.w	8005190 <_port_irq_epilogue>
 8004b2e:	bf00      	nop
 8004b30:	080167a0 	.word	0x080167a0
 8004b34:	40020000 	.word	0x40020000
 8004b38:	40020058 	.word	0x40020058
 8004b3c:	20001210 	.word	0x20001210

08004b40 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8004b40:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004b42:	480f      	ldr	r0, [pc, #60]	; (8004b80 <Vector78+0x40>)
 8004b44:	f7fe fd1c 	bl	8003580 <_trace_isr_enter>
 8004b48:	f7fe ff62 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8004b4c:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <Vector78+0x44>)
 8004b4e:	4a0e      	ldr	r2, [pc, #56]	; (8004b88 <Vector78+0x48>)
 8004b50:	6819      	ldr	r1, [r3, #0]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	0b09      	lsrs	r1, r1, #12
 8004b56:	f001 010e 	and.w	r1, r1, #14
 8004b5a:	4211      	tst	r1, r2
 8004b5c:	d006      	beq.n	8004b6c <Vector78+0x2c>
 8004b5e:	480b      	ldr	r0, [pc, #44]	; (8004b8c <Vector78+0x4c>)
 8004b60:	6982      	ldr	r2, [r0, #24]
 8004b62:	030c      	lsls	r4, r1, #12
 8004b64:	605c      	str	r4, [r3, #4]
 8004b66:	b10a      	cbz	r2, 8004b6c <Vector78+0x2c>
 8004b68:	69c0      	ldr	r0, [r0, #28]
 8004b6a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004b6c:	f7fe ff38 	bl	80039e0 <_dbg_check_leave_isr>
 8004b70:	4803      	ldr	r0, [pc, #12]	; (8004b80 <Vector78+0x40>)
 8004b72:	f7fe fce5 	bl	8003540 <_trace_isr_leave>
}
 8004b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8004b7a:	f000 bb09 	b.w	8005190 <_port_irq_epilogue>
 8004b7e:	bf00      	nop
 8004b80:	08016768 	.word	0x08016768
 8004b84:	40020000 	.word	0x40020000
 8004b88:	40020044 	.word	0x40020044
 8004b8c:	20001210 	.word	0x20001210

08004b90 <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004b90:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004b92:	480f      	ldr	r0, [pc, #60]	; (8004bd0 <Vector74+0x40>)
 8004b94:	f7fe fcf4 	bl	8003580 <_trace_isr_enter>
 8004b98:	f7fe ff3a 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8004b9c:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <Vector74+0x44>)
 8004b9e:	4a0e      	ldr	r2, [pc, #56]	; (8004bd8 <Vector74+0x48>)
 8004ba0:	6819      	ldr	r1, [r3, #0]
 8004ba2:	6812      	ldr	r2, [r2, #0]
 8004ba4:	0a09      	lsrs	r1, r1, #8
 8004ba6:	f001 010e 	and.w	r1, r1, #14
 8004baa:	4211      	tst	r1, r2
 8004bac:	d006      	beq.n	8004bbc <Vector74+0x2c>
 8004bae:	480b      	ldr	r0, [pc, #44]	; (8004bdc <Vector74+0x4c>)
 8004bb0:	6902      	ldr	r2, [r0, #16]
 8004bb2:	020c      	lsls	r4, r1, #8
 8004bb4:	605c      	str	r4, [r3, #4]
 8004bb6:	b10a      	cbz	r2, 8004bbc <Vector74+0x2c>
 8004bb8:	6940      	ldr	r0, [r0, #20]
 8004bba:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004bbc:	f7fe ff10 	bl	80039e0 <_dbg_check_leave_isr>
 8004bc0:	4803      	ldr	r0, [pc, #12]	; (8004bd0 <Vector74+0x40>)
 8004bc2:	f7fe fcbd 	bl	8003540 <_trace_isr_leave>
}
 8004bc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8004bca:	f000 bae1 	b.w	8005190 <_port_irq_epilogue>
 8004bce:	bf00      	nop
 8004bd0:	0801675c 	.word	0x0801675c
 8004bd4:	40020000 	.word	0x40020000
 8004bd8:	40020030 	.word	0x40020030
 8004bdc:	20001210 	.word	0x20001210

08004be0 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8004be0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8004be2:	480f      	ldr	r0, [pc, #60]	; (8004c20 <Vector70+0x40>)
 8004be4:	f7fe fccc 	bl	8003580 <_trace_isr_enter>
 8004be8:	f7fe ff12 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8004bec:	4b0d      	ldr	r3, [pc, #52]	; (8004c24 <Vector70+0x44>)
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <Vector70+0x48>)
 8004bf0:	6819      	ldr	r1, [r3, #0]
 8004bf2:	6812      	ldr	r2, [r2, #0]
 8004bf4:	0909      	lsrs	r1, r1, #4
 8004bf6:	f001 010e 	and.w	r1, r1, #14
 8004bfa:	4211      	tst	r1, r2
 8004bfc:	d006      	beq.n	8004c0c <Vector70+0x2c>
 8004bfe:	480b      	ldr	r0, [pc, #44]	; (8004c2c <Vector70+0x4c>)
 8004c00:	6882      	ldr	r2, [r0, #8]
 8004c02:	010c      	lsls	r4, r1, #4
 8004c04:	605c      	str	r4, [r3, #4]
 8004c06:	b10a      	cbz	r2, 8004c0c <Vector70+0x2c>
 8004c08:	68c0      	ldr	r0, [r0, #12]
 8004c0a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8004c0c:	f7fe fee8 	bl	80039e0 <_dbg_check_leave_isr>
 8004c10:	4803      	ldr	r0, [pc, #12]	; (8004c20 <Vector70+0x40>)
 8004c12:	f7fe fc95 	bl	8003540 <_trace_isr_leave>
}
 8004c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8004c1a:	f000 bab9 	b.w	8005190 <_port_irq_epilogue>
 8004c1e:	bf00      	nop
 8004c20:	0801672c 	.word	0x0801672c
 8004c24:	40020000 	.word	0x40020000
 8004c28:	4002001c 	.word	0x4002001c
 8004c2c:	20001210 	.word	0x20001210

08004c30 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004c30:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004c32:	480e      	ldr	r0, [pc, #56]	; (8004c6c <Vector6C+0x3c>)
 8004c34:	f7fe fca4 	bl	8003580 <_trace_isr_enter>
 8004c38:	f7fe feea 	bl	8003a10 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8004c3c:	4b0c      	ldr	r3, [pc, #48]	; (8004c70 <Vector6C+0x40>)
 8004c3e:	4a0d      	ldr	r2, [pc, #52]	; (8004c74 <Vector6C+0x44>)
 8004c40:	6819      	ldr	r1, [r3, #0]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	f001 010e 	and.w	r1, r1, #14
 8004c48:	4211      	tst	r1, r2
 8004c4a:	d005      	beq.n	8004c58 <Vector6C+0x28>
 8004c4c:	4a0a      	ldr	r2, [pc, #40]	; (8004c78 <Vector6C+0x48>)
 8004c4e:	6059      	str	r1, [r3, #4]
 8004c50:	6813      	ldr	r3, [r2, #0]
 8004c52:	b10b      	cbz	r3, 8004c58 <Vector6C+0x28>
 8004c54:	6850      	ldr	r0, [r2, #4]
 8004c56:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8004c58:	f7fe fec2 	bl	80039e0 <_dbg_check_leave_isr>
 8004c5c:	4803      	ldr	r0, [pc, #12]	; (8004c6c <Vector6C+0x3c>)
 8004c5e:	f7fe fc6f 	bl	8003540 <_trace_isr_leave>
}
 8004c62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8004c66:	f000 ba93 	b.w	8005190 <_port_irq_epilogue>
 8004c6a:	bf00      	nop
 8004c6c:	08016738 	.word	0x08016738
 8004c70:	40020000 	.word	0x40020000
 8004c74:	40020008 	.word	0x40020008
 8004c78:	20001210 	.word	0x20001210
 8004c7c:	00000000 	.word	0x00000000

08004c80 <adc_lld_stop_conversion>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8004c80:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004c82:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8004c84:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8004c86:	684c      	ldr	r4, [r1, #4]
 8004c88:	680d      	ldr	r5, [r1, #0]
 8004c8a:	6820      	ldr	r0, [r4, #0]
 8004c8c:	f020 000f 	bic.w	r0, r0, #15
 8004c90:	6020      	str	r0, [r4, #0]
 8004c92:	7c09      	ldrb	r1, [r1, #16]
 8004c94:	230e      	movs	r3, #14
 8004c96:	408b      	lsls	r3, r1
 8004c98:	606b      	str	r3, [r5, #4]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
 8004c9a:	6893      	ldr	r3, [r2, #8]
 8004c9c:	0759      	lsls	r1, r3, #29
 8004c9e:	d506      	bpl.n	8004cae <adc_lld_stop_conversion+0x2e>
    adcp->adcm->CR |= ADC_CR_ADSTP;
 8004ca0:	6893      	ldr	r3, [r2, #8]
 8004ca2:	f043 0310 	orr.w	r3, r3, #16
 8004ca6:	6093      	str	r3, [r2, #8]
    while (adcp->adcm->CR & ADC_CR_ADSTP)
 8004ca8:	6893      	ldr	r3, [r2, #8]
 8004caa:	06db      	lsls	r3, r3, #27
 8004cac:	d4fc      	bmi.n	8004ca8 <adc_lld_stop_conversion+0x28>
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adc_lld_stop_adc(adcp);
}
 8004cae:	bc30      	pop	{r4, r5}
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
	...

08004cc0 <Vector134>:
/**
 * @brief   ADC4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
 8004cc0:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8004cc2:	4c0a      	ldr	r4, [pc, #40]	; (8004cec <Vector134+0x2c>)
 8004cc4:	4620      	mov	r0, r4
 8004cc6:	f7fe fc5b 	bl	8003580 <_trace_isr_enter>
 8004cca:	f7fe fea1 	bl	8003a10 <_dbg_check_enter_isr>

  isr  = ADC4->ISR;
 8004cce:	4b08      	ldr	r3, [pc, #32]	; (8004cf0 <Vector134+0x30>)
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);
 8004cd0:	4808      	ldr	r0, [pc, #32]	; (8004cf4 <Vector134+0x34>)
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC4->ISR;
 8004cd2:	6819      	ldr	r1, [r3, #0]
  ADC4->ISR = isr;
 8004cd4:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD4, isr);
 8004cd6:	f7fd fe73 	bl	80029c0 <adc_lld_serve_interrupt.lto_priv.116>

  OSAL_IRQ_EPILOGUE();
 8004cda:	f7fe fe81 	bl	80039e0 <_dbg_check_leave_isr>
 8004cde:	4620      	mov	r0, r4
 8004ce0:	f7fe fc2e 	bl	8003540 <_trace_isr_leave>
}
 8004ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  isr  = ADC4->ISR;
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);

  OSAL_IRQ_EPILOGUE();
 8004ce8:	f000 ba52 	b.w	8005190 <_port_irq_epilogue>
 8004cec:	080166f0 	.word	0x080166f0
 8004cf0:	50000500 	.word	0x50000500
 8004cf4:	20004be0 	.word	0x20004be0
	...

08004d00 <VectorFC>:
/**
 * @brief   ADC3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
 8004d00:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8004d02:	4c0a      	ldr	r4, [pc, #40]	; (8004d2c <VectorFC+0x2c>)
 8004d04:	4620      	mov	r0, r4
 8004d06:	f7fe fc3b 	bl	8003580 <_trace_isr_enter>
 8004d0a:	f7fe fe81 	bl	8003a10 <_dbg_check_enter_isr>

  isr  = ADC3->ISR;
 8004d0e:	4b08      	ldr	r3, [pc, #32]	; (8004d30 <VectorFC+0x30>)
  ADC3->ISR = isr;
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);
 8004d10:	4808      	ldr	r0, [pc, #32]	; (8004d34 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC3->ISR;
 8004d12:	6819      	ldr	r1, [r3, #0]
  ADC3->ISR = isr;
 8004d14:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);
 8004d16:	f7fd fe53 	bl	80029c0 <adc_lld_serve_interrupt.lto_priv.116>

  OSAL_IRQ_EPILOGUE();
 8004d1a:	f7fe fe61 	bl	80039e0 <_dbg_check_leave_isr>
 8004d1e:	4620      	mov	r0, r4
 8004d20:	f7fe fc0e 	bl	8003540 <_trace_isr_leave>
}
 8004d24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);

  OSAL_IRQ_EPILOGUE();
 8004d28:	f000 ba32 	b.w	8005190 <_port_irq_epilogue>
 8004d2c:	080166cc 	.word	0x080166cc
 8004d30:	50000400 	.word	0x50000400
 8004d34:	20004ba8 	.word	0x20004ba8
	...

08004d40 <Vector88>:
/**
 * @brief   ADC1/ADC2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC1_HANDLER) {
 8004d40:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8004d42:	4c0e      	ldr	r4, [pc, #56]	; (8004d7c <Vector88+0x3c>)
 8004d44:	4620      	mov	r0, r4
 8004d46:	f7fe fc1b 	bl	8003580 <_trace_isr_enter>
 8004d4a:	f7fe fe61 	bl	8003a10 <_dbg_check_enter_isr>
  adc_lld_serve_interrupt(&ADCD1, isr);

#else /* !STM32_ADC_DUAL_MODE */

#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8004d4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  ADC1->ISR = isr;
#if defined(STM32_ADC_ADC1_IRQ_HOOK)
  STM32_ADC_ADC1_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
 8004d52:	480b      	ldr	r0, [pc, #44]	; (8004d80 <Vector88+0x40>)
  adc_lld_serve_interrupt(&ADCD1, isr);

#else /* !STM32_ADC_DUAL_MODE */

#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8004d54:	6819      	ldr	r1, [r3, #0]
  ADC1->ISR = isr;
 8004d56:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC1_IRQ_HOOK)
  STM32_ADC_ADC1_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
 8004d58:	f7fd fe32 	bl	80029c0 <adc_lld_serve_interrupt.lto_priv.116>
#endif

#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8004d5c:	4b09      	ldr	r3, [pc, #36]	; (8004d84 <Vector88+0x44>)
  ADC2->ISR = isr;
#if defined(STM32_ADC_ADC2_IRQ_HOOK)
  STM32_ADC_ADC2_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD2, isr);
 8004d5e:	480a      	ldr	r0, [pc, #40]	; (8004d88 <Vector88+0x48>)
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
#endif

#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8004d60:	6819      	ldr	r1, [r3, #0]
  ADC2->ISR = isr;
 8004d62:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC2_IRQ_HOOK)
  STM32_ADC_ADC2_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD2, isr);
 8004d64:	f7fd fe2c 	bl	80029c0 <adc_lld_serve_interrupt.lto_priv.116>
#endif

#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
 8004d68:	f7fe fe3a 	bl	80039e0 <_dbg_check_leave_isr>
 8004d6c:	4620      	mov	r0, r4
 8004d6e:	f7fe fbe7 	bl	8003540 <_trace_isr_leave>
}
 8004d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adc_lld_serve_interrupt(&ADCD2, isr);
#endif

#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
 8004d76:	f000 ba0b 	b.w	8005190 <_port_irq_epilogue>
 8004d7a:	bf00      	nop
 8004d7c:	080166fc 	.word	0x080166fc
 8004d80:	20004b38 	.word	0x20004b38
 8004d84:	50000100 	.word	0x50000100
 8004d88:	20004b70 	.word	0x20004b70
 8004d8c:	00000000 	.word	0x00000000

08004d90 <Thread1.lto_priv.52>:
    chprintf((BaseSequentialStream*)&SD1,"rainTotal %d \r\n",rainTotal);
    return (rainTotal/100.0)*6.0;
}

static THD_WORKING_AREA(waThread1, 128);
static THD_FUNCTION(Thread1, arg) {
 8004d90:	b508      	push	{r3, lr}
 8004d92:	4e15      	ldr	r6, [pc, #84]	; (8004de8 <Thread1.lto_priv.52+0x58>)
 8004d94:	4d15      	ldr	r5, [pc, #84]	; (8004dec <Thread1.lto_priv.52+0x5c>)
  (void)arg;
  int trigger;

  while (TRUE) {
      trigger = palReadPad(GPIOC,6);
 8004d96:	4c16      	ldr	r4, [pc, #88]	; (8004df0 <Thread1.lto_priv.52+0x60>)
 8004d98:	6923      	ldr	r3, [r4, #16]
      if (trigger == 0)
 8004d9a:	0659      	lsls	r1, r3, #25
 8004d9c:	d41a      	bmi.n	8004dd4 <Thread1.lto_priv.52+0x44>
	  {
	      rainHistory[0] += 1;
 8004d9e:	7833      	ldrb	r3, [r6, #0]
	      lifetimeRain += 0.01;
 8004da0:	6828      	ldr	r0, [r5, #0]

  while (TRUE) {
      trigger = palReadPad(GPIOC,6);
      if (trigger == 0)
	  {
	      rainHistory[0] += 1;
 8004da2:	3301      	adds	r3, #1
 8004da4:	7033      	strb	r3, [r6, #0]
	      lifetimeRain += 0.01;
 8004da6:	f7fb fc11 	bl	80005cc <__aeabi_f2d>
 8004daa:	a30d      	add	r3, pc, #52	; (adr r3, 8004de0 <Thread1.lto_priv.52+0x50>)
 8004dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db0:	f7fb faae 	bl	8000310 <__adddf3>
 8004db4:	f7fb ff20 	bl	8000bf8 <__aeabi_d2f>
 8004db8:	6028      	str	r0, [r5, #0]
	      chThdSleepMilliseconds(250); // debounce
 8004dba:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8004dbe:	f7ff f917 	bl	8003ff0 <chThdSleep>
	      while (palReadPad(GPIOC,6)==0)
 8004dc2:	6923      	ldr	r3, [r4, #16]
 8004dc4:	065a      	lsls	r2, r3, #25
 8004dc6:	d405      	bmi.n	8004dd4 <Thread1.lto_priv.52+0x44>
		  chThdSleepMilliseconds(10); // wait till clear
 8004dc8:	2064      	movs	r0, #100	; 0x64
 8004dca:	f7ff f911 	bl	8003ff0 <chThdSleep>
      if (trigger == 0)
	  {
	      rainHistory[0] += 1;
	      lifetimeRain += 0.01;
	      chThdSleepMilliseconds(250); // debounce
	      while (palReadPad(GPIOC,6)==0)
 8004dce:	6923      	ldr	r3, [r4, #16]
 8004dd0:	065b      	lsls	r3, r3, #25
 8004dd2:	d5f9      	bpl.n	8004dc8 <Thread1.lto_priv.52+0x38>
		  chThdSleepMilliseconds(10); // wait till clear
	  }
      chThdSleepMilliseconds(10); // loop 
 8004dd4:	2064      	movs	r0, #100	; 0x64
 8004dd6:	f7ff f90b 	bl	8003ff0 <chThdSleep>
 8004dda:	e7dd      	b.n	8004d98 <Thread1.lto_priv.52+0x8>
 8004ddc:	f3af 8000 	nop.w
 8004de0:	47ae147b 	.word	0x47ae147b
 8004de4:	3f847ae1 	.word	0x3f847ae1
 8004de8:	20004240 	.word	0x20004240
 8004dec:	200029c8 	.word	0x200029c8
 8004df0:	48000800 	.word	0x48000800
	...

08004e00 <Thread6.lto_priv.53>:
	}
}


static THD_WORKING_AREA(waThread6, 128);
static THD_FUNCTION(Thread6, arg) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	4e15      	ldr	r6, [pc, #84]	; (8004e58 <Thread6.lto_priv.53+0x58>)
 8004e04:	4f15      	ldr	r7, [pc, #84]	; (8004e5c <Thread6.lto_priv.53+0x5c>)
 8004e06:	4d16      	ldr	r5, [pc, #88]	; (8004e60 <Thread6.lto_priv.53+0x60>)
}

float calcRainRate(){
    int x;
    int rainTotal;
    rainTotal = 0;
 8004e08:	2400      	movs	r4, #0
	}
}


static THD_WORKING_AREA(waThread6, 128);
static THD_FUNCTION(Thread6, arg) {
 8004e0a:	f1a5 030a 	sub.w	r3, r5, #10
float calcRainRate(){
    int x;
    int rainTotal;
    rainTotal = 0;
    for (x=0;x<10;x++)
	rainTotal += rainHistory[x];
 8004e0e:	f813 2b01 	ldrb.w	r2, [r3], #1

float calcRainRate(){
    int x;
    int rainTotal;
    rainTotal = 0;
    for (x=0;x<10;x++)
 8004e12:	42ab      	cmp	r3, r5
	rainTotal += rainHistory[x];
 8004e14:	4414      	add	r4, r2

float calcRainRate(){
    int x;
    int rainTotal;
    rainTotal = 0;
    for (x=0;x<10;x++)
 8004e16:	d1fa      	bne.n	8004e0e <Thread6.lto_priv.53+0xe>
	rainTotal += rainHistory[x];
    chprintf((BaseSequentialStream*)&SD1,"rainTotal %d \r\n",rainTotal);
 8004e18:	4622      	mov	r2, r4
 8004e1a:	4912      	ldr	r1, [pc, #72]	; (8004e64 <Thread6.lto_priv.53+0x64>)
 8004e1c:	4812      	ldr	r0, [pc, #72]	; (8004e68 <Thread6.lto_priv.53+0x68>)
 8004e1e:	f000 fec7 	bl	8005bb0 <chprintf.constprop.4>
    return (rainTotal/100.0)*6.0;
 8004e22:	4620      	mov	r0, r4
 8004e24:	f7fb fbc0 	bl	80005a8 <__aeabi_i2d>
 8004e28:	2200      	movs	r2, #0
 8004e2a:	4b10      	ldr	r3, [pc, #64]	; (8004e6c <Thread6.lto_priv.53+0x6c>)
 8004e2c:	f7fb fd4c 	bl	80008c8 <__aeabi_ddiv>
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <Thread6.lto_priv.53+0x70>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	f7fb fc1e 	bl	8000674 <__aeabi_dmul>
 8004e38:	f7fb fede 	bl	8000bf8 <__aeabi_d2f>
 8004e3c:	4b0d      	ldr	r3, [pc, #52]	; (8004e74 <Thread6.lto_priv.53+0x74>)
 8004e3e:	6038      	str	r0, [r7, #0]
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    rainRate = calcRainRate();
	    for (x=0;x<9;x++)		  
		rainHistory[9-x] = rainHistory[8-x];
 8004e40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004e44:	705a      	strb	r2, [r3, #1]
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    rainRate = calcRainRate();
	    for (x=0;x<9;x++)		  
 8004e46:	42b3      	cmp	r3, r6
 8004e48:	d1fa      	bne.n	8004e40 <Thread6.lto_priv.53+0x40>
		rainHistory[9-x] = rainHistory[8-x];

	    rainHistory[0] = 0;
 8004e4a:	2300      	movs	r3, #0
	    chThdSleepMilliseconds(1000*60); // sleep for a minute
 8004e4c:	480a      	ldr	r0, [pc, #40]	; (8004e78 <Thread6.lto_priv.53+0x78>)
	    // causes it to read whatever we send.
	    rainRate = calcRainRate();
	    for (x=0;x<9;x++)		  
		rainHistory[9-x] = rainHistory[8-x];

	    rainHistory[0] = 0;
 8004e4e:	f805 3c0a 	strb.w	r3, [r5, #-10]
	    chThdSleepMilliseconds(1000*60); // sleep for a minute
 8004e52:	f7ff f8cd 	bl	8003ff0 <chThdSleep>
 8004e56:	e7d6      	b.n	8004e06 <Thread6.lto_priv.53+0x6>
 8004e58:	20004240 	.word	0x20004240
 8004e5c:	20002d08 	.word	0x20002d08
 8004e60:	2000424a 	.word	0x2000424a
 8004e64:	08016858 	.word	0x08016858
 8004e68:	2000424c 	.word	0x2000424c
 8004e6c:	40590000 	.word	0x40590000
 8004e70:	40180000 	.word	0x40180000
 8004e74:	20004249 	.word	0x20004249
 8004e78:	000927c0 	.word	0x000927c0
 8004e7c:	00000000 	.word	0x00000000

08004e80 <Thread2.lto_priv.51>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8004e80:	4b26      	ldr	r3, [pc, #152]	; (8004f1c <Thread2.lto_priv.51+0x9c>)
 8004e82:	4a27      	ldr	r2, [pc, #156]	; (8004f20 <Thread2.lto_priv.51+0xa0>)
 8004e84:	699b      	ldr	r3, [r3, #24]
  int blink;
  uint8_t pixel;
  uint8_t pixel2;
  chRegSetThreadName("ScreenRefresh");

  chprintf((BaseSequentialStream*)&SD1,"Start Update\r\n");
 8004e86:	4827      	ldr	r0, [pc, #156]	; (8004f24 <Thread2.lto_priv.51+0xa4>)
 8004e88:	4927      	ldr	r1, [pc, #156]	; (8004f28 <Thread2.lto_priv.51+0xa8>)
 8004e8a:	4e28      	ldr	r6, [pc, #160]	; (8004f2c <Thread2.lto_priv.51+0xac>)
  
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
 8004e8c:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8004f40 <Thread2.lto_priv.51+0xc0>
      chThdSleepMilliseconds(10); // loop 
  }
}

static THD_WORKING_AREA(waThread2, 128);
static THD_FUNCTION(Thread2, arg) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	619a      	str	r2, [r3, #24]
  int blink;
  uint8_t pixel;
  uint8_t pixel2;
  chRegSetThreadName("ScreenRefresh");

  chprintf((BaseSequentialStream*)&SD1,"Start Update\r\n");
 8004e94:	f000 fe8c 	bl	8005bb0 <chprintf.constprop.4>
 8004e98:	4f25      	ldr	r7, [pc, #148]	; (8004f30 <Thread2.lto_priv.51+0xb0>)
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
	      pixel2 = (vbuf[x][y]&0xF0)>>4;
	      pixel = (vbuf[x][y]&0x0F)<<4;
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
 8004e9a:	24ff      	movs	r4, #255	; 0xff
  chRegSetThreadName("ScreenRefresh");

  chprintf((BaseSequentialStream*)&SD1,"Start Update\r\n");
  
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
 8004e9c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ea0:	f04f 0800 	mov.w	r8, #0
 8004ea4:	f003 0540 	and.w	r5, r3, #64	; 0x40
 8004ea8:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8004eac:	f5c8 5380 	rsb	r3, r8, #4096	; 0x1000
 8004eb0:	f108 0e7f 	add.w	lr, r8, #127	; 0x7f
 8004eb4:	4432      	add	r2, r6
 8004eb6:	443b      	add	r3, r7
 8004eb8:	44b6      	add	lr, r6
 8004eba:	e004      	b.n	8004ec6 <Thread2.lto_priv.51+0x46>
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
 8004ebc:	4596      	cmp	lr, r2
	      pixel2 = (vbuf[x][y]&0xF0)>>4;
	      pixel = (vbuf[x][y]&0x0F)<<4;
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
 8004ebe:	701c      	strb	r4, [r3, #0]
 8004ec0:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
 8004ec4:	d00b      	beq.n	8004ede <Thread2.lto_priv.51+0x5e>
	      pixel2 = (vbuf[x][y]&0xF0)>>4;
 8004ec6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	      pixel = (vbuf[x][y]&0x0F)<<4;
	      if (blink==0)
 8004eca:	2d00      	cmp	r5, #0
 8004ecc:	d0f6      	beq.n	8004ebc <Thread2.lto_priv.51+0x3c>
      blink = palReadPad(GPIOC,6);
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
	      pixel2 = (vbuf[x][y]&0xF0)>>4;
 8004ece:	0901      	lsrs	r1, r0, #4
	      pixel = (vbuf[x][y]&0x0F)<<4;
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
	      else
		  vbuf2[31-x][128-y] = pixel|pixel2;
 8004ed0:	ea41 1100 	orr.w	r1, r1, r0, lsl #4
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
 8004ed4:	4596      	cmp	lr, r2
	      pixel2 = (vbuf[x][y]&0xF0)>>4;
	      pixel = (vbuf[x][y]&0x0F)<<4;
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
	      else
		  vbuf2[31-x][128-y] = pixel|pixel2;
 8004ed6:	7019      	strb	r1, [r3, #0]
 8004ed8:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
	  for (y=0;y<128;y++){
 8004edc:	d1f3      	bne.n	8004ec6 <Thread2.lto_priv.51+0x46>
 8004ede:	f108 0880 	add.w	r8, r8, #128	; 0x80
  
  while (TRUE) {
      blink = palReadPad(GPIOC,6);
      // reverse pixels and then rotate entire display
      // before writing to LCD
      for (x=0;x<32;x++)
 8004ee2:	f5b8 5f80 	cmp.w	r8, #4096	; 0x1000
 8004ee6:	d1df      	bne.n	8004ea8 <Thread2.lto_priv.51+0x28>
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
	      else
		  vbuf2[31-x][128-y] = pixel|pixel2;
      }
      palSetPad(GPIOB,DC);
 8004ee8:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <Thread2.lto_priv.51+0xb4>)
      spiStart(&SPID2,&std_spicfg3);
 8004eea:	4913      	ldr	r1, [pc, #76]	; (8004f38 <Thread2.lto_priv.51+0xb8>)
 8004eec:	4813      	ldr	r0, [pc, #76]	; (8004f3c <Thread2.lto_priv.51+0xbc>)
	      if (blink==0)
		  vbuf2[31-x][128-y] = 0xFF;
	      else
		  vbuf2[31-x][128-y] = pixel|pixel2;
      }
      palSetPad(GPIOB,DC);
 8004eee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ef2:	831a      	strh	r2, [r3, #24]
      spiStart(&SPID2,&std_spicfg3);
 8004ef4:	f7fd ff84 	bl	8002e00 <spiStart>
      spiSelect(&SPID2);
 8004ef8:	4810      	ldr	r0, [pc, #64]	; (8004f3c <Thread2.lto_priv.51+0xbc>)
 8004efa:	f7fd fef1 	bl	8002ce0 <spiSelect>
      spiSend(&SPID2,128*32,&vbuf2);
 8004efe:	4641      	mov	r1, r8
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <Thread2.lto_priv.51+0xb0>)
 8004f02:	480e      	ldr	r0, [pc, #56]	; (8004f3c <Thread2.lto_priv.51+0xbc>)
 8004f04:	f7fd fe64 	bl	8002bd0 <spiSend>
      spiUnselect(&SPID2);
 8004f08:	480c      	ldr	r0, [pc, #48]	; (8004f3c <Thread2.lto_priv.51+0xbc>)
 8004f0a:	f7fd feb9 	bl	8002c80 <spiUnselect>
      spiStop(&SPID2);
 8004f0e:	480b      	ldr	r0, [pc, #44]	; (8004f3c <Thread2.lto_priv.51+0xbc>)
 8004f10:	f7fd ff16 	bl	8002d40 <spiStop>

      chThdSleepMilliseconds(1);
 8004f14:	200a      	movs	r0, #10
 8004f16:	f7ff f86b 	bl	8003ff0 <chThdSleep>
 8004f1a:	e7bf      	b.n	8004e9c <Thread2.lto_priv.51+0x1c>
 8004f1c:	200042b0 	.word	0x200042b0
 8004f20:	08016868 	.word	0x08016868
 8004f24:	2000424c 	.word	0x2000424c
 8004f28:	08016878 	.word	0x08016878
 8004f2c:	20004c1c 	.word	0x20004c1c
 8004f30:	2000323c 	.word	0x2000323c
 8004f34:	48000400 	.word	0x48000400
 8004f38:	08016808 	.word	0x08016808
 8004f3c:	20002a44 	.word	0x20002a44
 8004f40:	48000800 	.word	0x48000800
	...

08004f50 <adcerrorcallback.lto_priv.66>:
#define ADC_GRP1_BUF_DEPTH      1
#define ADC_GRP2_BUF_DEPTH      1
static adcsample_t samples1[ADC_GRP1_NUM_CHANNELS * ADC_GRP1_BUF_DEPTH];
static adcsample_t samples2[ADC_GRP2_NUM_CHANNELS * ADC_GRP2_BUF_DEPTH];
size_t nx = 0, ny = 0;
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8004f50:	b508      	push	{r3, lr}
};


dbg(char *string)
{
    chprintf((BaseSequentialStream*)&SD1,string);
 8004f52:	4805      	ldr	r0, [pc, #20]	; (8004f68 <adcerrorcallback.lto_priv.66+0x18>)
 8004f54:	4905      	ldr	r1, [pc, #20]	; (8004f6c <adcerrorcallback.lto_priv.66+0x1c>)
 8004f56:	f000 fe2b 	bl	8005bb0 <chprintf.constprop.4>
    chThdSleepMilliseconds(100);
 8004f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {

  (void)adcp;
  (void)err;
  dbg('error!!');
}
 8004f5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}


dbg(char *string)
{
    chprintf((BaseSequentialStream*)&SD1,string);
    chThdSleepMilliseconds(100);
 8004f62:	f7ff b845 	b.w	8003ff0 <chThdSleep>
 8004f66:	bf00      	nop
 8004f68:	2000424c 	.word	0x2000424c
 8004f6c:	6f722121 	.word	0x6f722121

08004f70 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8004f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f72:	460e      	mov	r6, r1
 8004f74:	4605      	mov	r5, r0
 8004f76:	4614      	mov	r4, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 8004f78:	f7fe fb9a 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8004f7c:	b1b6      	cbz	r6, 8004fac <chCoreAllocAlignedWithOffsetI+0x3c>
 8004f7e:	1e70      	subs	r0, r6, #1
 8004f80:	ea10 0706 	ands.w	r7, r0, r6
 8004f84:	d112      	bne.n	8004fac <chCoreAllocAlignedWithOffsetI+0x3c>

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8004f86:	4a0c      	ldr	r2, [pc, #48]	; (8004fb8 <chCoreAllocAlignedWithOffsetI+0x48>)
 8004f88:	6813      	ldr	r3, [r2, #0]
 8004f8a:	441c      	add	r4, r3
 8004f8c:	3d01      	subs	r5, #1
 8004f8e:	4434      	add	r4, r6
 8004f90:	3c01      	subs	r4, #1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8004f92:	4271      	negs	r1, r6
 8004f94:	4435      	add	r5, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8004f96:	ea04 0001 	and.w	r0, r4, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 8004f9a:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8004f9c:	6854      	ldr	r4, [r2, #4]
  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
 8004f9e:	4401      	add	r1, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8004fa0:	42a1      	cmp	r1, r4
 8004fa2:	d806      	bhi.n	8004fb2 <chCoreAllocAlignedWithOffsetI+0x42>
 8004fa4:	428b      	cmp	r3, r1
 8004fa6:	d804      	bhi.n	8004fb2 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8004fa8:	6011      	str	r1, [r2, #0]
 8004faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                    unsigned align,
                                    size_t offset) {
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8004fac:	4803      	ldr	r0, [pc, #12]	; (8004fbc <chCoreAllocAlignedWithOffsetI+0x4c>)
 8004fae:	f7fe fb27 	bl	8003600 <chSysHalt>
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
 8004fb2:	4638      	mov	r0, r7
  }

  ch_memcore.nextmem = next;

  return p;
}
 8004fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20001270 	.word	0x20001270
 8004fbc:	0801682c 	.word	0x0801682c

08004fc0 <chCoreAllocAlignedI.lto_priv.63>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f7ff bfd5 	b.w	8004f70 <chCoreAllocAlignedWithOffsetI>
 8004fc6:	bf00      	nop
	...

08004fd0 <fillTemp>:
    return pt100temp;
}


void fillTemp(char* metric,float temp,int temp_num){
    if (abs(temp) >100)
 8004fd0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8004fd4:	ee17 3a90 	vmov	r3, s15
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bfb8      	it	lt
 8004fdc:	425b      	neglt	r3, r3
 8004fde:	2b64      	cmp	r3, #100	; 0x64
 8004fe0:	dc10      	bgt.n	8005004 <fillTemp+0x34>
    pt100temp = (sqrt(pt100temp) + z1) / z4;
    return pt100temp;
}


void fillTemp(char* metric,float temp,int temp_num){
 8004fe2:	b530      	push	{r4, r5, lr}
 8004fe4:	4605      	mov	r5, r0
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	ee10 0a10 	vmov	r0, s0
 8004fec:	460c      	mov	r4, r1
    if (abs(temp) >100)
	sprintf(metric,"Temp%d: N/C",temp_num);
    else
	sprintf(metric,"Temp%d:%3.0fc",temp_num,temp);	    
 8004fee:	f7fb faed 	bl	80005cc <__aeabi_f2d>
 8004ff2:	4622      	mov	r2, r4
 8004ff4:	e9cd 0100 	strd	r0, r1, [sp]
 8004ff8:	4628      	mov	r0, r5
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <fillTemp+0x3c>)
 8004ffc:	f001 fbda 	bl	80067b4 <sprintf>
}
 8005000:	b003      	add	sp, #12
 8005002:	bd30      	pop	{r4, r5, pc}
}


void fillTemp(char* metric,float temp,int temp_num){
    if (abs(temp) >100)
	sprintf(metric,"Temp%d: N/C",temp_num);
 8005004:	460a      	mov	r2, r1
 8005006:	4902      	ldr	r1, [pc, #8]	; (8005010 <fillTemp+0x40>)
 8005008:	f001 bbd4 	b.w	80067b4 <sprintf>
 800500c:	08016894 	.word	0x08016894
 8005010:	08016888 	.word	0x08016888
	...

08005020 <write_flash>:

}

void unlock_flash()
{
    if (FLASH->CR & FLASH_CR_LOCK){
 8005020:	4b19      	ldr	r3, [pc, #100]	; (8005088 <write_flash+0x68>)
 8005022:	691a      	ldr	r2, [r3, #16]
    
}


void write_flash(uint16_t value,uint16_t* flash)
{
 8005024:	b410      	push	{r4}

}

void unlock_flash()
{
    if (FLASH->CR & FLASH_CR_LOCK){
 8005026:	0614      	lsls	r4, r2, #24
 8005028:	d503      	bpl.n	8005032 <write_flash+0x12>
	FLASH->KEYR = 0x45670123;
 800502a:	4c18      	ldr	r4, [pc, #96]	; (800508c <write_flash+0x6c>)
	FLASH->KEYR = 0xCDEF89AB;
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <write_flash+0x70>)
}

void unlock_flash()
{
    if (FLASH->CR & FLASH_CR_LOCK){
	FLASH->KEYR = 0x45670123;
 800502e:	605c      	str	r4, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8005030:	605a      	str	r2, [r3, #4]
{
    int x;
    unlock_flash();                        // must unlock flash before
					   // any write operations

    FLASH->CR |= FLASH_CR_PER;             // set page erase
 8005032:	4c15      	ldr	r4, [pc, #84]	; (8005088 <write_flash+0x68>)
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	f043 0302 	orr.w	r3, r3, #2
 800503a:	6123      	str	r3, [r4, #16]
    
    FLASH->AR = flash;                     // set page to flash
 800503c:	6161      	str	r1, [r4, #20]
    
    FLASH->CR |= FLASH_CR_STRT;            // start erasing
 800503e:	6923      	ldr	r3, [r4, #16]
 8005040:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005044:	6123      	str	r3, [r4, #16]
    
    while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY); // loop till done
 8005046:	68e2      	ldr	r2, [r4, #12]
 8005048:	4b0f      	ldr	r3, [pc, #60]	; (8005088 <write_flash+0x68>)
 800504a:	07d2      	lsls	r2, r2, #31
 800504c:	d4fb      	bmi.n	8005046 <write_flash+0x26>
							// watchdog should
							// reset if it gets
							// stuck

    SET_BIT (FLASH->SR, (FLASH_SR_EOP));   // tech note RM0316 says to clear
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	f042 0220 	orr.w	r2, r2, #32
 8005054:	60da      	str	r2, [r3, #12]
    CLEAR_BIT (FLASH->CR, (FLASH_CR_PER)); // found note online that you must
 8005056:	691a      	ldr	r2, [r3, #16]
 8005058:	f022 0202 	bic.w	r2, r2, #2
 800505c:	611a      	str	r2, [r3, #16]
    int x;
    erase_flash(flash);


      
    SET_BIT(FLASH->CR, (FLASH_CR_PG));     // we are already unlocked, trying
 800505e:	691a      	ldr	r2, [r3, #16]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	611a      	str	r2, [r3, #16]
					   // to do it again will mess
					   // things up
    
    *flash = value;                        // actually write the value
 8005066:	8008      	strh	r0, [r1, #0]

    
    while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY); // loop till done
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	4907      	ldr	r1, [pc, #28]	; (8005088 <write_flash+0x68>)
 800506c:	07d2      	lsls	r2, r2, #31
 800506e:	d4fb      	bmi.n	8005068 <write_flash+0x48>
							// watchdog should
							// reset if it gets
							// stuck
    CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));  // probably don't need to to this
 8005070:	690b      	ldr	r3, [r1, #16]
					   // again
    
    SET_BIT (FLASH->SR, (FLASH_SR_EOP));   // tech note RM0316 says to clear
}
 8005072:	f85d 4b04 	ldr.w	r4, [sp], #4
    
    while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY); // loop till done
							// watchdog should
							// reset if it gets
							// stuck
    CLEAR_BIT (FLASH->CR, (FLASH_CR_PG));  // probably don't need to to this
 8005076:	f023 0301 	bic.w	r3, r3, #1
 800507a:	610b      	str	r3, [r1, #16]
					   // again
    
    SET_BIT (FLASH->SR, (FLASH_SR_EOP));   // tech note RM0316 says to clear
 800507c:	68cb      	ldr	r3, [r1, #12]
 800507e:	f043 0320 	orr.w	r3, r3, #32
 8005082:	60cb      	str	r3, [r1, #12]
}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40022000 	.word	0x40022000
 800508c:	45670123 	.word	0x45670123
 8005090:	cdef89ab 	.word	0xcdef89ab
	...

080050a0 <Thread7.lto_priv.54>:
	}
}


static THD_WORKING_AREA(waThread7, 128);
static THD_FUNCTION(Thread7, arg) {
 80050a0:	b500      	push	{lr}
 80050a2:	4e10      	ldr	r6, [pc, #64]	; (80050e4 <Thread7.lto_priv.54+0x44>)
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    savedvalue = *flash2;
	    currentvalue = lifetimeRain*100;
 80050a4:	ed9f 8a10 	vldr	s16, [pc, #64]	; 80050e8 <Thread7.lto_priv.54+0x48>
    uint16_t savedvalue;
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    savedvalue = *flash2;
 80050a8:	4d10      	ldr	r5, [pc, #64]	; (80050ec <Thread7.lto_priv.54+0x4c>)
	}
}


static THD_WORKING_AREA(waThread7, 128);
static THD_FUNCTION(Thread7, arg) {
 80050aa:	b083      	sub	sp, #12
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    savedvalue = *flash2;
	    currentvalue = lifetimeRain*100;
 80050ac:	edd6 7a00 	vldr	s15, [r6]
	    if (currentvalue != savedvalue)
 80050b0:	882b      	ldrh	r3, [r5, #0]
		{
		    write_flash(currentvalue,flash2);
 80050b2:	490e      	ldr	r1, [pc, #56]	; (80050ec <Thread7.lto_priv.54+0x4c>)
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    savedvalue = *flash2;
	    currentvalue = lifetimeRain*100;
 80050b4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80050b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050bc:	edcd 7a01 	vstr	s15, [sp, #4]
 80050c0:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	    if (currentvalue != savedvalue)
 80050c4:	42a3      	cmp	r3, r4
		{
		    write_flash(currentvalue,flash2);
 80050c6:	4620      	mov	r0, r4
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    savedvalue = *flash2;
	    currentvalue = lifetimeRain*100;
	    if (currentvalue != savedvalue)
 80050c8:	d007      	beq.n	80050da <Thread7.lto_priv.54+0x3a>
		{
		    write_flash(currentvalue,flash2);
 80050ca:	f7ff ffa9 	bl	8005020 <write_flash>
		    chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,%d,%d\r\n",currentvalue,*flash2);
 80050ce:	4622      	mov	r2, r4
 80050d0:	4807      	ldr	r0, [pc, #28]	; (80050f0 <Thread7.lto_priv.54+0x50>)
 80050d2:	4908      	ldr	r1, [pc, #32]	; (80050f4 <Thread7.lto_priv.54+0x54>)
 80050d4:	882b      	ldrh	r3, [r5, #0]
 80050d6:	f000 fd6b 	bl	8005bb0 <chprintf.constprop.4>
		    
		}
	    chThdSleepMilliseconds(1000*60*60); // sleep for an hour
 80050da:	4807      	ldr	r0, [pc, #28]	; (80050f8 <Thread7.lto_priv.54+0x58>)
 80050dc:	f7fe ff88 	bl	8003ff0 <chThdSleep>
 80050e0:	e7e4      	b.n	80050ac <Thread7.lto_priv.54+0xc>
 80050e2:	bf00      	nop
 80050e4:	200029c8 	.word	0x200029c8
 80050e8:	42c80000 	.word	0x42c80000
 80050ec:	0803e800 	.word	0x0803e800
 80050f0:	2000424c 	.word	0x2000424c
 80050f4:	080168a4 	.word	0x080168a4
 80050f8:	02255100 	.word	0x02255100
 80050fc:	00000000 	.word	0x00000000

08005100 <led_write0>:
};



void led_write0(location)
{
 8005100:	b538      	push	{r3, r4, r5, lr}
  spiStart(&SPID2,&std_spicfg3);
 8005102:	4c0c      	ldr	r4, [pc, #48]	; (8005134 <led_write0+0x34>)
 8005104:	490c      	ldr	r1, [pc, #48]	; (8005138 <led_write0+0x38>)
};



void led_write0(location)
{
 8005106:	4605      	mov	r5, r0
  spiStart(&SPID2,&std_spicfg3);
 8005108:	4620      	mov	r0, r4
 800510a:	f7fd fe79 	bl	8002e00 <spiStart>
  spiSelect(&SPID2);
 800510e:	4620      	mov	r0, r4
 8005110:	f7fd fde6 	bl	8002ce0 <spiSelect>
  txbuf[0] = location;
 8005114:	4b09      	ldr	r3, [pc, #36]	; (800513c <led_write0+0x3c>)
  spiSend(&SPID2,1,&txbuf);
 8005116:	4620      	mov	r0, r4
 8005118:	461a      	mov	r2, r3
 800511a:	2101      	movs	r1, #1

void led_write0(location)
{
  spiStart(&SPID2,&std_spicfg3);
  spiSelect(&SPID2);
  txbuf[0] = location;
 800511c:	701d      	strb	r5, [r3, #0]
  spiSend(&SPID2,1,&txbuf);
 800511e:	f7fd fd57 	bl	8002bd0 <spiSend>
  spiUnselect(&SPID2);
 8005122:	4620      	mov	r0, r4
 8005124:	f7fd fdac 	bl	8002c80 <spiUnselect>
  spiStop(&SPID2);
 8005128:	4620      	mov	r0, r4
}
 800512a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  spiStart(&SPID2,&std_spicfg3);
  spiSelect(&SPID2);
  txbuf[0] = location;
  spiSend(&SPID2,1,&txbuf);
  spiUnselect(&SPID2);
  spiStop(&SPID2);
 800512e:	f7fd be07 	b.w	8002d40 <spiStop>
 8005132:	bf00      	nop
 8005134:	20002a44 	.word	0x20002a44
 8005138:	08016808 	.word	0x08016808
 800513c:	2000423c 	.word	0x2000423c

08005140 <long_to_string_with_divisor.lto_priv.50>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8005140:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8005142:	f100 070b 	add.w	r7, r0, #11
  int i;
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf08      	it	eq
 800514a:	460b      	moveq	r3, r1
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 800514c:	463d      	mov	r5, r7
  do {
    i = (int)(l % radix);
 800514e:	fbb1 f6f2 	udiv	r6, r1, r2
 8005152:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8005156:	f101 0430 	add.w	r4, r1, #48	; 0x30
    if (i > '9')
 800515a:	2c39      	cmp	r4, #57	; 0x39
      i += 'A' - '0' - 10;
 800515c:	bfc8      	it	gt
 800515e:	f101 0437 	addgt.w	r4, r1, #55	; 0x37
    *--q = i;
 8005162:	b2e4      	uxtb	r4, r4
 8005164:	f805 4d01 	strb.w	r4, [r5, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8005168:	fbb3 f3f2 	udiv	r3, r3, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 800516c:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1ed      	bne.n	800514e <long_to_string_with_divisor.lto_priv.50+0xe>

  i = (int)(p + MAX_FILLER - q);
 8005172:	1b7b      	subs	r3, r7, r5
 8005174:	4403      	add	r3, r0
 8005176:	e001      	b.n	800517c <long_to_string_with_divisor.lto_priv.50+0x3c>
 8005178:	f815 4f01 	ldrb.w	r4, [r5, #1]!
  do
    *p++ = *q++;
 800517c:	f800 4b01 	strb.w	r4, [r0], #1
  while (--i);
 8005180:	4298      	cmp	r0, r3
 8005182:	d1f9      	bne.n	8005178 <long_to_string_with_divisor.lto_priv.50+0x38>

  return p;
}
 8005184:	bcf0      	pop	{r4, r5, r6, r7}
 8005186:	4770      	bx	lr
	...

08005190 <_port_irq_epilogue>:
 8005190:	2320      	movs	r3, #32
 8005192:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8005196:	4b12      	ldr	r3, [pc, #72]	; (80051e0 <_port_irq_epilogue+0x50>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800519e:	d102      	bne.n	80051a6 <_port_irq_epilogue+0x16>
 80051a0:	f383 8811 	msr	BASEPRI, r3
 80051a4:	4770      	bx	lr
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80051a6:	eef1 3a10 	vmrs	r3, fpscr
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 80051aa:	f3ef 8309 	mrs	r3, PSP
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80051ae:	4a0d      	ldr	r2, [pc, #52]	; (80051e4 <_port_irq_epilogue+0x54>)
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80051b0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
#if CORTEX_USE_FPU == TRUE
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 80051b4:	68d2      	ldr	r2, [r2, #12]
 80051b6:	f843 2c08 	str.w	r2, [r3, #-8]
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 80051ba:	f843 1c4c 	str.w	r1, [r3, #-76]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 80051be:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 80051c2:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 80051c6:	4a08      	ldr	r2, [pc, #32]	; (80051e8 <_port_irq_epilogue+0x58>)
 80051c8:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 80051ca:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 80051cc:	6889      	ldr	r1, [r1, #8]
 80051ce:	6892      	ldr	r2, [r2, #8]
 80051d0:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 80051d2:	bf8c      	ite	hi
 80051d4:	4a05      	ldrhi	r2, [pc, #20]	; (80051ec <_port_irq_epilogue+0x5c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 80051d6:	4a06      	ldrls	r2, [pc, #24]	; (80051f0 <_port_irq_epilogue+0x60>)
 80051d8:	f843 2c50 	str.w	r2, [r3, #-80]
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	e000ed00 	.word	0xe000ed00
 80051e4:	e000ef30 	.word	0xe000ef30
 80051e8:	200042b0 	.word	0x200042b0
 80051ec:	080002f5 	.word	0x080002f5
 80051f0:	08000300 	.word	0x08000300
	...

08005200 <SVC_Handler>:
/*lint -restore*/
  struct port_extctx *ctxp;

#if CORTEX_USE_FPU
  /* Enforcing unstacking of the FP part of the context.*/
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8005200:	4a06      	ldr	r2, [pc, #24]	; (800521c <SVC_Handler+0x1c>)
 8005202:	6853      	ldr	r3, [r2, #4]
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	6053      	str	r3, [r2, #4]
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 800520a:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 800520e:	3368      	adds	r3, #104	; 0x68
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8005210:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005214:	2300      	movs	r3, #0
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	4770      	bx	lr
 800521c:	e000ef30 	.word	0xe000ef30

08005220 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8005220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005224:	4606      	mov	r6, r0
 8005226:	4688      	mov	r8, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8005228:	f7fe fa42 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800522c:	2e00      	cmp	r6, #0
 800522e:	d039      	beq.n	80052a4 <chEvtBroadcastFlagsI+0x84>

  elp = esp->next;
 8005230:	6834      	ldr	r4, [r6, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8005232:	42a6      	cmp	r6, r4
 8005234:	d029      	beq.n	800528a <chEvtBroadcastFlagsI+0x6a>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8005236:	2700      	movs	r7, #0
 8005238:	e002      	b.n	8005240 <chEvtBroadcastFlagsI+0x20>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 800523a:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800523c:	42a6      	cmp	r6, r4
 800523e:	d024      	beq.n	800528a <chEvtBroadcastFlagsI+0x6a>
  /*lint -restore*/
    elp->flags |= flags;
 8005240:	68e3      	ldr	r3, [r4, #12]
 8005242:	ea48 0303 	orr.w	r3, r8, r3
 8005246:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8005248:	f1b8 0f00 	cmp.w	r8, #0
 800524c:	d002      	beq.n	8005254 <chEvtBroadcastFlagsI+0x34>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 800524e:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 8005250:	4213      	tst	r3, r2
 8005252:	d0f2      	beq.n	800523a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 8005254:	6865      	ldr	r5, [r4, #4]
 8005256:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 800525a:	f7fe fa29 	bl	80036b0 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 800525e:	b1f5      	cbz	r5, 800529e <chEvtBroadcastFlagsI+0x7e>

  tp->epending |= events;
 8005260:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005262:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 8005266:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800526a:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 800526c:	636b      	str	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 800526e:	d00e      	beq.n	800528e <chEvtBroadcastFlagsI+0x6e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005270:	2a0b      	cmp	r2, #11
 8005272:	d1e2      	bne.n	800523a <chEvtBroadcastFlagsI+0x1a>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8005274:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8005276:	4013      	ands	r3, r2

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 8005278:	429a      	cmp	r2, r3
 800527a:	d1de      	bne.n	800523a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 800527c:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 800527e:	4628      	mov	r0, r5
 8005280:	f7fe fb6e 	bl	8003960 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 8005284:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8005286:	42a6      	cmp	r6, r4
 8005288:	d1da      	bne.n	8005240 <chEvtBroadcastFlagsI+0x20>
 800528a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800528e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005290:	4213      	tst	r3, r2
 8005292:	d0d2      	beq.n	800523a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8005294:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005296:	4628      	mov	r0, r5
 8005298:	f7fe fb62 	bl	8003960 <chSchReadyI>
 800529c:	e7f2      	b.n	8005284 <chEvtBroadcastFlagsI+0x64>
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 800529e:	4803      	ldr	r0, [pc, #12]	; (80052ac <chEvtBroadcastFlagsI+0x8c>)
 80052a0:	f7fe f9ae 	bl	8003600 <chSysHalt>
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);
 80052a4:	4802      	ldr	r0, [pc, #8]	; (80052b0 <chEvtBroadcastFlagsI+0x90>)
 80052a6:	f7fe f9ab 	bl	8003600 <chSysHalt>
 80052aa:	bf00      	nop
 80052ac:	080167e4 	.word	0x080167e4
 80052b0:	08016920 	.word	0x08016920
	...

080052c0 <get_temp>:
}

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7

float get_temp(device){
 80052c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}



void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
 80052c4:	f04f 0801 	mov.w	r8, #1
    spiStart(&SPID3,&std_spicfg0);
 80052c8:	4c5f      	ldr	r4, [pc, #380]	; (8005448 <get_temp+0x188>)



void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
 80052ca:	4f60      	ldr	r7, [pc, #384]	; (800544c <get_temp+0x18c>)
    spiStart(&SPID3,&std_spicfg0);
    spiSelect(&SPID3);
    txbuf[0] = location;
 80052cc:	4e60      	ldr	r6, [pc, #384]	; (8005450 <get_temp+0x190>)


void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
 80052ce:	4961      	ldr	r1, [pc, #388]	; (8005454 <get_temp+0x194>)



void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
 80052d0:	fa08 f500 	lsl.w	r5, r8, r0
 80052d4:	b2ad      	uxth	r5, r5
}

#define RTD_A 3.9083e-3
#define RTD_B -5.775e-7

float get_temp(device){
 80052d6:	ed2d 8b02 	vpush	{d8}


void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
 80052da:	4620      	mov	r0, r4



void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
 80052dc:	837d      	strh	r5, [r7, #26]
    spiStart(&SPID3,&std_spicfg0);
 80052de:	f7fd fd8f 	bl	8002e00 <spiStart>
    spiSelect(&SPID3);
 80052e2:	4620      	mov	r0, r4
 80052e4:	f7fd fcfc 	bl	8002ce0 <spiSelect>
    txbuf[0] = location;
 80052e8:	f04f 0e80 	mov.w	lr, #128	; 0x80
    txbuf[1] = data;
 80052ec:	23d0      	movs	r3, #208	; 0xd0
    spiSend(&SPID3,2,&txbuf);
 80052ee:	4632      	mov	r2, r6
 80052f0:	2102      	movs	r1, #2
 80052f2:	4620      	mov	r0, r4
void spi_write(location,data,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
    spiSelect(&SPID3);
    txbuf[0] = location;
 80052f4:	f886 e000 	strb.w	lr, [r6]
    txbuf[1] = data;
 80052f8:	7073      	strb	r3, [r6, #1]
    spiSend(&SPID3,2,&txbuf);
 80052fa:	f7fd fc69 	bl	8002bd0 <spiSend>
    spiUnselect(&SPID3);
 80052fe:	4620      	mov	r0, r4
 8005300:	f7fd fcbe 	bl	8002c80 <spiUnselect>
    spiStop(&SPID3);
 8005304:	4620      	mov	r0, r4
 8005306:	f7fd fd1b 	bl	8002d40 <spiStop>
}

void spi_read(location,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
 800530a:	4952      	ldr	r1, [pc, #328]	; (8005454 <get_temp+0x194>)
    txbuf[0] = location;
    txbuf[1] = data;
    spiSend(&SPID3,2,&txbuf);
    spiUnselect(&SPID3);
    spiStop(&SPID3);
    palSetPad(GPIOC,cp);
 800530c:	833d      	strh	r5, [r7, #24]
}

void spi_read(location,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
 800530e:	4620      	mov	r0, r4
    palSetPad(GPIOC,cp);
}

void spi_read(location,cp)
{
    palClearPad(GPIOC,cp);
 8005310:	837d      	strh	r5, [r7, #26]
    spiStart(&SPID3,&std_spicfg0);
 8005312:	f7fd fd75 	bl	8002e00 <spiStart>
    spiSelect(&SPID3);
 8005316:	4620      	mov	r0, r4
 8005318:	f7fd fce2 	bl	8002ce0 <spiSelect>
    txbuf[0] = location;
 800531c:	2300      	movs	r3, #0
    spiSend(&SPID3,1,&txbuf);
 800531e:	4641      	mov	r1, r8
 8005320:	4632      	mov	r2, r6
 8005322:	4620      	mov	r0, r4
void spi_read(location,cp)
{
    palClearPad(GPIOC,cp);
    spiStart(&SPID3,&std_spicfg0);
    spiSelect(&SPID3);
    txbuf[0] = location;
 8005324:	7033      	strb	r3, [r6, #0]
    spiSend(&SPID3,1,&txbuf);
 8005326:	f7fd fc53 	bl	8002bd0 <spiSend>
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 800532a:	6863      	ldr	r3, [r4, #4]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	b113      	cbz	r3, 8005336 <get_temp+0x76>
 8005330:	4849      	ldr	r0, [pc, #292]	; (8005458 <get_temp+0x198>)
 8005332:	f7fe f965 	bl	8003600 <chSysHalt>
 8005336:	2320      	movs	r3, #32
 8005338:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800533c:	f7fe fc10 	bl	8003b60 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8005340:	7823      	ldrb	r3, [r4, #0]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d1f4      	bne.n	8005330 <get_temp+0x70>
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005346:	6a22      	ldr	r2, [r4, #32]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8005348:	6a63      	ldr	r3, [r4, #36]	; 0x24

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800534a:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800534c:	685b      	ldr	r3, [r3, #4]
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 800534e:	6852      	ldr	r2, [r2, #4]
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
  dmaStreamSetTransactionSize(spip->dmatx, n);
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8005350:	6ae7      	ldr	r7, [r4, #44]	; 0x2c

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8005352:	f8df e11c 	ldr.w	lr, [pc, #284]	; 8005470 <get_temp+0x1b0>
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8005356:	4e41      	ldr	r6, [pc, #260]	; (800545c <get_temp+0x19c>)
 8005358:	60d6      	str	r6, [r2, #12]
  spiStartReceiveI(spip, n, rxbuf);
 800535a:	2103      	movs	r1, #3
  dmaStreamSetTransactionSize(spip->dmarx, n);
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800535c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8005360:	6051      	str	r1, [r2, #4]
 8005362:	7021      	strb	r1, [r4, #0]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 8005364:	6010      	str	r0, [r2, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 8005366:	f8c3 e00c 	str.w	lr, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 800536a:	6059      	str	r1, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 800536c:	601f      	str	r7, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 800536e:	6811      	ldr	r1, [r2, #0]
 8005370:	f041 0101 	orr.w	r1, r1, #1
 8005374:	6011      	str	r1, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	f042 0201 	orr.w	r2, r2, #1
 800537c:	601a      	str	r2, [r3, #0]
 *
 * @sclass
 */
static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {

  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800537e:	f104 0008 	add.w	r0, r4, #8
 8005382:	f000 fb3d 	bl	8005a00 <chThdSuspendTimeoutS.constprop.28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005386:	f7fe fbc3 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800538a:	4b35      	ldr	r3, [pc, #212]	; (8005460 <get_temp+0x1a0>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d004      	beq.n	800539c <get_temp+0xdc>
 8005392:	6999      	ldr	r1, [r3, #24]
 8005394:	6893      	ldr	r3, [r2, #8]
 8005396:	688a      	ldr	r2, [r1, #8]
 8005398:	429a      	cmp	r2, r3
 800539a:	d346      	bcc.n	800542a <get_temp+0x16a>
 800539c:	2300      	movs	r3, #0
 800539e:	f383 8811 	msr	BASEPRI, r3
    spiReceive(&SPID3,3,&rxbuf);
    spiUnselect(&SPID3);
 80053a2:	4829      	ldr	r0, [pc, #164]	; (8005448 <get_temp+0x188>)
    result = (result*430.0) / 32768.0;	  
    z1 = -RTD_A;
    z2 = RTD_A * RTD_A - (4 * RTD_B);
    z3 = (4 * RTD_B) / 100.0;
    z4 = 2 * RTD_B;
    pt100temp = z2 + (z3 * result);
 80053a4:	eddf 8a2f 	vldr	s17, [pc, #188]	; 8005464 <get_temp+0x1a4>
 80053a8:	ed9f 8a2f 	vldr	s16, [pc, #188]	; 8005468 <get_temp+0x1a8>
    spiStart(&SPID3,&std_spicfg0);
    spiSelect(&SPID3);
    txbuf[0] = location;
    spiSend(&SPID3,1,&txbuf);
    spiReceive(&SPID3,3,&rxbuf);
    spiUnselect(&SPID3);
 80053ac:	f7fd fc68 	bl	8002c80 <spiUnselect>
    spiStop(&SPID3);
 80053b0:	4825      	ldr	r0, [pc, #148]	; (8005448 <get_temp+0x188>)
 80053b2:	f7fd fcc5 	bl	8002d40 <spiStop>
    palSetPad(GPIOC,cp);
 80053b6:	4a25      	ldr	r2, [pc, #148]	; (800544c <get_temp+0x18c>)
    spi_write(0x80,0xd0,device); // three wire
    spi_read(0x0,device);

    lsb = rxbuf[2];
    hsb = rxbuf[1];
    result = (hsb << 8) + lsb;
 80053b8:	78b3      	ldrb	r3, [r6, #2]
    txbuf[0] = location;
    spiSend(&SPID3,1,&txbuf);
    spiReceive(&SPID3,3,&rxbuf);
    spiUnselect(&SPID3);
    spiStop(&SPID3);
    palSetPad(GPIOC,cp);
 80053ba:	8315      	strh	r5, [r2, #24]
    spi_write(0x80,0xd0,device); // three wire
    spi_read(0x0,device);

    lsb = rxbuf[2];
    hsb = rxbuf[1];
    result = (hsb << 8) + lsb;
 80053bc:	7870      	ldrb	r0, [r6, #1]
 80053be:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    result = (result*430.0) / 32768.0;	  
 80053c2:	ee07 0a90 	vmov	s15, r0
 80053c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053ca:	ee17 0a90 	vmov	r0, s15
 80053ce:	f7fb f8fd 	bl	80005cc <__aeabi_f2d>
 80053d2:	a317      	add	r3, pc, #92	; (adr r3, 8005430 <get_temp+0x170>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fb f94c 	bl	8000674 <__aeabi_dmul>
 80053dc:	2200      	movs	r2, #0
 80053de:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80053e2:	f7fb f947 	bl	8000674 <__aeabi_dmul>
 80053e6:	f7fb fc07 	bl	8000bf8 <__aeabi_d2f>
    z1 = -RTD_A;
    z2 = RTD_A * RTD_A - (4 * RTD_B);
    z3 = (4 * RTD_B) / 100.0;
    z4 = 2 * RTD_B;
    pt100temp = z2 + (z3 * result);
    pt100temp = (sqrt(pt100temp) + z1) / z4;
 80053ea:	ee07 0a90 	vmov	s15, r0
 80053ee:	eea7 8aa8 	vfma.f32	s16, s15, s17
 80053f2:	ee18 0a10 	vmov	r0, s16
 80053f6:	f7fb f8e9 	bl	80005cc <__aeabi_f2d>
 80053fa:	ec41 0b10 	vmov	d0, r0, r1
 80053fe:	f001 f823 	bl	8006448 <sqrt>
 8005402:	a30d      	add	r3, pc, #52	; (adr r3, 8005438 <get_temp+0x178>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	ec51 0b10 	vmov	r0, r1, d0
 800540c:	f7fa ff7e 	bl	800030c <__aeabi_dsub>
 8005410:	a30b      	add	r3, pc, #44	; (adr r3, 8005440 <get_temp+0x180>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	f7fb fa57 	bl	80008c8 <__aeabi_ddiv>
 800541a:	f7fb fbed 	bl	8000bf8 <__aeabi_d2f>
    return pt100temp;
}
 800541e:	ecbd 8b02 	vpop	{d8}
 8005422:	ee00 0a10 	vmov	s0, r0
 8005426:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800542a:	4810      	ldr	r0, [pc, #64]	; (800546c <get_temp+0x1ac>)
 800542c:	f7fe f8e8 	bl	8003600 <chSysHalt>
 8005430:	00000000 	.word	0x00000000
 8005434:	407ae000 	.word	0x407ae000
 8005438:	40000000 	.word	0x40000000
 800543c:	3f700226 	.word	0x3f700226
 8005440:	e0000000 	.word	0xe0000000
 8005444:	beb360af 	.word	0xbeb360af
 8005448:	20002df8 	.word	0x20002df8
 800544c:	48000800 	.word	0x48000800
 8005450:	2000423c 	.word	0x2000423c
 8005454:	080167f4 	.word	0x080167f4
 8005458:	08016938 	.word	0x08016938
 800545c:	20003234 	.word	0x20003234
 8005460:	200042b0 	.word	0x200042b0
 8005464:	b2c66d70 	.word	0xb2c66d70
 8005468:	37938317 	.word	0x37938317
 800546c:	08016820 	.word	0x08016820
 8005470:	0801681c 	.word	0x0801681c
	...

08005480 <Thread4.lto_priv.56>:
    return (rawread/4095.0)*vdd;
}


static THD_WORKING_AREA(waThread4, 2048);
static THD_FUNCTION(Thread4, arg) {
 8005480:	b580      	push	{r7, lr}
 8005482:	4cb1      	ldr	r4, [pc, #708]	; (8005748 <Thread4.lto_priv.56+0x2c8>)
 8005484:	4db1      	ldr	r5, [pc, #708]	; (800574c <Thread4.lto_priv.56+0x2cc>)
 8005486:	b08c      	sub	sp, #48	; 0x30
 8005488:	2320      	movs	r3, #32
 800548a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800548e:	f7fe fb67 	bl	8003b60 <_dbg_check_lock>
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  msg_t rdymsg;

  chSysLock();
  rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 8005492:	a903      	add	r1, sp, #12
 8005494:	48ae      	ldr	r0, [pc, #696]	; (8005750 <Thread4.lto_priv.56+0x2d0>)
 8005496:	f000 fb53 	bl	8005b40 <chMBFetchTimeoutS.constprop.7>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800549a:	f7fe fb39 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	4aa9      	ldr	r2, [pc, #676]	; (8005748 <Thread4.lto_priv.56+0x2c8>)
 80054a2:	42a3      	cmp	r3, r4
 80054a4:	d004      	beq.n	80054b0 <Thread4.lto_priv.56+0x30>
 80054a6:	6992      	ldr	r2, [r2, #24]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	6892      	ldr	r2, [r2, #8]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d350      	bcc.n	8005552 <Thread4.lto_priv.56+0xd2>
 80054b0:	2300      	movs	r3, #0
 80054b2:	f383 8811 	msr	BASEPRI, r3
	{
	    error = 0;
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    chMBFetchTimeout(&RxMbx,&rxRow,TIME_INFINITE);
	    rxPos = rxRow & 0xFF;
 80054b6:	9b03      	ldr	r3, [sp, #12]
	    rxRow = rxRow >> 8;
	    memcpy(lcltext,rx_text[rxRow],rxPos);
 80054b8:	49a6      	ldr	r1, [pc, #664]	; (8005754 <Thread4.lto_priv.56+0x2d4>)
	{
	    error = 0;
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    chMBFetchTimeout(&RxMbx,&rxRow,TIME_INFINITE);
	    rxPos = rxRow & 0xFF;
 80054ba:	b2de      	uxtb	r6, r3
	    rxRow = rxRow >> 8;
 80054bc:	121b      	asrs	r3, r3, #8
	    memcpy(lcltext,rx_text[rxRow],rxPos);
 80054be:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 80054c2:	4632      	mov	r2, r6
 80054c4:	a804      	add	r0, sp, #16
	    error = 0;
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    chMBFetchTimeout(&RxMbx,&rxRow,TIME_INFINITE);
	    rxPos = rxRow & 0xFF;
	    rxRow = rxRow >> 8;
 80054c6:	9303      	str	r3, [sp, #12]
	    memcpy(lcltext,rx_text[rxRow],rxPos);
 80054c8:	f7fb fbe6 	bl	8000c98 <memcpy>
	    // if the message is for us and the CRC matches - otherwise -
	    // ignore.

            if ((lcltext[0] == my_address) &&
 80054cc:	4ba2      	ldr	r3, [pc, #648]	; (8005758 <Thread4.lto_priv.56+0x2d8>)
 80054ce:	f89d 7010 	ldrb.w	r7, [sp, #16]
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	42bb      	cmp	r3, r7
 80054d6:	d1d7      	bne.n	8005488 <Thread4.lto_priv.56+0x8>
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
 80054d8:	ab0c      	add	r3, sp, #48	; 0x30
 80054da:	4433      	add	r3, r6
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 80054dc:	2e02      	cmp	r6, #2
	    memcpy(lcltext,rx_text[rxRow],rxPos);
	    // if the message is for us and the CRC matches - otherwise -
	    // ignore.

            if ((lcltext[0] == my_address) &&
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
 80054de:	f833 ec22 	ldrh.w	lr, [r3, #-34]
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 80054e2:	d056      	beq.n	8005592 <Thread4.lto_priv.56+0x112>
 80054e4:	1ef0      	subs	r0, r6, #3
 80054e6:	b280      	uxth	r0, r0
 80054e8:	ab04      	add	r3, sp, #16
 80054ea:	3001      	adds	r0, #1
 80054ec:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 80057b4 <Thread4.lto_priv.56+0x334>
 80054f0:	4418      	add	r0, r3
 80054f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f6:	4619      	mov	r1, r3
   {
      nTemp = *nData++ ^ wCRCWord;
 80054f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054fc:	4053      	eors	r3, r2
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 80054fe:	b2db      	uxtb	r3, r3
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005500:	4281      	cmp	r1, r0
   {
      nTemp = *nData++ ^ wCRCWord;
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 8005502:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
 8005506:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 800550a:	d1f5      	bne.n	80054f8 <Thread4.lto_priv.56+0x78>
	    rxRow = rxRow >> 8;
	    memcpy(lcltext,rx_text[rxRow],rxPos);
	    // if the message is for us and the CRC matches - otherwise -
	    // ignore.

            if ((lcltext[0] == my_address) &&
 800550c:	4596      	cmp	lr, r2
 800550e:	d1bb      	bne.n	8005488 <Thread4.lto_priv.56+0x8>
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
		    
		command = lcltext[1];		
 8005510:	f89d 3011 	ldrb.w	r3, [sp, #17]
		palSetPad(GPIOA,1);
		palSetPad(GPIOE,0);
 8005514:	4991      	ldr	r1, [pc, #580]	; (800575c <Thread4.lto_priv.56+0x2dc>)

            if ((lcltext[0] == my_address) &&
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
		    
		command = lcltext[1];		
		palSetPad(GPIOA,1);
 8005516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800551a:	2202      	movs	r2, #2
		palSetPad(GPIOE,0);
 800551c:	f04f 0801 	mov.w	r8, #1
		//chprintf((BaseSequentialStream*)&SD1,"+");
		if (command == 6){
 8005520:	2b06      	cmp	r3, #6

            if ((lcltext[0] == my_address) &&
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
		    
		command = lcltext[1];		
		palSetPad(GPIOA,1);
 8005522:	8302      	strh	r2, [r0, #24]
		palSetPad(GPIOE,0);
 8005524:	f8a1 8018 	strh.w	r8, [r1, #24]
		//chprintf((BaseSequentialStream*)&SD1,"+");
		if (command == 6){
 8005528:	f000 808f 	beq.w	800564a <Thread4.lto_priv.56+0x1ca>

			
			
	
		}
		else if (command == 4)
 800552c:	2b04      	cmp	r3, #4
 800552e:	d113      	bne.n	8005558 <Thread4.lto_priv.56+0xd8>
		    {
			reg = (lcltext[2]<<8)|lcltext[3];
 8005530:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8005534:	f89d 3013 	ldrb.w	r3, [sp, #19]

			switch (reg) {
 8005538:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800553c:	3b01      	subs	r3, #1
 800553e:	2b09      	cmp	r3, #9
 8005540:	f200 80dd 	bhi.w	80056fe <Thread4.lto_priv.56+0x27e>
 8005544:	e8df f003 	tbb	[pc, r3]
 8005548:	797b7d7f 	.word	0x797b7d7f
 800554c:	5f697577 	.word	0x5f697577
 8005550:	285d      	.short	0x285d
 8005552:	4883      	ldr	r0, [pc, #524]	; (8005760 <Thread4.lto_priv.56+0x2e0>)
 8005554:	f7fe f854 	bl	8003600 <chSysHalt>
			}

				
		    }
		else
		    sdWrite(&SD2,lcltext,rxPos);
 8005558:	a904      	add	r1, sp, #16
 800555a:	4632      	mov	r2, r6
 800555c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005560:	4880      	ldr	r0, [pc, #512]	; (8005764 <Thread4.lto_priv.56+0x2e4>)
 8005562:	f7fd fd9d 	bl	80030a0 <oqWriteTimeout>
 8005566:	e002      	b.n	800556e <Thread4.lto_priv.56+0xee>
		// call co sdWrite is done.chOQIsEmptyI

		while (!(oqIsEmptyI(&(&SD2)->oqueue)))
		    {
			//chprintf((BaseSequentialStream*)&SD1,".");
		    	chThdSleepMilliseconds(1);
 8005568:	200a      	movs	r0, #10
 800556a:	f7fe fd41 	bl	8003ff0 <chThdSleep>
		// I've been having problems with this - setting it too
		// short causes truncated communications back to the
		// PLC - I should really find a way to trigger it once the
		// call co sdWrite is done.chOQIsEmptyI

		while (!(oqIsEmptyI(&(&SD2)->oqueue)))
 800556e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 8005570:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8005572:	429a      	cmp	r2, r3
 8005574:	d1f8      	bne.n	8005568 <Thread4.lto_priv.56+0xe8>
 8005576:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f5      	beq.n	8005568 <Thread4.lto_priv.56+0xe8>
		    {
			//chprintf((BaseSequentialStream*)&SD1,".");
		    	chThdSleepMilliseconds(1);
		    }

		chThdSleepMilliseconds(2);
 800557c:	2014      	movs	r0, #20
 800557e:	f7fe fd37 	bl	8003ff0 <chThdSleep>
		palClearPad(GPIOA,1);
 8005582:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
		palClearPad(GPIOE,0);
 8005586:	4b75      	ldr	r3, [pc, #468]	; (800575c <Thread4.lto_priv.56+0x2dc>)
			//chprintf((BaseSequentialStream*)&SD1,".");
		    	chThdSleepMilliseconds(1);
		    }

		chThdSleepMilliseconds(2);
		palClearPad(GPIOA,1);
 8005588:	2002      	movs	r0, #2
		palClearPad(GPIOE,0);
 800558a:	2201      	movs	r2, #1
			//chprintf((BaseSequentialStream*)&SD1,".");
		    	chThdSleepMilliseconds(1);
		    }

		chThdSleepMilliseconds(2);
		palClearPad(GPIOA,1);
 800558c:	8348      	strh	r0, [r1, #26]
		palClearPad(GPIOE,0);
 800558e:	835a      	strh	r2, [r3, #26]
 8005590:	e77a      	b.n	8005488 <Thread4.lto_priv.56+0x8>
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;
 8005592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005596:	e7b9      	b.n	800550c <Thread4.lto_priv.56+0x8c>
			    break;
			case 9:
			    value = rainRate*100;
			    break;
			case 10:
			    value = lifetimeRain*100;
 8005598:	4b73      	ldr	r3, [pc, #460]	; (8005768 <Thread4.lto_priv.56+0x2e8>)
 800559a:	edd3 7a00 	vldr	s15, [r3]
 800559e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800576c <Thread4.lto_priv.56+0x2ec>
 80055a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80055aa:	edcd 7a01 	vstr	s15, [sp, #4]
 80055ae:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 80055b2:	f8df c200 	ldr.w	ip, [pc, #512]	; 80057b4 <Thread4.lto_priv.56+0x334>
			if (error==0){
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
			    lcltext[2] = 2;
			    lcltext[3] = (value & 0xFF00 ) >> 8;
			    lcltext[4] = value & 0xFF ;
 80055b6:	f88d 0014 	strb.w	r0, [sp, #20]
			    error = 0x02;
			    value = step;
			}
			if (error==0){
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
 80055ba:	2204      	movs	r2, #4
			    lcltext[2] = 2;
			    lcltext[3] = (value & 0xFF00 ) >> 8;
 80055bc:	0a01      	lsrs	r1, r0, #8
			    value = step;
			}
			if (error==0){
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
			    lcltext[2] = 2;
 80055be:	2302      	movs	r3, #2
			    error = 0x02;
			    value = step;
			}
			if (error==0){
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
 80055c0:	f88d 2011 	strb.w	r2, [sp, #17]
			    lcltext[2] = 2;
			    lcltext[3] = (value & 0xFF00 ) >> 8;
 80055c4:	f88d 1013 	strb.w	r1, [sp, #19]
			    value = step;
			}
			if (error==0){
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
			    lcltext[2] = 2;
 80055c8:	f88d 3012 	strb.w	r3, [sp, #18]
			    lcltext[3] = (value & 0xFF00 ) >> 8;
			    lcltext[4] = value & 0xFF ;
 80055cc:	2200      	movs	r2, #0
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;
 80055ce:	f64f 76ff 	movw	r6, #65535	; 0xffff

   while (wLength--)
   {
      nTemp = *nData++ ^ wCRCWord;
 80055d2:	ab04      	add	r3, sp, #16
 80055d4:	5c9b      	ldrb	r3, [r3, r2]
 80055d6:	4073      	eors	r3, r6
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	3201      	adds	r2, #1
 80055dc:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 80055e0:	2a05      	cmp	r2, #5
   {
      nTemp = *nData++ ^ wCRCWord;
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 80055e2:	ea83 2616 	eor.w	r6, r3, r6, lsr #8
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 80055e6:	d1f4      	bne.n	80055d2 <Thread4.lto_priv.56+0x152>
			    lcltext[1] = 4;
			    lcltext[2] = 2;
			    lcltext[3] = (value & 0xFF00 ) >> 8;
			    lcltext[4] = value & 0xFF ;
			    *(uint16_t*)(lcltext+5) = CRC16(lcltext,5);
			    lcltext[7] = 0;
 80055e8:	2700      	movs	r7, #0
			    sdWrite(&SD2,lcltext,7);
 80055ea:	a904      	add	r1, sp, #16
 80055ec:	2207      	movs	r2, #7
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80055f2:	485c      	ldr	r0, [pc, #368]	; (8005764 <Thread4.lto_priv.56+0x2e4>)
			    lcltext[0] = my_address;
			    lcltext[1] = 4;
			    lcltext[2] = 2;
			    lcltext[3] = (value & 0xFF00 ) >> 8;
			    lcltext[4] = value & 0xFF ;
			    *(uint16_t*)(lcltext+5) = CRC16(lcltext,5);
 80055f4:	f8ad 6015 	strh.w	r6, [sp, #21]
			    lcltext[7] = 0;
 80055f8:	f88d 7017 	strb.w	r7, [sp, #23]
			    sdWrite(&SD2,lcltext,7);
 80055fc:	f7fd fd50 	bl	80030a0 <oqWriteTimeout>
 8005600:	e7b5      	b.n	800556e <Thread4.lto_priv.56+0xee>
			    break;
			case 8:
			    value = snowoutput;
			    break;
			case 9:
			    value = rainRate*100;
 8005602:	4b5b      	ldr	r3, [pc, #364]	; (8005770 <Thread4.lto_priv.56+0x2f0>)
 8005604:	e7c9      	b.n	800559a <Thread4.lto_priv.56+0x11a>
			    break;
			case 7:
			    value = pt100temp5*10.0;
			    break;
			case 8:
			    value = snowoutput;
 8005606:	4b5b      	ldr	r3, [pc, #364]	; (8005774 <Thread4.lto_priv.56+0x2f4>)
 8005608:	edd3 7a00 	vldr	s15, [r3]
 800560c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005610:	edcd 7a01 	vstr	s15, [sp, #4]
 8005614:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005618:	e7cb      	b.n	80055b2 <Thread4.lto_priv.56+0x132>
			    break;
			case 6:
			    value = pt100temp4*10.0;
			    break;
			case 7:
			    value = pt100temp5*10.0;
 800561a:	4b57      	ldr	r3, [pc, #348]	; (8005778 <Thread4.lto_priv.56+0x2f8>)
 800561c:	6818      	ldr	r0, [r3, #0]
 800561e:	f7fa ffd5 	bl	80005cc <__aeabi_f2d>
 8005622:	2200      	movs	r2, #0
 8005624:	4b55      	ldr	r3, [pc, #340]	; (800577c <Thread4.lto_priv.56+0x2fc>)
 8005626:	f7fb f825 	bl	8000674 <__aeabi_dmul>
 800562a:	f7fb fabd 	bl	8000ba8 <__aeabi_d2iz>
 800562e:	b280      	uxth	r0, r0
 8005630:	e7bf      	b.n	80055b2 <Thread4.lto_priv.56+0x132>
			    break;
			case 5:
			    value = pt100temp3*10.0;
			    break;
			case 6:
			    value = pt100temp4*10.0;
 8005632:	4b53      	ldr	r3, [pc, #332]	; (8005780 <Thread4.lto_priv.56+0x300>)
 8005634:	e7f2      	b.n	800561c <Thread4.lto_priv.56+0x19c>
			    break;
			case 4:
			    value = pt100temp2*10.0;
			    break;
			case 5:
			    value = pt100temp3*10.0;
 8005636:	4b53      	ldr	r3, [pc, #332]	; (8005784 <Thread4.lto_priv.56+0x304>)
 8005638:	e7f0      	b.n	800561c <Thread4.lto_priv.56+0x19c>
			    break;
			case 3:
			    value = pt100temp1*10.0;
			    break;
			case 4:
			    value = pt100temp2*10.0;
 800563a:	4b53      	ldr	r3, [pc, #332]	; (8005788 <Thread4.lto_priv.56+0x308>)
 800563c:	e7ee      	b.n	800561c <Thread4.lto_priv.56+0x19c>
			    break;
			case 2:
			    value = windspeed*10.0;
			    break;
			case 3:
			    value = pt100temp1*10.0;
 800563e:	4b53      	ldr	r3, [pc, #332]	; (800578c <Thread4.lto_priv.56+0x30c>)
 8005640:	e7ec      	b.n	800561c <Thread4.lto_priv.56+0x19c>
			switch (reg) {
			case 1:
			    value = irradiance3*10.0;
			    break;
			case 2:
			    value = windspeed*10.0;
 8005642:	4b53      	ldr	r3, [pc, #332]	; (8005790 <Thread4.lto_priv.56+0x310>)
 8005644:	e7ea      	b.n	800561c <Thread4.lto_priv.56+0x19c>
		    {
			reg = (lcltext[2]<<8)|lcltext[3];

			switch (reg) {
			case 1:
			    value = irradiance3*10.0;
 8005646:	4b53      	ldr	r3, [pc, #332]	; (8005794 <Thread4.lto_priv.56+0x314>)
 8005648:	e7e8      	b.n	800561c <Thread4.lto_priv.56+0x19c>
		command = lcltext[1];		
		palSetPad(GPIOA,1);
		palSetPad(GPIOE,0);
		//chprintf((BaseSequentialStream*)&SD1,"+");
		if (command == 6){
		    reg = (lcltext[2]<<8)|lcltext[3];
 800564a:	f89d 0012 	ldrb.w	r0, [sp, #18]
 800564e:	f89d 3013 	ldrb.w	r3, [sp, #19]
		    switch (reg){
 8005652:	f240 31e9 	movw	r1, #1001	; 0x3e9
 8005656:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800565a:	428b      	cmp	r3, r1
 800565c:	d046      	beq.n	80056ec <Thread4.lto_priv.56+0x26c>
 800565e:	f240 41d2 	movw	r1, #1234	; 0x4d2
 8005662:	428b      	cmp	r3, r1
 8005664:	d036      	beq.n	80056d4 <Thread4.lto_priv.56+0x254>
 8005666:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800566a:	d023      	beq.n	80056b4 <Thread4.lto_priv.56+0x234>
			//back to them
			sdWrite(&SD2,lcltext,8);
		    }
		    else{
			lcltext[0] = my_address;
			lcltext[1] = 0x86;
 800566c:	2386      	movs	r3, #134	; 0x86
 800566e:	f8df c144 	ldr.w	ip, [pc, #324]	; 80057b4 <Thread4.lto_priv.56+0x334>
			lcltext[2] = error;
 8005672:	f88d 2012 	strb.w	r2, [sp, #18]
			// for this command we just repeat the same thing
			//back to them
			sdWrite(&SD2,lcltext,8);
		    }
		    else{
			lcltext[0] = my_address;
 8005676:	f88d 7010 	strb.w	r7, [sp, #16]
			lcltext[1] = 0x86;
 800567a:	f88d 3011 	strb.w	r3, [sp, #17]
			lcltext[2] = error;
 800567e:	2200      	movs	r2, #0
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;
 8005680:	f64f 76ff 	movw	r6, #65535	; 0xffff

   while (wLength--)
   {
      nTemp = *nData++ ^ wCRCWord;
 8005684:	ab04      	add	r3, sp, #16
 8005686:	5c9b      	ldrb	r3, [r3, r2]
 8005688:	4073      	eors	r3, r6
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 800568a:	b2db      	uxtb	r3, r3
 800568c:	3201      	adds	r2, #1
 800568e:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005692:	2a03      	cmp	r2, #3
   {
      nTemp = *nData++ ^ wCRCWord;
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 8005694:	ea83 2616 	eor.w	r6, r3, r6, lsr #8
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005698:	d1f4      	bne.n	8005684 <Thread4.lto_priv.56+0x204>
			else{
			    lcltext[0] = my_address;
			    lcltext[1] = 0x84;
			    lcltext[2] = 0x02;
			    *(uint16_t*)(lcltext+3) = CRC16(lcltext,3);
			    lcltext[5] = 0;
 800569a:	2700      	movs	r7, #0
			    sdWrite(&SD2,lcltext,5);
 800569c:	a904      	add	r1, sp, #16
 800569e:	2205      	movs	r2, #5
 80056a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056a4:	482f      	ldr	r0, [pc, #188]	; (8005764 <Thread4.lto_priv.56+0x2e4>)
			}
			else{
			    lcltext[0] = my_address;
			    lcltext[1] = 0x84;
			    lcltext[2] = 0x02;
			    *(uint16_t*)(lcltext+3) = CRC16(lcltext,3);
 80056a6:	f8ad 6013 	strh.w	r6, [sp, #19]
			    lcltext[5] = 0;
 80056aa:	f88d 7015 	strb.w	r7, [sp, #21]
			    sdWrite(&SD2,lcltext,5);
 80056ae:	f7fd fcf7 	bl	80030a0 <oqWriteTimeout>
 80056b2:	e75c      	b.n	800556e <Thread4.lto_priv.56+0xee>
		//chprintf((BaseSequentialStream*)&SD1,"+");
		if (command == 6){
		    reg = (lcltext[2]<<8)|lcltext[3];
		    switch (reg){
		    case 1000:
			save_address = (lcltext[4]<<8)|lcltext[5];
 80056b4:	4b38      	ldr	r3, [pc, #224]	; (8005798 <Thread4.lto_priv.56+0x318>)
 80056b6:	f89d 2015 	ldrb.w	r2, [sp, #21]
			chprintf(&SD1,"Hello World - I am now # %d\r\n",save_address);
 80056ba:	4838      	ldr	r0, [pc, #224]	; (800579c <Thread4.lto_priv.56+0x31c>)
 80056bc:	4938      	ldr	r1, [pc, #224]	; (80057a0 <Thread4.lto_priv.56+0x320>)
		//chprintf((BaseSequentialStream*)&SD1,"+");
		if (command == 6){
		    reg = (lcltext[2]<<8)|lcltext[3];
		    switch (reg){
		    case 1000:
			save_address = (lcltext[4]<<8)|lcltext[5];
 80056be:	701a      	strb	r2, [r3, #0]
			chprintf(&SD1,"Hello World - I am now # %d\r\n",save_address);
 80056c0:	f000 fa76 	bl	8005bb0 <chprintf.constprop.4>
			error = 0x02;
		    }
		    if (error==0){
			// for this command we just repeat the same thing
			//back to them
			sdWrite(&SD2,lcltext,8);
 80056c4:	a904      	add	r1, sp, #16
 80056c6:	2208      	movs	r2, #8
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056cc:	4825      	ldr	r0, [pc, #148]	; (8005764 <Thread4.lto_priv.56+0x2e4>)
 80056ce:	f7fd fce7 	bl	80030a0 <oqWriteTimeout>
 80056d2:	e74c      	b.n	800556e <Thread4.lto_priv.56+0xee>
			break;
		    case 1234:
			// 1 for 19200 anything else is 9600
			// throw error if not 0 or 1
			
			code =  (lcltext[4]<<8)|lcltext[5];
 80056d4:	f89d 1014 	ldrb.w	r1, [sp, #20]
 80056d8:	f89d 3015 	ldrb.w	r3, [sp, #21]
			if (code==0x1234){
 80056dc:	f241 2234 	movw	r2, #4660	; 0x1234
			break;
		    case 1234:
			// 1 for 19200 anything else is 9600
			// throw error if not 0 or 1
			
			code =  (lcltext[4]<<8)|lcltext[5];
 80056e0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			if (code==0x1234){
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d021      	beq.n	800572c <Thread4.lto_priv.56+0x2ac>
			    write_flash(((save_baud_rate&0xff)<<8)|(save_address&0xff),flash1);
			    reset = 1;
			}
			else
			    error = 0x04;
 80056e8:	2204      	movs	r2, #4
 80056ea:	e7bf      	b.n	800566c <Thread4.lto_priv.56+0x1ec>
		     
			break;
		    case 1001:
			// 1 for 19200 anything else is 9600
			// throw error if not 0 or 1
			save_baud_rate = (lcltext[4]<<8)|lcltext[5];
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <Thread4.lto_priv.56+0x324>)
 80056ee:	f89d 2015 	ldrb.w	r2, [sp, #21]
			chprintf(&SD1,"Hello World - baud_rate # %d\r\n",save_baud_rate);
 80056f2:	492d      	ldr	r1, [pc, #180]	; (80057a8 <Thread4.lto_priv.56+0x328>)
		     
			break;
		    case 1001:
			// 1 for 19200 anything else is 9600
			// throw error if not 0 or 1
			save_baud_rate = (lcltext[4]<<8)|lcltext[5];
 80056f4:	701a      	strb	r2, [r3, #0]
			chprintf(&SD1,"Hello World - baud_rate # %d\r\n",save_baud_rate);
 80056f6:	4829      	ldr	r0, [pc, #164]	; (800579c <Thread4.lto_priv.56+0x31c>)
 80056f8:	f000 fa5a 	bl	8005bb0 <chprintf.constprop.4>
 80056fc:	e7e2      	b.n	80056c4 <Thread4.lto_priv.56+0x244>
			    lcltext[7] = 0;
			    sdWrite(&SD2,lcltext,7);
			}
			else{
			    lcltext[0] = my_address;
			    lcltext[1] = 0x84;
 80056fe:	2284      	movs	r2, #132	; 0x84
			    lcltext[2] = 0x02;
 8005700:	2302      	movs	r3, #2
 8005702:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 80057b4 <Thread4.lto_priv.56+0x334>
			    lcltext[7] = 0;
			    sdWrite(&SD2,lcltext,7);
			}
			else{
			    lcltext[0] = my_address;
			    lcltext[1] = 0x84;
 8005706:	f88d 2011 	strb.w	r2, [sp, #17]
			    lcltext[2] = 0x02;
 800570a:	f88d 3012 	strb.w	r3, [sp, #18]
 800570e:	2200      	movs	r2, #0
   0X4E00, 0X8EC1, 0X8F81, 0X4F40, 0X8D01, 0X4DC0, 0X4C80, 0X8C41,
   0X4400, 0X84C1, 0X8581, 0X4540, 0X8701, 0X47C0, 0X4680, 0X8641,
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;
 8005710:	f64f 76ff 	movw	r6, #65535	; 0xffff

   while (wLength--)
   {
      nTemp = *nData++ ^ wCRCWord;
 8005714:	ab04      	add	r3, sp, #16
 8005716:	5c9b      	ldrb	r3, [r3, r2]
 8005718:	4073      	eors	r3, r6
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 800571a:	b2db      	uxtb	r3, r3
 800571c:	3201      	adds	r2, #1
 800571e:	f83c 3013 	ldrh.w	r3, [ip, r3, lsl #1]
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005722:	2a03      	cmp	r2, #3
   {
      nTemp = *nData++ ^ wCRCWord;
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 8005724:	ea83 2616 	eor.w	r6, r3, r6, lsr #8
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005728:	d1f4      	bne.n	8005714 <Thread4.lto_priv.56+0x294>
 800572a:	e7b6      	b.n	800569a <Thread4.lto_priv.56+0x21a>
			// 1 for 19200 anything else is 9600
			// throw error if not 0 or 1
			
			code =  (lcltext[4]<<8)|lcltext[5];
			if (code==0x1234){
			    write_flash(((save_baud_rate&0xff)<<8)|(save_address&0xff),flash1);
 800572c:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <Thread4.lto_priv.56+0x324>)
 800572e:	4b1a      	ldr	r3, [pc, #104]	; (8005798 <Thread4.lto_priv.56+0x318>)
 8005730:	7810      	ldrb	r0, [r2, #0]
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	491d      	ldr	r1, [pc, #116]	; (80057ac <Thread4.lto_priv.56+0x32c>)
 8005736:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
 800573a:	f7ff fc71 	bl	8005020 <write_flash>
			    reset = 1;
 800573e:	4b1c      	ldr	r3, [pc, #112]	; (80057b0 <Thread4.lto_priv.56+0x330>)
 8005740:	f883 8000 	strb.w	r8, [r3]
 8005744:	e7be      	b.n	80056c4 <Thread4.lto_priv.56+0x244>
 8005746:	bf00      	nop
 8005748:	200042b0 	.word	0x200042b0
 800574c:	20002b04 	.word	0x20002b04
 8005750:	20002b64 	.word	0x20002b64
 8005754:	20002e34 	.word	0x20002e34
 8005758:	20002a74 	.word	0x20002a74
 800575c:	48001000 	.word	0x48001000
 8005760:	080167d8 	.word	0x080167d8
 8005764:	20002b34 	.word	0x20002b34
 8005768:	200029c8 	.word	0x200029c8
 800576c:	42c80000 	.word	0x42c80000
 8005770:	20002d08 	.word	0x20002d08
 8005774:	20002dac 	.word	0x20002dac
 8005778:	20002670 	.word	0x20002670
 800577c:	40240000 	.word	0x40240000
 8005780:	20002da8 	.word	0x20002da8
 8005784:	20002afc 	.word	0x20002afc
 8005788:	20001284 	.word	0x20001284
 800578c:	20002b8c 	.word	0x20002b8c
 8005790:	20002bd4 	.word	0x20002bd4
 8005794:	20002668 	.word	0x20002668
 8005798:	20002b00 	.word	0x20002b00
 800579c:	2000424c 	.word	0x2000424c
 80057a0:	080168c0 	.word	0x080168c0
 80057a4:	20002e2c 	.word	0x20002e2c
 80057a8:	080168e0 	.word	0x080168e0
 80057ac:	0803f000 	.word	0x0803f000
 80057b0:	20002db4 	.word	0x20002db4
 80057b4:	08016944 	.word	0x08016944
	...

080057c0 <Thread5.lto_priv.57>:
	}

}

static THD_WORKING_AREA(waThread5, 512);
static THD_FUNCTION(Thread5, arg) {
 80057c0:	b580      	push	{r7, lr}
 80057c2:	4c12      	ldr	r4, [pc, #72]	; (800580c <Thread5.lto_priv.57+0x4c>)
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    chMBFetchTimeout(&RxMbx2,&rxRow,TIME_INFINITE);
	    palSetPad(GPIOE,1);
 80057c4:	4e12      	ldr	r6, [pc, #72]	; (8005810 <Thread5.lto_priv.57+0x50>)
	}

}

static THD_WORKING_AREA(waThread5, 512);
static THD_FUNCTION(Thread5, arg) {
 80057c6:	b082      	sub	sp, #8
 80057c8:	4627      	mov	r7, r4
 80057ca:	2320      	movs	r3, #32
 80057cc:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80057d0:	f7fe f9c6 	bl	8003b60 <_dbg_check_lock>
 80057d4:	a901      	add	r1, sp, #4
 80057d6:	480f      	ldr	r0, [pc, #60]	; (8005814 <Thread5.lto_priv.57+0x54>)
 80057d8:	f000 f9b2 	bl	8005b40 <chMBFetchTimeoutS.constprop.7>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80057dc:	f7fe f998 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80057e0:	6823      	ldr	r3, [r4, #0]
 80057e2:	42a3      	cmp	r3, r4
 80057e4:	d004      	beq.n	80057f0 <Thread5.lto_priv.57+0x30>
 80057e6:	69ba      	ldr	r2, [r7, #24]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	6892      	ldr	r2, [r2, #8]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d309      	bcc.n	8005804 <Thread5.lto_priv.57+0x44>
 80057f0:	2300      	movs	r3, #0
 80057f2:	f383 8811 	msr	BASEPRI, r3
    while (TRUE)
	{
	    // the skip is because the way I have it hooked up right now
	    // causes it to read whatever we send.
	    chMBFetchTimeout(&RxMbx2,&rxRow,TIME_INFINITE);
	    palSetPad(GPIOE,1);
 80057f6:	2502      	movs	r5, #2
 80057f8:	8335      	strh	r5, [r6, #24]
	    chThdSleepMilliseconds(5);
 80057fa:	2032      	movs	r0, #50	; 0x32
 80057fc:	f7fe fbf8 	bl	8003ff0 <chThdSleep>
	    palClearPad(GPIOE,1);
 8005800:	8375      	strh	r5, [r6, #26]
 8005802:	e7e2      	b.n	80057ca <Thread5.lto_priv.57+0xa>
 8005804:	4804      	ldr	r0, [pc, #16]	; (8005818 <Thread5.lto_priv.57+0x58>)
 8005806:	f7fd fefb 	bl	8003600 <chSysHalt>
 800580a:	bf00      	nop
 800580c:	200042b0 	.word	0x200042b0
 8005810:	48001000 	.word	0x48001000
 8005814:	20002be0 	.word	0x20002be0
 8005818:	080167d8 	.word	0x080167d8
 800581c:	00000000 	.word	0x00000000

08005820 <Thread3.lto_priv.55>:
 8005820:	4e3c      	ldr	r6, [pc, #240]	; (8005914 <Thread3.lto_priv.55+0xf4>)
 8005822:	4a3d      	ldr	r2, [pc, #244]	; (8005918 <Thread3.lto_priv.55+0xf8>)
 8005824:	69b3      	ldr	r3, [r6, #24]
 8005826:	4d3d      	ldr	r5, [pc, #244]	; (800591c <Thread3.lto_priv.55+0xfc>)
 8005828:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8005940 <Thread3.lto_priv.55+0x120>




static THD_WORKING_AREA(waThread3, 512);
static THD_FUNCTION(Thread3, arg) {
 800582c:	b580      	push	{r7, lr}
 800582e:	4f3c      	ldr	r7, [pc, #240]	; (8005920 <Thread3.lto_priv.55+0x100>)
 8005830:	619a      	str	r2, [r3, #24]
 8005832:	46b1      	mov	r9, r6

  chRegSetThreadName("serial");
  while(TRUE)
      {
	  
	  b = sdGetTimeout(&SD2,TIME_MS2I(2));
 8005834:	483b      	ldr	r0, [pc, #236]	; (8005924 <Thread3.lto_priv.55+0x104>)
 8005836:	2114      	movs	r1, #20
 8005838:	f7fd fde2 	bl	8003400 <iqGetTimeout>


	  if ((b!= Q_TIMEOUT) && (rx_queue_pos < 31))
 800583c:	1c42      	adds	r2, r0, #1

  chRegSetThreadName("serial");
  while(TRUE)
      {
	  
	  b = sdGetTimeout(&SD2,TIME_MS2I(2));
 800583e:	4604      	mov	r4, r0


	  if ((b!= Q_TIMEOUT) && (rx_queue_pos < 31))
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	d013      	beq.n	800586c <Thread3.lto_priv.55+0x4c>
 8005844:	2b1e      	cmp	r3, #30
 8005846:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800591c <Thread3.lto_priv.55+0xfc>
 800584a:	dcf3      	bgt.n	8005834 <Thread3.lto_priv.55+0x14>
	      {
		  chprintf((BaseSequentialStream*)&SD1,"got char: %x\r\n",b);
 800584c:	4622      	mov	r2, r4
 800584e:	4836      	ldr	r0, [pc, #216]	; (8005928 <Thread3.lto_priv.55+0x108>)
 8005850:	4936      	ldr	r1, [pc, #216]	; (800592c <Thread3.lto_priv.55+0x10c>)
 8005852:	f000 f9ad 	bl	8005bb0 <chprintf.constprop.4>
		  rx_text[rx_queue_num][rx_queue_pos++]=b;
 8005856:	f8da 3000 	ldr.w	r3, [sl]
 800585a:	683a      	ldr	r2, [r7, #0]
 800585c:	eb03 1242 	add.w	r2, r3, r2, lsl #5
 8005860:	3301      	adds	r3, #1
 8005862:	f808 4002 	strb.w	r4, [r8, r2]
 8005866:	f8ca 3000 	str.w	r3, [sl]
 800586a:	e7e3      	b.n	8005834 <Thread3.lto_priv.55+0x14>
	      }
	  if ((b == Q_TIMEOUT) && (rx_queue_pos > 0))
 800586c:	2b00      	cmp	r3, #0
 800586e:	dde1      	ble.n	8005834 <Thread3.lto_priv.55+0x14>
	      {

		  rx_text[rx_queue_num][rx_queue_pos] = 0;
 8005870:	683c      	ldr	r4, [r7, #0]
 8005872:	eb03 1244 	add.w	r2, r3, r4, lsl #5
 8005876:	2100      	movs	r1, #0

		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
 8005878:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
		  rx_text[rx_queue_num][rx_queue_pos++]=b;
	      }
	  if ((b == Q_TIMEOUT) && (rx_queue_pos > 0))
	      {

		  rx_text[rx_queue_num][rx_queue_pos] = 0;
 800587c:	f808 1002 	strb.w	r1, [r8, r2]
 8005880:	2320      	movs	r3, #32
 8005882:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8005886:	f7fe f96b 	bl	8003b60 <_dbg_check_lock>
 */
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
  msg_t rdymsg;

  chSysLock();
  rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 800588a:	4621      	mov	r1, r4
 800588c:	4828      	ldr	r0, [pc, #160]	; (8005930 <Thread3.lto_priv.55+0x110>)
 800588e:	f000 f917 	bl	8005ac0 <chMBPostTimeoutS.constprop.10>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8005892:	f7fe f93d 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005896:	6833      	ldr	r3, [r6, #0]
 8005898:	42b3      	cmp	r3, r6
 800589a:	d005      	beq.n	80058a8 <Thread3.lto_priv.55+0x88>
 800589c:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	6892      	ldr	r2, [r2, #8]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d32d      	bcc.n	8005904 <Thread3.lto_priv.55+0xe4>
 80058a8:	2300      	movs	r3, #0
 80058aa:	f383 8811 	msr	BASEPRI, r3

		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  chMBPostTimeout(&RxMbx2,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
 80058ae:	683c      	ldr	r4, [r7, #0]
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	2220      	movs	r2, #32
 80058b4:	ea43 2404 	orr.w	r4, r3, r4, lsl #8
 80058b8:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80058bc:	f7fe f950 	bl	8003b60 <_dbg_check_lock>
 80058c0:	4621      	mov	r1, r4
 80058c2:	481c      	ldr	r0, [pc, #112]	; (8005934 <Thread3.lto_priv.55+0x114>)
 80058c4:	f000 f8fc 	bl	8005ac0 <chMBPostTimeoutS.constprop.10>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80058c8:	f7fe f922 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80058cc:	6833      	ldr	r3, [r6, #0]
 80058ce:	42b3      	cmp	r3, r6
 80058d0:	d005      	beq.n	80058de <Thread3.lto_priv.55+0xbe>
 80058d2:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	6892      	ldr	r2, [r2, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d312      	bcc.n	8005904 <Thread3.lto_priv.55+0xe4>
 80058de:	2100      	movs	r1, #0
 80058e0:	f381 8811 	msr	BASEPRI, r1
		  rx_queue_pos = 0;
		  // we have a new entry
		  rx_queue_num = (++rx_queue_num)%32;
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	4b14      	ldr	r3, [pc, #80]	; (8005938 <Thread3.lto_priv.55+0x118>)

		  rx_text[rx_queue_num][rx_queue_pos] = 0;

		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  chMBPostTimeout(&RxMbx2,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  rx_queue_pos = 0;
 80058e8:	6029      	str	r1, [r5, #0]
		  // we have a new entry
		  rx_queue_num = (++rx_queue_num)%32;
 80058ea:	3201      	adds	r2, #1
 80058ec:	4013      	ands	r3, r2
 80058ee:	428b      	cmp	r3, r1
 80058f0:	db0b      	blt.n	800590a <Thread3.lto_priv.55+0xea>
		  memset(rx_text[rx_queue_num],0,5);
 80058f2:	0159      	lsls	r1, r3, #5
 80058f4:	eb08 0001 	add.w	r0, r8, r1
 80058f8:	2200      	movs	r2, #0
 80058fa:	f848 2001 	str.w	r2, [r8, r1]

		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  chMBPostTimeout(&RxMbx2,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  rx_queue_pos = 0;
		  // we have a new entry
		  rx_queue_num = (++rx_queue_num)%32;
 80058fe:	603b      	str	r3, [r7, #0]
		  memset(rx_text[rx_queue_num],0,5);
 8005900:	7102      	strb	r2, [r0, #4]
 8005902:	e797      	b.n	8005834 <Thread3.lto_priv.55+0x14>
 8005904:	480d      	ldr	r0, [pc, #52]	; (800593c <Thread3.lto_priv.55+0x11c>)
 8005906:	f7fd fe7b 	bl	8003600 <chSysHalt>

		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  chMBPostTimeout(&RxMbx2,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
		  rx_queue_pos = 0;
		  // we have a new entry
		  rx_queue_num = (++rx_queue_num)%32;
 800590a:	3b01      	subs	r3, #1
 800590c:	f063 031f 	orn	r3, r3, #31
 8005910:	3301      	adds	r3, #1
 8005912:	e7ee      	b.n	80058f2 <Thread3.lto_priv.55+0xd2>
 8005914:	200042b0 	.word	0x200042b0
 8005918:	08016900 	.word	0x08016900
 800591c:	20002e30 	.word	0x20002e30
 8005920:	20003238 	.word	0x20003238
 8005924:	20002b10 	.word	0x20002b10
 8005928:	2000424c 	.word	0x2000424c
 800592c:	08016908 	.word	0x08016908
 8005930:	20002b64 	.word	0x20002b64
 8005934:	20002be0 	.word	0x20002be0
 8005938:	8000001f 	.word	0x8000001f
 800593c:	080167d8 	.word	0x080167d8
 8005940:	20002e34 	.word	0x20002e34
	...

08005950 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8005950:	b570      	push	{r4, r5, r6, lr}
 8005952:	2320      	movs	r3, #32
 8005954:	4606      	mov	r6, r0
 8005956:	460d      	mov	r5, r1
 8005958:	4614      	mov	r4, r2
 800595a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800595e:	f7fe f8ff 	bl	8003b60 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8005962:	4622      	mov	r2, r4
 8005964:	4629      	mov	r1, r5
 8005966:	4630      	mov	r0, r6
 8005968:	f7ff fb02 	bl	8004f70 <chCoreAllocAlignedWithOffsetI>
 800596c:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800596e:	f7fe f8cf 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005972:	4b08      	ldr	r3, [pc, #32]	; (8005994 <chCoreAllocAlignedWithOffset+0x44>)
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	429a      	cmp	r2, r3
 8005978:	d004      	beq.n	8005984 <chCoreAllocAlignedWithOffset+0x34>
 800597a:	6999      	ldr	r1, [r3, #24]
 800597c:	6893      	ldr	r3, [r2, #8]
 800597e:	688a      	ldr	r2, [r1, #8]
 8005980:	429a      	cmp	r2, r3
 8005982:	d304      	bcc.n	800598e <chCoreAllocAlignedWithOffset+0x3e>
 8005984:	2300      	movs	r3, #0
 8005986:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800598a:	4620      	mov	r0, r4
 800598c:	bd70      	pop	{r4, r5, r6, pc}
 800598e:	4802      	ldr	r0, [pc, #8]	; (8005998 <chCoreAllocAlignedWithOffset+0x48>)
 8005990:	f7fd fe36 	bl	8003600 <chSysHalt>
 8005994:	200042b0 	.word	0x200042b0
 8005998:	0801684c 	.word	0x0801684c
 800599c:	00000000 	.word	0x00000000

080059a0 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 80059a0:	b510      	push	{r4, lr}
 80059a2:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 80059a4:	1e08      	subs	r0, r1, #0
 80059a6:	db0a      	blt.n	80059be <_sbrk_r+0x1e>
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 80059a8:	2104      	movs	r1, #4
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7ff ffd0 	bl	8005950 <chCoreAllocAlignedWithOffset>

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
 80059b0:	b100      	cbz	r0, 80059b4 <_sbrk_r+0x14>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 80059b2:	bd10      	pop	{r4, pc}

  chDbgCheck(incr >= 0);

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
    __errno_r(r) = ENOMEM;
 80059b4:	230c      	movs	r3, #12
 80059b6:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 80059bc:	bd10      	pop	{r4, pc}
caddr_t _sbrk_r(struct _reent *r, int incr)
{
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 80059be:	4801      	ldr	r0, [pc, #4]	; (80059c4 <_sbrk_r+0x24>)
 80059c0:	f7fd fe1e 	bl	8003600 <chSysHalt>
 80059c4:	08016918 	.word	0x08016918
	...

080059d0 <chThdDequeueNextI.constprop.36>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80059d0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 80059d2:	6803      	ldr	r3, [r0, #0]

  if (queue_notempty(tqp)) {
 80059d4:	4298      	cmp	r0, r3
 80059d6:	d009      	beq.n	80059ec <chThdDequeueNextI.constprop.36+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	6002      	str	r2, [r0, #0]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 80059dc:	f893 1020 	ldrb.w	r1, [r3, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 80059e0:	6050      	str	r0, [r2, #4]
 80059e2:	2904      	cmp	r1, #4
 80059e4:	d003      	beq.n	80059ee <chThdDequeueNextI.constprop.36+0x1e>
 80059e6:	4805      	ldr	r0, [pc, #20]	; (80059fc <chThdDequeueNextI.constprop.36+0x2c>)
 80059e8:	f7fd fe0a 	bl	8003600 <chSysHalt>
 80059ec:	bd08      	pop	{r3, pc}

  tp->u.rdymsg = msg;
 80059ee:	2200      	movs	r2, #0
 80059f0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 80059f2:	4618      	mov	r0, r3
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80059f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80059f8:	f7fd bfb2 	b.w	8003960 <chSchReadyI>
 80059fc:	08016ba8 	.word	0x08016ba8

08005a00 <chThdSuspendTimeoutS.constprop.28>:
  *
  * @xclass
  */
static inline thread_t *chThdGetSelfX(void) {

  return ch.rlist.current;
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <chThdSuspendTimeoutS.constprop.28+0x24>)
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8005a02:	6801      	ldr	r1, [r0, #0]
 8005a04:	6992      	ldr	r2, [r2, #24]
 * @return              The wake up message.
 * @retval MSG_TIMEOUT  if the operation timed out.
 *
 * @sclass
 */
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 8005a06:	b508      	push	{r3, lr}
 8005a08:	4603      	mov	r3, r0
  thread_t *tp = chThdGetSelfX();

  chDbgAssert(*trp == NULL, "not NULL");
 8005a0a:	b111      	cbz	r1, 8005a12 <chThdSuspendTimeoutS.constprop.28+0x12>
 8005a0c:	4806      	ldr	r0, [pc, #24]	; (8005a28 <chThdSuspendTimeoutS.constprop.28+0x28>)
 8005a0e:	f7fd fdf7 	bl	8003600 <chSysHalt>

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  *trp = tp;
 8005a12:	6002      	str	r2, [r0, #0]
  tp->u.wttrp = trp;
 8005a14:	6253      	str	r3, [r2, #36]	; 0x24

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005a16:	2003      	movs	r0, #3
 8005a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
}
 8005a1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  }

  *trp = tp;
  tp->u.wttrp = trp;

  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 8005a20:	f7fd be56 	b.w	80036d0 <chSchGoSleepTimeoutS>
 8005a24:	200042b0 	.word	0x200042b0
 8005a28:	08019c28 	.word	0x08019c28
 8005a2c:	00000000 	.word	0x00000000

08005a30 <chSchWakeupS.constprop.17>:
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005a30:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8005a32:	4d1a      	ldr	r5, [pc, #104]	; (8005a9c <chSchWakeupS.constprop.17+0x6c>)
 * @param[in] ntp       the thread to be made ready
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8005a34:	4604      	mov	r4, r0
  thread_t *otp = currp;

  chDbgCheckClassS();
 8005a36:	f7fd fe03 	bl	8003640 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a3a:	682b      	ldr	r3, [r5, #0]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8005a3c:	69a8      	ldr	r0, [r5, #24]

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a3e:	42ab      	cmp	r3, r5
 8005a40:	d02a      	beq.n	8005a98 <chSchWakeupS.constprop.17+0x68>
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	6883      	ldr	r3, [r0, #8]
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d320      	bcc.n	8005a8c <chSchWakeupS.constprop.17+0x5c>

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8005a4a:	68a2      	ldr	r2, [r4, #8]
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8005a4c:	2100      	movs	r1, #0

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8005a4e:	429a      	cmp	r2, r3
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8005a50:	6261      	str	r1, [r4, #36]	; 0x24

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8005a52:	d916      	bls.n	8005a82 <chSchWakeupS.constprop.17+0x52>
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyI(otp);
 8005a54:	f7fd ff84 	bl	8003960 <chSchReadyI>
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8005a58:	2301      	movs	r3, #1

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005a5a:	4601      	mov	r1, r0
     list instead.*/
  if (ntp->prio <= otp->prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyI(otp);
 8005a5c:	4606      	mov	r6, r0
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8005a5e:	f884 3020 	strb.w	r3, [r4, #32]

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005a62:	4620      	mov	r0, r4
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8005a64:	61ac      	str	r4, [r5, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005a66:	f7fd fdab 	bl	80035c0 <_trace_switch>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8005a6a:	f3ef 8309 	mrs	r3, PSP
 8005a6e:	69f2      	ldr	r2, [r6, #28]
 8005a70:	3b64      	subs	r3, #100	; 0x64
 8005a72:	429a      	cmp	r2, r3
 8005a74:	d80d      	bhi.n	8005a92 <chSchWakeupS.constprop.17+0x62>
 8005a76:	4620      	mov	r0, r4
 8005a78:	4631      	mov	r1, r6
  }
}
 8005a7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005a7e:	f7fa bc23 	b.w	80002c8 <_port_switch>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
    (void) chSchReadyI(ntp);
 8005a82:	4620      	mov	r0, r4
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
 8005a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
    (void) chSchReadyI(ntp);
 8005a88:	f7fd bf6a 	b.w	8003960 <chSchReadyI>
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8005a8c:	4804      	ldr	r0, [pc, #16]	; (8005aa0 <chSchWakeupS.constprop.17+0x70>)
 8005a8e:	f7fd fdb7 	bl	8003600 <chSysHalt>
    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8005a92:	4804      	ldr	r0, [pc, #16]	; (8005aa4 <chSchWakeupS.constprop.17+0x74>)
 8005a94:	f7fd fdb4 	bl	8003600 <chSysHalt>
 8005a98:	6883      	ldr	r3, [r0, #8]
 8005a9a:	e7d6      	b.n	8005a4a <chSchWakeupS.constprop.17+0x1a>
 8005a9c:	200042b0 	.word	0x200042b0
 8005aa0:	08016bbc 	.word	0x08016bbc
 8005aa4:	08016610 	.word	0x08016610
	...

08005ab0 <chTMStartMeasurementX.constprop.12>:
 8005ab0:	4b01      	ldr	r3, [pc, #4]	; (8005ab8 <chTMStartMeasurementX.constprop.12+0x8>)
 8005ab2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8005ab4:	6083      	str	r3, [r0, #8]
 8005ab6:	4770      	bx	lr
 8005ab8:	e0001000 	.word	0xe0001000
 8005abc:	00000000 	.word	0x00000000

08005ac0 <chMBPostTimeoutS.constprop.10>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8005ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ac4:	4604      	mov	r4, r0
 8005ac6:	4688      	mov	r8, r1

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8005ac8:	f104 0718 	add.w	r7, r4, #24
 * @sclass
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
 8005acc:	f7fd fdb8 	bl	8003640 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 8005ad0:	b98c      	cbnz	r4, 8005af6 <chMBPostTimeoutS.constprop.10+0x36>
 8005ad2:	e02d      	b.n	8005b30 <chMBPostTimeoutS.constprop.10+0x70>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8005ad4:	f7fd fdec 	bl	80036b0 <chDbgCheckClassI>
 8005ad8:	6826      	ldr	r6, [r4, #0]
 8005ada:	6865      	ldr	r5, [r4, #4]
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8005adc:	f7fd fde8 	bl	80036b0 <chDbgCheckClassI>
    if (mbp->reset) {
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8005ae0:	6923      	ldr	r3, [r4, #16]
 */
static inline size_t chMBGetSizeI(const mailbox_t *mbp) {

  /*lint -save -e9033 [10.8] Perfectly safe pointers
    arithmetic.*/
  return (size_t)(mbp->top - mbp->buffer);
 8005ae2:	1baa      	subs	r2, r5, r6
 8005ae4:	ebb3 0fa2 	cmp.w	r3, r2, asr #2
 8005ae8:	d10c      	bne.n	8005b04 <chMBPostTimeoutS.constprop.10+0x44>

      return MSG_OK;
    }

    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8005aea:	4638      	mov	r0, r7
 8005aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005af0:	f7fd fe9e 	bl	8003830 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8005af4:	b9d0      	cbnz	r0, 8005b2c <chMBPostTimeoutS.constprop.10+0x6c>
  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8005af6:	7d23      	ldrb	r3, [r4, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d0eb      	beq.n	8005ad4 <chMBPostTimeoutS.constprop.10+0x14>
      return MSG_RESET;
 8005afc:	f06f 0001 	mvn.w	r0, #1
    /* No space in the queue, waiting for a slot to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
  } while (rdymsg == MSG_OK);

  return rdymsg;
}
 8005b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return MSG_RESET;
    }

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
      *mbp->wrptr++ = msg;
 8005b04:	68a2      	ldr	r2, [r4, #8]
 8005b06:	1d13      	adds	r3, r2, #4
 8005b08:	60a3      	str	r3, [r4, #8]
 8005b0a:	f8c2 8000 	str.w	r8, [r2]
      if (mbp->wrptr >= mbp->top) {
 8005b0e:	42ab      	cmp	r3, r5
        mbp->wrptr = mbp->buffer;
      }
      mbp->cnt++;
 8005b10:	6923      	ldr	r3, [r4, #16]

    /* Is there a free message slot in queue? if so then post.*/
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
      *mbp->wrptr++ = msg;
      if (mbp->wrptr >= mbp->top) {
        mbp->wrptr = mbp->buffer;
 8005b12:	bf28      	it	cs
 8005b14:	60a6      	strcs	r6, [r4, #8]
      }
      mbp->cnt++;
 8005b16:	3301      	adds	r3, #1

      /* If there is a reader waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8005b18:	f104 0020 	add.w	r0, r4, #32
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
      *mbp->wrptr++ = msg;
      if (mbp->wrptr >= mbp->top) {
        mbp->wrptr = mbp->buffer;
      }
      mbp->cnt++;
 8005b1c:	6123      	str	r3, [r4, #16]

      /* If there is a reader waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 8005b1e:	f7ff ff57 	bl	80059d0 <chThdDequeueNextI.constprop.36>
      chSchRescheduleS();
 8005b22:	f7fd feed 	bl	8003900 <chSchRescheduleS>
 8005b26:	2000      	movs	r0, #0
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck(mbp != NULL);
 8005b30:	4801      	ldr	r0, [pc, #4]	; (8005b38 <chMBPostTimeoutS.constprop.10+0x78>)
 8005b32:	f7fd fd65 	bl	8003600 <chSysHalt>
 8005b36:	bf00      	nop
 8005b38:	08019c54 	.word	0x08019c54
 8005b3c:	00000000 	.word	0x00000000

08005b40 <chMBFetchTimeoutS.constprop.7>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	4604      	mov	r4, r0
 8005b44:	460e      	mov	r6, r1
  msg_t rdymsg;

  chDbgCheckClassS();
 8005b46:	f7fd fd7b 	bl	8003640 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 8005b4a:	b354      	cbz	r4, 8005ba2 <chMBFetchTimeoutS.constprop.7+0x62>
 8005b4c:	b34e      	cbz	r6, 8005ba2 <chMBFetchTimeoutS.constprop.7+0x62>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8005b4e:	f104 0520 	add.w	r5, r4, #32
 8005b52:	e009      	b.n	8005b68 <chMBFetchTimeoutS.constprop.7+0x28>
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8005b54:	f7fd fdac 	bl	80036b0 <chDbgCheckClassI>

  return mbp->cnt;
 8005b58:	6923      	ldr	r3, [r4, #16]
    if (mbp->reset) {
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 8005b5a:	b95b      	cbnz	r3, 8005b74 <chMBFetchTimeoutS.constprop.7+0x34>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 8005b5c:	4628      	mov	r0, r5
 8005b5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005b62:	f7fd fe65 	bl	8003830 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 8005b66:	b9d8      	cbnz	r0, 8005ba0 <chMBFetchTimeoutS.constprop.7+0x60>
  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));

  do {
    /* If the mailbox is in reset state then returns immediately.*/
    if (mbp->reset) {
 8005b68:	7d23      	ldrb	r3, [r4, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d0f2      	beq.n	8005b54 <chMBFetchTimeoutS.constprop.7+0x14>
      return MSG_RESET;
 8005b6e:	f06f 0001 	mvn.w	r0, #1
    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
  } while (rdymsg == MSG_OK);

  return rdymsg;
}
 8005b72:	bd70      	pop	{r4, r5, r6, pc}
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005b74:	68e2      	ldr	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
 8005b76:	6861      	ldr	r1, [r4, #4]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005b78:	6810      	ldr	r0, [r2, #0]
 8005b7a:	3204      	adds	r2, #4
      if (mbp->rdptr >= mbp->top) {
 8005b7c:	428a      	cmp	r2, r1
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005b7e:	60e2      	str	r2, [r4, #12]
      if (mbp->rdptr >= mbp->top) {
        mbp->rdptr = mbp->buffer;
      }
      mbp->cnt--;
 8005b80:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
      if (mbp->rdptr >= mbp->top) {
        mbp->rdptr = mbp->buffer;
 8005b84:	bf28      	it	cs
 8005b86:	6822      	ldrcs	r2, [r4, #0]
      return MSG_RESET;
    }

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
 8005b88:	6030      	str	r0, [r6, #0]
        mbp->rdptr = mbp->buffer;
      }
      mbp->cnt--;

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005b8a:	f104 0018 	add.w	r0, r4, #24

    /* Is there a message in queue? if so then fetch.*/
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
      *msgp = *mbp->rdptr++;
      if (mbp->rdptr >= mbp->top) {
        mbp->rdptr = mbp->buffer;
 8005b8e:	bf28      	it	cs
 8005b90:	60e2      	strcs	r2, [r4, #12]
      }
      mbp->cnt--;
 8005b92:	6123      	str	r3, [r4, #16]

      /* If there is a writer waiting then makes it ready.*/
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8005b94:	f7ff ff1c 	bl	80059d0 <chThdDequeueNextI.constprop.36>
      chSchRescheduleS();
 8005b98:	f7fd feb2 	bl	8003900 <chSchRescheduleS>

      return MSG_OK;
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	bd70      	pop	{r4, r5, r6, pc}
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 8005ba2:	4801      	ldr	r0, [pc, #4]	; (8005ba8 <chMBFetchTimeoutS.constprop.7+0x68>)
 8005ba4:	f7fd fd2c 	bl	8003600 <chSysHalt>
 8005ba8:	08019c40 	.word	0x08019c40
 8005bac:	00000000 	.word	0x00000000

08005bb0 <chprintf.constprop.4>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8005bb0:	b40e      	push	{r1, r2, r3}
 8005bb2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb6:	ed2d 8b02 	vpush	{d8}
 8005bba:	b08e      	sub	sp, #56	; 0x38
 8005bbc:	ae19      	add	r6, sp, #100	; 0x64
 8005bbe:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8005bc2:	aa08      	add	r2, sp, #32
 8005bc4:	1a9b      	subs	r3, r3, r2
 8005bc6:	f856 5b04 	ldr.w	r5, [r6], #4
 8005bca:	9301      	str	r3, [sp, #4]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8005bcc:	2300      	movs	r3, #0
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8005bce:	9607      	str	r6, [sp, #28]
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8005bd0:	9300      	str	r3, [sp, #0]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8005bd2:	7829      	ldrb	r1, [r5, #0]
 8005bd4:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8005bd6:	b181      	cbz	r1, 8005bfa <chprintf.constprop.4+0x4a>
      return n;
    if (c != '%') {
 8005bd8:	2925      	cmp	r1, #37	; 0x25
 8005bda:	d016      	beq.n	8005c0a <chprintf.constprop.4+0x5a>
      streamPut(chp, (uint8_t)c);
 8005bdc:	f8df 83f4 	ldr.w	r8, [pc, #1012]	; 8005fd4 <chprintf.constprop.4+0x424>
      n++;
 8005be0:	9a00      	ldr	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8005be2:	f8d8 0000 	ldr.w	r0, [r8]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8005be6:	461d      	mov	r5, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8005be8:	68c4      	ldr	r4, [r0, #12]
      n++;
 8005bea:	3201      	adds	r2, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8005bec:	4640      	mov	r0, r8
      n++;
 8005bee:	9200      	str	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8005bf0:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8005bf2:	7829      	ldrb	r1, [r5, #0]
 8005bf4:	1c6b      	adds	r3, r5, #1
    if (c == 0)
 8005bf6:	2900      	cmp	r1, #0
 8005bf8:	d1ee      	bne.n	8005bd8 <chprintf.constprop.4+0x28>
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8005bfa:	9800      	ldr	r0, [sp, #0]
 8005bfc:	b00e      	add	sp, #56	; 0x38
 8005bfe:	ecbd 8b02 	vpop	{d8}
 8005c02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c06:	b003      	add	sp, #12
 8005c08:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8005c0a:	786a      	ldrb	r2, [r5, #1]
 8005c0c:	2a2d      	cmp	r2, #45	; 0x2d
 8005c0e:	bf03      	ittte	eq
 8005c10:	78aa      	ldrbeq	r2, [r5, #2]
      fmt++;
 8005c12:	1cab      	addeq	r3, r5, #2
      left_align = TRUE;
 8005c14:	f04f 0901 	moveq.w	r9, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8005c18:	f04f 0900 	movne.w	r9, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8005c1c:	2a30      	cmp	r2, #48	; 0x30
 8005c1e:	bf03      	ittte	eq
 8005c20:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8005c22:	3301      	addeq	r3, #1
      filler = '0';
 8005c24:	2730      	moveq	r7, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8005c26:	2720      	movne	r7, #32
 8005c28:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8005c2a:	2400      	movs	r4, #0
 8005c2c:	e005      	b.n	8005c3a <chprintf.constprop.4+0x8a>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8005c2e:	7833      	ldrb	r3, [r6, #0]
 8005c30:	3604      	adds	r6, #4
 8005c32:	782a      	ldrb	r2, [r5, #0]
      else
        break;
      width = width * 10 + c;
 8005c34:	eb03 0440 	add.w	r4, r3, r0, lsl #1
 8005c38:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8005c3a:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8005c42:	460d      	mov	r5, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8005c44:	eb04 0084 	add.w	r0, r4, r4, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8005c48:	d9f3      	bls.n	8005c32 <chprintf.constprop.4+0x82>
        c -= '0';
      else if (c == '*')
 8005c4a:	2a2a      	cmp	r2, #42	; 0x2a
 8005c4c:	d0ef      	beq.n	8005c2e <chprintf.constprop.4+0x7e>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8005c4e:	2a2e      	cmp	r2, #46	; 0x2e
 8005c50:	f04f 0b00 	mov.w	fp, #0
 8005c54:	d043      	beq.n	8005cde <chprintf.constprop.4+0x12e>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8005c56:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8005c5a:	2b4c      	cmp	r3, #76	; 0x4c
 8005c5c:	d04e      	beq.n	8005cfc <chprintf.constprop.4+0x14c>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005c5e:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8005c62:	2934      	cmp	r1, #52	; 0x34
 8005c64:	f200 8178 	bhi.w	8005f58 <chprintf.constprop.4+0x3a8>
 8005c68:	e8df f011 	tbh	[pc, r1, lsl #1]
 8005c6c:	0176015e 	.word	0x0176015e
 8005c70:	01760176 	.word	0x01760176
 8005c74:	015e0176 	.word	0x015e0176
 8005c78:	01760176 	.word	0x01760176
 8005c7c:	01760176 	.word	0x01760176
 8005c80:	012d0176 	.word	0x012d0176
 8005c84:	01760176 	.word	0x01760176
 8005c88:	01760176 	.word	0x01760176
 8005c8c:	01660176 	.word	0x01660176
 8005c90:	01760176 	.word	0x01760176
 8005c94:	01760173 	.word	0x01760173
 8005c98:	01760176 	.word	0x01760176
 8005c9c:	01760176 	.word	0x01760176
 8005ca0:	01760176 	.word	0x01760176
 8005ca4:	01760176 	.word	0x01760176
 8005ca8:	01680176 	.word	0x01680176
 8005cac:	0176015e 	.word	0x0176015e
 8005cb0:	017600de 	.word	0x017600de
 8005cb4:	015e0176 	.word	0x015e0176
 8005cb8:	01760176 	.word	0x01760176
 8005cbc:	01760176 	.word	0x01760176
 8005cc0:	012d0176 	.word	0x012d0176
 8005cc4:	01760176 	.word	0x01760176
 8005cc8:	00890176 	.word	0x00890176
 8005ccc:	01660176 	.word	0x01660176
 8005cd0:	01760176 	.word	0x01760176
 8005cd4:	0173      	.short	0x0173
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8005cd6:	7833      	ldrb	r3, [r6, #0]
 8005cd8:	3604      	adds	r6, #4
        else
          break;
        precision *= 10;
        precision += c;
 8005cda:	eb03 0b41 	add.w	fp, r3, r1, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8005cde:	f815 2b01 	ldrb.w	r2, [r5], #1
        if (c >= '0' && c <= '9')
 8005ce2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8005cea:	eb0b 018b 	add.w	r1, fp, fp, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8005cee:	d9f4      	bls.n	8005cda <chprintf.constprop.4+0x12a>
          c -= '0';
        else if (c == '*')
 8005cf0:	2a2a      	cmp	r2, #42	; 0x2a
 8005cf2:	d0f0      	beq.n	8005cd6 <chprintf.constprop.4+0x126>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8005cf4:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8005cf8:	2b4c      	cmp	r3, #76	; 0x4c
 8005cfa:	d1b0      	bne.n	8005c5e <chprintf.constprop.4+0xae>
      is_long = TRUE;
      if (*fmt)
 8005cfc:	782b      	ldrb	r3, [r5, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 812a 	beq.w	8005f58 <chprintf.constprop.4+0x3a8>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005d04:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8005d08:	3501      	adds	r5, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005d0a:	2a34      	cmp	r2, #52	; 0x34
 8005d0c:	f200 8123 	bhi.w	8005f56 <chprintf.constprop.4+0x3a6>
 8005d10:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005d14:	0121010a 	.word	0x0121010a
 8005d18:	01210121 	.word	0x01210121
 8005d1c:	010a0121 	.word	0x010a0121
 8005d20:	01210121 	.word	0x01210121
 8005d24:	01210121 	.word	0x01210121
 8005d28:	00d90121 	.word	0x00d90121
 8005d2c:	01210121 	.word	0x01210121
 8005d30:	01210121 	.word	0x01210121
 8005d34:	01120121 	.word	0x01120121
 8005d38:	01210121 	.word	0x01210121
 8005d3c:	0121011f 	.word	0x0121011f
 8005d40:	01210121 	.word	0x01210121
 8005d44:	01210121 	.word	0x01210121
 8005d48:	01210121 	.word	0x01210121
 8005d4c:	01210121 	.word	0x01210121
 8005d50:	01140121 	.word	0x01140121
 8005d54:	0121010a 	.word	0x0121010a
 8005d58:	0121008a 	.word	0x0121008a
 8005d5c:	010a0121 	.word	0x010a0121
 8005d60:	01210121 	.word	0x01210121
 8005d64:	01210121 	.word	0x01210121
 8005d68:	00d90121 	.word	0x00d90121
 8005d6c:	01210121 	.word	0x01210121
 8005d70:	00350121 	.word	0x00350121
 8005d74:	01120121 	.word	0x01120121
 8005d78:	01210121 	.word	0x01210121
 8005d7c:	011f      	.short	0x011f
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8005d7e:	f8d6 a000 	ldr.w	sl, [r6]
        s = "(null)";
 8005d82:	4b93      	ldr	r3, [pc, #588]	; (8005fd0 <chprintf.constprop.4+0x420>)
 8005d84:	f1ba 0f00 	cmp.w	sl, #0
 8005d88:	bf08      	it	eq
 8005d8a:	469a      	moveq	sl, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8005d8c:	3604      	adds	r6, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005d8e:	f89a 3000 	ldrb.w	r3, [sl]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8005d92:	f1bb 0f00 	cmp.w	fp, #0
 8005d96:	f000 80fc 	beq.w	8005f92 <chprintf.constprop.4+0x3e2>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 80fe 	beq.w	8005f9c <chprintf.constprop.4+0x3ec>
 8005da0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005da4:	4650      	mov	r0, sl
 8005da6:	e002      	b.n	8005dae <chprintf.constprop.4+0x1fe>
 8005da8:	f1bb 0b01 	subs.w	fp, fp, #1
 8005dac:	d403      	bmi.n	8005db6 <chprintf.constprop.4+0x206>
 8005dae:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f8      	bne.n	8005da8 <chprintf.constprop.4+0x1f8>
 8005db6:	ebca 0000 	rsb	r0, sl, r0
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8005dba:	1a24      	subs	r4, r4, r0
 8005dbc:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8005dbe:	2720      	movs	r7, #32
 8005dc0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005dc4:	f1b9 0f00 	cmp.w	r9, #0
 8005dc8:	f000 8090 	beq.w	8005eec <chprintf.constprop.4+0x33c>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005dcc:	f1b3 0900 	subs.w	r9, r3, #0
 8005dd0:	db17      	blt.n	8005e02 <chprintf.constprop.4+0x252>
 8005dd2:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8005fd4 <chprintf.constprop.4+0x424>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005dd6:	46cb      	mov	fp, r9
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8005dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ddc:	487d      	ldr	r0, [pc, #500]	; (8005fd4 <chprintf.constprop.4+0x424>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	f81a 1b01 	ldrb.w	r1, [sl], #1
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005de4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8005de8:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005dea:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8005dee:	d1f3      	bne.n	8005dd8 <chprintf.constprop.4+0x228>
 8005df0:	9b00      	ldr	r3, [sp, #0]
 8005df2:	f103 0801 	add.w	r8, r3, #1
 8005df6:	4643      	mov	r3, r8
 8005df8:	f1b9 0f00 	cmp.w	r9, #0
 8005dfc:	bfa8      	it	ge
 8005dfe:	444b      	addge	r3, r9
 8005e00:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005e02:	2c00      	cmp	r4, #0
 8005e04:	f43f aee5 	beq.w	8005bd2 <chprintf.constprop.4+0x22>
 8005e08:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8005fd4 <chprintf.constprop.4+0x424>
 8005e0c:	46a1      	mov	r9, r4
      streamPut(chp, (uint8_t)filler);
 8005e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8005e12:	4870      	ldr	r0, [pc, #448]	; (8005fd4 <chprintf.constprop.4+0x424>)
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	4639      	mov	r1, r7
 8005e18:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8005e1a:	f1b9 0901 	subs.w	r9, r9, #1
 8005e1e:	d1f6      	bne.n	8005e0e <chprintf.constprop.4+0x25e>
 8005e20:	9b00      	ldr	r3, [sp, #0]
 8005e22:	4423      	add	r3, r4
 8005e24:	9300      	str	r3, [sp, #0]
 8005e26:	e6d4      	b.n	8005bd2 <chprintf.constprop.4+0x22>
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8005e28:	3607      	adds	r6, #7
 8005e2a:	f026 0607 	bic.w	r6, r6, #7
 8005e2e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005e32:	f7fa fee1 	bl	8000bf8 <__aeabi_d2f>
 8005e36:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 8005e3a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      }
      p = ch_ltoa(p, l, 10);
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
 8005e42:	f106 0608 	add.w	r6, r6, #8
      if (f < 0) {
 8005e46:	f100 80b9 	bmi.w	8005fbc <chprintf.constprop.4+0x40c>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8005e4a:	a808      	add	r0, sp, #32
};

static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8005e4c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];

  l = (long)num;
 8005e50:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005e54:	f1bb 0f08 	cmp.w	fp, #8
 8005e58:	bf28      	it	cs
 8005e5a:	f04f 0b08 	movcs.w	fp, #8
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8005e5e:	f8df e17c 	ldr.w	lr, [pc, #380]	; 8005fdc <chprintf.constprop.4+0x42c>

  l = (long)num;
 8005e62:	edcd 7a02 	vstr	s15, [sp, #8]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8005e66:	ee17 1a90 	vmov	r1, s15
 8005e6a:	220a      	movs	r2, #10
 8005e6c:	2300      	movs	r3, #0
static char *ftoa(char *p, double num, unsigned long precision) {
  long l;

  if ((precision == 0) || (precision > FLOAT_PRECISION))
    precision = FLOAT_PRECISION;
  precision = pow10[precision - 1];
 8005e6e:	f85e a02b 	ldr.w	sl, [lr, fp, lsl #2]

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
 8005e72:	f7ff f965 	bl	8005140 <long_to_string_with_divisor.lto_priv.50>
  *p++ = '.';
 8005e76:	4683      	mov	fp, r0
 8005e78:	232e      	movs	r3, #46	; 0x2e
 8005e7a:	f80b 3b01 	strb.w	r3, [fp], #1
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
        f = -f;
      }
      p = ftoa(p, f, precision);
 8005e7e:	ee18 0a10 	vmov	r0, s16
 8005e82:	f7fa fba3 	bl	80005cc <__aeabi_f2d>
 8005e86:	e9cd 0104 	strd	r0, r1, [sp, #16]
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8005e8a:	9802      	ldr	r0, [sp, #8]
 8005e8c:	f7fa fb8c 	bl	80005a8 <__aeabi_i2d>
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005e98:	f7fa fa38 	bl	800030c <__aeabi_dsub>
 8005e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea0:	4650      	mov	r0, sl
 8005ea2:	f7fa fb71 	bl	8000588 <__aeabi_ui2d>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eae:	f7fa fbe1 	bl	8000674 <__aeabi_dmul>
 8005eb2:	f7fa fe79 	bl	8000ba8 <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8005eb6:	4b48      	ldr	r3, [pc, #288]	; (8005fd8 <chprintf.constprop.4+0x428>)
 8005eb8:	fba3 230a 	umull	r2, r3, r3, sl
  precision = pow10[precision - 1];

  l = (long)num;
  p = long_to_string_with_divisor(p, l, 10, 0);
  *p++ = '.';
  l = (long)((num - l) * precision);
 8005ebc:	4601      	mov	r1, r0
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8005ebe:	08db      	lsrs	r3, r3, #3
 8005ec0:	4658      	mov	r0, fp
 8005ec2:	220a      	movs	r2, #10
 8005ec4:	e004      	b.n	8005ed0 <chprintf.constprop.4+0x320>
 8005ec6:	2208      	movs	r2, #8
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8005ec8:	6831      	ldr	r1, [r6, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005eca:	a808      	add	r0, sp, #32
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8005ecc:	3604      	adds	r6, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f7ff f936 	bl	8005140 <long_to_string_with_divisor.lto_priv.50>
 8005ed4:	ab08      	add	r3, sp, #32
 8005ed6:	1ac0      	subs	r0, r0, r3
 8005ed8:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8005eda:	f10d 0a20 	add.w	sl, sp, #32
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8005ede:	1a24      	subs	r4, r4, r0
 8005ee0:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      width = 0;
    if (left_align == FALSE)
 8005ee4:	f1b9 0f00 	cmp.w	r9, #0
 8005ee8:	f47f af70 	bne.w	8005dcc <chprintf.constprop.4+0x21c>
 8005eec:	4699      	mov	r9, r3
      width = -width;
 8005eee:	f1c4 0b00 	rsb	fp, r4, #0
    if (width < 0) {
 8005ef2:	f1bb 0f00 	cmp.w	fp, #0
 8005ef6:	d037      	beq.n	8005f68 <chprintf.constprop.4+0x3b8>
      if (*s == '-' && filler == '0') {
 8005ef8:	f89a 1000 	ldrb.w	r1, [sl]
        streamPut(chp, (uint8_t)*s++);
 8005efc:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005fd4 <chprintf.constprop.4+0x424>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8005f00:	292d      	cmp	r1, #45	; 0x2d
 8005f02:	d037      	beq.n	8005f74 <chprintf.constprop.4+0x3c4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8005f04:	465c      	mov	r4, fp
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8005f06:	f8d8 3000 	ldr.w	r3, [r8]
 8005f0a:	4832      	ldr	r0, [pc, #200]	; (8005fd4 <chprintf.constprop.4+0x424>)
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4639      	mov	r1, r7
 8005f10:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8005f12:	3401      	adds	r4, #1
 8005f14:	d1f7      	bne.n	8005f06 <chprintf.constprop.4+0x356>
 8005f16:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 8005f18:	f1b9 0f00 	cmp.w	r9, #0
 8005f1c:	ebcb 0303 	rsb	r3, fp, r3
 8005f20:	9300      	str	r3, [sp, #0]
 8005f22:	f6bf af58 	bge.w	8005dd6 <chprintf.constprop.4+0x226>
 8005f26:	e654      	b.n	8005bd2 <chprintf.constprop.4+0x22>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8005f28:	6831      	ldr	r1, [r6, #0]
      if (l < 0) {
 8005f2a:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8005f2c:	f106 0604 	add.w	r6, r6, #4
      if (l < 0) {
 8005f30:	db3d      	blt.n	8005fae <chprintf.constprop.4+0x3fe>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8005f32:	a808      	add	r0, sp, #32
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8005f34:	220a      	movs	r2, #10
 8005f36:	e7ca      	b.n	8005ece <chprintf.constprop.4+0x31e>
 8005f38:	220a      	movs	r2, #10
 8005f3a:	e7c5      	b.n	8005ec8 <chprintf.constprop.4+0x318>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8005f3c:	6833      	ldr	r3, [r6, #0]
 8005f3e:	f88d 3020 	strb.w	r3, [sp, #32]
 8005f42:	9b01      	ldr	r3, [sp, #4]
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8005f44:	2720      	movs	r7, #32
 8005f46:	4618      	mov	r0, r3
      *p++ = va_arg(ap, int);
 8005f48:	3604      	adds	r6, #4
 8005f4a:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8005f4c:	eb0d 0a07 	add.w	sl, sp, r7
 8005f50:	e7c5      	b.n	8005ede <chprintf.constprop.4+0x32e>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8005f52:	2210      	movs	r2, #16
 8005f54:	e7b8      	b.n	8005ec8 <chprintf.constprop.4+0x318>
 8005f56:	461a      	mov	r2, r3
 8005f58:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8005f5a:	f88d 2020 	strb.w	r2, [sp, #32]
 8005f5e:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8005f60:	f10d 0a20 	add.w	sl, sp, #32
 8005f64:	3b01      	subs	r3, #1
 8005f66:	e7ba      	b.n	8005ede <chprintf.constprop.4+0x32e>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005f68:	f1b9 0f00 	cmp.w	r9, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8005f6c:	465c      	mov	r4, fp
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8005f6e:	f6bf af30 	bge.w	8005dd2 <chprintf.constprop.4+0x222>
 8005f72:	e62e      	b.n	8005bd2 <chprintf.constprop.4+0x22>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8005f74:	2f30      	cmp	r7, #48	; 0x30
 8005f76:	d1c5      	bne.n	8005f04 <chprintf.constprop.4+0x354>
        streamPut(chp, (uint8_t)*s++);
 8005f78:	f8d8 3000 	ldr.w	r3, [r8]
 8005f7c:	4640      	mov	r0, r8
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4798      	blx	r3
        n++;
 8005f82:	9b00      	ldr	r3, [sp, #0]
 8005f84:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8005f86:	f10a 0a01 	add.w	sl, sl, #1
        n++;
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8005f90:	e7b8      	b.n	8005f04 <chprintf.constprop.4+0x354>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8005f92:	f647 7bfe 	movw	fp, #32766	; 0x7ffe
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	f47f af04 	bne.w	8005da4 <chprintf.constprop.4+0x1f4>
 8005f9c:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005fa0:	f1b9 0f00 	cmp.w	r9, #0
 8005fa4:	d112      	bne.n	8005fcc <chprintf.constprop.4+0x41c>
 8005fa6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005faa:	2720      	movs	r7, #32
 8005fac:	e79f      	b.n	8005eee <chprintf.constprop.4+0x33e>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8005fae:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8005fb0:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8005fb2:	f88d 3020 	strb.w	r3, [sp, #32]
 8005fb6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8005fba:	e7bb      	b.n	8005f34 <chprintf.constprop.4+0x384>
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8005fbc:	232d      	movs	r3, #45	; 0x2d
        f = -f;
 8005fbe:	eeb1 8a48 	vneg.f32	s16, s16
      break;
#if CHPRINTF_USE_FLOAT
    case 'f':
      f = (float) va_arg(ap, double);
      if (f < 0) {
        *p++ = '-';
 8005fc2:	f88d 3020 	strb.w	r3, [sp, #32]
 8005fc6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 8005fca:	e73f      	b.n	8005e4c <chprintf.constprop.4+0x29c>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8005fcc:	2720      	movs	r7, #32
 8005fce:	e718      	b.n	8005e02 <chprintf.constprop.4+0x252>
 8005fd0:	08016bdc 	.word	0x08016bdc
 8005fd4:	2000424c 	.word	0x2000424c
 8005fd8:	cccccccd 	.word	0xcccccccd
 8005fdc:	08016b5c 	.word	0x08016b5c

08005fe0 <oled_draw_string.constprop.3>:
  }}




void oled_draw_string(uint8_t x,uint8_t y,char* text)
 8005fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
    oled_current_row = (y*16);
 8005fe4:	0100      	lsls	r0, r0, #4
  }}




void oled_draw_string(uint8_t x,uint8_t y,char* text)
 8005fe6:	468b      	mov	fp, r1


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
    oled_current_row = (y*16);
 8005fe8:	b2c5      	uxtb	r5, r0
void oled_draw_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 8005fea:	4658      	mov	r0, fp
 8005fec:	f000 fc08 	bl	8006800 <strlen>
 8005ff0:	f04f 0900 	mov.w	r9, #0
 8005ff4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8005ff8:	4581      	cmp	r9, r0
 8005ffa:	eb06 16c5 	add.w	r6, r6, r5, lsl #7


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
    oled_current_row = (y*16);
 8005ffe:	f04f 0a02 	mov.w	sl, #2
}


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
 8006002:	f8df 806c 	ldr.w	r8, [pc, #108]	; 8006070 <oled_draw_string.constprop.3+0x90>
    oled_current_row = (y*16);
 8006006:	4f17      	ldr	r7, [pc, #92]	; (8006064 <oled_draw_string.constprop.3+0x84>)
 8006008:	4c17      	ldr	r4, [pc, #92]	; (8006068 <oled_draw_string.constprop.3+0x88>)
void oled_draw_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 800600a:	d229      	bcs.n	8006060 <oled_draw_string.constprop.3+0x80>
}


void set_oled_text_pos(uint8_t x,uint8_t y)
{
    oled_current_column = (x*6+2);
 800600c:	f888 a000 	strb.w	sl, [r8]
    oled_current_row = (y*16);
 8006010:	703d      	strb	r5, [r7, #0]
 8006012:	f81b 2009 	ldrb.w	r2, [fp, r9]
 8006016:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800601a:	0152      	lsls	r2, r2, #5
 800601c:	1e53      	subs	r3, r2, #1
 800601e:	325f      	adds	r2, #95	; 0x5f
 8006020:	eb04 0c02 	add.w	ip, r4, r2
 8006024:	4a11      	ldr	r2, [pc, #68]	; (800606c <oled_draw_string.constprop.3+0x8c>)
 8006026:	eb06 0e0a 	add.w	lr, r6, sl
 800602a:	4423      	add	r3, r4
 800602c:	4496      	add	lr, r2
 800602e:	1d98      	adds	r0, r3, #6
  }}




void oled_draw_string(uint8_t x,uint8_t y,char* text)
 8006030:	4672      	mov	r2, lr
   for (j=0; j<16; j++)
  {

    for (i=0; i<6; i++)
    {
	vbuf[oled_current_row+j][oled_current_column+i] = font[a][j][i];
 8006032:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006036:	f802 1f01 	strb.w	r1, [r2, #1]!
  uint8_t j,i;

   for (j=0; j<16; j++)
  {

    for (i=0; i<6; i++)
 800603a:	4283      	cmp	r3, r0
 800603c:	d1f9      	bne.n	8006032 <oled_draw_string.constprop.3+0x52>

void write_oled_char(char a)
{
  uint8_t j,i;

   for (j=0; j<16; j++)
 800603e:	459c      	cmp	ip, r3
 8006040:	f10e 0e80 	add.w	lr, lr, #128	; 0x80
 8006044:	d1f3      	bne.n	800602e <oled_draw_string.constprop.3+0x4e>
void oled_draw_string(uint8_t x,uint8_t y,char* text)
{
  uint8_t currentx = x;
  uint8_t j;

  for (j=0;j<(strlen(text));j++)
 8006046:	4658      	mov	r0, fp
 8006048:	f000 fbda 	bl	8006800 <strlen>
 800604c:	f109 0901 	add.w	r9, r9, #1
 8006050:	fa5f f989 	uxtb.w	r9, r9
 8006054:	f10a 0a06 	add.w	sl, sl, #6
 8006058:	4581      	cmp	r9, r0
 800605a:	fa5f fa8a 	uxtb.w	sl, sl
 800605e:	d3d5      	bcc.n	800600c <oled_draw_string.constprop.3+0x2c>
    {
	set_oled_text_pos(x+j,y);
      write_oled_char(text[j]);
    }
}
 8006060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006064:	20004c18 	.word	0x20004c18
 8006068:	08016bec 	.word	0x08016bec
 800606c:	20004c1c 	.word	0x20004c1c
 8006070:	200042ac 	.word	0x200042ac
	...

08006080 <chThdCreateStatic.constprop.11>:
 * @return              The pointer to the @p thread_t structure allocated for
 *                      the thread into the working space area.
 *
 * @api
 */
thread_t *chThdCreateStatic(void *wsp, size_t size,
 8006080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                            tprio_t prio, tfunc_t pf, void *arg) {
  thread_t *tp;

  chDbgCheck((wsp != NULL) &&
 8006084:	b140      	cbz	r0, 8006098 <chThdCreateStatic.constprop.11+0x18>
 8006086:	0744      	lsls	r4, r0, #29
 8006088:	4605      	mov	r5, r0
 800608a:	d105      	bne.n	8006098 <chThdCreateStatic.constprop.11+0x18>
 800608c:	f5b1 7fa8 	cmp.w	r1, #336	; 0x150
 8006090:	460c      	mov	r4, r1
 8006092:	d301      	bcc.n	8006098 <chThdCreateStatic.constprop.11+0x18>
 8006094:	074b      	lsls	r3, r1, #29
 8006096:	d002      	beq.n	800609e <chThdCreateStatic.constprop.11+0x1e>
 8006098:	4828      	ldr	r0, [pc, #160]	; (800613c <chThdCreateStatic.constprop.11+0xbc>)
 800609a:	f7fd fab1 	bl	8003600 <chSysHalt>
 800609e:	4616      	mov	r6, r2
 80060a0:	2a00      	cmp	r2, #0
 80060a2:	d0f9      	beq.n	8006098 <chThdCreateStatic.constprop.11+0x18>
             MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
             (prio <= HIGHPRIO) && (pf != NULL));

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 80060a4:	f7fd fd6c 	bl	8003b80 <chRegFindThreadByWorkingArea>
 80060a8:	2800      	cmp	r0, #0
 80060aa:	d1f5      	bne.n	8006098 <chThdCreateStatic.constprop.11+0x18>
              "working area in use");
#endif

#if CH_DBG_FILL_THREADS == TRUE
  _thread_memfill((uint8_t *)wsp,
 80060ac:	192a      	adds	r2, r5, r4
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80060ae:	4295      	cmp	r5, r2
 80060b0:	d205      	bcs.n	80060be <chThdCreateStatic.constprop.11+0x3e>
 80060b2:	462b      	mov	r3, r5
    *startp++ = v;
 80060b4:	2155      	movs	r1, #85	; 0x55
 80060b6:	f803 1b01 	strb.w	r1, [r3], #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d1fb      	bne.n	80060b6 <chThdCreateStatic.constprop.11+0x36>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80060be:	2320      	movs	r3, #32
 80060c0:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80060c4:	f7fd fd4c 	bl	8003b60 <_dbg_check_lock>
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80060c8:	4a1d      	ldr	r2, [pc, #116]	; (8006140 <chThdCreateStatic.constprop.11+0xc0>)
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 80060ca:	f8df c078 	ldr.w	ip, [pc, #120]	; 8006144 <chThdCreateStatic.constprop.11+0xc4>
  REG_INSERT(tp);
 80060ce:	6957      	ldr	r7, [r2, #20]
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80060d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 8006148 <chThdCreateStatic.constprop.11+0xc8>
  chSysLock();

  /* The thread structure is laid out in the upper part of the thread
     workspace. The thread position structure is aligned to the required
     stack alignment because it represents the stack top.*/
  tp = (thread_t *)((uint8_t *)wsp + size -
 80060d4:	3c48      	subs	r4, #72	; 0x48
 80060d6:	442c      	add	r4, r5
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80060d8:	2300      	movs	r3, #0
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
#endif
#if CH_CFG_USE_MESSAGES == TRUE
  queue_init(&tp->msgqueue);
 80060da:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  REG_INSERT(tp);
#else
  (void)name;
#endif
#if CH_CFG_USE_WAITEXIT == TRUE
  list_init(&tp->waiting);
 80060de:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80060e2:	2080      	movs	r0, #128	; 0x80
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80060e4:	f1a4 0b64 	sub.w	fp, r4, #100	; 0x64
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 80060e8:	f04f 0902 	mov.w	r9, #2
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 80060ec:	f04f 0801 	mov.w	r8, #1
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80060f0:	f844 3c20 	str.w	r3, [r4, #-32]
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 80060f4:	60a0      	str	r0, [r4, #8]
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 80060f6:	6122      	str	r2, [r4, #16]
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 80060f8:	f844 6c24 	str.w	r6, [r4, #-36]
 80060fc:	f8c4 b00c 	str.w	fp, [r4, #12]
 8006100:	f844 ac04 	str.w	sl, [r4, #-4]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8006104:	f8c4 c018 	str.w	ip, [r4, #24]
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8006108:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 800610c:	63a3      	str	r3, [r4, #56]	; 0x38
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 800610e:	6363      	str	r3, [r4, #52]	; 0x34
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8006110:	63e0      	str	r0, [r4, #60]	; 0x3c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8006112:	6167      	str	r7, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 8006114:	4620      	mov	r0, r4
  tp = (thread_t *)((uint8_t *)wsp + size -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = (stkalign_t *)wsp;
 8006116:	61e5      	str	r5, [r4, #28]
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8006118:	f884 9020 	strb.w	r9, [r4, #32]
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 800611c:	f884 8022 	strb.w	r8, [r4, #34]	; 0x22
  tp->name      = name;
  REG_INSERT(tp);
 8006120:	613c      	str	r4, [r7, #16]
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8006122:	f8c4 e028 	str.w	lr, [r4, #40]	; 0x28
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8006126:	62e1      	str	r1, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8006128:	6321      	str	r1, [r4, #48]	; 0x30
 800612a:	6154      	str	r4, [r2, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);

  tp = _thread_init(tp, "noname", prio);

  /* Starting the thread immediately.*/
  chSchWakeupS(tp, MSG_OK);
 800612c:	f7ff fc80 	bl	8005a30 <chSchWakeupS.constprop.17>
  chSysUnlock();
 8006130:	f7fd fcfe 	bl	8003b30 <chSysUnlock.lto_priv.47>

  return tp;
}
 8006134:	4620      	mov	r0, r4
 8006136:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800613a:	bf00      	nop
 800613c:	08019bec 	.word	0x08019bec
 8006140:	200042b0 	.word	0x200042b0
 8006144:	08016be4 	.word	0x08016be4
 8006148:	080002e1 	.word	0x080002e1
 800614c:	00000000 	.word	0x00000000

08006150 <adcConvert.constprop.27>:
 * @retval MSG_TIMEOUT  The conversion has been stopped because an hardware
 *                      error.
 *
 * @api
 */
msg_t adcConvert(ADCDriver *adcp,
 8006150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006154:	2320      	movs	r3, #32
 8006156:	4604      	mov	r4, r0
 8006158:	460d      	mov	r5, r1
 800615a:	4616      	mov	r6, r2
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f7fd fcfe 	bl	8003b60 <_dbg_check_lock>
                 adcsample_t *samples,
                 size_t depth) {
  msg_t msg;

  osalSysLock();
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 8006164:	6963      	ldr	r3, [r4, #20]
 8006166:	b113      	cbz	r3, 800616e <adcConvert.constprop.27+0x1e>
 8006168:	4833      	ldr	r0, [pc, #204]	; (8006238 <adcConvert.constprop.27+0xe8>)
 800616a:	f7fd fa49 	bl	8003600 <chSysHalt>
void adcStartConversionI(ADCDriver *adcp,
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {

  osalDbgCheckClassI();
 800616e:	f7fd fa9f 	bl	80036b0 <chDbgCheckClassI>
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 8006172:	b135      	cbz	r5, 8006182 <adcConvert.constprop.27+0x32>
 8006174:	b12e      	cbz	r6, 8006182 <adcConvert.constprop.27+0x32>
               (depth > 0U) && ((depth == 1U) || ((depth & 1U) == 0U)));
  osalDbgAssert((adcp->state == ADC_READY) ||
 8006176:	7823      	ldrb	r3, [r4, #0]
 8006178:	2b02      	cmp	r3, #2
 800617a:	d005      	beq.n	8006188 <adcConvert.constprop.27+0x38>
 800617c:	3b04      	subs	r3, #4
 800617e:	2b01      	cmp	r3, #1
 8006180:	d902      	bls.n	8006188 <adcConvert.constprop.27+0x38>
                         const ADCConversionGroup *grpp,
                         adcsample_t *samples,
                         size_t depth) {

  osalDbgCheckClassI();
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 8006182:	482e      	ldr	r0, [pc, #184]	; (800623c <adcConvert.constprop.27+0xec>)
 8006184:	f7fd fa3c 	bl	8003600 <chSysHalt>
                "odd number of channels in dual mode");

  /* Calculating control registers values.*/
  dmamode = adcp->dmamode;
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
  if (grpp->circular) {
 8006188:	782a      	ldrb	r2, [r5, #0]
  osalDbgAssert(!STM32_ADC_DUAL_MODE || ((grpp->num_channels & 1) == 0),
                "odd number of channels in dual mode");

  /* Calculating control registers values.*/
  dmamode = adcp->dmamode;
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
 800618a:	68e8      	ldr	r0, [r5, #12]
  osalDbgAssert((adcp->state == ADC_READY) ||
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
 800618c:	60a6      	str	r6, [r4, #8]
  adcp->depth    = depth;
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 800618e:	2303      	movs	r3, #3
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8006190:	2101      	movs	r1, #1
  adcp->grpp     = grpp;
  adcp->state    = ADC_ACTIVE;
 8006192:	7023      	strb	r3, [r4, #0]
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
  adcp->grpp     = grpp;
 8006194:	6125      	str	r5, [r4, #16]
                (adcp->state == ADC_COMPLETE) ||
                (adcp->state == ADC_ERROR),
                "not ready");

  adcp->samples  = samples;
  adcp->depth    = depth;
 8006196:	60e1      	str	r1, [r4, #12]

  osalDbgAssert(!STM32_ADC_DUAL_MODE || ((grpp->num_channels & 1) == 0),
                "odd number of channels in dual mode");

  /* Calculating control registers values.*/
  dmamode = adcp->dmamode;
 8006198:	6b63      	ldr	r3, [r4, #52]	; 0x34
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
  if (grpp->circular) {
 800619a:	2a00      	cmp	r2, #0
 800619c:	d04a      	beq.n	8006234 <adcConvert.constprop.27+0xe4>
    dmamode |= STM32_DMA_CR_CIRC;
 800619e:	f043 0320 	orr.w	r3, r3, #32
#if STM32_ADC_DUAL_MODE
    ccr  |= ADC_CCR_DMACFG_CIRCULAR;
#else
    cfgr |= ADC_CFGR_DMACFG_CIRCULAR;
 80061a2:	f040 0003 	orr.w	r0, r0, #3
      dmamode |= STM32_DMA_CR_HTIE;
    }
  }

  /* DMA setup.*/
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80061a6:	6b22      	ldr	r2, [r4, #48]	; 0x30
#if STM32_ADC_DUAL_MODE
  dmaStreamSetTransactionSize(adcp->dmastp, ((uint32_t)grpp->num_channels/2) *
                                            (uint32_t)adcp->depth);
#else
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80061a8:	8869      	ldrh	r1, [r5, #2]
      dmamode |= STM32_DMA_CR_HTIE;
    }
  }

  /* DMA setup.*/
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80061aa:	6852      	ldr	r2, [r2, #4]
  adcp->adcs->SQR4  = grpp->ssqr[3];

#else /* !STM32_ADC_DUAL_MODE */
  adcp->adcm->SMPR1 = grpp->smpr[0];
  adcp->adcm->SMPR2 = grpp->smpr[1];
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
 80061ac:	69ef      	ldr	r7, [r5, #28]
      dmamode |= STM32_DMA_CR_HTIE;
    }
  }

  /* DMA setup.*/
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 80061ae:	60d6      	str	r6, [r2, #12]
#if STM32_ADC_DUAL_MODE
  dmaStreamSetTransactionSize(adcp->dmastp, ((uint32_t)grpp->num_channels/2) *
                                            (uint32_t)adcp->depth);
#else
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 80061b0:	6051      	str	r1, [r2, #4]
                                            (uint32_t)adcp->depth);
#endif
  dmaStreamSetMode(adcp->dmastp, dmamode);
 80061b2:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(adcp->dmastp);
 80061b4:	f8d2 a000 	ldr.w	sl, [r2]

  /* ADC setup, if it is defined a callback for the analog watch dog then it
     is enabled.*/
  adcp->adcm->ISR   = adcp->adcm->ISR;
 80061b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  adcp->adcs->SQR3  = grpp->ssqr[2];
  adcp->adcs->SQR4  = grpp->ssqr[3];

#else /* !STM32_ADC_DUAL_MODE */
  adcp->adcm->SMPR1 = grpp->smpr[0];
  adcp->adcm->SMPR2 = grpp->smpr[1];
 80061ba:	f8d5 c018 	ldr.w	ip, [r5, #24]
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
  adcp->adcm->SQR2  = grpp->sqr[1];
 80061be:	f8d5 e020 	ldr.w	lr, [r5, #32]

  /* ADC setup, if it is defined a callback for the analog watch dog then it
     is enabled.*/
  adcp->adcm->ISR   = adcp->adcm->ISR;
  adcp->adcm->IER   = ADC_IER_OVR | ADC_IER_AWD1;
  adcp->adcm->TR1   = grpp->tr1;
 80061c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
  adcp->adcs->SQR2  = grpp->ssqr[1];
  adcp->adcs->SQR3  = grpp->ssqr[2];
  adcp->adcs->SQR4  = grpp->ssqr[3];

#else /* !STM32_ADC_DUAL_MODE */
  adcp->adcm->SMPR1 = grpp->smpr[0];
 80061c6:	f8d5 8014 	ldr.w	r8, [r5, #20]
  adcp->adcm->SMPR2 = grpp->smpr[1];
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
  adcp->adcm->SQR2  = grpp->sqr[1];
  adcp->adcm->SQR3  = grpp->sqr[2];
 80061ca:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  adcp->adcm->SQR4  = grpp->sqr[3];
 80061cc:	6aad      	ldr	r5, [r5, #40]	; 0x28
#else
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
                                            (uint32_t)adcp->depth);
#endif
  dmaStreamSetMode(adcp->dmastp, dmamode);
  dmaStreamEnable(adcp->dmastp);
 80061ce:	f04a 0a01 	orr.w	sl, sl, #1
 80061d2:	f8c2 a000 	str.w	sl, [r2]

  /* ADC setup, if it is defined a callback for the analog watch dog then it
     is enabled.*/
  adcp->adcm->ISR   = adcp->adcm->ISR;
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	601a      	str	r2, [r3, #0]
  adcp->adcs->SQR4  = grpp->ssqr[3];

#else /* !STM32_ADC_DUAL_MODE */
  adcp->adcm->SMPR1 = grpp->smpr[0];
  adcp->adcm->SMPR2 = grpp->smpr[1];
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
 80061da:	3901      	subs	r1, #1
 80061dc:	4339      	orrs	r1, r7
  dmaStreamEnable(adcp->dmastp);

  /* ADC setup, if it is defined a callback for the analog watch dog then it
     is enabled.*/
  adcp->adcm->ISR   = adcp->adcm->ISR;
  adcp->adcm->IER   = ADC_IER_OVR | ADC_IER_AWD1;
 80061de:	2290      	movs	r2, #144	; 0x90
 80061e0:	605a      	str	r2, [r3, #4]
  adcp->adcm->TR1   = grpp->tr1;
 80061e2:	f8c3 9020 	str.w	r9, [r3, #32]
  adcp->adcs->SQR2  = grpp->ssqr[1];
  adcp->adcs->SQR3  = grpp->ssqr[2];
  adcp->adcs->SQR4  = grpp->ssqr[3];

#else /* !STM32_ADC_DUAL_MODE */
  adcp->adcm->SMPR1 = grpp->smpr[0];
 80061e6:	f8c3 8014 	str.w	r8, [r3, #20]
  adcp->adcm->SMPR2 = grpp->smpr[1];
 80061ea:	f8c3 c018 	str.w	ip, [r3, #24]
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
 80061ee:	6319      	str	r1, [r3, #48]	; 0x30
  adcp->adcm->SQR2  = grpp->sqr[1];
 80061f0:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
  adcp->adcm->SQR3  = grpp->sqr[2];
 80061f4:	639e      	str	r6, [r3, #56]	; 0x38
  adcp->adcm->SQR4  = grpp->sqr[3];
 80061f6:	63dd      	str	r5, [r3, #60]	; 0x3c
#endif /* !STM32_ADC_DUAL_MODE */

  /* ADC configuration.*/
  adcp->adcm->CFGR  = cfgr;
 80061f8:	60d8      	str	r0, [r3, #12]

  /* Starting conversion.*/
  adcp->adcm->CR   |= ADC_CR_ADSTART;
 80061fa:	689a      	ldr	r2, [r3, #8]
 80061fc:	f042 0204 	orr.w	r2, r2, #4
 8006200:	609a      	str	r2, [r3, #8]
 8006202:	f104 0014 	add.w	r0, r4, #20
 8006206:	f7ff fbfb 	bl	8005a00 <chThdSuspendTimeoutS.constprop.28>
 800620a:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800620c:	f7fd fc80 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006210:	4b0b      	ldr	r3, [pc, #44]	; (8006240 <adcConvert.constprop.27+0xf0>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d004      	beq.n	8006222 <adcConvert.constprop.27+0xd2>
 8006218:	6999      	ldr	r1, [r3, #24]
 800621a:	6893      	ldr	r3, [r2, #8]
 800621c:	688a      	ldr	r2, [r1, #8]
 800621e:	429a      	cmp	r2, r3
 8006220:	d305      	bcc.n	800622e <adcConvert.constprop.27+0xde>
 8006222:	2300      	movs	r3, #0
 8006224:	f383 8811 	msr	BASEPRI, r3
  osalDbgAssert(adcp->thread == NULL, "already waiting");
  adcStartConversionI(adcp, grpp, samples, depth);
  msg = osalThreadSuspendS(&adcp->thread);
  osalSysUnlock();
  return msg;
}
 8006228:	4620      	mov	r0, r4
 800622a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800622e:	4805      	ldr	r0, [pc, #20]	; (8006244 <adcConvert.constprop.27+0xf4>)
 8006230:	f7fd f9e6 	bl	8003600 <chSysHalt>
  osalDbgAssert(!STM32_ADC_DUAL_MODE || ((grpp->num_channels & 1) == 0),
                "odd number of channels in dual mode");

  /* Calculating control registers values.*/
  dmamode = adcp->dmamode;
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
 8006234:	4308      	orrs	r0, r1
 8006236:	e7b6      	b.n	80061a6 <adcConvert.constprop.27+0x56>
 8006238:	08016bcc 	.word	0x08016bcc
 800623c:	08016b80 	.word	0x08016b80
 8006240:	200042b0 	.word	0x200042b0
 8006244:	08019c00 	.word	0x08019c00
	...

08006250 <adcStart.constprop.33>:
 * @param[in] config    pointer to the @p ADCConfig object. Depending on
 *                      the implementation the value can be @p NULL.
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(adcp != NULL);
 8006252:	4604      	mov	r4, r0
 8006254:	b140      	cbz	r0, 8006268 <adcStart.constprop.33+0x18>
 8006256:	2320      	movs	r3, #32
 8006258:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800625c:	f7fd fc80 	bl	8003b60 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 8006260:	7823      	ldrb	r3, [r4, #0]
 8006262:	1e5a      	subs	r2, r3, #1
 8006264:	2a01      	cmp	r2, #1
 8006266:	d902      	bls.n	800626e <adcStart.constprop.33+0x1e>
 *
 * @api
 */
void adcStart(ADCDriver *adcp, const ADCConfig *config) {

  osalDbgCheck(adcp != NULL);
 8006268:	4850      	ldr	r0, [pc, #320]	; (80063ac <adcStart.constprop.33+0x15c>)
 800626a:	f7fd f9c9 	bl	8003600 <chSysHalt>
 */
void adc_lld_start(ADCDriver *adcp) {

  /* Handling the default configuration.*/
  if (adcp->config == NULL) {
    adcp->config = &default_config;
 800626e:	4a50      	ldr	r2, [pc, #320]	; (80063b0 <adcStart.constprop.33+0x160>)
 8006270:	6062      	str	r2, [r4, #4]
  }

  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
 8006272:	2b01      	cmp	r3, #1
 8006274:	d013      	beq.n	800629e <adcStart.constprop.33+0x4e>
  osalSysLock();
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
                "invalid state");
  adcp->config = config;
  adc_lld_start(adcp);
  adcp->state = ADC_READY;
 8006276:	2302      	movs	r3, #2
 8006278:	7023      	strb	r3, [r4, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800627a:	f7fd fc49 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800627e:	4b4d      	ldr	r3, [pc, #308]	; (80063b4 <adcStart.constprop.33+0x164>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	429a      	cmp	r2, r3
 8006284:	d004      	beq.n	8006290 <adcStart.constprop.33+0x40>
 8006286:	6999      	ldr	r1, [r3, #24]
 8006288:	6893      	ldr	r3, [r2, #8]
 800628a:	688a      	ldr	r2, [r1, #8]
 800628c:	429a      	cmp	r2, r3
 800628e:	d303      	bcc.n	8006298 <adcStart.constprop.33+0x48>
 8006290:	2300      	movs	r3, #0
 8006292:	f383 8811 	msr	BASEPRI, r3
 8006296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006298:	4847      	ldr	r0, [pc, #284]	; (80063b8 <adcStart.constprop.33+0x168>)
 800629a:	f7fd f9b1 	bl	8003600 <chSysHalt>
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
 800629e:	4b47      	ldr	r3, [pc, #284]	; (80063bc <adcStart.constprop.33+0x16c>)
 80062a0:	429c      	cmp	r4, r3
 80062a2:	d034      	beq.n	800630e <adcStart.constprop.33+0xbe>
#endif
    }
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
    if (&ADCD2 == adcp) {
 80062a4:	4b46      	ldr	r3, [pc, #280]	; (80063c0 <adcStart.constprop.33+0x170>)
 80062a6:	429c      	cmp	r4, r3
 80062a8:	d046      	beq.n	8006338 <adcStart.constprop.33+0xe8>
#endif
    }
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
    if (&ADCD3 == adcp) {
 80062aa:	4b46      	ldr	r3, [pc, #280]	; (80063c4 <adcStart.constprop.33+0x174>)
 80062ac:	429c      	cmp	r4, r3
 80062ae:	d056      	beq.n	800635e <adcStart.constprop.33+0x10e>
#endif
    }
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
    if (&ADCD4 == adcp) {
 80062b0:	4b45      	ldr	r3, [pc, #276]	; (80063c8 <adcStart.constprop.33+0x178>)
 80062b2:	429c      	cmp	r4, r3
 80062b4:	d066      	beq.n	8006384 <adcStart.constprop.33+0x134>

    /* Setting DMA peripheral-side pointer.*/
#if STM32_ADC_DUAL_MODE
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcc->CDR);
#else
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcm->DR);
 80062b6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    /* Differential channels setting.*/
#if STM32_ADC_DUAL_MODE
    adcp->adcm->DIFSEL = adcp->config->difsel;
    adcp->adcs->DIFSEL = adcp->config->difsel;
#else
    adcp->adcm->DIFSEL = adcp->config->difsel;
 80062b8:	6863      	ldr	r3, [r4, #4]

    /* Setting DMA peripheral-side pointer.*/
#if STM32_ADC_DUAL_MODE
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcc->CDR);
#else
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcm->DR);
 80062ba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80062bc:	684e      	ldr	r6, [r1, #4]
    /* Differential channels setting.*/
#if STM32_ADC_DUAL_MODE
    adcp->adcm->DIFSEL = adcp->config->difsel;
    adcp->adcs->DIFSEL = adcp->config->difsel;
#else
    adcp->adcm->DIFSEL = adcp->config->difsel;
 80062be:	681d      	ldr	r5, [r3, #0]
 80062c0:	4942      	ldr	r1, [pc, #264]	; (80063cc <adcStart.constprop.33+0x17c>)
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_vreg_on(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
 80062c2:	2000      	movs	r0, #0

    /* Setting DMA peripheral-side pointer.*/
#if STM32_ADC_DUAL_MODE
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcc->CDR);
#else
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcm->DR);
 80062c4:	f102 0740 	add.w	r7, r2, #64	; 0x40
 */
static void adc_lld_vreg_on(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
  adcp->adcm->CR = ADC_CR_ADVREGEN_0;
 80062c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000

    /* Setting DMA peripheral-side pointer.*/
#if STM32_ADC_DUAL_MODE
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcc->CDR);
#else
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcm->DR);
 80062cc:	60b7      	str	r7, [r6, #8]
    /* Differential channels setting.*/
#if STM32_ADC_DUAL_MODE
    adcp->adcm->DIFSEL = adcp->config->difsel;
    adcp->adcs->DIFSEL = adcp->config->difsel;
#else
    adcp->adcm->DIFSEL = adcp->config->difsel;
 80062ce:	f8c2 50b0 	str.w	r5, [r2, #176]	; 0xb0
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_vreg_on(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
 80062d2:	6090      	str	r0, [r2, #8]
  adcp->adcm->CR = ADC_CR_ADVREGEN_0;
 80062d4:	6093      	str	r3, [r2, #8]
 80062d6:	6848      	ldr	r0, [r1, #4]
 80062d8:	684b      	ldr	r3, [r1, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 80062da:	1a1b      	subs	r3, r3, r0
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 80062dc:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 80062e0:	d3fa      	bcc.n	80062d8 <adcStart.constprop.33+0x88>
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_calibrate(ADCDriver *adcp) {

#if defined(STM32F3XX)
  osalDbgAssert(adcp->adcm->CR == ADC_CR_ADVREGEN_0, "invalid register state");
 80062e2:	6893      	ldr	r3, [r2, #8]
 80062e4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062e8:	d002      	beq.n	80062f0 <adcStart.constprop.33+0xa0>
 80062ea:	4839      	ldr	r0, [pc, #228]	; (80063d0 <adcStart.constprop.33+0x180>)
 80062ec:	f7fd f988 	bl	8003600 <chSysHalt>
  adcp->adcm->CR |= ADC_CR_ADCAL;
 80062f0:	6893      	ldr	r3, [r2, #8]
 80062f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80062f6:	6093      	str	r3, [r2, #8]
  while ((adcp->adcm->CR & ADC_CR_ADCAL) != 0)
 80062f8:	6893      	ldr	r3, [r2, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dbfc      	blt.n	80062f8 <adcStart.constprop.33+0xa8>
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_analog_on(ADCDriver *adcp) {

#if defined(STM32F3XX)
  adcp->adcm->CR |= ADC_CR_ADEN;
 80062fe:	6893      	ldr	r3, [r2, #8]
 8006300:	f043 0301 	orr.w	r3, r3, #1
 8006304:	6093      	str	r3, [r2, #8]
  while ((adcp->adcm->ISR & ADC_ISR_ADRD) == 0)
 8006306:	6813      	ldr	r3, [r2, #0]
 8006308:	07db      	lsls	r3, r3, #31
 800630a:	d5fc      	bpl.n	8006306 <adcStart.constprop.33+0xb6>
 800630c:	e7b3      	b.n	8006276 <adcStart.constprop.33+0x26>
  /* If in stopped state then enables the ADC and DMA clocks.*/
  if (adcp->state == ADC_STOP) {
#if STM32_ADC_USE_ADC1
    if (&ADCD1 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 800630e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006310:	4a30      	ldr	r2, [pc, #192]	; (80063d4 <adcStart.constprop.33+0x184>)
 8006312:	2105      	movs	r1, #5
 8006314:	4623      	mov	r3, r4
 8006316:	f7fe fa6b 	bl	80047f0 <dmaStreamAllocate>
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 800631a:	b950      	cbnz	r0, 8006332 <adcStart.constprop.33+0xe2>

      clkmask |= (1 << 0);
 800631c:	492e      	ldr	r1, [pc, #184]	; (80063d8 <adcStart.constprop.33+0x188>)
#if defined(STM32F3XX)
      rccEnableADC12(true);
 800631e:	4a2f      	ldr	r2, [pc, #188]	; (80063dc <adcStart.constprop.33+0x18c>)
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");

      clkmask |= (1 << 0);
 8006320:	680b      	ldr	r3, [r1, #0]
 8006322:	f043 0301 	orr.w	r3, r3, #1
 8006326:	600b      	str	r3, [r1, #0]
#if defined(STM32F3XX)
      rccEnableADC12(true);
 8006328:	6953      	ldr	r3, [r2, #20]
 800632a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800632e:	6153      	str	r3, [r2, #20]
 8006330:	e7c1      	b.n	80062b6 <adcStart.constprop.33+0x66>
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
                            STM32_ADC_ADC1_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8006332:	482b      	ldr	r0, [pc, #172]	; (80063e0 <adcStart.constprop.33+0x190>)
 8006334:	f7fd f964 	bl	8003600 <chSysHalt>
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
    if (&ADCD2 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8006338:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800633a:	4a26      	ldr	r2, [pc, #152]	; (80063d4 <adcStart.constprop.33+0x184>)
 800633c:	2105      	movs	r1, #5
 800633e:	4623      	mov	r3, r4
 8006340:	f7fe fa56 	bl	80047f0 <dmaStreamAllocate>
                            STM32_ADC_ADC2_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8006344:	2800      	cmp	r0, #0
 8006346:	d1f4      	bne.n	8006332 <adcStart.constprop.33+0xe2>

      clkmask |= (1 << 1);
 8006348:	4923      	ldr	r1, [pc, #140]	; (80063d8 <adcStart.constprop.33+0x188>)
#if defined(STM32F3XX)
      rccEnableADC12(true);
 800634a:	4a24      	ldr	r2, [pc, #144]	; (80063dc <adcStart.constprop.33+0x18c>)
                            STM32_ADC_ADC2_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");

      clkmask |= (1 << 1);
 800634c:	680b      	ldr	r3, [r1, #0]
 800634e:	f043 0302 	orr.w	r3, r3, #2
 8006352:	600b      	str	r3, [r1, #0]
#if defined(STM32F3XX)
      rccEnableADC12(true);
 8006354:	6953      	ldr	r3, [r2, #20]
 8006356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800635a:	6153      	str	r3, [r2, #20]
 800635c:	e7ab      	b.n	80062b6 <adcStart.constprop.33+0x66>
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
    if (&ADCD3 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 800635e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006360:	4a1c      	ldr	r2, [pc, #112]	; (80063d4 <adcStart.constprop.33+0x184>)
 8006362:	2105      	movs	r1, #5
 8006364:	4623      	mov	r3, r4
 8006366:	f7fe fa43 	bl	80047f0 <dmaStreamAllocate>
                            STM32_ADC_ADC3_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 800636a:	2800      	cmp	r0, #0
 800636c:	d1e1      	bne.n	8006332 <adcStart.constprop.33+0xe2>

      clkmask |= (1 << 2);
 800636e:	491a      	ldr	r1, [pc, #104]	; (80063d8 <adcStart.constprop.33+0x188>)
#if defined(STM32F3XX)
      rccEnableADC34(true);
 8006370:	4a1a      	ldr	r2, [pc, #104]	; (80063dc <adcStart.constprop.33+0x18c>)
                            STM32_ADC_ADC3_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");

      clkmask |= (1 << 2);
 8006372:	680b      	ldr	r3, [r1, #0]
 8006374:	f043 0304 	orr.w	r3, r3, #4
 8006378:	600b      	str	r3, [r1, #0]
#if defined(STM32F3XX)
      rccEnableADC34(true);
 800637a:	6953      	ldr	r3, [r2, #20]
 800637c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006380:	6153      	str	r3, [r2, #20]
 8006382:	e798      	b.n	80062b6 <adcStart.constprop.33+0x66>
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
    if (&ADCD4 == adcp) {
      bool b;
      b = dmaStreamAllocate(adcp->dmastp,
 8006384:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006386:	4a13      	ldr	r2, [pc, #76]	; (80063d4 <adcStart.constprop.33+0x184>)
 8006388:	2105      	movs	r1, #5
 800638a:	4623      	mov	r3, r4
 800638c:	f7fe fa30 	bl	80047f0 <dmaStreamAllocate>
                            STM32_ADC_ADC4_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");
 8006390:	2800      	cmp	r0, #0
 8006392:	d1ce      	bne.n	8006332 <adcStart.constprop.33+0xe2>

      clkmask |= (1 << 3);
 8006394:	4910      	ldr	r1, [pc, #64]	; (80063d8 <adcStart.constprop.33+0x188>)
#if defined(STM32F3XX)
      rccEnableADC34(true);
 8006396:	4a11      	ldr	r2, [pc, #68]	; (80063dc <adcStart.constprop.33+0x18c>)
                            STM32_ADC_ADC4_DMA_IRQ_PRIORITY,
                            (stm32_dmaisr_t)adc_lld_serve_dma_interrupt,
                            (void *)adcp);
      osalDbgAssert(!b, "stream already allocated");

      clkmask |= (1 << 3);
 8006398:	680b      	ldr	r3, [r1, #0]
 800639a:	f043 0308 	orr.w	r3, r3, #8
 800639e:	600b      	str	r3, [r1, #0]
#if defined(STM32F3XX)
      rccEnableADC34(true);
 80063a0:	6953      	ldr	r3, [r2, #20]
 80063a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063a6:	6153      	str	r3, [r2, #20]
 80063a8:	e785      	b.n	80062b6 <adcStart.constprop.33+0x66>
 80063aa:	bf00      	nop
 80063ac:	08016b44 	.word	0x08016b44
 80063b0:	08016bd8 	.word	0x08016bd8
 80063b4:	200042b0 	.word	0x200042b0
 80063b8:	08019c00 	.word	0x08019c00
 80063bc:	20004b38 	.word	0x20004b38
 80063c0:	20004b70 	.word	0x20004b70
 80063c4:	20004ba8 	.word	0x20004ba8
 80063c8:	20004be0 	.word	0x20004be0
 80063cc:	e0001000 	.word	0xe0001000
 80063d0:	08016b94 	.word	0x08016b94
 80063d4:	080028b1 	.word	0x080028b1
 80063d8:	20005c28 	.word	0x20005c28
 80063dc:	40021000 	.word	0x40021000
 80063e0:	08019c18 	.word	0x08019c18
	...

080063f0 <wdgReset.constprop.19>:
 *
 * @param[in] wdgp      pointer to the @p WDGDriver object
 *
 * @api
 */
void wdgReset(WDGDriver *wdgp) {
 80063f0:	b508      	push	{r3, lr}
 80063f2:	2320      	movs	r3, #32
 80063f4:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80063f8:	f7fd fbb2 	bl	8003b60 <_dbg_check_lock>

  osalDbgCheck(wdgp != NULL);

  osalSysLock();
  osalDbgAssert(wdgp->state == WDG_READY, "not ready");
 80063fc:	4b0e      	ldr	r3, [pc, #56]	; (8006438 <wdgReset.constprop.19+0x48>)
 80063fe:	781a      	ldrb	r2, [r3, #0]
 8006400:	2a02      	cmp	r2, #2
 8006402:	d002      	beq.n	800640a <wdgReset.constprop.19+0x1a>
 8006404:	480d      	ldr	r0, [pc, #52]	; (800643c <wdgReset.constprop.19+0x4c>)
 8006406:	f7fd f8fb 	bl	8003600 <chSysHalt>
 *
 * @notapi
 */
void wdg_lld_reset(WDGDriver * wdgp) {

  wdgp->wdg->KR = KR_KEY_RELOAD;
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006410:	601a      	str	r2, [r3, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8006412:	f7fd fb7d 	bl	8003b10 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8006416:	4b0a      	ldr	r3, [pc, #40]	; (8006440 <wdgReset.constprop.19+0x50>)
 8006418:	681a      	ldr	r2, [r3, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d004      	beq.n	8006428 <wdgReset.constprop.19+0x38>
 800641e:	6999      	ldr	r1, [r3, #24]
 8006420:	6893      	ldr	r3, [r2, #8]
 8006422:	688a      	ldr	r2, [r1, #8]
 8006424:	429a      	cmp	r2, r3
 8006426:	d303      	bcc.n	8006430 <wdgReset.constprop.19+0x40>
 8006428:	2300      	movs	r3, #0
 800642a:	f383 8811 	msr	BASEPRI, r3
 800642e:	bd08      	pop	{r3, pc}
 8006430:	4804      	ldr	r0, [pc, #16]	; (8006444 <wdgReset.constprop.19+0x54>)
 8006432:	f7fd f8e5 	bl	8003600 <chSysHalt>
 8006436:	bf00      	nop
 8006438:	20005c1c 	.word	0x20005c1c
 800643c:	08016b50 	.word	0x08016b50
 8006440:	200042b0 	.word	0x200042b0
 8006444:	08019c0c 	.word	0x08019c0c

08006448 <sqrt>:
 8006448:	b5d0      	push	{r4, r6, r7, lr}
 800644a:	ed2d 8b04 	vpush	{d8-d9}
 800644e:	eeb0 9a40 	vmov.f32	s18, s0
 8006452:	eef0 9a60 	vmov.f32	s19, s1
 8006456:	4c29      	ldr	r4, [pc, #164]	; (80064fc <sqrt+0xb4>)
 8006458:	b08a      	sub	sp, #40	; 0x28
 800645a:	f000 f853 	bl	8006504 <__ieee754_sqrt>
 800645e:	f994 3000 	ldrsb.w	r3, [r4]
 8006462:	eeb0 8a40 	vmov.f32	s16, s0
 8006466:	eef0 8a60 	vmov.f32	s17, s1
 800646a:	3301      	adds	r3, #1
 800646c:	d00f      	beq.n	800648e <sqrt+0x46>
 800646e:	eeb0 0a49 	vmov.f32	s0, s18
 8006472:	eef0 0a69 	vmov.f32	s1, s19
 8006476:	f000 f919 	bl	80066ac <__fpclassifyd>
 800647a:	b140      	cbz	r0, 800648e <sqrt+0x46>
 800647c:	2600      	movs	r6, #0
 800647e:	2700      	movs	r7, #0
 8006480:	ec51 0b19 	vmov	r0, r1, d9
 8006484:	4632      	mov	r2, r6
 8006486:	463b      	mov	r3, r7
 8006488:	f7fa fb66 	bl	8000b58 <__aeabi_dcmplt>
 800648c:	b938      	cbnz	r0, 800649e <sqrt+0x56>
 800648e:	eeb0 0a48 	vmov.f32	s0, s16
 8006492:	eef0 0a68 	vmov.f32	s1, s17
 8006496:	b00a      	add	sp, #40	; 0x28
 8006498:	ecbd 8b04 	vpop	{d8-d9}
 800649c:	bdd0      	pop	{r4, r6, r7, pc}
 800649e:	4b18      	ldr	r3, [pc, #96]	; (8006500 <sqrt+0xb8>)
 80064a0:	7824      	ldrb	r4, [r4, #0]
 80064a2:	9301      	str	r3, [sp, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	2300      	movs	r3, #0
 80064a8:	ed8d 9b04 	vstr	d9, [sp, #16]
 80064ac:	ed8d 9b02 	vstr	d9, [sp, #8]
 80064b0:	9200      	str	r2, [sp, #0]
 80064b2:	9308      	str	r3, [sp, #32]
 80064b4:	b96c      	cbnz	r4, 80064d2 <sqrt+0x8a>
 80064b6:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80064ba:	4668      	mov	r0, sp
 80064bc:	f000 f924 	bl	8006708 <matherr>
 80064c0:	b188      	cbz	r0, 80064e6 <sqrt+0x9e>
 80064c2:	9b08      	ldr	r3, [sp, #32]
 80064c4:	b9a3      	cbnz	r3, 80064f0 <sqrt+0xa8>
 80064c6:	ed9d 0b06 	vldr	d0, [sp, #24]
 80064ca:	b00a      	add	sp, #40	; 0x28
 80064cc:	ecbd 8b04 	vpop	{d8-d9}
 80064d0:	bdd0      	pop	{r4, r6, r7, pc}
 80064d2:	4630      	mov	r0, r6
 80064d4:	4639      	mov	r1, r7
 80064d6:	4632      	mov	r2, r6
 80064d8:	463b      	mov	r3, r7
 80064da:	f7fa f9f5 	bl	80008c8 <__aeabi_ddiv>
 80064de:	2c02      	cmp	r4, #2
 80064e0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80064e4:	d1e9      	bne.n	80064ba <sqrt+0x72>
 80064e6:	f000 f911 	bl	800670c <__errno>
 80064ea:	2321      	movs	r3, #33	; 0x21
 80064ec:	6003      	str	r3, [r0, #0]
 80064ee:	e7e8      	b.n	80064c2 <sqrt+0x7a>
 80064f0:	f000 f90c 	bl	800670c <__errno>
 80064f4:	9b08      	ldr	r3, [sp, #32]
 80064f6:	6003      	str	r3, [r0, #0]
 80064f8:	e7e5      	b.n	80064c6 <sqrt+0x7e>
 80064fa:	bf00      	nop
 80064fc:	20000830 	.word	0x20000830
 8006500:	08019c68 	.word	0x08019c68

08006504 <__ieee754_sqrt>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	4967      	ldr	r1, [pc, #412]	; (80066a8 <__ieee754_sqrt+0x1a4>)
 800650a:	ec55 4b10 	vmov	r4, r5, d0
 800650e:	460e      	mov	r6, r1
 8006510:	4029      	ands	r1, r5
 8006512:	42b1      	cmp	r1, r6
 8006514:	462b      	mov	r3, r5
 8006516:	ee10 0a10 	vmov	r0, s0
 800651a:	f000 8098 	beq.w	800664e <__ieee754_sqrt+0x14a>
 800651e:	2d00      	cmp	r5, #0
 8006520:	4622      	mov	r2, r4
 8006522:	dd77      	ble.n	8006614 <__ieee754_sqrt+0x110>
 8006524:	152f      	asrs	r7, r5, #20
 8006526:	f000 8082 	beq.w	800662e <__ieee754_sqrt+0x12a>
 800652a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 800652e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006532:	07f9      	lsls	r1, r7, #31
 8006534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006538:	d467      	bmi.n	800660a <__ieee754_sqrt+0x106>
 800653a:	0fd1      	lsrs	r1, r2, #31
 800653c:	2600      	movs	r6, #0
 800653e:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006542:	107f      	asrs	r7, r7, #1
 8006544:	0052      	lsls	r2, r2, #1
 8006546:	46b6      	mov	lr, r6
 8006548:	2016      	movs	r0, #22
 800654a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800654e:	eb0e 0401 	add.w	r4, lr, r1
 8006552:	429c      	cmp	r4, r3
 8006554:	ea4f 75d2 	mov.w	r5, r2, lsr #31
 8006558:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800655c:	dc03      	bgt.n	8006566 <__ieee754_sqrt+0x62>
 800655e:	1b1b      	subs	r3, r3, r4
 8006560:	eb04 0e01 	add.w	lr, r4, r1
 8006564:	440e      	add	r6, r1
 8006566:	3801      	subs	r0, #1
 8006568:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800656c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006570:	d1ed      	bne.n	800654e <__ieee754_sqrt+0x4a>
 8006572:	4684      	mov	ip, r0
 8006574:	2520      	movs	r5, #32
 8006576:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800657a:	e00a      	b.n	8006592 <__ieee754_sqrt+0x8e>
 800657c:	4573      	cmp	r3, lr
 800657e:	d021      	beq.n	80065c4 <__ieee754_sqrt+0xc0>
 8006580:	0fd4      	lsrs	r4, r2, #31
 8006582:	3d01      	subs	r5, #1
 8006584:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8006588:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800658c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006590:	d021      	beq.n	80065d6 <__ieee754_sqrt+0xd2>
 8006592:	459e      	cmp	lr, r3
 8006594:	eb0c 0401 	add.w	r4, ip, r1
 8006598:	daf0      	bge.n	800657c <__ieee754_sqrt+0x78>
 800659a:	2c00      	cmp	r4, #0
 800659c:	eb04 0c01 	add.w	ip, r4, r1
 80065a0:	db0a      	blt.n	80065b8 <__ieee754_sqrt+0xb4>
 80065a2:	46f0      	mov	r8, lr
 80065a4:	ebce 0303 	rsb	r3, lr, r3
 80065a8:	4294      	cmp	r4, r2
 80065aa:	bf88      	it	hi
 80065ac:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80065b0:	1b12      	subs	r2, r2, r4
 80065b2:	4408      	add	r0, r1
 80065b4:	46c6      	mov	lr, r8
 80065b6:	e7e3      	b.n	8006580 <__ieee754_sqrt+0x7c>
 80065b8:	f1bc 0f00 	cmp.w	ip, #0
 80065bc:	dbf1      	blt.n	80065a2 <__ieee754_sqrt+0x9e>
 80065be:	f10e 0801 	add.w	r8, lr, #1
 80065c2:	e7ef      	b.n	80065a4 <__ieee754_sqrt+0xa0>
 80065c4:	4294      	cmp	r4, r2
 80065c6:	d81e      	bhi.n	8006606 <__ieee754_sqrt+0x102>
 80065c8:	2c00      	cmp	r4, #0
 80065ca:	eb04 0c01 	add.w	ip, r4, r1
 80065ce:	db4e      	blt.n	800666e <__ieee754_sqrt+0x16a>
 80065d0:	4698      	mov	r8, r3
 80065d2:	2300      	movs	r3, #0
 80065d4:	e7ec      	b.n	80065b0 <__ieee754_sqrt+0xac>
 80065d6:	4313      	orrs	r3, r2
 80065d8:	d004      	beq.n	80065e4 <__ieee754_sqrt+0xe0>
 80065da:	1c42      	adds	r2, r0, #1
 80065dc:	d04d      	beq.n	800667a <__ieee754_sqrt+0x176>
 80065de:	f000 0301 	and.w	r3, r0, #1
 80065e2:	4418      	add	r0, r3
 80065e4:	0840      	lsrs	r0, r0, #1
 80065e6:	1071      	asrs	r1, r6, #1
 80065e8:	07f3      	lsls	r3, r6, #31
 80065ea:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80065ee:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80065f2:	bf48      	it	mi
 80065f4:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 80065f8:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 80065fc:	4602      	mov	r2, r0
 80065fe:	ec43 2b10 	vmov	d0, r2, r3
 8006602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006606:	469e      	mov	lr, r3
 8006608:	e7ba      	b.n	8006580 <__ieee754_sqrt+0x7c>
 800660a:	0fd1      	lsrs	r1, r2, #31
 800660c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006610:	0052      	lsls	r2, r2, #1
 8006612:	e792      	b.n	800653a <__ieee754_sqrt+0x36>
 8006614:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8006618:	4321      	orrs	r1, r4
 800661a:	d026      	beq.n	800666a <__ieee754_sqrt+0x166>
 800661c:	bba5      	cbnz	r5, 8006688 <__ieee754_sqrt+0x184>
 800661e:	462f      	mov	r7, r5
 8006620:	0ad3      	lsrs	r3, r2, #11
 8006622:	3f15      	subs	r7, #21
 8006624:	0552      	lsls	r2, r2, #21
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0fa      	beq.n	8006620 <__ieee754_sqrt+0x11c>
 800662a:	02dc      	lsls	r4, r3, #11
 800662c:	d428      	bmi.n	8006680 <__ieee754_sqrt+0x17c>
 800662e:	2100      	movs	r1, #0
 8006630:	005b      	lsls	r3, r3, #1
 8006632:	02d8      	lsls	r0, r3, #11
 8006634:	f101 0101 	add.w	r1, r1, #1
 8006638:	d5fa      	bpl.n	8006630 <__ieee754_sqrt+0x12c>
 800663a:	f1c1 0001 	rsb	r0, r1, #1
 800663e:	f1c1 0420 	rsb	r4, r1, #32
 8006642:	fa22 f404 	lsr.w	r4, r2, r4
 8006646:	4323      	orrs	r3, r4
 8006648:	4407      	add	r7, r0
 800664a:	408a      	lsls	r2, r1
 800664c:	e76d      	b.n	800652a <__ieee754_sqrt+0x26>
 800664e:	ee10 2a10 	vmov	r2, s0
 8006652:	462b      	mov	r3, r5
 8006654:	4629      	mov	r1, r5
 8006656:	f7fa f80d 	bl	8000674 <__aeabi_dmul>
 800665a:	4622      	mov	r2, r4
 800665c:	462b      	mov	r3, r5
 800665e:	f7f9 fe57 	bl	8000310 <__adddf3>
 8006662:	ec41 0b10 	vmov	d0, r0, r1
 8006666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800666e:	f1bc 0f00 	cmp.w	ip, #0
 8006672:	daa4      	bge.n	80065be <__ieee754_sqrt+0xba>
 8006674:	46f0      	mov	r8, lr
 8006676:	2300      	movs	r3, #0
 8006678:	e79a      	b.n	80065b0 <__ieee754_sqrt+0xac>
 800667a:	3601      	adds	r6, #1
 800667c:	4628      	mov	r0, r5
 800667e:	e7b2      	b.n	80065e6 <__ieee754_sqrt+0xe2>
 8006680:	2420      	movs	r4, #32
 8006682:	2001      	movs	r0, #1
 8006684:	2100      	movs	r1, #0
 8006686:	e7dc      	b.n	8006642 <__ieee754_sqrt+0x13e>
 8006688:	ee10 0a10 	vmov	r0, s0
 800668c:	4622      	mov	r2, r4
 800668e:	462b      	mov	r3, r5
 8006690:	4629      	mov	r1, r5
 8006692:	f7f9 fe3b 	bl	800030c <__aeabi_dsub>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	f7fa f915 	bl	80008c8 <__aeabi_ddiv>
 800669e:	ec41 0b10 	vmov	d0, r0, r1
 80066a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066a6:	bf00      	nop
 80066a8:	7ff00000 	.word	0x7ff00000

080066ac <__fpclassifyd>:
 80066ac:	ec53 2b10 	vmov	r2, r3, d0
 80066b0:	b410      	push	{r4}
 80066b2:	f033 4400 	bics.w	r4, r3, #2147483648	; 0x80000000
 80066b6:	d008      	beq.n	80066ca <__fpclassifyd+0x1e>
 80066b8:	4911      	ldr	r1, [pc, #68]	; (8006700 <__fpclassifyd+0x54>)
 80066ba:	f5a3 1080 	sub.w	r0, r3, #1048576	; 0x100000
 80066be:	4288      	cmp	r0, r1
 80066c0:	d808      	bhi.n	80066d4 <__fpclassifyd+0x28>
 80066c2:	2004      	movs	r0, #4
 80066c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	b91a      	cbnz	r2, 80066d4 <__fpclassifyd+0x28>
 80066cc:	2002      	movs	r0, #2
 80066ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80066d8:	4909      	ldr	r1, [pc, #36]	; (8006700 <__fpclassifyd+0x54>)
 80066da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80066de:	428b      	cmp	r3, r1
 80066e0:	d9ef      	bls.n	80066c2 <__fpclassifyd+0x16>
 80066e2:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80066e6:	d201      	bcs.n	80066ec <__fpclassifyd+0x40>
 80066e8:	2003      	movs	r0, #3
 80066ea:	e7eb      	b.n	80066c4 <__fpclassifyd+0x18>
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <__fpclassifyd+0x58>)
 80066ee:	429c      	cmp	r4, r3
 80066f0:	d001      	beq.n	80066f6 <__fpclassifyd+0x4a>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e7e6      	b.n	80066c4 <__fpclassifyd+0x18>
 80066f6:	fab2 f082 	clz	r0, r2
 80066fa:	0940      	lsrs	r0, r0, #5
 80066fc:	e7e2      	b.n	80066c4 <__fpclassifyd+0x18>
 80066fe:	bf00      	nop
 8006700:	7fdfffff 	.word	0x7fdfffff
 8006704:	7ff00000 	.word	0x7ff00000

08006708 <matherr>:
 8006708:	2000      	movs	r0, #0
 800670a:	4770      	bx	lr

0800670c <__errno>:
 800670c:	4b01      	ldr	r3, [pc, #4]	; (8006714 <__errno+0x8>)
 800670e:	6818      	ldr	r0, [r3, #0]
 8006710:	4770      	bx	lr
 8006712:	bf00      	nop
 8006714:	20000c60 	.word	0x20000c60

08006718 <memset>:
 8006718:	b470      	push	{r4, r5, r6}
 800671a:	0784      	lsls	r4, r0, #30
 800671c:	d046      	beq.n	80067ac <memset+0x94>
 800671e:	1e54      	subs	r4, r2, #1
 8006720:	2a00      	cmp	r2, #0
 8006722:	d041      	beq.n	80067a8 <memset+0x90>
 8006724:	b2cd      	uxtb	r5, r1
 8006726:	4603      	mov	r3, r0
 8006728:	e002      	b.n	8006730 <memset+0x18>
 800672a:	1e62      	subs	r2, r4, #1
 800672c:	b3e4      	cbz	r4, 80067a8 <memset+0x90>
 800672e:	4614      	mov	r4, r2
 8006730:	f803 5b01 	strb.w	r5, [r3], #1
 8006734:	079a      	lsls	r2, r3, #30
 8006736:	d1f8      	bne.n	800672a <memset+0x12>
 8006738:	2c03      	cmp	r4, #3
 800673a:	d92e      	bls.n	800679a <memset+0x82>
 800673c:	b2cd      	uxtb	r5, r1
 800673e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8006742:	2c0f      	cmp	r4, #15
 8006744:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006748:	d919      	bls.n	800677e <memset+0x66>
 800674a:	f103 0210 	add.w	r2, r3, #16
 800674e:	4626      	mov	r6, r4
 8006750:	3e10      	subs	r6, #16
 8006752:	2e0f      	cmp	r6, #15
 8006754:	f842 5c10 	str.w	r5, [r2, #-16]
 8006758:	f842 5c0c 	str.w	r5, [r2, #-12]
 800675c:	f842 5c08 	str.w	r5, [r2, #-8]
 8006760:	f842 5c04 	str.w	r5, [r2, #-4]
 8006764:	f102 0210 	add.w	r2, r2, #16
 8006768:	d8f2      	bhi.n	8006750 <memset+0x38>
 800676a:	f1a4 0210 	sub.w	r2, r4, #16
 800676e:	f022 020f 	bic.w	r2, r2, #15
 8006772:	f004 040f 	and.w	r4, r4, #15
 8006776:	3210      	adds	r2, #16
 8006778:	2c03      	cmp	r4, #3
 800677a:	4413      	add	r3, r2
 800677c:	d90d      	bls.n	800679a <memset+0x82>
 800677e:	461e      	mov	r6, r3
 8006780:	4622      	mov	r2, r4
 8006782:	3a04      	subs	r2, #4
 8006784:	2a03      	cmp	r2, #3
 8006786:	f846 5b04 	str.w	r5, [r6], #4
 800678a:	d8fa      	bhi.n	8006782 <memset+0x6a>
 800678c:	1f22      	subs	r2, r4, #4
 800678e:	f022 0203 	bic.w	r2, r2, #3
 8006792:	3204      	adds	r2, #4
 8006794:	4413      	add	r3, r2
 8006796:	f004 0403 	and.w	r4, r4, #3
 800679a:	b12c      	cbz	r4, 80067a8 <memset+0x90>
 800679c:	b2c9      	uxtb	r1, r1
 800679e:	441c      	add	r4, r3
 80067a0:	f803 1b01 	strb.w	r1, [r3], #1
 80067a4:	42a3      	cmp	r3, r4
 80067a6:	d1fb      	bne.n	80067a0 <memset+0x88>
 80067a8:	bc70      	pop	{r4, r5, r6}
 80067aa:	4770      	bx	lr
 80067ac:	4614      	mov	r4, r2
 80067ae:	4603      	mov	r3, r0
 80067b0:	e7c2      	b.n	8006738 <memset+0x20>
 80067b2:	bf00      	nop

080067b4 <sprintf>:
 80067b4:	b40e      	push	{r1, r2, r3}
 80067b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067b8:	b09c      	sub	sp, #112	; 0x70
 80067ba:	ab21      	add	r3, sp, #132	; 0x84
 80067bc:	490f      	ldr	r1, [pc, #60]	; (80067fc <sprintf+0x48>)
 80067be:	f853 2b04 	ldr.w	r2, [r3], #4
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	4605      	mov	r5, r0
 80067c6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 80067ca:	6808      	ldr	r0, [r1, #0]
 80067cc:	9502      	str	r5, [sp, #8]
 80067ce:	f44f 7702 	mov.w	r7, #520	; 0x208
 80067d2:	f64f 76ff 	movw	r6, #65535	; 0xffff
 80067d6:	a902      	add	r1, sp, #8
 80067d8:	9506      	str	r5, [sp, #24]
 80067da:	f8ad 7014 	strh.w	r7, [sp, #20]
 80067de:	9404      	str	r4, [sp, #16]
 80067e0:	9407      	str	r4, [sp, #28]
 80067e2:	f8ad 6016 	strh.w	r6, [sp, #22]
 80067e6:	f000 f83b 	bl	8006860 <_svfprintf_r>
 80067ea:	9b02      	ldr	r3, [sp, #8]
 80067ec:	2200      	movs	r2, #0
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	b01c      	add	sp, #112	; 0x70
 80067f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80067f6:	b003      	add	sp, #12
 80067f8:	4770      	bx	lr
 80067fa:	bf00      	nop
 80067fc:	20000c60 	.word	0x20000c60

08006800 <strlen>:
 8006800:	f020 0103 	bic.w	r1, r0, #3
 8006804:	f010 0003 	ands.w	r0, r0, #3
 8006808:	f1c0 0000 	rsb	r0, r0, #0
 800680c:	f851 3b04 	ldr.w	r3, [r1], #4
 8006810:	f100 0c04 	add.w	ip, r0, #4
 8006814:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8006818:	f06f 0200 	mvn.w	r2, #0
 800681c:	bf1c      	itt	ne
 800681e:	fa22 f20c 	lsrne.w	r2, r2, ip
 8006822:	4313      	orrne	r3, r2
 8006824:	f04f 0c01 	mov.w	ip, #1
 8006828:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
 800682c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
 8006830:	eba3 020c 	sub.w	r2, r3, ip
 8006834:	ea22 0203 	bic.w	r2, r2, r3
 8006838:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
 800683c:	bf04      	itt	eq
 800683e:	f851 3b04 	ldreq.w	r3, [r1], #4
 8006842:	3004      	addeq	r0, #4
 8006844:	d0f4      	beq.n	8006830 <strlen+0x30>
 8006846:	f1c2 0100 	rsb	r1, r2, #0
 800684a:	ea02 0201 	and.w	r2, r2, r1
 800684e:	fab2 f282 	clz	r2, r2
 8006852:	f1c2 021f 	rsb	r2, r2, #31
 8006856:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800685a:	4770      	bx	lr
 800685c:	0000      	movs	r0, r0
	...

08006860 <_svfprintf_r>:
 8006860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006864:	b0bf      	sub	sp, #252	; 0xfc
 8006866:	4689      	mov	r9, r1
 8006868:	9206      	str	r2, [sp, #24]
 800686a:	930a      	str	r3, [sp, #40]	; 0x28
 800686c:	9004      	str	r0, [sp, #16]
 800686e:	f002 fa4b 	bl	8008d08 <_localeconv_r>
 8006872:	6803      	ldr	r3, [r0, #0]
 8006874:	9313      	str	r3, [sp, #76]	; 0x4c
 8006876:	4618      	mov	r0, r3
 8006878:	f7ff ffc2 	bl	8006800 <strlen>
 800687c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006880:	9014      	str	r0, [sp, #80]	; 0x50
 8006882:	061a      	lsls	r2, r3, #24
 8006884:	d504      	bpl.n	8006890 <_svfprintf_r+0x30>
 8006886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	f001 80a1 	beq.w	80079d2 <_svfprintf_r+0x1172>
 8006890:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8006af8 <_svfprintf_r+0x298>
 8006894:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8006898:	2300      	movs	r3, #0
 800689a:	af2e      	add	r7, sp, #184	; 0xb8
 800689c:	930f      	str	r3, [sp, #60]	; 0x3c
 800689e:	9323      	str	r3, [sp, #140]	; 0x8c
 80068a0:	9322      	str	r3, [sp, #136]	; 0x88
 80068a2:	9312      	str	r3, [sp, #72]	; 0x48
 80068a4:	9315      	str	r3, [sp, #84]	; 0x54
 80068a6:	9307      	str	r3, [sp, #28]
 80068a8:	9721      	str	r7, [sp, #132]	; 0x84
 80068aa:	463c      	mov	r4, r7
 80068ac:	464e      	mov	r6, r9
 80068ae:	9d06      	ldr	r5, [sp, #24]
 80068b0:	782b      	ldrb	r3, [r5, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80a9 	beq.w	8006a0a <_svfprintf_r+0x1aa>
 80068b8:	2b25      	cmp	r3, #37	; 0x25
 80068ba:	d102      	bne.n	80068c2 <_svfprintf_r+0x62>
 80068bc:	e0a5      	b.n	8006a0a <_svfprintf_r+0x1aa>
 80068be:	2b25      	cmp	r3, #37	; 0x25
 80068c0:	d003      	beq.n	80068ca <_svfprintf_r+0x6a>
 80068c2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1f9      	bne.n	80068be <_svfprintf_r+0x5e>
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	1aeb      	subs	r3, r5, r3
 80068ce:	b173      	cbz	r3, 80068ee <_svfprintf_r+0x8e>
 80068d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80068d2:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80068d4:	9806      	ldr	r0, [sp, #24]
 80068d6:	6020      	str	r0, [r4, #0]
 80068d8:	3201      	adds	r2, #1
 80068da:	4419      	add	r1, r3
 80068dc:	2a07      	cmp	r2, #7
 80068de:	6063      	str	r3, [r4, #4]
 80068e0:	9123      	str	r1, [sp, #140]	; 0x8c
 80068e2:	9222      	str	r2, [sp, #136]	; 0x88
 80068e4:	dc72      	bgt.n	80069cc <_svfprintf_r+0x16c>
 80068e6:	3408      	adds	r4, #8
 80068e8:	9a07      	ldr	r2, [sp, #28]
 80068ea:	441a      	add	r2, r3
 80068ec:	9207      	str	r2, [sp, #28]
 80068ee:	782b      	ldrb	r3, [r5, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 87cb 	beq.w	800788c <_svfprintf_r+0x102c>
 80068f6:	2300      	movs	r3, #0
 80068f8:	1c69      	adds	r1, r5, #1
 80068fa:	786d      	ldrb	r5, [r5, #1]
 80068fc:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006900:	461a      	mov	r2, r3
 8006902:	9308      	str	r3, [sp, #32]
 8006904:	9303      	str	r3, [sp, #12]
 8006906:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800690a:	1c4b      	adds	r3, r1, #1
 800690c:	f1a5 0120 	sub.w	r1, r5, #32
 8006910:	2958      	cmp	r1, #88	; 0x58
 8006912:	f200 83e4 	bhi.w	80070de <_svfprintf_r+0x87e>
 8006916:	e8df f011 	tbh	[pc, r1, lsl #1]
 800691a:	0277      	.short	0x0277
 800691c:	03e203e2 	.word	0x03e203e2
 8006920:	03e2037b 	.word	0x03e2037b
 8006924:	03e203e2 	.word	0x03e203e2
 8006928:	03e203e2 	.word	0x03e203e2
 800692c:	02f703e2 	.word	0x02f703e2
 8006930:	03e20214 	.word	0x03e20214
 8006934:	021801fb 	.word	0x021801fb
 8006938:	038203e2 	.word	0x038203e2
 800693c:	02c102c1 	.word	0x02c102c1
 8006940:	02c102c1 	.word	0x02c102c1
 8006944:	02c102c1 	.word	0x02c102c1
 8006948:	02c102c1 	.word	0x02c102c1
 800694c:	03e202c1 	.word	0x03e202c1
 8006950:	03e203e2 	.word	0x03e203e2
 8006954:	03e203e2 	.word	0x03e203e2
 8006958:	03e203e2 	.word	0x03e203e2
 800695c:	03e203e2 	.word	0x03e203e2
 8006960:	02d003e2 	.word	0x02d003e2
 8006964:	03e20391 	.word	0x03e20391
 8006968:	03e20391 	.word	0x03e20391
 800696c:	03e203e2 	.word	0x03e203e2
 8006970:	037403e2 	.word	0x037403e2
 8006974:	03e203e2 	.word	0x03e203e2
 8006978:	03e2030c 	.word	0x03e2030c
 800697c:	03e203e2 	.word	0x03e203e2
 8006980:	03e203e2 	.word	0x03e203e2
 8006984:	03e2032a 	.word	0x03e2032a
 8006988:	034403e2 	.word	0x034403e2
 800698c:	03e203e2 	.word	0x03e203e2
 8006990:	03e203e2 	.word	0x03e203e2
 8006994:	03e203e2 	.word	0x03e203e2
 8006998:	03e203e2 	.word	0x03e203e2
 800699c:	03e203e2 	.word	0x03e203e2
 80069a0:	0233035f 	.word	0x0233035f
 80069a4:	03910391 	.word	0x03910391
 80069a8:	03050391 	.word	0x03050391
 80069ac:	03e20233 	.word	0x03e20233
 80069b0:	02ed03e2 	.word	0x02ed03e2
 80069b4:	028503e2 	.word	0x028503e2
 80069b8:	03cb0202 	.word	0x03cb0202
 80069bc:	03e2027e 	.word	0x03e2027e
 80069c0:	03e20299 	.word	0x03e20299
 80069c4:	03e2007a 	.word	0x03e2007a
 80069c8:	025103e2 	.word	0x025103e2
 80069cc:	9804      	ldr	r0, [sp, #16]
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	4631      	mov	r1, r6
 80069d2:	aa21      	add	r2, sp, #132	; 0x84
 80069d4:	f002 ff72 	bl	80098bc <__ssprint_r>
 80069d8:	b950      	cbnz	r0, 80069f0 <_svfprintf_r+0x190>
 80069da:	463c      	mov	r4, r7
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	e783      	b.n	80068e8 <_svfprintf_r+0x88>
 80069e0:	9804      	ldr	r0, [sp, #16]
 80069e2:	4631      	mov	r1, r6
 80069e4:	aa21      	add	r2, sp, #132	; 0x84
 80069e6:	f002 ff69 	bl	80098bc <__ssprint_r>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	f000 818c 	beq.w	8006d08 <_svfprintf_r+0x4a8>
 80069f0:	46b1      	mov	r9, r6
 80069f2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069f6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80069fa:	9b07      	ldr	r3, [sp, #28]
 80069fc:	bf18      	it	ne
 80069fe:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8006a02:	4618      	mov	r0, r3
 8006a04:	b03f      	add	sp, #252	; 0xfc
 8006a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a0a:	9d06      	ldr	r5, [sp, #24]
 8006a0c:	e76f      	b.n	80068ee <_svfprintf_r+0x8e>
 8006a0e:	9306      	str	r3, [sp, #24]
 8006a10:	9b03      	ldr	r3, [sp, #12]
 8006a12:	0698      	lsls	r0, r3, #26
 8006a14:	f140 82b4 	bpl.w	8006f80 <_svfprintf_r+0x720>
 8006a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1a:	f103 0907 	add.w	r9, r3, #7
 8006a1e:	f029 0307 	bic.w	r3, r9, #7
 8006a22:	f103 0208 	add.w	r2, r3, #8
 8006a26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a2a:	920a      	str	r2, [sp, #40]	; 0x28
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	f04f 0c00 	mov.w	ip, #0
 8006a32:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8006a36:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006a3a:	f1ba 0f00 	cmp.w	sl, #0
 8006a3e:	db03      	blt.n	8006a48 <_svfprintf_r+0x1e8>
 8006a40:	9a03      	ldr	r2, [sp, #12]
 8006a42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a46:	9203      	str	r2, [sp, #12]
 8006a48:	ea58 0209 	orrs.w	r2, r8, r9
 8006a4c:	f040 8357 	bne.w	80070fe <_svfprintf_r+0x89e>
 8006a50:	f1ba 0f00 	cmp.w	sl, #0
 8006a54:	f000 845c 	beq.w	8007310 <_svfprintf_r+0xab0>
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	f000 835a 	beq.w	8007112 <_svfprintf_r+0x8b2>
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	f000 849a 	beq.w	8007398 <_svfprintf_r+0xb38>
 8006a64:	4639      	mov	r1, r7
 8006a66:	ea4f 02d8 	mov.w	r2, r8, lsr #3
 8006a6a:	ea42 7249 	orr.w	r2, r2, r9, lsl #29
 8006a6e:	ea4f 00d9 	mov.w	r0, r9, lsr #3
 8006a72:	f008 0307 	and.w	r3, r8, #7
 8006a76:	4681      	mov	r9, r0
 8006a78:	4690      	mov	r8, r2
 8006a7a:	3330      	adds	r3, #48	; 0x30
 8006a7c:	ea58 0209 	orrs.w	r2, r8, r9
 8006a80:	f801 3d01 	strb.w	r3, [r1, #-1]!
 8006a84:	d1ef      	bne.n	8006a66 <_svfprintf_r+0x206>
 8006a86:	9a03      	ldr	r2, [sp, #12]
 8006a88:	910c      	str	r1, [sp, #48]	; 0x30
 8006a8a:	07d2      	lsls	r2, r2, #31
 8006a8c:	f100 856e 	bmi.w	800756c <_svfprintf_r+0xd0c>
 8006a90:	1a7b      	subs	r3, r7, r1
 8006a92:	9309      	str	r3, [sp, #36]	; 0x24
 8006a94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a96:	4592      	cmp	sl, r2
 8006a98:	4653      	mov	r3, sl
 8006a9a:	bfb8      	it	lt
 8006a9c:	4613      	movlt	r3, r2
 8006a9e:	9305      	str	r3, [sp, #20]
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	930e      	str	r3, [sp, #56]	; 0x38
 8006aa4:	f1bc 0f00 	cmp.w	ip, #0
 8006aa8:	d002      	beq.n	8006ab0 <_svfprintf_r+0x250>
 8006aaa:	9b05      	ldr	r3, [sp, #20]
 8006aac:	3301      	adds	r3, #1
 8006aae:	9305      	str	r3, [sp, #20]
 8006ab0:	9b03      	ldr	r3, [sp, #12]
 8006ab2:	f013 0302 	ands.w	r3, r3, #2
 8006ab6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ab8:	d002      	beq.n	8006ac0 <_svfprintf_r+0x260>
 8006aba:	9b05      	ldr	r3, [sp, #20]
 8006abc:	3302      	adds	r3, #2
 8006abe:	9305      	str	r3, [sp, #20]
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	f013 0984 	ands.w	r9, r3, #132	; 0x84
 8006ac6:	f040 8317 	bne.w	80070f8 <_svfprintf_r+0x898>
 8006aca:	9b08      	ldr	r3, [sp, #32]
 8006acc:	9a05      	ldr	r2, [sp, #20]
 8006ace:	ebc2 0803 	rsb	r8, r2, r3
 8006ad2:	f1b8 0f00 	cmp.w	r8, #0
 8006ad6:	f340 830f 	ble.w	80070f8 <_svfprintf_r+0x898>
 8006ada:	f1b8 0f10 	cmp.w	r8, #16
 8006ade:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006ae0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006ae2:	f8df a01c 	ldr.w	sl, [pc, #28]	; 8006b00 <_svfprintf_r+0x2a0>
 8006ae6:	dd30      	ble.n	8006b4a <_svfprintf_r+0x2ea>
 8006ae8:	4653      	mov	r3, sl
 8006aea:	f04f 0b10 	mov.w	fp, #16
 8006aee:	46c2      	mov	sl, r8
 8006af0:	46a8      	mov	r8, r5
 8006af2:	461d      	mov	r5, r3
 8006af4:	e00d      	b.n	8006b12 <_svfprintf_r+0x2b2>
 8006af6:	bf00      	nop
	...
 8006b00:	08019c84 	.word	0x08019c84
 8006b04:	f1aa 0a10 	sub.w	sl, sl, #16
 8006b08:	f1ba 0f10 	cmp.w	sl, #16
 8006b0c:	f104 0408 	add.w	r4, r4, #8
 8006b10:	dd17      	ble.n	8006b42 <_svfprintf_r+0x2e2>
 8006b12:	3201      	adds	r2, #1
 8006b14:	3110      	adds	r1, #16
 8006b16:	2a07      	cmp	r2, #7
 8006b18:	9123      	str	r1, [sp, #140]	; 0x8c
 8006b1a:	9222      	str	r2, [sp, #136]	; 0x88
 8006b1c:	e884 0820 	stmia.w	r4, {r5, fp}
 8006b20:	ddf0      	ble.n	8006b04 <_svfprintf_r+0x2a4>
 8006b22:	9804      	ldr	r0, [sp, #16]
 8006b24:	4631      	mov	r1, r6
 8006b26:	aa21      	add	r2, sp, #132	; 0x84
 8006b28:	f002 fec8 	bl	80098bc <__ssprint_r>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	f47f af5f 	bne.w	80069f0 <_svfprintf_r+0x190>
 8006b32:	f1aa 0a10 	sub.w	sl, sl, #16
 8006b36:	f1ba 0f10 	cmp.w	sl, #16
 8006b3a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8006b3c:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006b3e:	463c      	mov	r4, r7
 8006b40:	dce7      	bgt.n	8006b12 <_svfprintf_r+0x2b2>
 8006b42:	462b      	mov	r3, r5
 8006b44:	4645      	mov	r5, r8
 8006b46:	46d0      	mov	r8, sl
 8006b48:	469a      	mov	sl, r3
 8006b4a:	3201      	adds	r2, #1
 8006b4c:	eb08 0b01 	add.w	fp, r8, r1
 8006b50:	2a07      	cmp	r2, #7
 8006b52:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006b56:	9222      	str	r2, [sp, #136]	; 0x88
 8006b58:	f8c4 a000 	str.w	sl, [r4]
 8006b5c:	f8c4 8004 	str.w	r8, [r4, #4]
 8006b60:	f300 847e 	bgt.w	8007460 <_svfprintf_r+0xc00>
 8006b64:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006b68:	3408      	adds	r4, #8
 8006b6a:	f1bc 0f00 	cmp.w	ip, #0
 8006b6e:	d00f      	beq.n	8006b90 <_svfprintf_r+0x330>
 8006b70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b72:	3301      	adds	r3, #1
 8006b74:	f10b 0b01 	add.w	fp, fp, #1
 8006b78:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	2b07      	cmp	r3, #7
 8006b80:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006b84:	9322      	str	r3, [sp, #136]	; 0x88
 8006b86:	e884 0006 	stmia.w	r4, {r1, r2}
 8006b8a:	f300 83ea 	bgt.w	8007362 <_svfprintf_r+0xb02>
 8006b8e:	3408      	adds	r4, #8
 8006b90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b92:	b173      	cbz	r3, 8006bb2 <_svfprintf_r+0x352>
 8006b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b96:	3301      	adds	r3, #1
 8006b98:	f10b 0b02 	add.w	fp, fp, #2
 8006b9c:	a91a      	add	r1, sp, #104	; 0x68
 8006b9e:	2202      	movs	r2, #2
 8006ba0:	2b07      	cmp	r3, #7
 8006ba2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006ba6:	9322      	str	r3, [sp, #136]	; 0x88
 8006ba8:	e884 0006 	stmia.w	r4, {r1, r2}
 8006bac:	f300 83cd 	bgt.w	800734a <_svfprintf_r+0xaea>
 8006bb0:	3408      	adds	r4, #8
 8006bb2:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8006bb6:	f000 8315 	beq.w	80071e4 <_svfprintf_r+0x984>
 8006bba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006bbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bbe:	ebc2 0a03 	rsb	sl, r2, r3
 8006bc2:	f1ba 0f00 	cmp.w	sl, #0
 8006bc6:	dd3c      	ble.n	8006c42 <_svfprintf_r+0x3e2>
 8006bc8:	f1ba 0f10 	cmp.w	sl, #16
 8006bcc:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006bce:	f8df 9464 	ldr.w	r9, [pc, #1124]	; 8007034 <_svfprintf_r+0x7d4>
 8006bd2:	dd2b      	ble.n	8006c2c <_svfprintf_r+0x3cc>
 8006bd4:	4649      	mov	r1, r9
 8006bd6:	465b      	mov	r3, fp
 8006bd8:	46a9      	mov	r9, r5
 8006bda:	f04f 0810 	mov.w	r8, #16
 8006bde:	f8dd b010 	ldr.w	fp, [sp, #16]
 8006be2:	460d      	mov	r5, r1
 8006be4:	e006      	b.n	8006bf4 <_svfprintf_r+0x394>
 8006be6:	f1aa 0a10 	sub.w	sl, sl, #16
 8006bea:	f1ba 0f10 	cmp.w	sl, #16
 8006bee:	f104 0408 	add.w	r4, r4, #8
 8006bf2:	dd17      	ble.n	8006c24 <_svfprintf_r+0x3c4>
 8006bf4:	3201      	adds	r2, #1
 8006bf6:	3310      	adds	r3, #16
 8006bf8:	2a07      	cmp	r2, #7
 8006bfa:	9323      	str	r3, [sp, #140]	; 0x8c
 8006bfc:	9222      	str	r2, [sp, #136]	; 0x88
 8006bfe:	e884 0120 	stmia.w	r4, {r5, r8}
 8006c02:	ddf0      	ble.n	8006be6 <_svfprintf_r+0x386>
 8006c04:	4658      	mov	r0, fp
 8006c06:	4631      	mov	r1, r6
 8006c08:	aa21      	add	r2, sp, #132	; 0x84
 8006c0a:	f002 fe57 	bl	80098bc <__ssprint_r>
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f47f aeee 	bne.w	80069f0 <_svfprintf_r+0x190>
 8006c14:	f1aa 0a10 	sub.w	sl, sl, #16
 8006c18:	f1ba 0f10 	cmp.w	sl, #16
 8006c1c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c1e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8006c20:	463c      	mov	r4, r7
 8006c22:	dce7      	bgt.n	8006bf4 <_svfprintf_r+0x394>
 8006c24:	469b      	mov	fp, r3
 8006c26:	462b      	mov	r3, r5
 8006c28:	464d      	mov	r5, r9
 8006c2a:	4699      	mov	r9, r3
 8006c2c:	3201      	adds	r2, #1
 8006c2e:	44d3      	add	fp, sl
 8006c30:	2a07      	cmp	r2, #7
 8006c32:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c36:	9222      	str	r2, [sp, #136]	; 0x88
 8006c38:	e884 0600 	stmia.w	r4, {r9, sl}
 8006c3c:	f300 8379 	bgt.w	8007332 <_svfprintf_r+0xad2>
 8006c40:	3408      	adds	r4, #8
 8006c42:	9b03      	ldr	r3, [sp, #12]
 8006c44:	05d9      	lsls	r1, r3, #23
 8006c46:	f100 8270 	bmi.w	800712a <_svfprintf_r+0x8ca>
 8006c4a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c4c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c4e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006c50:	6022      	str	r2, [r4, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	448b      	add	fp, r1
 8006c56:	2b07      	cmp	r3, #7
 8006c58:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006c5c:	6061      	str	r1, [r4, #4]
 8006c5e:	9322      	str	r3, [sp, #136]	; 0x88
 8006c60:	f300 834a 	bgt.w	80072f8 <_svfprintf_r+0xa98>
 8006c64:	3408      	adds	r4, #8
 8006c66:	9b03      	ldr	r3, [sp, #12]
 8006c68:	075a      	lsls	r2, r3, #29
 8006c6a:	d541      	bpl.n	8006cf0 <_svfprintf_r+0x490>
 8006c6c:	9b08      	ldr	r3, [sp, #32]
 8006c6e:	9a05      	ldr	r2, [sp, #20]
 8006c70:	1a9d      	subs	r5, r3, r2
 8006c72:	2d00      	cmp	r5, #0
 8006c74:	dd3c      	ble.n	8006cf0 <_svfprintf_r+0x490>
 8006c76:	2d10      	cmp	r5, #16
 8006c78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006c7a:	f8df a3bc 	ldr.w	sl, [pc, #956]	; 8007038 <_svfprintf_r+0x7d8>
 8006c7e:	dd23      	ble.n	8006cc8 <_svfprintf_r+0x468>
 8006c80:	f04f 0810 	mov.w	r8, #16
 8006c84:	465a      	mov	r2, fp
 8006c86:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8006c8a:	e004      	b.n	8006c96 <_svfprintf_r+0x436>
 8006c8c:	3d10      	subs	r5, #16
 8006c8e:	2d10      	cmp	r5, #16
 8006c90:	f104 0408 	add.w	r4, r4, #8
 8006c94:	dd17      	ble.n	8006cc6 <_svfprintf_r+0x466>
 8006c96:	3301      	adds	r3, #1
 8006c98:	3210      	adds	r2, #16
 8006c9a:	2b07      	cmp	r3, #7
 8006c9c:	9223      	str	r2, [sp, #140]	; 0x8c
 8006c9e:	9322      	str	r3, [sp, #136]	; 0x88
 8006ca0:	f8c4 a000 	str.w	sl, [r4]
 8006ca4:	f8c4 8004 	str.w	r8, [r4, #4]
 8006ca8:	ddf0      	ble.n	8006c8c <_svfprintf_r+0x42c>
 8006caa:	4648      	mov	r0, r9
 8006cac:	4631      	mov	r1, r6
 8006cae:	aa21      	add	r2, sp, #132	; 0x84
 8006cb0:	f002 fe04 	bl	80098bc <__ssprint_r>
 8006cb4:	2800      	cmp	r0, #0
 8006cb6:	f47f ae9b 	bne.w	80069f0 <_svfprintf_r+0x190>
 8006cba:	3d10      	subs	r5, #16
 8006cbc:	2d10      	cmp	r5, #16
 8006cbe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8006cc0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006cc2:	463c      	mov	r4, r7
 8006cc4:	dce7      	bgt.n	8006c96 <_svfprintf_r+0x436>
 8006cc6:	4693      	mov	fp, r2
 8006cc8:	3301      	adds	r3, #1
 8006cca:	44ab      	add	fp, r5
 8006ccc:	2b07      	cmp	r3, #7
 8006cce:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8006cd2:	9322      	str	r3, [sp, #136]	; 0x88
 8006cd4:	f8c4 a000 	str.w	sl, [r4]
 8006cd8:	6065      	str	r5, [r4, #4]
 8006cda:	dd09      	ble.n	8006cf0 <_svfprintf_r+0x490>
 8006cdc:	9804      	ldr	r0, [sp, #16]
 8006cde:	4631      	mov	r1, r6
 8006ce0:	aa21      	add	r2, sp, #132	; 0x84
 8006ce2:	f002 fdeb 	bl	80098bc <__ssprint_r>
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	f47f ae82 	bne.w	80069f0 <_svfprintf_r+0x190>
 8006cec:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006cf0:	9b07      	ldr	r3, [sp, #28]
 8006cf2:	9a05      	ldr	r2, [sp, #20]
 8006cf4:	9908      	ldr	r1, [sp, #32]
 8006cf6:	428a      	cmp	r2, r1
 8006cf8:	bfac      	ite	ge
 8006cfa:	189b      	addge	r3, r3, r2
 8006cfc:	185b      	addlt	r3, r3, r1
 8006cfe:	9307      	str	r3, [sp, #28]
 8006d00:	f1bb 0f00 	cmp.w	fp, #0
 8006d04:	f47f ae6c 	bne.w	80069e0 <_svfprintf_r+0x180>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	9322      	str	r3, [sp, #136]	; 0x88
 8006d0c:	463c      	mov	r4, r7
 8006d0e:	e5ce      	b.n	80068ae <_svfprintf_r+0x4e>
 8006d10:	4619      	mov	r1, r3
 8006d12:	9803      	ldr	r0, [sp, #12]
 8006d14:	781d      	ldrb	r5, [r3, #0]
 8006d16:	f040 0004 	orr.w	r0, r0, #4
 8006d1a:	9003      	str	r0, [sp, #12]
 8006d1c:	e5f5      	b.n	800690a <_svfprintf_r+0xaa>
 8006d1e:	9306      	str	r3, [sp, #24]
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	f013 0320 	ands.w	r3, r3, #32
 8006d26:	f000 810e 	beq.w	8006f46 <_svfprintf_r+0x6e6>
 8006d2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d2c:	f103 0907 	add.w	r9, r3, #7
 8006d30:	f029 0307 	bic.w	r3, r9, #7
 8006d34:	f103 0208 	add.w	r2, r3, #8
 8006d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d3c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d3e:	2300      	movs	r3, #0
 8006d40:	e675      	b.n	8006a2e <_svfprintf_r+0x1ce>
 8006d42:	781d      	ldrb	r5, [r3, #0]
 8006d44:	4619      	mov	r1, r3
 8006d46:	222b      	movs	r2, #43	; 0x2b
 8006d48:	e5df      	b.n	800690a <_svfprintf_r+0xaa>
 8006d4a:	781d      	ldrb	r5, [r3, #0]
 8006d4c:	2d2a      	cmp	r5, #42	; 0x2a
 8006d4e:	f103 0101 	add.w	r1, r3, #1
 8006d52:	f000 87b8 	beq.w	8007cc6 <_svfprintf_r+0x1466>
 8006d56:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006d5a:	2809      	cmp	r0, #9
 8006d5c:	460b      	mov	r3, r1
 8006d5e:	f04f 0a00 	mov.w	sl, #0
 8006d62:	f63f add3 	bhi.w	800690c <_svfprintf_r+0xac>
 8006d66:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006d6a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
 8006d6e:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8006d72:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006d76:	2809      	cmp	r0, #9
 8006d78:	d9f5      	bls.n	8006d66 <_svfprintf_r+0x506>
 8006d7a:	ea4a 7aea 	orr.w	sl, sl, sl, asr #31
 8006d7e:	e5c5      	b.n	800690c <_svfprintf_r+0xac>
 8006d80:	9306      	str	r3, [sp, #24]
 8006d82:	9b03      	ldr	r3, [sp, #12]
 8006d84:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006d88:	069b      	lsls	r3, r3, #26
 8006d8a:	f140 80a1 	bpl.w	8006ed0 <_svfprintf_r+0x670>
 8006d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d90:	f103 0907 	add.w	r9, r3, #7
 8006d94:	f029 0907 	bic.w	r9, r9, #7
 8006d98:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006d9c:	f109 0108 	add.w	r1, r9, #8
 8006da0:	910a      	str	r1, [sp, #40]	; 0x28
 8006da2:	4690      	mov	r8, r2
 8006da4:	4699      	mov	r9, r3
 8006da6:	2a00      	cmp	r2, #0
 8006da8:	f173 0300 	sbcs.w	r3, r3, #0
 8006dac:	f2c0 840e 	blt.w	80075cc <_svfprintf_r+0xd6c>
 8006db0:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006db4:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8006db8:	2301      	movs	r3, #1
 8006dba:	e63e      	b.n	8006a3a <_svfprintf_r+0x1da>
 8006dbc:	9306      	str	r3, [sp, #24]
 8006dbe:	4b9b      	ldr	r3, [pc, #620]	; (800702c <_svfprintf_r+0x7cc>)
 8006dc0:	9312      	str	r3, [sp, #72]	; 0x48
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006dc8:	069b      	lsls	r3, r3, #26
 8006dca:	f140 80f3 	bpl.w	8006fb4 <_svfprintf_r+0x754>
 8006dce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dd0:	f103 0907 	add.w	r9, r3, #7
 8006dd4:	f029 0307 	bic.w	r3, r9, #7
 8006dd8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ddc:	f103 0208 	add.w	r2, r3, #8
 8006de0:	920a      	str	r2, [sp, #40]	; 0x28
 8006de2:	9b03      	ldr	r3, [sp, #12]
 8006de4:	07d9      	lsls	r1, r3, #31
 8006de6:	f140 80f5 	bpl.w	8006fd4 <_svfprintf_r+0x774>
 8006dea:	ea58 0309 	orrs.w	r3, r8, r9
 8006dee:	f000 80f1 	beq.w	8006fd4 <_svfprintf_r+0x774>
 8006df2:	9a03      	ldr	r2, [sp, #12]
 8006df4:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 8006df8:	2330      	movs	r3, #48	; 0x30
 8006dfa:	f042 0202 	orr.w	r2, r2, #2
 8006dfe:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8006e02:	9203      	str	r2, [sp, #12]
 8006e04:	2302      	movs	r3, #2
 8006e06:	e612      	b.n	8006a2e <_svfprintf_r+0x1ce>
 8006e08:	781d      	ldrb	r5, [r3, #0]
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	2a00      	cmp	r2, #0
 8006e0e:	f47f ad7c 	bne.w	800690a <_svfprintf_r+0xaa>
 8006e12:	2220      	movs	r2, #32
 8006e14:	e579      	b.n	800690a <_svfprintf_r+0xaa>
 8006e16:	9903      	ldr	r1, [sp, #12]
 8006e18:	f041 0120 	orr.w	r1, r1, #32
 8006e1c:	9103      	str	r1, [sp, #12]
 8006e1e:	781d      	ldrb	r5, [r3, #0]
 8006e20:	4619      	mov	r1, r3
 8006e22:	e572      	b.n	800690a <_svfprintf_r+0xaa>
 8006e24:	9306      	str	r3, [sp, #24]
 8006e26:	9b03      	ldr	r3, [sp, #12]
 8006e28:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006e2c:	069a      	lsls	r2, r3, #26
 8006e2e:	f140 84b0 	bpl.w	8007792 <_svfprintf_r+0xf32>
 8006e32:	9907      	ldr	r1, [sp, #28]
 8006e34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e36:	ea4f 79e1 	mov.w	r9, r1, asr #31
 8006e3a:	6813      	ldr	r3, [r2, #0]
 8006e3c:	4608      	mov	r0, r1
 8006e3e:	4688      	mov	r8, r1
 8006e40:	3204      	adds	r2, #4
 8006e42:	4649      	mov	r1, r9
 8006e44:	920a      	str	r2, [sp, #40]	; 0x28
 8006e46:	e9c3 0100 	strd	r0, r1, [r3]
 8006e4a:	e530      	b.n	80068ae <_svfprintf_r+0x4e>
 8006e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e4e:	9306      	str	r3, [sp, #24]
 8006e50:	6813      	ldr	r3, [r2, #0]
 8006e52:	930c      	str	r3, [sp, #48]	; 0x30
 8006e54:	f04f 0b00 	mov.w	fp, #0
 8006e58:	f88d b067 	strb.w	fp, [sp, #103]	; 0x67
 8006e5c:	f102 0904 	add.w	r9, r2, #4
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	f000 8646 	beq.w	8007af2 <_svfprintf_r+0x1292>
 8006e66:	f1ba 0f00 	cmp.w	sl, #0
 8006e6a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8006e6c:	f2c0 85f6 	blt.w	8007a5c <_svfprintf_r+0x11fc>
 8006e70:	4659      	mov	r1, fp
 8006e72:	4652      	mov	r2, sl
 8006e74:	f002 f9de 	bl	8009234 <memchr>
 8006e78:	2800      	cmp	r0, #0
 8006e7a:	f000 8677 	beq.w	8007b6c <_svfprintf_r+0x130c>
 8006e7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e80:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8006e84:	1ac3      	subs	r3, r0, r3
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8006e8c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006e90:	9305      	str	r3, [sp, #20]
 8006e92:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006e96:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8006e9a:	e603      	b.n	8006aa4 <_svfprintf_r+0x244>
 8006e9c:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	f813 5b01 	ldrb.w	r5, [r3], #1
 8006ea6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8006eaa:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8006eae:	f1a5 0030 	sub.w	r0, r5, #48	; 0x30
 8006eb2:	2809      	cmp	r0, #9
 8006eb4:	d9f5      	bls.n	8006ea2 <_svfprintf_r+0x642>
 8006eb6:	9108      	str	r1, [sp, #32]
 8006eb8:	e528      	b.n	800690c <_svfprintf_r+0xac>
 8006eba:	9306      	str	r3, [sp, #24]
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006ec2:	f043 0310 	orr.w	r3, r3, #16
 8006ec6:	9303      	str	r3, [sp, #12]
 8006ec8:	9b03      	ldr	r3, [sp, #12]
 8006eca:	069b      	lsls	r3, r3, #26
 8006ecc:	f53f af5f 	bmi.w	8006d8e <_svfprintf_r+0x52e>
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	06d8      	lsls	r0, r3, #27
 8006ed4:	f100 836b 	bmi.w	80075ae <_svfprintf_r+0xd4e>
 8006ed8:	9b03      	ldr	r3, [sp, #12]
 8006eda:	0659      	lsls	r1, r3, #25
 8006edc:	f140 8367 	bpl.w	80075ae <_svfprintf_r+0xd4e>
 8006ee0:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006ee2:	f9b1 8000 	ldrsh.w	r8, [r1]
 8006ee6:	3104      	adds	r1, #4
 8006ee8:	ea4f 79e8 	mov.w	r9, r8, asr #31
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	910a      	str	r1, [sp, #40]	; 0x28
 8006ef2:	e758      	b.n	8006da6 <_svfprintf_r+0x546>
 8006ef4:	781d      	ldrb	r5, [r3, #0]
 8006ef6:	9903      	ldr	r1, [sp, #12]
 8006ef8:	2d6c      	cmp	r5, #108	; 0x6c
 8006efa:	f000 84d3 	beq.w	80078a4 <_svfprintf_r+0x1044>
 8006efe:	f041 0110 	orr.w	r1, r1, #16
 8006f02:	9103      	str	r1, [sp, #12]
 8006f04:	4619      	mov	r1, r3
 8006f06:	e500      	b.n	800690a <_svfprintf_r+0xaa>
 8006f08:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006f0a:	6829      	ldr	r1, [r5, #0]
 8006f0c:	9108      	str	r1, [sp, #32]
 8006f0e:	4608      	mov	r0, r1
 8006f10:	2800      	cmp	r0, #0
 8006f12:	4629      	mov	r1, r5
 8006f14:	f101 0104 	add.w	r1, r1, #4
 8006f18:	f2c0 84cb 	blt.w	80078b2 <_svfprintf_r+0x1052>
 8006f1c:	910a      	str	r1, [sp, #40]	; 0x28
 8006f1e:	781d      	ldrb	r5, [r3, #0]
 8006f20:	4619      	mov	r1, r3
 8006f22:	e4f2      	b.n	800690a <_svfprintf_r+0xaa>
 8006f24:	9903      	ldr	r1, [sp, #12]
 8006f26:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8006f2a:	9103      	str	r1, [sp, #12]
 8006f2c:	781d      	ldrb	r5, [r3, #0]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	e4eb      	b.n	800690a <_svfprintf_r+0xaa>
 8006f32:	9306      	str	r3, [sp, #24]
 8006f34:	9b03      	ldr	r3, [sp, #12]
 8006f36:	f043 0310 	orr.w	r3, r3, #16
 8006f3a:	9303      	str	r3, [sp, #12]
 8006f3c:	9b03      	ldr	r3, [sp, #12]
 8006f3e:	f013 0320 	ands.w	r3, r3, #32
 8006f42:	f47f aef2 	bne.w	8006d2a <_svfprintf_r+0x4ca>
 8006f46:	9a03      	ldr	r2, [sp, #12]
 8006f48:	f012 0210 	ands.w	r2, r2, #16
 8006f4c:	f040 831c 	bne.w	8007588 <_svfprintf_r+0xd28>
 8006f50:	9b03      	ldr	r3, [sp, #12]
 8006f52:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8006f56:	f000 8317 	beq.w	8007588 <_svfprintf_r+0xd28>
 8006f5a:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	460a      	mov	r2, r1
 8006f60:	3204      	adds	r2, #4
 8006f62:	f8b1 8000 	ldrh.w	r8, [r1]
 8006f66:	920a      	str	r2, [sp, #40]	; 0x28
 8006f68:	f04f 0900 	mov.w	r9, #0
 8006f6c:	e55f      	b.n	8006a2e <_svfprintf_r+0x1ce>
 8006f6e:	9306      	str	r3, [sp, #24]
 8006f70:	9b03      	ldr	r3, [sp, #12]
 8006f72:	f043 0310 	orr.w	r3, r3, #16
 8006f76:	9303      	str	r3, [sp, #12]
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	0698      	lsls	r0, r3, #26
 8006f7c:	f53f ad4c 	bmi.w	8006a18 <_svfprintf_r+0x1b8>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	06d9      	lsls	r1, r3, #27
 8006f84:	f100 8309 	bmi.w	800759a <_svfprintf_r+0xd3a>
 8006f88:	9b03      	ldr	r3, [sp, #12]
 8006f8a:	065a      	lsls	r2, r3, #25
 8006f8c:	f140 8305 	bpl.w	800759a <_svfprintf_r+0xd3a>
 8006f90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006f92:	f8b2 8000 	ldrh.w	r8, [r2]
 8006f96:	3204      	adds	r2, #4
 8006f98:	f04f 0900 	mov.w	r9, #0
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	920a      	str	r2, [sp, #40]	; 0x28
 8006fa0:	e545      	b.n	8006a2e <_svfprintf_r+0x1ce>
 8006fa2:	9306      	str	r3, [sp, #24]
 8006fa4:	4b22      	ldr	r3, [pc, #136]	; (8007030 <_svfprintf_r+0x7d0>)
 8006fa6:	9312      	str	r3, [sp, #72]	; 0x48
 8006fa8:	9b03      	ldr	r3, [sp, #12]
 8006faa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8006fae:	069b      	lsls	r3, r3, #26
 8006fb0:	f53f af0d 	bmi.w	8006dce <_svfprintf_r+0x56e>
 8006fb4:	9b03      	ldr	r3, [sp, #12]
 8006fb6:	06d8      	lsls	r0, r3, #27
 8006fb8:	f140 83dc 	bpl.w	8007774 <_svfprintf_r+0xf14>
 8006fbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4698      	mov	r8, r3
 8006fc4:	9b03      	ldr	r3, [sp, #12]
 8006fc6:	3204      	adds	r2, #4
 8006fc8:	07d9      	lsls	r1, r3, #31
 8006fca:	920a      	str	r2, [sp, #40]	; 0x28
 8006fcc:	f04f 0900 	mov.w	r9, #0
 8006fd0:	f53f af0b 	bmi.w	8006dea <_svfprintf_r+0x58a>
 8006fd4:	2302      	movs	r3, #2
 8006fd6:	e52a      	b.n	8006a2e <_svfprintf_r+0x1ce>
 8006fd8:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006fda:	9306      	str	r3, [sp, #24]
 8006fdc:	680a      	ldr	r2, [r1, #0]
 8006fde:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	3104      	adds	r1, #4
 8006fe8:	469c      	mov	ip, r3
 8006fea:	9205      	str	r2, [sp, #20]
 8006fec:	910a      	str	r1, [sp, #40]	; 0x28
 8006fee:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8006ff2:	ab24      	add	r3, sp, #144	; 0x90
 8006ff4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8006ff8:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8006ffc:	9209      	str	r2, [sp, #36]	; 0x24
 8006ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8007000:	e556      	b.n	8006ab0 <_svfprintf_r+0x250>
 8007002:	9903      	ldr	r1, [sp, #12]
 8007004:	f041 0108 	orr.w	r1, r1, #8
 8007008:	9103      	str	r1, [sp, #12]
 800700a:	781d      	ldrb	r5, [r3, #0]
 800700c:	4619      	mov	r1, r3
 800700e:	e47c      	b.n	800690a <_svfprintf_r+0xaa>
 8007010:	9903      	ldr	r1, [sp, #12]
 8007012:	f041 0101 	orr.w	r1, r1, #1
 8007016:	9103      	str	r1, [sp, #12]
 8007018:	781d      	ldrb	r5, [r3, #0]
 800701a:	4619      	mov	r1, r3
 800701c:	e475      	b.n	800690a <_svfprintf_r+0xaa>
 800701e:	9903      	ldr	r1, [sp, #12]
 8007020:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8007024:	9103      	str	r1, [sp, #12]
 8007026:	781d      	ldrb	r5, [r3, #0]
 8007028:	4619      	mov	r1, r3
 800702a:	e46e      	b.n	800690a <_svfprintf_r+0xaa>
 800702c:	08019cb8 	.word	0x08019cb8
 8007030:	08019ca4 	.word	0x08019ca4
 8007034:	08019c74 	.word	0x08019c74
 8007038:	08019c84 	.word	0x08019c84
 800703c:	9306      	str	r3, [sp, #24]
 800703e:	9b03      	ldr	r3, [sp, #12]
 8007040:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8007044:	f013 0f08 	tst.w	r3, #8
 8007048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800704a:	46d3      	mov	fp, sl
 800704c:	f103 0907 	add.w	r9, r3, #7
 8007050:	f000 8386 	beq.w	8007760 <_svfprintf_r+0xf00>
 8007054:	f029 0307 	bic.w	r3, r9, #7
 8007058:	ed93 7b00 	vldr	d7, [r3]
 800705c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007060:	f103 0208 	add.w	r2, r3, #8
 8007064:	920a      	str	r2, [sp, #40]	; 0x28
 8007066:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800706a:	f7ff fb1f 	bl	80066ac <__fpclassifyd>
 800706e:	2801      	cmp	r0, #1
 8007070:	f040 835a 	bne.w	8007728 <_svfprintf_r+0xec8>
 8007074:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007078:	2200      	movs	r2, #0
 800707a:	2300      	movs	r3, #0
 800707c:	f7f9 fd6c 	bl	8000b58 <__aeabi_dcmplt>
 8007080:	2800      	cmp	r0, #0
 8007082:	f040 856b 	bne.w	8007b5c <_svfprintf_r+0x12fc>
 8007086:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 800708a:	9b03      	ldr	r3, [sp, #12]
 800708c:	4abd      	ldr	r2, [pc, #756]	; (8007384 <_svfprintf_r+0xb24>)
 800708e:	f8df e300 	ldr.w	lr, [pc, #768]	; 8007390 <_svfprintf_r+0xb30>
 8007092:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007096:	9303      	str	r3, [sp, #12]
 8007098:	4613      	mov	r3, r2
 800709a:	2103      	movs	r1, #3
 800709c:	2000      	movs	r0, #0
 800709e:	2d47      	cmp	r5, #71	; 0x47
 80070a0:	bfd8      	it	le
 80070a2:	4673      	movle	r3, lr
 80070a4:	9105      	str	r1, [sp, #20]
 80070a6:	900d      	str	r0, [sp, #52]	; 0x34
 80070a8:	930c      	str	r3, [sp, #48]	; 0x30
 80070aa:	9109      	str	r1, [sp, #36]	; 0x24
 80070ac:	900e      	str	r0, [sp, #56]	; 0x38
 80070ae:	e4f9      	b.n	8006aa4 <_svfprintf_r+0x244>
 80070b0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80070b2:	9903      	ldr	r1, [sp, #12]
 80070b4:	9306      	str	r3, [sp, #24]
 80070b6:	2230      	movs	r2, #48	; 0x30
 80070b8:	6803      	ldr	r3, [r0, #0]
 80070ba:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 80070be:	4602      	mov	r2, r0
 80070c0:	2578      	movs	r5, #120	; 0x78
 80070c2:	f041 0102 	orr.w	r1, r1, #2
 80070c6:	3204      	adds	r2, #4
 80070c8:	4698      	mov	r8, r3
 80070ca:	4baf      	ldr	r3, [pc, #700]	; (8007388 <_svfprintf_r+0xb28>)
 80070cc:	9312      	str	r3, [sp, #72]	; 0x48
 80070ce:	9103      	str	r1, [sp, #12]
 80070d0:	920a      	str	r2, [sp, #40]	; 0x28
 80070d2:	f04f 0900 	mov.w	r9, #0
 80070d6:	f88d 5069 	strb.w	r5, [sp, #105]	; 0x69
 80070da:	2302      	movs	r3, #2
 80070dc:	e4a7      	b.n	8006a2e <_svfprintf_r+0x1ce>
 80070de:	9306      	str	r3, [sp, #24]
 80070e0:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80070e4:	2d00      	cmp	r5, #0
 80070e6:	f000 83d1 	beq.w	800788c <_svfprintf_r+0x102c>
 80070ea:	2300      	movs	r3, #0
 80070ec:	2201      	movs	r2, #1
 80070ee:	469c      	mov	ip, r3
 80070f0:	9205      	str	r2, [sp, #20]
 80070f2:	f88d 5090 	strb.w	r5, [sp, #144]	; 0x90
 80070f6:	e77a      	b.n	8006fee <_svfprintf_r+0x78e>
 80070f8:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80070fc:	e535      	b.n	8006b6a <_svfprintf_r+0x30a>
 80070fe:	2b01      	cmp	r3, #1
 8007100:	f47f acad 	bne.w	8006a5e <_svfprintf_r+0x1fe>
 8007104:	f1b9 0f00 	cmp.w	r9, #0
 8007108:	bf08      	it	eq
 800710a:	f1b8 0f0a 	cmpeq.w	r8, #10
 800710e:	f080 820d 	bcs.w	800752c <_svfprintf_r+0xccc>
 8007112:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 8007116:	f108 0830 	add.w	r8, r8, #48	; 0x30
 800711a:	f80b 8d41 	strb.w	r8, [fp, #-65]!
 800711e:	ebcb 0307 	rsb	r3, fp, r7
 8007122:	9309      	str	r3, [sp, #36]	; 0x24
 8007124:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007128:	e4b4      	b.n	8006a94 <_svfprintf_r+0x234>
 800712a:	2d65      	cmp	r5, #101	; 0x65
 800712c:	f340 80a0 	ble.w	8007270 <_svfprintf_r+0xa10>
 8007130:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007134:	2200      	movs	r2, #0
 8007136:	2300      	movs	r3, #0
 8007138:	f7f9 fd04 	bl	8000b44 <__aeabi_dcmpeq>
 800713c:	2800      	cmp	r0, #0
 800713e:	f000 8144 	beq.w	80073ca <_svfprintf_r+0xb6a>
 8007142:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007144:	4a91      	ldr	r2, [pc, #580]	; (800738c <_svfprintf_r+0xb2c>)
 8007146:	6022      	str	r2, [r4, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	f10b 0b01 	add.w	fp, fp, #1
 800714e:	2201      	movs	r2, #1
 8007150:	2b07      	cmp	r3, #7
 8007152:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007156:	9322      	str	r3, [sp, #136]	; 0x88
 8007158:	6062      	str	r2, [r4, #4]
 800715a:	f300 833f 	bgt.w	80077dc <_svfprintf_r+0xf7c>
 800715e:	3408      	adds	r4, #8
 8007160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007162:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007164:	4293      	cmp	r3, r2
 8007166:	db03      	blt.n	8007170 <_svfprintf_r+0x910>
 8007168:	9b03      	ldr	r3, [sp, #12]
 800716a:	07da      	lsls	r2, r3, #31
 800716c:	f57f ad7b 	bpl.w	8006c66 <_svfprintf_r+0x406>
 8007170:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007172:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007174:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007176:	6022      	str	r2, [r4, #0]
 8007178:	3301      	adds	r3, #1
 800717a:	448b      	add	fp, r1
 800717c:	2b07      	cmp	r3, #7
 800717e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007182:	6061      	str	r1, [r4, #4]
 8007184:	9322      	str	r3, [sp, #136]	; 0x88
 8007186:	f300 839b 	bgt.w	80078c0 <_svfprintf_r+0x1060>
 800718a:	3408      	adds	r4, #8
 800718c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800718e:	1e5d      	subs	r5, r3, #1
 8007190:	2d00      	cmp	r5, #0
 8007192:	f77f ad68 	ble.w	8006c66 <_svfprintf_r+0x406>
 8007196:	2d10      	cmp	r5, #16
 8007198:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800719a:	f8df 91f8 	ldr.w	r9, [pc, #504]	; 8007394 <_svfprintf_r+0xb34>
 800719e:	f340 81b9 	ble.w	8007514 <_svfprintf_r+0xcb4>
 80071a2:	f04f 0810 	mov.w	r8, #16
 80071a6:	465a      	mov	r2, fp
 80071a8:	f8dd a010 	ldr.w	sl, [sp, #16]
 80071ac:	e004      	b.n	80071b8 <_svfprintf_r+0x958>
 80071ae:	3408      	adds	r4, #8
 80071b0:	3d10      	subs	r5, #16
 80071b2:	2d10      	cmp	r5, #16
 80071b4:	f340 81ad 	ble.w	8007512 <_svfprintf_r+0xcb2>
 80071b8:	3301      	adds	r3, #1
 80071ba:	3210      	adds	r2, #16
 80071bc:	2b07      	cmp	r3, #7
 80071be:	9223      	str	r2, [sp, #140]	; 0x8c
 80071c0:	9322      	str	r3, [sp, #136]	; 0x88
 80071c2:	f8c4 9000 	str.w	r9, [r4]
 80071c6:	f8c4 8004 	str.w	r8, [r4, #4]
 80071ca:	ddf0      	ble.n	80071ae <_svfprintf_r+0x94e>
 80071cc:	4650      	mov	r0, sl
 80071ce:	4631      	mov	r1, r6
 80071d0:	aa21      	add	r2, sp, #132	; 0x84
 80071d2:	f002 fb73 	bl	80098bc <__ssprint_r>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f47f ac0a 	bne.w	80069f0 <_svfprintf_r+0x190>
 80071dc:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80071de:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80071e0:	463c      	mov	r4, r7
 80071e2:	e7e5      	b.n	80071b0 <_svfprintf_r+0x950>
 80071e4:	9b08      	ldr	r3, [sp, #32]
 80071e6:	9a05      	ldr	r2, [sp, #20]
 80071e8:	ebc2 0a03 	rsb	sl, r2, r3
 80071ec:	f1ba 0f00 	cmp.w	sl, #0
 80071f0:	f77f ace3 	ble.w	8006bba <_svfprintf_r+0x35a>
 80071f4:	f1ba 0f10 	cmp.w	sl, #16
 80071f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80071fa:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8007394 <_svfprintf_r+0xb34>
 80071fe:	dd2b      	ble.n	8007258 <_svfprintf_r+0x9f8>
 8007200:	4649      	mov	r1, r9
 8007202:	465b      	mov	r3, fp
 8007204:	46a9      	mov	r9, r5
 8007206:	f04f 0810 	mov.w	r8, #16
 800720a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800720e:	460d      	mov	r5, r1
 8007210:	e006      	b.n	8007220 <_svfprintf_r+0x9c0>
 8007212:	f1aa 0a10 	sub.w	sl, sl, #16
 8007216:	f1ba 0f10 	cmp.w	sl, #16
 800721a:	f104 0408 	add.w	r4, r4, #8
 800721e:	dd17      	ble.n	8007250 <_svfprintf_r+0x9f0>
 8007220:	3201      	adds	r2, #1
 8007222:	3310      	adds	r3, #16
 8007224:	2a07      	cmp	r2, #7
 8007226:	9323      	str	r3, [sp, #140]	; 0x8c
 8007228:	9222      	str	r2, [sp, #136]	; 0x88
 800722a:	e884 0120 	stmia.w	r4, {r5, r8}
 800722e:	ddf0      	ble.n	8007212 <_svfprintf_r+0x9b2>
 8007230:	4658      	mov	r0, fp
 8007232:	4631      	mov	r1, r6
 8007234:	aa21      	add	r2, sp, #132	; 0x84
 8007236:	f002 fb41 	bl	80098bc <__ssprint_r>
 800723a:	2800      	cmp	r0, #0
 800723c:	f47f abd8 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007240:	f1aa 0a10 	sub.w	sl, sl, #16
 8007244:	f1ba 0f10 	cmp.w	sl, #16
 8007248:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800724a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800724c:	463c      	mov	r4, r7
 800724e:	dce7      	bgt.n	8007220 <_svfprintf_r+0x9c0>
 8007250:	469b      	mov	fp, r3
 8007252:	462b      	mov	r3, r5
 8007254:	464d      	mov	r5, r9
 8007256:	4699      	mov	r9, r3
 8007258:	3201      	adds	r2, #1
 800725a:	44d3      	add	fp, sl
 800725c:	2a07      	cmp	r2, #7
 800725e:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007262:	9222      	str	r2, [sp, #136]	; 0x88
 8007264:	e884 0600 	stmia.w	r4, {r9, sl}
 8007268:	f300 8251 	bgt.w	800770e <_svfprintf_r+0xeae>
 800726c:	3408      	adds	r4, #8
 800726e:	e4a4      	b.n	8006bba <_svfprintf_r+0x35a>
 8007270:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007272:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8007274:	2b01      	cmp	r3, #1
 8007276:	f340 821f 	ble.w	80076b8 <_svfprintf_r+0xe58>
 800727a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	3501      	adds	r5, #1
 8007280:	f10b 0301 	add.w	r3, fp, #1
 8007284:	2201      	movs	r2, #1
 8007286:	2d07      	cmp	r5, #7
 8007288:	9323      	str	r3, [sp, #140]	; 0x8c
 800728a:	9522      	str	r5, [sp, #136]	; 0x88
 800728c:	6062      	str	r2, [r4, #4]
 800728e:	f300 8225 	bgt.w	80076dc <_svfprintf_r+0xe7c>
 8007292:	3408      	adds	r4, #8
 8007294:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007296:	6061      	str	r1, [r4, #4]
 8007298:	3501      	adds	r5, #1
 800729a:	eb03 0b01 	add.w	fp, r3, r1
 800729e:	2d07      	cmp	r5, #7
 80072a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80072a2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80072a6:	9522      	str	r5, [sp, #136]	; 0x88
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	f300 8223 	bgt.w	80076f4 <_svfprintf_r+0xe94>
 80072ae:	3408      	adds	r4, #8
 80072b0:	2300      	movs	r3, #0
 80072b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072b6:	2200      	movs	r2, #0
 80072b8:	f7f9 fc44 	bl	8000b44 <__aeabi_dcmpeq>
 80072bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072be:	2800      	cmp	r0, #0
 80072c0:	f040 80dd 	bne.w	800747e <_svfprintf_r+0xc1e>
 80072c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072c6:	3b01      	subs	r3, #1
 80072c8:	3501      	adds	r5, #1
 80072ca:	3201      	adds	r2, #1
 80072cc:	449b      	add	fp, r3
 80072ce:	2d07      	cmp	r5, #7
 80072d0:	9522      	str	r5, [sp, #136]	; 0x88
 80072d2:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80072d6:	6022      	str	r2, [r4, #0]
 80072d8:	6063      	str	r3, [r4, #4]
 80072da:	f300 810d 	bgt.w	80074f8 <_svfprintf_r+0xc98>
 80072de:	3408      	adds	r4, #8
 80072e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80072e2:	6062      	str	r2, [r4, #4]
 80072e4:	3501      	adds	r5, #1
 80072e6:	4493      	add	fp, r2
 80072e8:	ab1d      	add	r3, sp, #116	; 0x74
 80072ea:	2d07      	cmp	r5, #7
 80072ec:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80072f0:	9522      	str	r5, [sp, #136]	; 0x88
 80072f2:	6023      	str	r3, [r4, #0]
 80072f4:	f77f acb6 	ble.w	8006c64 <_svfprintf_r+0x404>
 80072f8:	9804      	ldr	r0, [sp, #16]
 80072fa:	4631      	mov	r1, r6
 80072fc:	aa21      	add	r2, sp, #132	; 0x84
 80072fe:	f002 fadd 	bl	80098bc <__ssprint_r>
 8007302:	2800      	cmp	r0, #0
 8007304:	f47f ab74 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007308:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800730c:	463c      	mov	r4, r7
 800730e:	e4aa      	b.n	8006c66 <_svfprintf_r+0x406>
 8007310:	2b00      	cmp	r3, #0
 8007312:	d132      	bne.n	800737a <_svfprintf_r+0xb1a>
 8007314:	9b03      	ldr	r3, [sp, #12]
 8007316:	07d8      	lsls	r0, r3, #31
 8007318:	d52f      	bpl.n	800737a <_svfprintf_r+0xb1a>
 800731a:	f10d 0bf8 	add.w	fp, sp, #248	; 0xf8
 800731e:	2330      	movs	r3, #48	; 0x30
 8007320:	f80b 3d41 	strb.w	r3, [fp, #-65]!
 8007324:	ebcb 0307 	rsb	r3, fp, r7
 8007328:	9309      	str	r3, [sp, #36]	; 0x24
 800732a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800732e:	f7ff bbb1 	b.w	8006a94 <_svfprintf_r+0x234>
 8007332:	9804      	ldr	r0, [sp, #16]
 8007334:	4631      	mov	r1, r6
 8007336:	aa21      	add	r2, sp, #132	; 0x84
 8007338:	f002 fac0 	bl	80098bc <__ssprint_r>
 800733c:	2800      	cmp	r0, #0
 800733e:	f47f ab57 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007342:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007346:	463c      	mov	r4, r7
 8007348:	e47b      	b.n	8006c42 <_svfprintf_r+0x3e2>
 800734a:	9804      	ldr	r0, [sp, #16]
 800734c:	4631      	mov	r1, r6
 800734e:	aa21      	add	r2, sp, #132	; 0x84
 8007350:	f002 fab4 	bl	80098bc <__ssprint_r>
 8007354:	2800      	cmp	r0, #0
 8007356:	f47f ab4b 	bne.w	80069f0 <_svfprintf_r+0x190>
 800735a:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800735e:	463c      	mov	r4, r7
 8007360:	e427      	b.n	8006bb2 <_svfprintf_r+0x352>
 8007362:	9804      	ldr	r0, [sp, #16]
 8007364:	4631      	mov	r1, r6
 8007366:	aa21      	add	r2, sp, #132	; 0x84
 8007368:	f002 faa8 	bl	80098bc <__ssprint_r>
 800736c:	2800      	cmp	r0, #0
 800736e:	f47f ab3f 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007372:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007376:	463c      	mov	r4, r7
 8007378:	e40a      	b.n	8006b90 <_svfprintf_r+0x330>
 800737a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800737e:	970c      	str	r7, [sp, #48]	; 0x30
 8007380:	f7ff bb88 	b.w	8006a94 <_svfprintf_r+0x234>
 8007384:	08019c98 	.word	0x08019c98
 8007388:	08019cb8 	.word	0x08019cb8
 800738c:	08016624 	.word	0x08016624
 8007390:	08019c94 	.word	0x08019c94
 8007394:	08019c74 	.word	0x08019c74
 8007398:	9812      	ldr	r0, [sp, #72]	; 0x48
 800739a:	46bb      	mov	fp, r7
 800739c:	ea4f 1318 	mov.w	r3, r8, lsr #4
 80073a0:	f008 010f 	and.w	r1, r8, #15
 80073a4:	ea43 7309 	orr.w	r3, r3, r9, lsl #28
 80073a8:	ea4f 1219 	mov.w	r2, r9, lsr #4
 80073ac:	4698      	mov	r8, r3
 80073ae:	4691      	mov	r9, r2
 80073b0:	5c43      	ldrb	r3, [r0, r1]
 80073b2:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 80073b6:	ea58 0309 	orrs.w	r3, r8, r9
 80073ba:	d1ef      	bne.n	800739c <_svfprintf_r+0xb3c>
 80073bc:	465b      	mov	r3, fp
 80073be:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80073c2:	1afb      	subs	r3, r7, r3
 80073c4:	9309      	str	r3, [sp, #36]	; 0x24
 80073c6:	f7ff bb65 	b.w	8006a94 <_svfprintf_r+0x234>
 80073ca:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80073cc:	2d00      	cmp	r5, #0
 80073ce:	f340 8211 	ble.w	80077f4 <_svfprintf_r+0xf94>
 80073d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80073d4:	990e      	ldr	r1, [sp, #56]	; 0x38
 80073d6:	428a      	cmp	r2, r1
 80073d8:	4613      	mov	r3, r2
 80073da:	bfa8      	it	ge
 80073dc:	460b      	movge	r3, r1
 80073de:	461d      	mov	r5, r3
 80073e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073e2:	2d00      	cmp	r5, #0
 80073e4:	eb01 0a02 	add.w	sl, r1, r2
 80073e8:	dd0b      	ble.n	8007402 <_svfprintf_r+0xba2>
 80073ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80073ec:	6021      	str	r1, [r4, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	44ab      	add	fp, r5
 80073f2:	2b07      	cmp	r3, #7
 80073f4:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80073f8:	6065      	str	r5, [r4, #4]
 80073fa:	9322      	str	r3, [sp, #136]	; 0x88
 80073fc:	f300 8355 	bgt.w	8007aaa <_svfprintf_r+0x124a>
 8007400:	3408      	adds	r4, #8
 8007402:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007404:	2d00      	cmp	r5, #0
 8007406:	bfa8      	it	ge
 8007408:	1b5b      	subge	r3, r3, r5
 800740a:	2b00      	cmp	r3, #0
 800740c:	461d      	mov	r5, r3
 800740e:	f340 80f5 	ble.w	80075fc <_svfprintf_r+0xd9c>
 8007412:	2d10      	cmp	r5, #16
 8007414:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007416:	f8df 9608 	ldr.w	r9, [pc, #1544]	; 8007a20 <_svfprintf_r+0x11c0>
 800741a:	f340 81d2 	ble.w	80077c2 <_svfprintf_r+0xf62>
 800741e:	465a      	mov	r2, fp
 8007420:	f04f 0810 	mov.w	r8, #16
 8007424:	f8dd b010 	ldr.w	fp, [sp, #16]
 8007428:	e004      	b.n	8007434 <_svfprintf_r+0xbd4>
 800742a:	3408      	adds	r4, #8
 800742c:	3d10      	subs	r5, #16
 800742e:	2d10      	cmp	r5, #16
 8007430:	f340 81c6 	ble.w	80077c0 <_svfprintf_r+0xf60>
 8007434:	3301      	adds	r3, #1
 8007436:	3210      	adds	r2, #16
 8007438:	2b07      	cmp	r3, #7
 800743a:	9223      	str	r2, [sp, #140]	; 0x8c
 800743c:	9322      	str	r3, [sp, #136]	; 0x88
 800743e:	f8c4 9000 	str.w	r9, [r4]
 8007442:	f8c4 8004 	str.w	r8, [r4, #4]
 8007446:	ddf0      	ble.n	800742a <_svfprintf_r+0xbca>
 8007448:	4658      	mov	r0, fp
 800744a:	4631      	mov	r1, r6
 800744c:	aa21      	add	r2, sp, #132	; 0x84
 800744e:	f002 fa35 	bl	80098bc <__ssprint_r>
 8007452:	2800      	cmp	r0, #0
 8007454:	f47f aacc 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007458:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800745a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800745c:	463c      	mov	r4, r7
 800745e:	e7e5      	b.n	800742c <_svfprintf_r+0xbcc>
 8007460:	9804      	ldr	r0, [sp, #16]
 8007462:	4631      	mov	r1, r6
 8007464:	aa21      	add	r2, sp, #132	; 0x84
 8007466:	f002 fa29 	bl	80098bc <__ssprint_r>
 800746a:	2800      	cmp	r0, #0
 800746c:	f47f aac0 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007470:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8007474:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007478:	463c      	mov	r4, r7
 800747a:	f7ff bb76 	b.w	8006b6a <_svfprintf_r+0x30a>
 800747e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007482:	f1b8 0f00 	cmp.w	r8, #0
 8007486:	f77f af2b 	ble.w	80072e0 <_svfprintf_r+0xa80>
 800748a:	f1b8 0f10 	cmp.w	r8, #16
 800748e:	f8df 9590 	ldr.w	r9, [pc, #1424]	; 8007a20 <_svfprintf_r+0x11c0>
 8007492:	dd25      	ble.n	80074e0 <_svfprintf_r+0xc80>
 8007494:	465b      	mov	r3, fp
 8007496:	f04f 0a10 	mov.w	sl, #16
 800749a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800749e:	e006      	b.n	80074ae <_svfprintf_r+0xc4e>
 80074a0:	f1a8 0810 	sub.w	r8, r8, #16
 80074a4:	f1b8 0f10 	cmp.w	r8, #16
 80074a8:	f104 0408 	add.w	r4, r4, #8
 80074ac:	dd17      	ble.n	80074de <_svfprintf_r+0xc7e>
 80074ae:	3501      	adds	r5, #1
 80074b0:	3310      	adds	r3, #16
 80074b2:	2d07      	cmp	r5, #7
 80074b4:	9323      	str	r3, [sp, #140]	; 0x8c
 80074b6:	9522      	str	r5, [sp, #136]	; 0x88
 80074b8:	e884 0600 	stmia.w	r4, {r9, sl}
 80074bc:	ddf0      	ble.n	80074a0 <_svfprintf_r+0xc40>
 80074be:	4658      	mov	r0, fp
 80074c0:	4631      	mov	r1, r6
 80074c2:	aa21      	add	r2, sp, #132	; 0x84
 80074c4:	f002 f9fa 	bl	80098bc <__ssprint_r>
 80074c8:	2800      	cmp	r0, #0
 80074ca:	f47f aa91 	bne.w	80069f0 <_svfprintf_r+0x190>
 80074ce:	f1a8 0810 	sub.w	r8, r8, #16
 80074d2:	f1b8 0f10 	cmp.w	r8, #16
 80074d6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074d8:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80074da:	463c      	mov	r4, r7
 80074dc:	dce7      	bgt.n	80074ae <_svfprintf_r+0xc4e>
 80074de:	469b      	mov	fp, r3
 80074e0:	3501      	adds	r5, #1
 80074e2:	44c3      	add	fp, r8
 80074e4:	2d07      	cmp	r5, #7
 80074e6:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80074ea:	9522      	str	r5, [sp, #136]	; 0x88
 80074ec:	f8c4 9000 	str.w	r9, [r4]
 80074f0:	f8c4 8004 	str.w	r8, [r4, #4]
 80074f4:	f77f aef3 	ble.w	80072de <_svfprintf_r+0xa7e>
 80074f8:	9804      	ldr	r0, [sp, #16]
 80074fa:	4631      	mov	r1, r6
 80074fc:	aa21      	add	r2, sp, #132	; 0x84
 80074fe:	f002 f9dd 	bl	80098bc <__ssprint_r>
 8007502:	2800      	cmp	r0, #0
 8007504:	f47f aa74 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007508:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 800750c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800750e:	463c      	mov	r4, r7
 8007510:	e6e6      	b.n	80072e0 <_svfprintf_r+0xa80>
 8007512:	4693      	mov	fp, r2
 8007514:	3301      	adds	r3, #1
 8007516:	44ab      	add	fp, r5
 8007518:	2b07      	cmp	r3, #7
 800751a:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 800751e:	9322      	str	r3, [sp, #136]	; 0x88
 8007520:	f8c4 9000 	str.w	r9, [r4]
 8007524:	6065      	str	r5, [r4, #4]
 8007526:	f77f ab9d 	ble.w	8006c64 <_svfprintf_r+0x404>
 800752a:	e6e5      	b.n	80072f8 <_svfprintf_r+0xa98>
 800752c:	46bb      	mov	fp, r7
 800752e:	f8cd c014 	str.w	ip, [sp, #20]
 8007532:	4640      	mov	r0, r8
 8007534:	4649      	mov	r1, r9
 8007536:	220a      	movs	r2, #10
 8007538:	2300      	movs	r3, #0
 800753a:	f7f9 fc47 	bl	8000dcc <__aeabi_uldivmod>
 800753e:	3230      	adds	r2, #48	; 0x30
 8007540:	4640      	mov	r0, r8
 8007542:	4649      	mov	r1, r9
 8007544:	f80b 2d01 	strb.w	r2, [fp, #-1]!
 8007548:	2300      	movs	r3, #0
 800754a:	220a      	movs	r2, #10
 800754c:	f7f9 fc3e 	bl	8000dcc <__aeabi_uldivmod>
 8007550:	4680      	mov	r8, r0
 8007552:	4689      	mov	r9, r1
 8007554:	ea58 0309 	orrs.w	r3, r8, r9
 8007558:	d1eb      	bne.n	8007532 <_svfprintf_r+0xcd2>
 800755a:	465b      	mov	r3, fp
 800755c:	1afb      	subs	r3, r7, r3
 800755e:	f8dd c014 	ldr.w	ip, [sp, #20]
 8007562:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8007566:	9309      	str	r3, [sp, #36]	; 0x24
 8007568:	f7ff ba94 	b.w	8006a94 <_svfprintf_r+0x234>
 800756c:	2b30      	cmp	r3, #48	; 0x30
 800756e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007570:	f43f af27 	beq.w	80073c2 <_svfprintf_r+0xb62>
 8007574:	3b01      	subs	r3, #1
 8007576:	461a      	mov	r2, r3
 8007578:	930c      	str	r3, [sp, #48]	; 0x30
 800757a:	1aba      	subs	r2, r7, r2
 800757c:	2330      	movs	r3, #48	; 0x30
 800757e:	9209      	str	r2, [sp, #36]	; 0x24
 8007580:	f801 3c01 	strb.w	r3, [r1, #-1]
 8007584:	f7ff ba86 	b.w	8006a94 <_svfprintf_r+0x234>
 8007588:	990a      	ldr	r1, [sp, #40]	; 0x28
 800758a:	680a      	ldr	r2, [r1, #0]
 800758c:	3104      	adds	r1, #4
 800758e:	910a      	str	r1, [sp, #40]	; 0x28
 8007590:	4690      	mov	r8, r2
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	f7ff ba4a 	b.w	8006a2e <_svfprintf_r+0x1ce>
 800759a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800759c:	680a      	ldr	r2, [r1, #0]
 800759e:	3104      	adds	r1, #4
 80075a0:	2301      	movs	r3, #1
 80075a2:	910a      	str	r1, [sp, #40]	; 0x28
 80075a4:	4690      	mov	r8, r2
 80075a6:	f04f 0900 	mov.w	r9, #0
 80075aa:	f7ff ba40 	b.w	8006a2e <_svfprintf_r+0x1ce>
 80075ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075b0:	6813      	ldr	r3, [r2, #0]
 80075b2:	4698      	mov	r8, r3
 80075b4:	ea4f 79e3 	mov.w	r9, r3, asr #31
 80075b8:	4613      	mov	r3, r2
 80075ba:	3304      	adds	r3, #4
 80075bc:	4642      	mov	r2, r8
 80075be:	930a      	str	r3, [sp, #40]	; 0x28
 80075c0:	2a00      	cmp	r2, #0
 80075c2:	464b      	mov	r3, r9
 80075c4:	f173 0300 	sbcs.w	r3, r3, #0
 80075c8:	f6bf abf2 	bge.w	8006db0 <_svfprintf_r+0x550>
 80075cc:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 80075d0:	f1d8 0800 	rsbs	r8, r8, #0
 80075d4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
 80075d8:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 80075dc:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80075e0:	2301      	movs	r3, #1
 80075e2:	f7ff ba2a 	b.w	8006a3a <_svfprintf_r+0x1da>
 80075e6:	9804      	ldr	r0, [sp, #16]
 80075e8:	4631      	mov	r1, r6
 80075ea:	aa21      	add	r2, sp, #132	; 0x84
 80075ec:	f002 f966 	bl	80098bc <__ssprint_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f47f a9fd 	bne.w	80069f0 <_svfprintf_r+0x190>
 80075f6:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80075fa:	463c      	mov	r4, r7
 80075fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 8007600:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007602:	440a      	add	r2, r1
 8007604:	4690      	mov	r8, r2
 8007606:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007608:	4293      	cmp	r3, r2
 800760a:	db46      	blt.n	800769a <_svfprintf_r+0xe3a>
 800760c:	9a03      	ldr	r2, [sp, #12]
 800760e:	07d0      	lsls	r0, r2, #31
 8007610:	d443      	bmi.n	800769a <_svfprintf_r+0xe3a>
 8007612:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007614:	ebc8 050a 	rsb	r5, r8, sl
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	429d      	cmp	r5, r3
 800761c:	bfa8      	it	ge
 800761e:	461d      	movge	r5, r3
 8007620:	2d00      	cmp	r5, #0
 8007622:	dd0c      	ble.n	800763e <_svfprintf_r+0xdde>
 8007624:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007626:	f8c4 8000 	str.w	r8, [r4]
 800762a:	3201      	adds	r2, #1
 800762c:	44ab      	add	fp, r5
 800762e:	2a07      	cmp	r2, #7
 8007630:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007634:	6065      	str	r5, [r4, #4]
 8007636:	9222      	str	r2, [sp, #136]	; 0x88
 8007638:	f300 826f 	bgt.w	8007b1a <_svfprintf_r+0x12ba>
 800763c:	3408      	adds	r4, #8
 800763e:	2d00      	cmp	r5, #0
 8007640:	bfac      	ite	ge
 8007642:	1b5d      	subge	r5, r3, r5
 8007644:	461d      	movlt	r5, r3
 8007646:	2d00      	cmp	r5, #0
 8007648:	f77f ab0d 	ble.w	8006c66 <_svfprintf_r+0x406>
 800764c:	2d10      	cmp	r5, #16
 800764e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007650:	f8df 93cc 	ldr.w	r9, [pc, #972]	; 8007a20 <_svfprintf_r+0x11c0>
 8007654:	f77f af5e 	ble.w	8007514 <_svfprintf_r+0xcb4>
 8007658:	f04f 0810 	mov.w	r8, #16
 800765c:	465a      	mov	r2, fp
 800765e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007662:	e004      	b.n	800766e <_svfprintf_r+0xe0e>
 8007664:	3408      	adds	r4, #8
 8007666:	3d10      	subs	r5, #16
 8007668:	2d10      	cmp	r5, #16
 800766a:	f77f af52 	ble.w	8007512 <_svfprintf_r+0xcb2>
 800766e:	3301      	adds	r3, #1
 8007670:	3210      	adds	r2, #16
 8007672:	2b07      	cmp	r3, #7
 8007674:	9223      	str	r2, [sp, #140]	; 0x8c
 8007676:	9322      	str	r3, [sp, #136]	; 0x88
 8007678:	f8c4 9000 	str.w	r9, [r4]
 800767c:	f8c4 8004 	str.w	r8, [r4, #4]
 8007680:	ddf0      	ble.n	8007664 <_svfprintf_r+0xe04>
 8007682:	4650      	mov	r0, sl
 8007684:	4631      	mov	r1, r6
 8007686:	aa21      	add	r2, sp, #132	; 0x84
 8007688:	f002 f918 	bl	80098bc <__ssprint_r>
 800768c:	2800      	cmp	r0, #0
 800768e:	f47f a9af 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007692:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007694:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007696:	463c      	mov	r4, r7
 8007698:	e7e5      	b.n	8007666 <_svfprintf_r+0xe06>
 800769a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800769c:	9814      	ldr	r0, [sp, #80]	; 0x50
 800769e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80076a0:	6021      	str	r1, [r4, #0]
 80076a2:	3201      	adds	r2, #1
 80076a4:	4483      	add	fp, r0
 80076a6:	2a07      	cmp	r2, #7
 80076a8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80076ac:	6060      	str	r0, [r4, #4]
 80076ae:	9222      	str	r2, [sp, #136]	; 0x88
 80076b0:	f300 8207 	bgt.w	8007ac2 <_svfprintf_r+0x1262>
 80076b4:	3408      	adds	r4, #8
 80076b6:	e7ac      	b.n	8007612 <_svfprintf_r+0xdb2>
 80076b8:	9b03      	ldr	r3, [sp, #12]
 80076ba:	07d9      	lsls	r1, r3, #31
 80076bc:	f53f addd 	bmi.w	800727a <_svfprintf_r+0xa1a>
 80076c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80076c2:	6023      	str	r3, [r4, #0]
 80076c4:	3501      	adds	r5, #1
 80076c6:	f10b 0b01 	add.w	fp, fp, #1
 80076ca:	2301      	movs	r3, #1
 80076cc:	2d07      	cmp	r5, #7
 80076ce:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80076d2:	9522      	str	r5, [sp, #136]	; 0x88
 80076d4:	6063      	str	r3, [r4, #4]
 80076d6:	f77f ae02 	ble.w	80072de <_svfprintf_r+0xa7e>
 80076da:	e70d      	b.n	80074f8 <_svfprintf_r+0xc98>
 80076dc:	9804      	ldr	r0, [sp, #16]
 80076de:	4631      	mov	r1, r6
 80076e0:	aa21      	add	r2, sp, #132	; 0x84
 80076e2:	f002 f8eb 	bl	80098bc <__ssprint_r>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	f47f a982 	bne.w	80069f0 <_svfprintf_r+0x190>
 80076ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80076ee:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80076f0:	463c      	mov	r4, r7
 80076f2:	e5cf      	b.n	8007294 <_svfprintf_r+0xa34>
 80076f4:	9804      	ldr	r0, [sp, #16]
 80076f6:	4631      	mov	r1, r6
 80076f8:	aa21      	add	r2, sp, #132	; 0x84
 80076fa:	f002 f8df 	bl	80098bc <__ssprint_r>
 80076fe:	2800      	cmp	r0, #0
 8007700:	f47f a976 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007704:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007708:	9d22      	ldr	r5, [sp, #136]	; 0x88
 800770a:	463c      	mov	r4, r7
 800770c:	e5d0      	b.n	80072b0 <_svfprintf_r+0xa50>
 800770e:	9804      	ldr	r0, [sp, #16]
 8007710:	4631      	mov	r1, r6
 8007712:	aa21      	add	r2, sp, #132	; 0x84
 8007714:	f002 f8d2 	bl	80098bc <__ssprint_r>
 8007718:	2800      	cmp	r0, #0
 800771a:	f47f a969 	bne.w	80069f0 <_svfprintf_r+0x190>
 800771e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007722:	463c      	mov	r4, r7
 8007724:	f7ff ba49 	b.w	8006bba <_svfprintf_r+0x35a>
 8007728:	ed9d 0b10 	vldr	d0, [sp, #64]	; 0x40
 800772c:	f7fe ffbe 	bl	80066ac <__fpclassifyd>
 8007730:	2800      	cmp	r0, #0
 8007732:	f040 80d1 	bne.w	80078d8 <_svfprintf_r+0x1078>
 8007736:	4686      	mov	lr, r0
 8007738:	4ab6      	ldr	r2, [pc, #728]	; (8007a14 <_svfprintf_r+0x11b4>)
 800773a:	4bb7      	ldr	r3, [pc, #732]	; (8007a18 <_svfprintf_r+0x11b8>)
 800773c:	900d      	str	r0, [sp, #52]	; 0x34
 800773e:	9803      	ldr	r0, [sp, #12]
 8007740:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8007744:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8007748:	2103      	movs	r1, #3
 800774a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800774e:	2d47      	cmp	r5, #71	; 0x47
 8007750:	bfd8      	it	le
 8007752:	461a      	movle	r2, r3
 8007754:	9105      	str	r1, [sp, #20]
 8007756:	9003      	str	r0, [sp, #12]
 8007758:	920c      	str	r2, [sp, #48]	; 0x30
 800775a:	9109      	str	r1, [sp, #36]	; 0x24
 800775c:	f7ff b9a2 	b.w	8006aa4 <_svfprintf_r+0x244>
 8007760:	f029 0907 	bic.w	r9, r9, #7
 8007764:	ed99 7b00 	vldr	d7, [r9]
 8007768:	f109 0308 	add.w	r3, r9, #8
 800776c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007770:	930a      	str	r3, [sp, #40]	; 0x28
 8007772:	e478      	b.n	8007066 <_svfprintf_r+0x806>
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007778:	f013 0f40 	tst.w	r3, #64	; 0x40
 800777c:	4613      	mov	r3, r2
 800777e:	f43f ac1f 	beq.w	8006fc0 <_svfprintf_r+0x760>
 8007782:	3304      	adds	r3, #4
 8007784:	f8b2 8000 	ldrh.w	r8, [r2]
 8007788:	930a      	str	r3, [sp, #40]	; 0x28
 800778a:	f04f 0900 	mov.w	r9, #0
 800778e:	f7ff bb28 	b.w	8006de2 <_svfprintf_r+0x582>
 8007792:	9b03      	ldr	r3, [sp, #12]
 8007794:	06db      	lsls	r3, r3, #27
 8007796:	d40b      	bmi.n	80077b0 <_svfprintf_r+0xf50>
 8007798:	9b03      	ldr	r3, [sp, #12]
 800779a:	065d      	lsls	r5, r3, #25
 800779c:	d508      	bpl.n	80077b0 <_svfprintf_r+0xf50>
 800779e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077a0:	6813      	ldr	r3, [r2, #0]
 80077a2:	3204      	adds	r2, #4
 80077a4:	920a      	str	r2, [sp, #40]	; 0x28
 80077a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80077aa:	801a      	strh	r2, [r3, #0]
 80077ac:	f7ff b87f 	b.w	80068ae <_svfprintf_r+0x4e>
 80077b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077b2:	6813      	ldr	r3, [r2, #0]
 80077b4:	3204      	adds	r2, #4
 80077b6:	920a      	str	r2, [sp, #40]	; 0x28
 80077b8:	9a07      	ldr	r2, [sp, #28]
 80077ba:	601a      	str	r2, [r3, #0]
 80077bc:	f7ff b877 	b.w	80068ae <_svfprintf_r+0x4e>
 80077c0:	4693      	mov	fp, r2
 80077c2:	3301      	adds	r3, #1
 80077c4:	44ab      	add	fp, r5
 80077c6:	2b07      	cmp	r3, #7
 80077c8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 80077cc:	9322      	str	r3, [sp, #136]	; 0x88
 80077ce:	f8c4 9000 	str.w	r9, [r4]
 80077d2:	6065      	str	r5, [r4, #4]
 80077d4:	f73f af07 	bgt.w	80075e6 <_svfprintf_r+0xd86>
 80077d8:	3408      	adds	r4, #8
 80077da:	e70f      	b.n	80075fc <_svfprintf_r+0xd9c>
 80077dc:	9804      	ldr	r0, [sp, #16]
 80077de:	4631      	mov	r1, r6
 80077e0:	aa21      	add	r2, sp, #132	; 0x84
 80077e2:	f002 f86b 	bl	80098bc <__ssprint_r>
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f47f a902 	bne.w	80069f0 <_svfprintf_r+0x190>
 80077ec:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80077f0:	463c      	mov	r4, r7
 80077f2:	e4b5      	b.n	8007160 <_svfprintf_r+0x900>
 80077f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80077f6:	4a89      	ldr	r2, [pc, #548]	; (8007a1c <_svfprintf_r+0x11bc>)
 80077f8:	6022      	str	r2, [r4, #0]
 80077fa:	3301      	adds	r3, #1
 80077fc:	f10b 0b01 	add.w	fp, fp, #1
 8007800:	2201      	movs	r2, #1
 8007802:	2b07      	cmp	r3, #7
 8007804:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007808:	9322      	str	r3, [sp, #136]	; 0x88
 800780a:	6062      	str	r2, [r4, #4]
 800780c:	f300 80f1 	bgt.w	80079f2 <_svfprintf_r+0x1192>
 8007810:	3408      	adds	r4, #8
 8007812:	b92d      	cbnz	r5, 8007820 <_svfprintf_r+0xfc0>
 8007814:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007816:	b91b      	cbnz	r3, 8007820 <_svfprintf_r+0xfc0>
 8007818:	9b03      	ldr	r3, [sp, #12]
 800781a:	07db      	lsls	r3, r3, #31
 800781c:	f57f aa23 	bpl.w	8006c66 <_svfprintf_r+0x406>
 8007820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007822:	9814      	ldr	r0, [sp, #80]	; 0x50
 8007824:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007826:	6022      	str	r2, [r4, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	eb0b 0100 	add.w	r1, fp, r0
 800782e:	2b07      	cmp	r3, #7
 8007830:	9123      	str	r1, [sp, #140]	; 0x8c
 8007832:	6060      	str	r0, [r4, #4]
 8007834:	9322      	str	r3, [sp, #136]	; 0x88
 8007836:	f300 81ef 	bgt.w	8007c18 <_svfprintf_r+0x13b8>
 800783a:	f104 0208 	add.w	r2, r4, #8
 800783e:	426d      	negs	r5, r5
 8007840:	2d00      	cmp	r5, #0
 8007842:	f340 80fa 	ble.w	8007a3a <_svfprintf_r+0x11da>
 8007846:	2d10      	cmp	r5, #16
 8007848:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 8007a20 <_svfprintf_r+0x11c0>
 800784c:	f340 8146 	ble.w	8007adc <_svfprintf_r+0x127c>
 8007850:	2410      	movs	r4, #16
 8007852:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007856:	e004      	b.n	8007862 <_svfprintf_r+0x1002>
 8007858:	3208      	adds	r2, #8
 800785a:	3d10      	subs	r5, #16
 800785c:	2d10      	cmp	r5, #16
 800785e:	f340 813d 	ble.w	8007adc <_svfprintf_r+0x127c>
 8007862:	3301      	adds	r3, #1
 8007864:	3110      	adds	r1, #16
 8007866:	2b07      	cmp	r3, #7
 8007868:	9123      	str	r1, [sp, #140]	; 0x8c
 800786a:	9322      	str	r3, [sp, #136]	; 0x88
 800786c:	f8c2 9000 	str.w	r9, [r2]
 8007870:	6054      	str	r4, [r2, #4]
 8007872:	ddf1      	ble.n	8007858 <_svfprintf_r+0xff8>
 8007874:	4640      	mov	r0, r8
 8007876:	4631      	mov	r1, r6
 8007878:	aa21      	add	r2, sp, #132	; 0x84
 800787a:	f002 f81f 	bl	80098bc <__ssprint_r>
 800787e:	2800      	cmp	r0, #0
 8007880:	f47f a8b6 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007884:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007886:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007888:	463a      	mov	r2, r7
 800788a:	e7e6      	b.n	800785a <_svfprintf_r+0xffa>
 800788c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800788e:	46b1      	mov	r9, r6
 8007890:	2b00      	cmp	r3, #0
 8007892:	f43f a8ae 	beq.w	80069f2 <_svfprintf_r+0x192>
 8007896:	9804      	ldr	r0, [sp, #16]
 8007898:	4631      	mov	r1, r6
 800789a:	aa21      	add	r2, sp, #132	; 0x84
 800789c:	f002 f80e 	bl	80098bc <__ssprint_r>
 80078a0:	f7ff b8a7 	b.w	80069f2 <_svfprintf_r+0x192>
 80078a4:	f041 0120 	orr.w	r1, r1, #32
 80078a8:	9103      	str	r1, [sp, #12]
 80078aa:	785d      	ldrb	r5, [r3, #1]
 80078ac:	1c59      	adds	r1, r3, #1
 80078ae:	f7ff b82c 	b.w	800690a <_svfprintf_r+0xaa>
 80078b2:	9808      	ldr	r0, [sp, #32]
 80078b4:	910a      	str	r1, [sp, #40]	; 0x28
 80078b6:	4240      	negs	r0, r0
 80078b8:	9008      	str	r0, [sp, #32]
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7ff ba29 	b.w	8006d12 <_svfprintf_r+0x4b2>
 80078c0:	9804      	ldr	r0, [sp, #16]
 80078c2:	4631      	mov	r1, r6
 80078c4:	aa21      	add	r2, sp, #132	; 0x84
 80078c6:	f001 fff9 	bl	80098bc <__ssprint_r>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	f47f a890 	bne.w	80069f0 <_svfprintf_r+0x190>
 80078d0:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80078d4:	463c      	mov	r4, r7
 80078d6:	e459      	b.n	800718c <_svfprintf_r+0x92c>
 80078d8:	f025 0320 	bic.w	r3, r5, #32
 80078dc:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 80078e0:	9305      	str	r3, [sp, #20]
 80078e2:	f000 8093 	beq.w	8007a0c <_svfprintf_r+0x11ac>
 80078e6:	2b47      	cmp	r3, #71	; 0x47
 80078e8:	d105      	bne.n	80078f6 <_svfprintf_r+0x1096>
 80078ea:	f1ba 0f00 	cmp.w	sl, #0
 80078ee:	bf14      	ite	ne
 80078f0:	46d3      	movne	fp, sl
 80078f2:	f04f 0b01 	moveq.w	fp, #1
 80078f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80078f8:	9a03      	ldr	r2, [sp, #12]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007900:	920b      	str	r2, [sp, #44]	; 0x2c
 8007902:	f2c0 81a4 	blt.w	8007c4e <_svfprintf_r+0x13ee>
 8007906:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 800790a:	ed8d 7b16 	vstr	d7, [sp, #88]	; 0x58
 800790e:	f04f 0a00 	mov.w	sl, #0
 8007912:	2d66      	cmp	r5, #102	; 0x66
 8007914:	f000 80ac 	beq.w	8007a70 <_svfprintf_r+0x1210>
 8007918:	2d46      	cmp	r5, #70	; 0x46
 800791a:	f000 80a9 	beq.w	8007a70 <_svfprintf_r+0x1210>
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	9804      	ldr	r0, [sp, #16]
 8007922:	2b45      	cmp	r3, #69	; 0x45
 8007924:	bf0c      	ite	eq
 8007926:	f10b 0901 	addeq.w	r9, fp, #1
 800792a:	46d9      	movne	r9, fp
 800792c:	aa1c      	add	r2, sp, #112	; 0x70
 800792e:	ab1f      	add	r3, sp, #124	; 0x7c
 8007930:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007934:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8007938:	2102      	movs	r1, #2
 800793a:	464a      	mov	r2, r9
 800793c:	ab1b      	add	r3, sp, #108	; 0x6c
 800793e:	f000 fa8f 	bl	8007e60 <_dtoa_r>
 8007942:	2d67      	cmp	r5, #103	; 0x67
 8007944:	900c      	str	r0, [sp, #48]	; 0x30
 8007946:	d002      	beq.n	800794e <_svfprintf_r+0x10ee>
 8007948:	2d47      	cmp	r5, #71	; 0x47
 800794a:	f040 809f 	bne.w	8007a8c <_svfprintf_r+0x122c>
 800794e:	9b03      	ldr	r3, [sp, #12]
 8007950:	07db      	lsls	r3, r3, #31
 8007952:	f140 8192 	bpl.w	8007c7a <_svfprintf_r+0x141a>
 8007956:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007958:	eb03 0809 	add.w	r8, r3, r9
 800795c:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007960:	2200      	movs	r2, #0
 8007962:	2300      	movs	r3, #0
 8007964:	f7f9 f8ee 	bl	8000b44 <__aeabi_dcmpeq>
 8007968:	2800      	cmp	r0, #0
 800796a:	f040 80fd 	bne.w	8007b68 <_svfprintf_r+0x1308>
 800796e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007970:	4598      	cmp	r8, r3
 8007972:	d906      	bls.n	8007982 <_svfprintf_r+0x1122>
 8007974:	2130      	movs	r1, #48	; 0x30
 8007976:	1c5a      	adds	r2, r3, #1
 8007978:	921f      	str	r2, [sp, #124]	; 0x7c
 800797a:	7019      	strb	r1, [r3, #0]
 800797c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800797e:	4598      	cmp	r8, r3
 8007980:	d8f9      	bhi.n	8007976 <_svfprintf_r+0x1116>
 8007982:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007984:	1a9b      	subs	r3, r3, r2
 8007986:	930f      	str	r3, [sp, #60]	; 0x3c
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	2b47      	cmp	r3, #71	; 0x47
 800798c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800798e:	f000 80de 	beq.w	8007b4e <_svfprintf_r+0x12ee>
 8007992:	2d65      	cmp	r5, #101	; 0x65
 8007994:	f340 80f8 	ble.w	8007b88 <_svfprintf_r+0x1328>
 8007998:	2d66      	cmp	r5, #102	; 0x66
 800799a:	930e      	str	r3, [sp, #56]	; 0x38
 800799c:	f000 8160 	beq.w	8007c60 <_svfprintf_r+0x1400>
 80079a0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80079a4:	4293      	cmp	r3, r2
 80079a6:	f300 8144 	bgt.w	8007c32 <_svfprintf_r+0x13d2>
 80079aa:	9b03      	ldr	r3, [sp, #12]
 80079ac:	07d9      	lsls	r1, r3, #31
 80079ae:	f100 8166 	bmi.w	8007c7e <_svfprintf_r+0x141e>
 80079b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80079b6:	9209      	str	r2, [sp, #36]	; 0x24
 80079b8:	f1ba 0f00 	cmp.w	sl, #0
 80079bc:	f040 80bc 	bne.w	8007b38 <_svfprintf_r+0x12d8>
 80079c0:	9305      	str	r3, [sp, #20]
 80079c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c4:	9303      	str	r3, [sp, #12]
 80079c6:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80079ca:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 80079ce:	f7ff b869 	b.w	8006aa4 <_svfprintf_r+0x244>
 80079d2:	9804      	ldr	r0, [sp, #16]
 80079d4:	2140      	movs	r1, #64	; 0x40
 80079d6:	f001 f99b 	bl	8008d10 <_malloc_r>
 80079da:	f8c9 0000 	str.w	r0, [r9]
 80079de:	f8c9 0010 	str.w	r0, [r9, #16]
 80079e2:	2800      	cmp	r0, #0
 80079e4:	f000 8197 	beq.w	8007d16 <_svfprintf_r+0x14b6>
 80079e8:	2340      	movs	r3, #64	; 0x40
 80079ea:	f8c9 3014 	str.w	r3, [r9, #20]
 80079ee:	f7fe bf4f 	b.w	8006890 <_svfprintf_r+0x30>
 80079f2:	9804      	ldr	r0, [sp, #16]
 80079f4:	4631      	mov	r1, r6
 80079f6:	aa21      	add	r2, sp, #132	; 0x84
 80079f8:	f001 ff60 	bl	80098bc <__ssprint_r>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f47e aff7 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007a02:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007a04:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007a08:	463c      	mov	r4, r7
 8007a0a:	e702      	b.n	8007812 <_svfprintf_r+0xfb2>
 8007a0c:	f04f 0b06 	mov.w	fp, #6
 8007a10:	e771      	b.n	80078f6 <_svfprintf_r+0x1096>
 8007a12:	bf00      	nop
 8007a14:	08019ca0 	.word	0x08019ca0
 8007a18:	08019c9c 	.word	0x08019c9c
 8007a1c:	08016624 	.word	0x08016624
 8007a20:	08019c74 	.word	0x08019c74
 8007a24:	9804      	ldr	r0, [sp, #16]
 8007a26:	4631      	mov	r1, r6
 8007a28:	aa21      	add	r2, sp, #132	; 0x84
 8007a2a:	f001 ff47 	bl	80098bc <__ssprint_r>
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	f47e afde 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007a34:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007a36:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a38:	463a      	mov	r2, r7
 8007a3a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8007a3c:	6054      	str	r4, [r2, #4]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	eb01 0b04 	add.w	fp, r1, r4
 8007a44:	2b07      	cmp	r3, #7
 8007a46:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007a48:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8007a4c:	9322      	str	r3, [sp, #136]	; 0x88
 8007a4e:	6011      	str	r1, [r2, #0]
 8007a50:	f73f ac52 	bgt.w	80072f8 <_svfprintf_r+0xa98>
 8007a54:	f102 0408 	add.w	r4, r2, #8
 8007a58:	f7ff b905 	b.w	8006c66 <_svfprintf_r+0x406>
 8007a5c:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 8007a60:	f7fe fece 	bl	8006800 <strlen>
 8007a64:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007a68:	9009      	str	r0, [sp, #36]	; 0x24
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	f7ff ba0e 	b.w	8006e8c <_svfprintf_r+0x62c>
 8007a70:	aa1c      	add	r2, sp, #112	; 0x70
 8007a72:	ab1f      	add	r3, sp, #124	; 0x7c
 8007a74:	e88d 000c 	stmia.w	sp, {r2, r3}
 8007a78:	9804      	ldr	r0, [sp, #16]
 8007a7a:	ed9d 0b16 	vldr	d0, [sp, #88]	; 0x58
 8007a7e:	2103      	movs	r1, #3
 8007a80:	465a      	mov	r2, fp
 8007a82:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a84:	f000 f9ec 	bl	8007e60 <_dtoa_r>
 8007a88:	46d9      	mov	r9, fp
 8007a8a:	900c      	str	r0, [sp, #48]	; 0x30
 8007a8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a8e:	eb03 0809 	add.w	r8, r3, r9
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	2b46      	cmp	r3, #70	; 0x46
 8007a96:	f47f af61 	bne.w	800795c <_svfprintf_r+0x10fc>
 8007a9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b30      	cmp	r3, #48	; 0x30
 8007aa0:	f000 8103 	beq.w	8007caa <_svfprintf_r+0x144a>
 8007aa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007aa6:	4498      	add	r8, r3
 8007aa8:	e758      	b.n	800795c <_svfprintf_r+0x10fc>
 8007aaa:	9804      	ldr	r0, [sp, #16]
 8007aac:	4631      	mov	r1, r6
 8007aae:	aa21      	add	r2, sp, #132	; 0x84
 8007ab0:	f001 ff04 	bl	80098bc <__ssprint_r>
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	f47e af9b 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007aba:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007abe:	463c      	mov	r4, r7
 8007ac0:	e49f      	b.n	8007402 <_svfprintf_r+0xba2>
 8007ac2:	9804      	ldr	r0, [sp, #16]
 8007ac4:	4631      	mov	r1, r6
 8007ac6:	aa21      	add	r2, sp, #132	; 0x84
 8007ac8:	f001 fef8 	bl	80098bc <__ssprint_r>
 8007acc:	2800      	cmp	r0, #0
 8007ace:	f47e af8f 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007ad2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007ad4:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007ad8:	463c      	mov	r4, r7
 8007ada:	e59a      	b.n	8007612 <_svfprintf_r+0xdb2>
 8007adc:	3301      	adds	r3, #1
 8007ade:	4429      	add	r1, r5
 8007ae0:	2b07      	cmp	r3, #7
 8007ae2:	9123      	str	r1, [sp, #140]	; 0x8c
 8007ae4:	9322      	str	r3, [sp, #136]	; 0x88
 8007ae6:	f8c2 9000 	str.w	r9, [r2]
 8007aea:	6055      	str	r5, [r2, #4]
 8007aec:	dc9a      	bgt.n	8007a24 <_svfprintf_r+0x11c4>
 8007aee:	3208      	adds	r2, #8
 8007af0:	e7a3      	b.n	8007a3a <_svfprintf_r+0x11da>
 8007af2:	4653      	mov	r3, sl
 8007af4:	2b06      	cmp	r3, #6
 8007af6:	bf28      	it	cs
 8007af8:	2306      	movcs	r3, #6
 8007afa:	9309      	str	r3, [sp, #36]	; 0x24
 8007afc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007b00:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
 8007b04:	9305      	str	r3, [sp, #20]
 8007b06:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <_svfprintf_r+0x14c4>)
 8007b08:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007b0c:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 8007b10:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8007b14:	930c      	str	r3, [sp, #48]	; 0x30
 8007b16:	f7fe bfc5 	b.w	8006aa4 <_svfprintf_r+0x244>
 8007b1a:	9804      	ldr	r0, [sp, #16]
 8007b1c:	4631      	mov	r1, r6
 8007b1e:	aa21      	add	r2, sp, #132	; 0x84
 8007b20:	f001 fecc 	bl	80098bc <__ssprint_r>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f47e af63 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007b2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b2e:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	463c      	mov	r4, r7
 8007b36:	e582      	b.n	800763e <_svfprintf_r+0xdde>
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b3c:	9303      	str	r3, [sp, #12]
 8007b3e:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8007b42:	2300      	movs	r3, #0
 8007b44:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8007b48:	930d      	str	r3, [sp, #52]	; 0x34
 8007b4a:	f7fe bfae 	b.w	8006aaa <_svfprintf_r+0x24a>
 8007b4e:	1cda      	adds	r2, r3, #3
 8007b50:	db19      	blt.n	8007b86 <_svfprintf_r+0x1326>
 8007b52:	459b      	cmp	fp, r3
 8007b54:	db17      	blt.n	8007b86 <_svfprintf_r+0x1326>
 8007b56:	930e      	str	r3, [sp, #56]	; 0x38
 8007b58:	2567      	movs	r5, #103	; 0x67
 8007b5a:	e721      	b.n	80079a0 <_svfprintf_r+0x1140>
 8007b5c:	f04f 0c2d 	mov.w	ip, #45	; 0x2d
 8007b60:	f88d c067 	strb.w	ip, [sp, #103]	; 0x67
 8007b64:	f7ff ba91 	b.w	800708a <_svfprintf_r+0x82a>
 8007b68:	4643      	mov	r3, r8
 8007b6a:	e70a      	b.n	8007982 <_svfprintf_r+0x1122>
 8007b6c:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 8007b70:	900d      	str	r0, [sp, #52]	; 0x34
 8007b72:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 8007b76:	900e      	str	r0, [sp, #56]	; 0x38
 8007b78:	f89d c067 	ldrb.w	ip, [sp, #103]	; 0x67
 8007b7c:	9305      	str	r3, [sp, #20]
 8007b7e:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007b82:	f7fe bf8f 	b.w	8006aa4 <_svfprintf_r+0x244>
 8007b86:	3d02      	subs	r5, #2
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	931b      	str	r3, [sp, #108]	; 0x6c
 8007b8e:	bfba      	itte	lt
 8007b90:	425b      	neglt	r3, r3
 8007b92:	222d      	movlt	r2, #45	; 0x2d
 8007b94:	222b      	movge	r2, #43	; 0x2b
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	f88d 5074 	strb.w	r5, [sp, #116]	; 0x74
 8007b9c:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 8007ba0:	dd7b      	ble.n	8007c9a <_svfprintf_r+0x143a>
 8007ba2:	f10d 0e83 	add.w	lr, sp, #131	; 0x83
 8007ba6:	4670      	mov	r0, lr
 8007ba8:	4a5f      	ldr	r2, [pc, #380]	; (8007d28 <_svfprintf_r+0x14c8>)
 8007baa:	fb82 2103 	smull	r2, r1, r2, r3
 8007bae:	17da      	asrs	r2, r3, #31
 8007bb0:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 8007bb4:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 8007bb8:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8007bbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007bc0:	2a09      	cmp	r2, #9
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	f800 1d01 	strb.w	r1, [r0, #-1]!
 8007bc8:	dcee      	bgt.n	8007ba8 <_svfprintf_r+0x1348>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	3330      	adds	r3, #48	; 0x30
 8007bce:	b2d9      	uxtb	r1, r3
 8007bd0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8007bd4:	4596      	cmp	lr, r2
 8007bd6:	f240 809b 	bls.w	8007d10 <_svfprintf_r+0x14b0>
 8007bda:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8007bde:	4603      	mov	r3, r0
 8007be0:	e001      	b.n	8007be6 <_svfprintf_r+0x1386>
 8007be2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007be6:	f802 1b01 	strb.w	r1, [r2], #1
 8007bea:	4573      	cmp	r3, lr
 8007bec:	d1f9      	bne.n	8007be2 <_svfprintf_r+0x1382>
 8007bee:	ab21      	add	r3, sp, #132	; 0x84
 8007bf0:	1a1b      	subs	r3, r3, r0
 8007bf2:	f10d 0276 	add.w	r2, sp, #118	; 0x76
 8007bf6:	4413      	add	r3, r2
 8007bf8:	aa1d      	add	r2, sp, #116	; 0x74
 8007bfa:	1a9b      	subs	r3, r3, r2
 8007bfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bfe:	9315      	str	r3, [sp, #84]	; 0x54
 8007c00:	2a01      	cmp	r2, #1
 8007c02:	4413      	add	r3, r2
 8007c04:	9309      	str	r3, [sp, #36]	; 0x24
 8007c06:	dd74      	ble.n	8007cf2 <_svfprintf_r+0x1492>
 8007c08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	3301      	adds	r3, #1
 8007c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c10:	920e      	str	r2, [sp, #56]	; 0x38
 8007c12:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c16:	e6cf      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007c18:	9804      	ldr	r0, [sp, #16]
 8007c1a:	4631      	mov	r1, r6
 8007c1c:	aa21      	add	r2, sp, #132	; 0x84
 8007c1e:	f001 fe4d 	bl	80098bc <__ssprint_r>
 8007c22:	2800      	cmp	r0, #0
 8007c24:	f47e aee4 	bne.w	80069f0 <_svfprintf_r+0x190>
 8007c28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007c2a:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8007c2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007c2e:	463a      	mov	r2, r7
 8007c30:	e605      	b.n	800783e <_svfprintf_r+0xfde>
 8007c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfd8      	it	le
 8007c38:	f1c3 0802 	rsble	r8, r3, #2
 8007c3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c3e:	bfc8      	it	gt
 8007c40:	f04f 0801 	movgt.w	r8, #1
 8007c44:	4443      	add	r3, r8
 8007c46:	9309      	str	r3, [sp, #36]	; 0x24
 8007c48:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c4c:	e6b4      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007c4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007c52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c56:	9016      	str	r0, [sp, #88]	; 0x58
 8007c58:	9317      	str	r3, [sp, #92]	; 0x5c
 8007c5a:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
 8007c5e:	e658      	b.n	8007912 <_svfprintf_r+0x10b2>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	dd3d      	ble.n	8007ce0 <_svfprintf_r+0x1480>
 8007c64:	f1bb 0f00 	cmp.w	fp, #0
 8007c68:	d10f      	bne.n	8007c8a <_svfprintf_r+0x142a>
 8007c6a:	9b03      	ldr	r3, [sp, #12]
 8007c6c:	07db      	lsls	r3, r3, #31
 8007c6e:	d40c      	bmi.n	8007c8a <_svfprintf_r+0x142a>
 8007c70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007c72:	9209      	str	r2, [sp, #36]	; 0x24
 8007c74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007c78:	e69e      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007c7a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007c7c:	e681      	b.n	8007982 <_svfprintf_r+0x1122>
 8007c7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c80:	3301      	adds	r3, #1
 8007c82:	9309      	str	r3, [sp, #36]	; 0x24
 8007c84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c88:	e696      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007c8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007c8c:	f10b 0801 	add.w	r8, fp, #1
 8007c90:	4443      	add	r3, r8
 8007c92:	9309      	str	r3, [sp, #36]	; 0x24
 8007c94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007c98:	e68e      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007c9a:	3330      	adds	r3, #48	; 0x30
 8007c9c:	2230      	movs	r2, #48	; 0x30
 8007c9e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 8007ca2:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 8007ca6:	ab1e      	add	r3, sp, #120	; 0x78
 8007ca8:	e7a6      	b.n	8007bf8 <_svfprintf_r+0x1398>
 8007caa:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f7f8 ff47 	bl	8000b44 <__aeabi_dcmpeq>
 8007cb6:	2800      	cmp	r0, #0
 8007cb8:	f47f aef4 	bne.w	8007aa4 <_svfprintf_r+0x1244>
 8007cbc:	f1c9 0301 	rsb	r3, r9, #1
 8007cc0:	931b      	str	r3, [sp, #108]	; 0x6c
 8007cc2:	4498      	add	r8, r3
 8007cc4:	e64a      	b.n	800795c <_svfprintf_r+0x10fc>
 8007cc6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007cc8:	f8d5 a000 	ldr.w	sl, [r5]
 8007ccc:	4628      	mov	r0, r5
 8007cce:	3004      	adds	r0, #4
 8007cd0:	f1ba 0f00 	cmp.w	sl, #0
 8007cd4:	785d      	ldrb	r5, [r3, #1]
 8007cd6:	900a      	str	r0, [sp, #40]	; 0x28
 8007cd8:	f6be ae17 	bge.w	800690a <_svfprintf_r+0xaa>
 8007cdc:	f7fe be13 	b.w	8006906 <_svfprintf_r+0xa6>
 8007ce0:	f1bb 0f00 	cmp.w	fp, #0
 8007ce4:	d10e      	bne.n	8007d04 <_svfprintf_r+0x14a4>
 8007ce6:	9b03      	ldr	r3, [sp, #12]
 8007ce8:	07d8      	lsls	r0, r3, #31
 8007cea:	d40b      	bmi.n	8007d04 <_svfprintf_r+0x14a4>
 8007cec:	2301      	movs	r3, #1
 8007cee:	9309      	str	r3, [sp, #36]	; 0x24
 8007cf0:	e662      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	f013 0301 	ands.w	r3, r3, #1
 8007cf8:	d186      	bne.n	8007c08 <_svfprintf_r+0x13a8>
 8007cfa:	930e      	str	r3, [sp, #56]	; 0x38
 8007cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d02:	e659      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007d04:	f10b 0302 	add.w	r3, fp, #2
 8007d08:	9309      	str	r3, [sp, #36]	; 0x24
 8007d0a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007d0e:	e653      	b.n	80079b8 <_svfprintf_r+0x1158>
 8007d10:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 8007d14:	e770      	b.n	8007bf8 <_svfprintf_r+0x1398>
 8007d16:	9a04      	ldr	r2, [sp, #16]
 8007d18:	230c      	movs	r3, #12
 8007d1a:	6013      	str	r3, [r2, #0]
 8007d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d20:	f7fe be70 	b.w	8006a04 <_svfprintf_r+0x1a4>
 8007d24:	08016bdc 	.word	0x08016bdc
 8007d28:	66666667 	.word	0x66666667
 8007d2c:	f3af 8000 	nop.w

08007d30 <quorem>:
 8007d30:	6902      	ldr	r2, [r0, #16]
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	4293      	cmp	r3, r2
 8007d36:	f300 808f 	bgt.w	8007e58 <quorem+0x128>
 8007d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d3e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8007d42:	f101 0714 	add.w	r7, r1, #20
 8007d46:	f100 0b14 	add.w	fp, r0, #20
 8007d4a:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
 8007d4e:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
 8007d52:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8007d56:	b083      	sub	sp, #12
 8007d58:	3201      	adds	r2, #1
 8007d5a:	fbb3 f9f2 	udiv	r9, r3, r2
 8007d5e:	eb0b 0304 	add.w	r3, fp, r4
 8007d62:	9400      	str	r4, [sp, #0]
 8007d64:	eb07 0a04 	add.w	sl, r7, r4
 8007d68:	9301      	str	r3, [sp, #4]
 8007d6a:	f1b9 0f00 	cmp.w	r9, #0
 8007d6e:	d03b      	beq.n	8007de8 <quorem+0xb8>
 8007d70:	2600      	movs	r6, #0
 8007d72:	4632      	mov	r2, r6
 8007d74:	46bc      	mov	ip, r7
 8007d76:	46de      	mov	lr, fp
 8007d78:	4634      	mov	r4, r6
 8007d7a:	f85c 6b04 	ldr.w	r6, [ip], #4
 8007d7e:	f8de 5000 	ldr.w	r5, [lr]
 8007d82:	b2b3      	uxth	r3, r6
 8007d84:	0c36      	lsrs	r6, r6, #16
 8007d86:	fb03 4409 	mla	r4, r3, r9, r4
 8007d8a:	fb06 f609 	mul.w	r6, r6, r9
 8007d8e:	eb06 4614 	add.w	r6, r6, r4, lsr #16
 8007d92:	b2a3      	uxth	r3, r4
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	b2b4      	uxth	r4, r6
 8007d98:	fa13 f385 	uxtah	r3, r3, r5
 8007d9c:	ebc4 4415 	rsb	r4, r4, r5, lsr #16
 8007da0:	eb04 4423 	add.w	r4, r4, r3, asr #16
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8007daa:	45e2      	cmp	sl, ip
 8007dac:	ea4f 4224 	mov.w	r2, r4, asr #16
 8007db0:	f84e 3b04 	str.w	r3, [lr], #4
 8007db4:	ea4f 4416 	mov.w	r4, r6, lsr #16
 8007db8:	d2df      	bcs.n	8007d7a <quorem+0x4a>
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	f85b 3003 	ldr.w	r3, [fp, r3]
 8007dc0:	b993      	cbnz	r3, 8007de8 <quorem+0xb8>
 8007dc2:	9c01      	ldr	r4, [sp, #4]
 8007dc4:	1f23      	subs	r3, r4, #4
 8007dc6:	459b      	cmp	fp, r3
 8007dc8:	d20c      	bcs.n	8007de4 <quorem+0xb4>
 8007dca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8007dce:	b94b      	cbnz	r3, 8007de4 <quorem+0xb4>
 8007dd0:	f1a4 0308 	sub.w	r3, r4, #8
 8007dd4:	e002      	b.n	8007ddc <quorem+0xac>
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	3b04      	subs	r3, #4
 8007dda:	b91a      	cbnz	r2, 8007de4 <quorem+0xb4>
 8007ddc:	459b      	cmp	fp, r3
 8007dde:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007de2:	d3f8      	bcc.n	8007dd6 <quorem+0xa6>
 8007de4:	f8c0 8010 	str.w	r8, [r0, #16]
 8007de8:	4604      	mov	r4, r0
 8007dea:	f001 fc7b 	bl	80096e4 <__mcmp>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	db2e      	blt.n	8007e50 <quorem+0x120>
 8007df2:	f109 0901 	add.w	r9, r9, #1
 8007df6:	465d      	mov	r5, fp
 8007df8:	2300      	movs	r3, #0
 8007dfa:	f857 1b04 	ldr.w	r1, [r7], #4
 8007dfe:	6828      	ldr	r0, [r5, #0]
 8007e00:	b28a      	uxth	r2, r1
 8007e02:	1a9a      	subs	r2, r3, r2
 8007e04:	0c09      	lsrs	r1, r1, #16
 8007e06:	fa12 f280 	uxtah	r2, r2, r0
 8007e0a:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
 8007e0e:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8007e12:	b291      	uxth	r1, r2
 8007e14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007e18:	45ba      	cmp	sl, r7
 8007e1a:	f845 1b04 	str.w	r1, [r5], #4
 8007e1e:	ea4f 4323 	mov.w	r3, r3, asr #16
 8007e22:	d2ea      	bcs.n	8007dfa <quorem+0xca>
 8007e24:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
 8007e28:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
 8007e2c:	b982      	cbnz	r2, 8007e50 <quorem+0x120>
 8007e2e:	1f1a      	subs	r2, r3, #4
 8007e30:	4593      	cmp	fp, r2
 8007e32:	d20b      	bcs.n	8007e4c <quorem+0x11c>
 8007e34:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8007e38:	b942      	cbnz	r2, 8007e4c <quorem+0x11c>
 8007e3a:	3b08      	subs	r3, #8
 8007e3c:	e002      	b.n	8007e44 <quorem+0x114>
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	3b04      	subs	r3, #4
 8007e42:	b91a      	cbnz	r2, 8007e4c <quorem+0x11c>
 8007e44:	459b      	cmp	fp, r3
 8007e46:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8007e4a:	d3f8      	bcc.n	8007e3e <quorem+0x10e>
 8007e4c:	f8c4 8010 	str.w	r8, [r4, #16]
 8007e50:	4648      	mov	r0, r9
 8007e52:	b003      	add	sp, #12
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	2000      	movs	r0, #0
 8007e5a:	4770      	bx	lr
 8007e5c:	0000      	movs	r0, r0
	...

08007e60 <_dtoa_r>:
 8007e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e64:	b099      	sub	sp, #100	; 0x64
 8007e66:	4604      	mov	r4, r0
 8007e68:	9103      	str	r1, [sp, #12]
 8007e6a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007e6c:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8007e6e:	9304      	str	r3, [sp, #16]
 8007e70:	4692      	mov	sl, r2
 8007e72:	ed8d 0b00 	vstr	d0, [sp]
 8007e76:	b141      	cbz	r1, 8007e8a <_dtoa_r+0x2a>
 8007e78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007e7a:	604a      	str	r2, [r1, #4]
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	4093      	lsls	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
 8007e82:	f001 fa4b 	bl	800931c <_Bfree>
 8007e86:	2300      	movs	r3, #0
 8007e88:	6423      	str	r3, [r4, #64]	; 0x40
 8007e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	4699      	mov	r9, r3
 8007e92:	db36      	blt.n	8007f02 <_dtoa_r+0xa2>
 8007e94:	2300      	movs	r3, #0
 8007e96:	602b      	str	r3, [r5, #0]
 8007e98:	4ba5      	ldr	r3, [pc, #660]	; (8008130 <_dtoa_r+0x2d0>)
 8007e9a:	461a      	mov	r2, r3
 8007e9c:	ea09 0303 	and.w	r3, r9, r3
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d017      	beq.n	8007ed4 <_dtoa_r+0x74>
 8007ea4:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	2300      	movs	r3, #0
 8007eac:	4630      	mov	r0, r6
 8007eae:	4639      	mov	r1, r7
 8007eb0:	f7f8 fe48 	bl	8000b44 <__aeabi_dcmpeq>
 8007eb4:	4680      	mov	r8, r0
 8007eb6:	2800      	cmp	r0, #0
 8007eb8:	d02b      	beq.n	8007f12 <_dtoa_r+0xb2>
 8007eba:	9a04      	ldr	r2, [sp, #16]
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	6013      	str	r3, [r2, #0]
 8007ec0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	f000 80cc 	beq.w	8008060 <_dtoa_r+0x200>
 8007ec8:	489a      	ldr	r0, [pc, #616]	; (8008134 <_dtoa_r+0x2d4>)
 8007eca:	6018      	str	r0, [r3, #0]
 8007ecc:	3801      	subs	r0, #1
 8007ece:	b019      	add	sp, #100	; 0x64
 8007ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed4:	9a04      	ldr	r2, [sp, #16]
 8007ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8007eda:	6013      	str	r3, [r2, #0]
 8007edc:	9b00      	ldr	r3, [sp, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 80a7 	beq.w	8008032 <_dtoa_r+0x1d2>
 8007ee4:	4894      	ldr	r0, [pc, #592]	; (8008138 <_dtoa_r+0x2d8>)
 8007ee6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d0f0      	beq.n	8007ece <_dtoa_r+0x6e>
 8007eec:	78c3      	ldrb	r3, [r0, #3]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 80b8 	beq.w	8008064 <_dtoa_r+0x204>
 8007ef4:	f100 0308 	add.w	r3, r0, #8
 8007ef8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8007efa:	6013      	str	r3, [r2, #0]
 8007efc:	b019      	add	sp, #100	; 0x64
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	9a01      	ldr	r2, [sp, #4]
 8007f04:	2301      	movs	r3, #1
 8007f06:	f022 4900 	bic.w	r9, r2, #2147483648	; 0x80000000
 8007f0a:	602b      	str	r3, [r5, #0]
 8007f0c:	f8cd 9004 	str.w	r9, [sp, #4]
 8007f10:	e7c2      	b.n	8007e98 <_dtoa_r+0x38>
 8007f12:	4620      	mov	r0, r4
 8007f14:	ec47 6b10 	vmov	d0, r6, r7
 8007f18:	a917      	add	r1, sp, #92	; 0x5c
 8007f1a:	aa16      	add	r2, sp, #88	; 0x58
 8007f1c:	f001 fc70 	bl	8009800 <__d2b>
 8007f20:	ea5f 5519 	movs.w	r5, r9, lsr #20
 8007f24:	4683      	mov	fp, r0
 8007f26:	f040 808d 	bne.w	8008044 <_dtoa_r+0x1e4>
 8007f2a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007f2e:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8007f30:	f46f 6382 	mvn.w	r3, #1040	; 0x410
 8007f34:	4445      	add	r5, r8
 8007f36:	429d      	cmp	r5, r3
 8007f38:	f2c0 829e 	blt.w	8008478 <_dtoa_r+0x618>
 8007f3c:	4a7f      	ldr	r2, [pc, #508]	; (800813c <_dtoa_r+0x2dc>)
 8007f3e:	1b52      	subs	r2, r2, r5
 8007f40:	fa09 f902 	lsl.w	r9, r9, r2
 8007f44:	9a00      	ldr	r2, [sp, #0]
 8007f46:	f205 4312 	addw	r3, r5, #1042	; 0x412
 8007f4a:	fa22 f003 	lsr.w	r0, r2, r3
 8007f4e:	ea49 0000 	orr.w	r0, r9, r0
 8007f52:	f7f8 fb19 	bl	8000588 <__aeabi_ui2d>
 8007f56:	2301      	movs	r3, #1
 8007f58:	3d01      	subs	r5, #1
 8007f5a:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8007f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f60:	2200      	movs	r2, #0
 8007f62:	4b77      	ldr	r3, [pc, #476]	; (8008140 <_dtoa_r+0x2e0>)
 8007f64:	f7f8 f9d2 	bl	800030c <__aeabi_dsub>
 8007f68:	a36b      	add	r3, pc, #428	; (adr r3, 8008118 <_dtoa_r+0x2b8>)
 8007f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f6e:	f7f8 fb81 	bl	8000674 <__aeabi_dmul>
 8007f72:	a36b      	add	r3, pc, #428	; (adr r3, 8008120 <_dtoa_r+0x2c0>)
 8007f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f78:	f7f8 f9ca 	bl	8000310 <__adddf3>
 8007f7c:	4606      	mov	r6, r0
 8007f7e:	4628      	mov	r0, r5
 8007f80:	460f      	mov	r7, r1
 8007f82:	f7f8 fb11 	bl	80005a8 <__aeabi_i2d>
 8007f86:	a368      	add	r3, pc, #416	; (adr r3, 8008128 <_dtoa_r+0x2c8>)
 8007f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f8c:	f7f8 fb72 	bl	8000674 <__aeabi_dmul>
 8007f90:	4602      	mov	r2, r0
 8007f92:	460b      	mov	r3, r1
 8007f94:	4630      	mov	r0, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	f7f8 f9ba 	bl	8000310 <__adddf3>
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	f7f8 fe02 	bl	8000ba8 <__aeabi_d2iz>
 8007fa4:	4639      	mov	r1, r7
 8007fa6:	9005      	str	r0, [sp, #20]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	4630      	mov	r0, r6
 8007fac:	2300      	movs	r3, #0
 8007fae:	f7f8 fdd3 	bl	8000b58 <__aeabi_dcmplt>
 8007fb2:	2800      	cmp	r0, #0
 8007fb4:	f040 81ab 	bne.w	800830e <_dtoa_r+0x4ae>
 8007fb8:	9b05      	ldr	r3, [sp, #20]
 8007fba:	2b16      	cmp	r3, #22
 8007fbc:	f200 81a4 	bhi.w	8008308 <_dtoa_r+0x4a8>
 8007fc0:	9a05      	ldr	r2, [sp, #20]
 8007fc2:	4b60      	ldr	r3, [pc, #384]	; (8008144 <_dtoa_r+0x2e4>)
 8007fc4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fd0:	f7f8 fde0 	bl	8000b94 <__aeabi_dcmpgt>
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	f000 8255 	beq.w	8008484 <_dtoa_r+0x624>
 8007fda:	9b05      	ldr	r3, [sp, #20]
 8007fdc:	3b01      	subs	r3, #1
 8007fde:	9305      	str	r3, [sp, #20]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	930d      	str	r3, [sp, #52]	; 0x34
 8007fe4:	ebc5 0508 	rsb	r5, r5, r8
 8007fe8:	1e6b      	subs	r3, r5, #1
 8007fea:	9306      	str	r3, [sp, #24]
 8007fec:	f100 81a6 	bmi.w	800833c <_dtoa_r+0x4dc>
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	9307      	str	r3, [sp, #28]
 8007ff4:	9b05      	ldr	r3, [sp, #20]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	f2c0 8197 	blt.w	800832a <_dtoa_r+0x4ca>
 8007ffc:	9a06      	ldr	r2, [sp, #24]
 8007ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8008000:	4611      	mov	r1, r2
 8008002:	4419      	add	r1, r3
 8008004:	2300      	movs	r3, #0
 8008006:	9106      	str	r1, [sp, #24]
 8008008:	930a      	str	r3, [sp, #40]	; 0x28
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	2b09      	cmp	r3, #9
 800800e:	d82b      	bhi.n	8008068 <_dtoa_r+0x208>
 8008010:	2b05      	cmp	r3, #5
 8008012:	f340 8673 	ble.w	8008cfc <_dtoa_r+0xe9c>
 8008016:	3b04      	subs	r3, #4
 8008018:	9303      	str	r3, [sp, #12]
 800801a:	2700      	movs	r7, #0
 800801c:	9b03      	ldr	r3, [sp, #12]
 800801e:	3b02      	subs	r3, #2
 8008020:	2b03      	cmp	r3, #3
 8008022:	f200 8651 	bhi.w	8008cc8 <_dtoa_r+0xe68>
 8008026:	e8df f013 	tbh	[pc, r3, lsl #1]
 800802a:	03d1      	.short	0x03d1
 800802c:	02b603c4 	.word	0x02b603c4
 8008030:	0666      	.short	0x0666
 8008032:	4b41      	ldr	r3, [pc, #260]	; (8008138 <_dtoa_r+0x2d8>)
 8008034:	4a44      	ldr	r2, [pc, #272]	; (8008148 <_dtoa_r+0x2e8>)
 8008036:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800803a:	2800      	cmp	r0, #0
 800803c:	bf14      	ite	ne
 800803e:	4618      	movne	r0, r3
 8008040:	4610      	moveq	r0, r2
 8008042:	e750      	b.n	8007ee6 <_dtoa_r+0x86>
 8008044:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008048:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800804c:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 8008050:	4630      	mov	r0, r6
 8008052:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008056:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800805a:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800805e:	e77f      	b.n	8007f60 <_dtoa_r+0x100>
 8008060:	483a      	ldr	r0, [pc, #232]	; (800814c <_dtoa_r+0x2ec>)
 8008062:	e734      	b.n	8007ece <_dtoa_r+0x6e>
 8008064:	1cc3      	adds	r3, r0, #3
 8008066:	e747      	b.n	8007ef8 <_dtoa_r+0x98>
 8008068:	2100      	movs	r1, #0
 800806a:	6461      	str	r1, [r4, #68]	; 0x44
 800806c:	4620      	mov	r0, r4
 800806e:	468a      	mov	sl, r1
 8008070:	9103      	str	r1, [sp, #12]
 8008072:	f001 f92d 	bl	80092d0 <_Balloc>
 8008076:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800807a:	9308      	str	r3, [sp, #32]
 800807c:	930e      	str	r3, [sp, #56]	; 0x38
 800807e:	2301      	movs	r3, #1
 8008080:	9009      	str	r0, [sp, #36]	; 0x24
 8008082:	6420      	str	r0, [r4, #64]	; 0x40
 8008084:	930b      	str	r3, [sp, #44]	; 0x2c
 8008086:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008088:	2b00      	cmp	r3, #0
 800808a:	f2c0 80d3 	blt.w	8008234 <_dtoa_r+0x3d4>
 800808e:	9a05      	ldr	r2, [sp, #20]
 8008090:	2a0e      	cmp	r2, #14
 8008092:	f300 80cf 	bgt.w	8008234 <_dtoa_r+0x3d4>
 8008096:	4b2b      	ldr	r3, [pc, #172]	; (8008144 <_dtoa_r+0x2e4>)
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80080a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80080a4:	f2c0 8395 	blt.w	80087d2 <_dtoa_r+0x972>
 80080a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80080ac:	4642      	mov	r2, r8
 80080ae:	464b      	mov	r3, r9
 80080b0:	4630      	mov	r0, r6
 80080b2:	4639      	mov	r1, r7
 80080b4:	f7f8 fc08 	bl	80008c8 <__aeabi_ddiv>
 80080b8:	f7f8 fd76 	bl	8000ba8 <__aeabi_d2iz>
 80080bc:	4682      	mov	sl, r0
 80080be:	f7f8 fa73 	bl	80005a8 <__aeabi_i2d>
 80080c2:	4642      	mov	r2, r8
 80080c4:	464b      	mov	r3, r9
 80080c6:	f7f8 fad5 	bl	8000674 <__aeabi_dmul>
 80080ca:	460b      	mov	r3, r1
 80080cc:	4602      	mov	r2, r0
 80080ce:	4639      	mov	r1, r7
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7f8 f91b 	bl	800030c <__aeabi_dsub>
 80080d6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80080d8:	f10a 0330 	add.w	r3, sl, #48	; 0x30
 80080dc:	702b      	strb	r3, [r5, #0]
 80080de:	9b08      	ldr	r3, [sp, #32]
 80080e0:	2b01      	cmp	r3, #1
 80080e2:	4606      	mov	r6, r0
 80080e4:	460f      	mov	r7, r1
 80080e6:	f105 0501 	add.w	r5, r5, #1
 80080ea:	d063      	beq.n	80081b4 <_dtoa_r+0x354>
 80080ec:	2200      	movs	r2, #0
 80080ee:	4b18      	ldr	r3, [pc, #96]	; (8008150 <_dtoa_r+0x2f0>)
 80080f0:	f7f8 fac0 	bl	8000674 <__aeabi_dmul>
 80080f4:	2200      	movs	r2, #0
 80080f6:	2300      	movs	r3, #0
 80080f8:	4606      	mov	r6, r0
 80080fa:	460f      	mov	r7, r1
 80080fc:	f7f8 fd22 	bl	8000b44 <__aeabi_dcmpeq>
 8008100:	2800      	cmp	r0, #0
 8008102:	f040 8084 	bne.w	800820e <_dtoa_r+0x3ae>
 8008106:	f8cd b000 	str.w	fp, [sp]
 800810a:	9403      	str	r4, [sp, #12]
 800810c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8008110:	9c08      	ldr	r4, [sp, #32]
 8008112:	e02a      	b.n	800816a <_dtoa_r+0x30a>
 8008114:	f3af 8000 	nop.w
 8008118:	636f4361 	.word	0x636f4361
 800811c:	3fd287a7 	.word	0x3fd287a7
 8008120:	8b60c8b3 	.word	0x8b60c8b3
 8008124:	3fc68a28 	.word	0x3fc68a28
 8008128:	509f79fb 	.word	0x509f79fb
 800812c:	3fd34413 	.word	0x3fd34413
 8008130:	7ff00000 	.word	0x7ff00000
 8008134:	08016625 	.word	0x08016625
 8008138:	08019cd8 	.word	0x08019cd8
 800813c:	fffffc0e 	.word	0xfffffc0e
 8008140:	3ff80000 	.word	0x3ff80000
 8008144:	08019ce8 	.word	0x08019ce8
 8008148:	08019ccc 	.word	0x08019ccc
 800814c:	08016624 	.word	0x08016624
 8008150:	40240000 	.word	0x40240000
 8008154:	f7f8 fa8e 	bl	8000674 <__aeabi_dmul>
 8008158:	2200      	movs	r2, #0
 800815a:	2300      	movs	r3, #0
 800815c:	4606      	mov	r6, r0
 800815e:	460f      	mov	r7, r1
 8008160:	f7f8 fcf0 	bl	8000b44 <__aeabi_dcmpeq>
 8008164:	2800      	cmp	r0, #0
 8008166:	f040 83e4 	bne.w	8008932 <_dtoa_r+0xad2>
 800816a:	4642      	mov	r2, r8
 800816c:	464b      	mov	r3, r9
 800816e:	4630      	mov	r0, r6
 8008170:	4639      	mov	r1, r7
 8008172:	f7f8 fba9 	bl	80008c8 <__aeabi_ddiv>
 8008176:	f7f8 fd17 	bl	8000ba8 <__aeabi_d2iz>
 800817a:	4682      	mov	sl, r0
 800817c:	f7f8 fa14 	bl	80005a8 <__aeabi_i2d>
 8008180:	4642      	mov	r2, r8
 8008182:	464b      	mov	r3, r9
 8008184:	f7f8 fa76 	bl	8000674 <__aeabi_dmul>
 8008188:	4602      	mov	r2, r0
 800818a:	460b      	mov	r3, r1
 800818c:	4630      	mov	r0, r6
 800818e:	4639      	mov	r1, r7
 8008190:	f7f8 f8bc 	bl	800030c <__aeabi_dsub>
 8008194:	f10a 0e30 	add.w	lr, sl, #48	; 0x30
 8008198:	f805 eb01 	strb.w	lr, [r5], #1
 800819c:	ebcb 0e05 	rsb	lr, fp, r5
 80081a0:	4574      	cmp	r4, lr
 80081a2:	4606      	mov	r6, r0
 80081a4:	460f      	mov	r7, r1
 80081a6:	f04f 0200 	mov.w	r2, #0
 80081aa:	4bb7      	ldr	r3, [pc, #732]	; (8008488 <_dtoa_r+0x628>)
 80081ac:	d1d2      	bne.n	8008154 <_dtoa_r+0x2f4>
 80081ae:	f8dd b000 	ldr.w	fp, [sp]
 80081b2:	9c03      	ldr	r4, [sp, #12]
 80081b4:	4632      	mov	r2, r6
 80081b6:	463b      	mov	r3, r7
 80081b8:	4630      	mov	r0, r6
 80081ba:	4639      	mov	r1, r7
 80081bc:	f7f8 f8a8 	bl	8000310 <__adddf3>
 80081c0:	4606      	mov	r6, r0
 80081c2:	460f      	mov	r7, r1
 80081c4:	4640      	mov	r0, r8
 80081c6:	4649      	mov	r1, r9
 80081c8:	4632      	mov	r2, r6
 80081ca:	463b      	mov	r3, r7
 80081cc:	f7f8 fcc4 	bl	8000b58 <__aeabi_dcmplt>
 80081d0:	b948      	cbnz	r0, 80081e6 <_dtoa_r+0x386>
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	4632      	mov	r2, r6
 80081d8:	463b      	mov	r3, r7
 80081da:	f7f8 fcb3 	bl	8000b44 <__aeabi_dcmpeq>
 80081de:	b1b0      	cbz	r0, 800820e <_dtoa_r+0x3ae>
 80081e0:	f01a 0f01 	tst.w	sl, #1
 80081e4:	d013      	beq.n	800820e <_dtoa_r+0x3ae>
 80081e6:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 80081ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081ec:	1e6b      	subs	r3, r5, #1
 80081ee:	e004      	b.n	80081fa <_dtoa_r+0x39a>
 80081f0:	428b      	cmp	r3, r1
 80081f2:	f000 8448 	beq.w	8008a86 <_dtoa_r+0xc26>
 80081f6:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
 80081fa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80081fe:	f103 0501 	add.w	r5, r3, #1
 8008202:	461a      	mov	r2, r3
 8008204:	d0f4      	beq.n	80081f0 <_dtoa_r+0x390>
 8008206:	f108 0301 	add.w	r3, r8, #1
 800820a:	b2db      	uxtb	r3, r3
 800820c:	7013      	strb	r3, [r2, #0]
 800820e:	4620      	mov	r0, r4
 8008210:	4659      	mov	r1, fp
 8008212:	f001 f883 	bl	800931c <_Bfree>
 8008216:	2200      	movs	r2, #0
 8008218:	9b05      	ldr	r3, [sp, #20]
 800821a:	702a      	strb	r2, [r5, #0]
 800821c:	9a04      	ldr	r2, [sp, #16]
 800821e:	3301      	adds	r3, #1
 8008220:	6013      	str	r3, [r2, #0]
 8008222:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008224:	2b00      	cmp	r3, #0
 8008226:	f000 834b 	beq.w	80088c0 <_dtoa_r+0xa60>
 800822a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800822c:	601d      	str	r5, [r3, #0]
 800822e:	b019      	add	sp, #100	; 0x64
 8008230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008234:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008236:	2a00      	cmp	r2, #0
 8008238:	f000 8085 	beq.w	8008346 <_dtoa_r+0x4e6>
 800823c:	9a03      	ldr	r2, [sp, #12]
 800823e:	2a01      	cmp	r2, #1
 8008240:	f340 830a 	ble.w	8008858 <_dtoa_r+0x9f8>
 8008244:	9b08      	ldr	r3, [sp, #32]
 8008246:	1e5f      	subs	r7, r3, #1
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	42bb      	cmp	r3, r7
 800824c:	f2c0 83a6 	blt.w	800899c <_dtoa_r+0xb3c>
 8008250:	1bdf      	subs	r7, r3, r7
 8008252:	9b08      	ldr	r3, [sp, #32]
 8008254:	2b00      	cmp	r3, #0
 8008256:	f2c0 84a4 	blt.w	8008ba2 <_dtoa_r+0xd42>
 800825a:	9d07      	ldr	r5, [sp, #28]
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	9a07      	ldr	r2, [sp, #28]
 8008260:	441a      	add	r2, r3
 8008262:	9207      	str	r2, [sp, #28]
 8008264:	9a06      	ldr	r2, [sp, #24]
 8008266:	4620      	mov	r0, r4
 8008268:	441a      	add	r2, r3
 800826a:	2101      	movs	r1, #1
 800826c:	9206      	str	r2, [sp, #24]
 800826e:	f001 f8ef 	bl	8009450 <__i2b>
 8008272:	4606      	mov	r6, r0
 8008274:	b165      	cbz	r5, 8008290 <_dtoa_r+0x430>
 8008276:	9906      	ldr	r1, [sp, #24]
 8008278:	2900      	cmp	r1, #0
 800827a:	460b      	mov	r3, r1
 800827c:	dd08      	ble.n	8008290 <_dtoa_r+0x430>
 800827e:	42a9      	cmp	r1, r5
 8008280:	9a07      	ldr	r2, [sp, #28]
 8008282:	bfa8      	it	ge
 8008284:	462b      	movge	r3, r5
 8008286:	1ad2      	subs	r2, r2, r3
 8008288:	1aed      	subs	r5, r5, r3
 800828a:	1acb      	subs	r3, r1, r3
 800828c:	9207      	str	r2, [sp, #28]
 800828e:	9306      	str	r3, [sp, #24]
 8008290:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008292:	2b00      	cmp	r3, #0
 8008294:	dd1a      	ble.n	80082cc <_dtoa_r+0x46c>
 8008296:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8378 	beq.w	800898e <_dtoa_r+0xb2e>
 800829e:	2f00      	cmp	r7, #0
 80082a0:	dd10      	ble.n	80082c4 <_dtoa_r+0x464>
 80082a2:	4631      	mov	r1, r6
 80082a4:	463a      	mov	r2, r7
 80082a6:	4620      	mov	r0, r4
 80082a8:	f001 f976 	bl	8009598 <__pow5mult>
 80082ac:	4606      	mov	r6, r0
 80082ae:	465a      	mov	r2, fp
 80082b0:	4631      	mov	r1, r6
 80082b2:	4620      	mov	r0, r4
 80082b4:	f001 f8d6 	bl	8009464 <__multiply>
 80082b8:	4659      	mov	r1, fp
 80082ba:	4680      	mov	r8, r0
 80082bc:	4620      	mov	r0, r4
 80082be:	f001 f82d 	bl	800931c <_Bfree>
 80082c2:	46c3      	mov	fp, r8
 80082c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082c6:	1bda      	subs	r2, r3, r7
 80082c8:	f040 82a5 	bne.w	8008816 <_dtoa_r+0x9b6>
 80082cc:	4620      	mov	r0, r4
 80082ce:	2101      	movs	r1, #1
 80082d0:	f001 f8be 	bl	8009450 <__i2b>
 80082d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	4680      	mov	r8, r0
 80082da:	dd38      	ble.n	800834e <_dtoa_r+0x4ee>
 80082dc:	4601      	mov	r1, r0
 80082de:	461a      	mov	r2, r3
 80082e0:	4620      	mov	r0, r4
 80082e2:	f001 f959 	bl	8009598 <__pow5mult>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	2b01      	cmp	r3, #1
 80082ea:	4680      	mov	r8, r0
 80082ec:	f340 8299 	ble.w	8008822 <_dtoa_r+0x9c2>
 80082f0:	f04f 0900 	mov.w	r9, #0
 80082f4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80082f8:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 80082fc:	6918      	ldr	r0, [r3, #16]
 80082fe:	f001 f859 	bl	80093b4 <__hi0bits>
 8008302:	f1c0 0020 	rsb	r0, r0, #32
 8008306:	e02c      	b.n	8008362 <_dtoa_r+0x502>
 8008308:	2301      	movs	r3, #1
 800830a:	930d      	str	r3, [sp, #52]	; 0x34
 800830c:	e66a      	b.n	8007fe4 <_dtoa_r+0x184>
 800830e:	9805      	ldr	r0, [sp, #20]
 8008310:	f7f8 f94a 	bl	80005a8 <__aeabi_i2d>
 8008314:	4632      	mov	r2, r6
 8008316:	463b      	mov	r3, r7
 8008318:	f7f8 fc14 	bl	8000b44 <__aeabi_dcmpeq>
 800831c:	2800      	cmp	r0, #0
 800831e:	f47f ae4b 	bne.w	8007fb8 <_dtoa_r+0x158>
 8008322:	9b05      	ldr	r3, [sp, #20]
 8008324:	3b01      	subs	r3, #1
 8008326:	9305      	str	r3, [sp, #20]
 8008328:	e646      	b.n	8007fb8 <_dtoa_r+0x158>
 800832a:	9a07      	ldr	r2, [sp, #28]
 800832c:	9b05      	ldr	r3, [sp, #20]
 800832e:	1ad2      	subs	r2, r2, r3
 8008330:	425b      	negs	r3, r3
 8008332:	930a      	str	r3, [sp, #40]	; 0x28
 8008334:	2300      	movs	r3, #0
 8008336:	9207      	str	r2, [sp, #28]
 8008338:	930c      	str	r3, [sp, #48]	; 0x30
 800833a:	e666      	b.n	800800a <_dtoa_r+0x1aa>
 800833c:	425b      	negs	r3, r3
 800833e:	9307      	str	r3, [sp, #28]
 8008340:	2300      	movs	r3, #0
 8008342:	9306      	str	r3, [sp, #24]
 8008344:	e656      	b.n	8007ff4 <_dtoa_r+0x194>
 8008346:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008348:	9d07      	ldr	r5, [sp, #28]
 800834a:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800834c:	e792      	b.n	8008274 <_dtoa_r+0x414>
 800834e:	9b03      	ldr	r3, [sp, #12]
 8008350:	2b01      	cmp	r3, #1
 8008352:	f340 82b8 	ble.w	80088c6 <_dtoa_r+0xa66>
 8008356:	f04f 0900 	mov.w	r9, #0
 800835a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800835c:	2b00      	cmp	r3, #0
 800835e:	d1c9      	bne.n	80082f4 <_dtoa_r+0x494>
 8008360:	2001      	movs	r0, #1
 8008362:	9b06      	ldr	r3, [sp, #24]
 8008364:	4418      	add	r0, r3
 8008366:	f010 001f 	ands.w	r0, r0, #31
 800836a:	f000 8083 	beq.w	8008474 <_dtoa_r+0x614>
 800836e:	f1c0 0320 	rsb	r3, r0, #32
 8008372:	2b04      	cmp	r3, #4
 8008374:	f340 84b9 	ble.w	8008cea <_dtoa_r+0xe8a>
 8008378:	f1c0 001c 	rsb	r0, r0, #28
 800837c:	9b07      	ldr	r3, [sp, #28]
 800837e:	4403      	add	r3, r0
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	9b06      	ldr	r3, [sp, #24]
 8008384:	4403      	add	r3, r0
 8008386:	4405      	add	r5, r0
 8008388:	9306      	str	r3, [sp, #24]
 800838a:	9b07      	ldr	r3, [sp, #28]
 800838c:	2b00      	cmp	r3, #0
 800838e:	dd05      	ble.n	800839c <_dtoa_r+0x53c>
 8008390:	4659      	mov	r1, fp
 8008392:	461a      	mov	r2, r3
 8008394:	4620      	mov	r0, r4
 8008396:	f001 f94f 	bl	8009638 <__lshift>
 800839a:	4683      	mov	fp, r0
 800839c:	9b06      	ldr	r3, [sp, #24]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	dd05      	ble.n	80083ae <_dtoa_r+0x54e>
 80083a2:	4641      	mov	r1, r8
 80083a4:	461a      	mov	r2, r3
 80083a6:	4620      	mov	r0, r4
 80083a8:	f001 f946 	bl	8009638 <__lshift>
 80083ac:	4680      	mov	r8, r0
 80083ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f040 826a 	bne.w	800888a <_dtoa_r+0xa2a>
 80083b6:	9b08      	ldr	r3, [sp, #32]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	f340 8297 	ble.w	80088ec <_dtoa_r+0xa8c>
 80083be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d171      	bne.n	80084a8 <_dtoa_r+0x648>
 80083c4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80083c8:	9f08      	ldr	r7, [sp, #32]
 80083ca:	464d      	mov	r5, r9
 80083cc:	e002      	b.n	80083d4 <_dtoa_r+0x574>
 80083ce:	f000 ffaf 	bl	8009330 <__multadd>
 80083d2:	4683      	mov	fp, r0
 80083d4:	4641      	mov	r1, r8
 80083d6:	4658      	mov	r0, fp
 80083d8:	f7ff fcaa 	bl	8007d30 <quorem>
 80083dc:	f100 0c30 	add.w	ip, r0, #48	; 0x30
 80083e0:	f805 cb01 	strb.w	ip, [r5], #1
 80083e4:	ebc9 0305 	rsb	r3, r9, r5
 80083e8:	42bb      	cmp	r3, r7
 80083ea:	4620      	mov	r0, r4
 80083ec:	4659      	mov	r1, fp
 80083ee:	f04f 020a 	mov.w	r2, #10
 80083f2:	f04f 0300 	mov.w	r3, #0
 80083f6:	dbea      	blt.n	80083ce <_dtoa_r+0x56e>
 80083f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083fa:	9a08      	ldr	r2, [sp, #32]
 80083fc:	2a01      	cmp	r2, #1
 80083fe:	bfac      	ite	ge
 8008400:	189b      	addge	r3, r3, r2
 8008402:	3301      	addlt	r3, #1
 8008404:	461d      	mov	r5, r3
 8008406:	f04f 0a00 	mov.w	sl, #0
 800840a:	4659      	mov	r1, fp
 800840c:	2201      	movs	r2, #1
 800840e:	4620      	mov	r0, r4
 8008410:	f8cd c000 	str.w	ip, [sp]
 8008414:	f001 f910 	bl	8009638 <__lshift>
 8008418:	4641      	mov	r1, r8
 800841a:	4683      	mov	fp, r0
 800841c:	f001 f962 	bl	80096e4 <__mcmp>
 8008420:	2800      	cmp	r0, #0
 8008422:	f8dd c000 	ldr.w	ip, [sp]
 8008426:	f340 82ef 	ble.w	8008a08 <_dtoa_r+0xba8>
 800842a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800842e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008430:	1e6b      	subs	r3, r5, #1
 8008432:	e004      	b.n	800843e <_dtoa_r+0x5de>
 8008434:	428b      	cmp	r3, r1
 8008436:	f000 8275 	beq.w	8008924 <_dtoa_r+0xac4>
 800843a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800843e:	2a39      	cmp	r2, #57	; 0x39
 8008440:	f103 0501 	add.w	r5, r3, #1
 8008444:	d0f6      	beq.n	8008434 <_dtoa_r+0x5d4>
 8008446:	3201      	adds	r2, #1
 8008448:	701a      	strb	r2, [r3, #0]
 800844a:	4641      	mov	r1, r8
 800844c:	4620      	mov	r0, r4
 800844e:	f000 ff65 	bl	800931c <_Bfree>
 8008452:	2e00      	cmp	r6, #0
 8008454:	f43f aedb 	beq.w	800820e <_dtoa_r+0x3ae>
 8008458:	f1ba 0f00 	cmp.w	sl, #0
 800845c:	d005      	beq.n	800846a <_dtoa_r+0x60a>
 800845e:	45b2      	cmp	sl, r6
 8008460:	d003      	beq.n	800846a <_dtoa_r+0x60a>
 8008462:	4651      	mov	r1, sl
 8008464:	4620      	mov	r0, r4
 8008466:	f000 ff59 	bl	800931c <_Bfree>
 800846a:	4631      	mov	r1, r6
 800846c:	4620      	mov	r0, r4
 800846e:	f000 ff55 	bl	800931c <_Bfree>
 8008472:	e6cc      	b.n	800820e <_dtoa_r+0x3ae>
 8008474:	201c      	movs	r0, #28
 8008476:	e781      	b.n	800837c <_dtoa_r+0x51c>
 8008478:	4b04      	ldr	r3, [pc, #16]	; (800848c <_dtoa_r+0x62c>)
 800847a:	9a00      	ldr	r2, [sp, #0]
 800847c:	1b5b      	subs	r3, r3, r5
 800847e:	fa02 f003 	lsl.w	r0, r2, r3
 8008482:	e566      	b.n	8007f52 <_dtoa_r+0xf2>
 8008484:	900d      	str	r0, [sp, #52]	; 0x34
 8008486:	e5ad      	b.n	8007fe4 <_dtoa_r+0x184>
 8008488:	40240000 	.word	0x40240000
 800848c:	fffffbee 	.word	0xfffffbee
 8008490:	4631      	mov	r1, r6
 8008492:	2300      	movs	r3, #0
 8008494:	4620      	mov	r0, r4
 8008496:	220a      	movs	r2, #10
 8008498:	f000 ff4a 	bl	8009330 <__multadd>
 800849c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	4606      	mov	r6, r0
 80084a2:	f340 840b 	ble.w	8008cbc <_dtoa_r+0xe5c>
 80084a6:	9308      	str	r3, [sp, #32]
 80084a8:	2d00      	cmp	r5, #0
 80084aa:	dd05      	ble.n	80084b8 <_dtoa_r+0x658>
 80084ac:	4631      	mov	r1, r6
 80084ae:	462a      	mov	r2, r5
 80084b0:	4620      	mov	r0, r4
 80084b2:	f001 f8c1 	bl	8009638 <__lshift>
 80084b6:	4606      	mov	r6, r0
 80084b8:	f1b9 0f00 	cmp.w	r9, #0
 80084bc:	f040 82ed 	bne.w	8008a9a <_dtoa_r+0xc3a>
 80084c0:	46b1      	mov	r9, r6
 80084c2:	9b08      	ldr	r3, [sp, #32]
 80084c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084c6:	3b01      	subs	r3, #1
 80084c8:	18d3      	adds	r3, r2, r3
 80084ca:	9308      	str	r3, [sp, #32]
 80084cc:	9b00      	ldr	r3, [sp, #0]
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	930a      	str	r3, [sp, #40]	; 0x28
 80084d4:	4617      	mov	r7, r2
 80084d6:	4641      	mov	r1, r8
 80084d8:	4658      	mov	r0, fp
 80084da:	f7ff fc29 	bl	8007d30 <quorem>
 80084de:	4631      	mov	r1, r6
 80084e0:	4605      	mov	r5, r0
 80084e2:	4658      	mov	r0, fp
 80084e4:	f001 f8fe 	bl	80096e4 <__mcmp>
 80084e8:	464a      	mov	r2, r9
 80084ea:	4682      	mov	sl, r0
 80084ec:	4641      	mov	r1, r8
 80084ee:	4620      	mov	r0, r4
 80084f0:	f001 f91c 	bl	800972c <__mdiff>
 80084f4:	68c2      	ldr	r2, [r0, #12]
 80084f6:	4603      	mov	r3, r0
 80084f8:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	f040 81ba 	bne.w	8008876 <_dtoa_r+0xa16>
 8008502:	4619      	mov	r1, r3
 8008504:	4658      	mov	r0, fp
 8008506:	f8cd c01c 	str.w	ip, [sp, #28]
 800850a:	9306      	str	r3, [sp, #24]
 800850c:	f001 f8ea 	bl	80096e4 <__mcmp>
 8008510:	9b06      	ldr	r3, [sp, #24]
 8008512:	9000      	str	r0, [sp, #0]
 8008514:	4619      	mov	r1, r3
 8008516:	4620      	mov	r0, r4
 8008518:	f000 ff00 	bl	800931c <_Bfree>
 800851c:	9a00      	ldr	r2, [sp, #0]
 800851e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008522:	b92a      	cbnz	r2, 8008530 <_dtoa_r+0x6d0>
 8008524:	9b03      	ldr	r3, [sp, #12]
 8008526:	b91b      	cbnz	r3, 8008530 <_dtoa_r+0x6d0>
 8008528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 83aa 	beq.w	8008c84 <_dtoa_r+0xe24>
 8008530:	f1ba 0f00 	cmp.w	sl, #0
 8008534:	f2c0 824a 	blt.w	80089cc <_dtoa_r+0xb6c>
 8008538:	d105      	bne.n	8008546 <_dtoa_r+0x6e6>
 800853a:	9b03      	ldr	r3, [sp, #12]
 800853c:	b91b      	cbnz	r3, 8008546 <_dtoa_r+0x6e6>
 800853e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008540:	2b00      	cmp	r3, #0
 8008542:	f000 8243 	beq.w	80089cc <_dtoa_r+0xb6c>
 8008546:	2a00      	cmp	r2, #0
 8008548:	f300 82bb 	bgt.w	8008ac2 <_dtoa_r+0xc62>
 800854c:	9b08      	ldr	r3, [sp, #32]
 800854e:	f887 c000 	strb.w	ip, [r7]
 8008552:	f107 0a01 	add.w	sl, r7, #1
 8008556:	429f      	cmp	r7, r3
 8008558:	4655      	mov	r5, sl
 800855a:	f000 82be 	beq.w	8008ada <_dtoa_r+0xc7a>
 800855e:	4659      	mov	r1, fp
 8008560:	220a      	movs	r2, #10
 8008562:	2300      	movs	r3, #0
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fee3 	bl	8009330 <__multadd>
 800856a:	454e      	cmp	r6, r9
 800856c:	4683      	mov	fp, r0
 800856e:	4631      	mov	r1, r6
 8008570:	4620      	mov	r0, r4
 8008572:	f04f 020a 	mov.w	r2, #10
 8008576:	f04f 0300 	mov.w	r3, #0
 800857a:	f000 8176 	beq.w	800886a <_dtoa_r+0xa0a>
 800857e:	f000 fed7 	bl	8009330 <__multadd>
 8008582:	4649      	mov	r1, r9
 8008584:	4606      	mov	r6, r0
 8008586:	220a      	movs	r2, #10
 8008588:	4620      	mov	r0, r4
 800858a:	2300      	movs	r3, #0
 800858c:	f000 fed0 	bl	8009330 <__multadd>
 8008590:	4657      	mov	r7, sl
 8008592:	4681      	mov	r9, r0
 8008594:	e79f      	b.n	80084d6 <_dtoa_r+0x676>
 8008596:	2301      	movs	r3, #1
 8008598:	930b      	str	r3, [sp, #44]	; 0x2c
 800859a:	f1ba 0f00 	cmp.w	sl, #0
 800859e:	f340 820c 	ble.w	80089ba <_dtoa_r+0xb5a>
 80085a2:	4656      	mov	r6, sl
 80085a4:	4655      	mov	r5, sl
 80085a6:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80085aa:	f8cd a020 	str.w	sl, [sp, #32]
 80085ae:	2100      	movs	r1, #0
 80085b0:	2e17      	cmp	r6, #23
 80085b2:	6461      	str	r1, [r4, #68]	; 0x44
 80085b4:	d90a      	bls.n	80085cc <_dtoa_r+0x76c>
 80085b6:	2201      	movs	r2, #1
 80085b8:	2304      	movs	r3, #4
 80085ba:	005b      	lsls	r3, r3, #1
 80085bc:	f103 0014 	add.w	r0, r3, #20
 80085c0:	4286      	cmp	r6, r0
 80085c2:	4611      	mov	r1, r2
 80085c4:	f102 0201 	add.w	r2, r2, #1
 80085c8:	d2f7      	bcs.n	80085ba <_dtoa_r+0x75a>
 80085ca:	6461      	str	r1, [r4, #68]	; 0x44
 80085cc:	4620      	mov	r0, r4
 80085ce:	f000 fe7f 	bl	80092d0 <_Balloc>
 80085d2:	2d0e      	cmp	r5, #14
 80085d4:	9009      	str	r0, [sp, #36]	; 0x24
 80085d6:	6420      	str	r0, [r4, #64]	; 0x40
 80085d8:	f63f ad55 	bhi.w	8008086 <_dtoa_r+0x226>
 80085dc:	2f00      	cmp	r7, #0
 80085de:	f43f ad52 	beq.w	8008086 <_dtoa_r+0x226>
 80085e2:	ed9d 7b00 	vldr	d7, [sp]
 80085e6:	9905      	ldr	r1, [sp, #20]
 80085e8:	2900      	cmp	r1, #0
 80085ea:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80085ee:	f340 8223 	ble.w	8008a38 <_dtoa_r+0xbd8>
 80085f2:	4bb7      	ldr	r3, [pc, #732]	; (80088d0 <_dtoa_r+0xa70>)
 80085f4:	f001 020f 	and.w	r2, r1, #15
 80085f8:	110d      	asrs	r5, r1, #4
 80085fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085fe:	06e9      	lsls	r1, r5, #27
 8008600:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008604:	f140 81d2 	bpl.w	80089ac <_dtoa_r+0xb4c>
 8008608:	4bb2      	ldr	r3, [pc, #712]	; (80088d4 <_dtoa_r+0xa74>)
 800860a:	ec51 0b17 	vmov	r0, r1, d7
 800860e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008612:	f7f8 f959 	bl	80008c8 <__aeabi_ddiv>
 8008616:	e9cd 0100 	strd	r0, r1, [sp]
 800861a:	f005 050f 	and.w	r5, r5, #15
 800861e:	f04f 0803 	mov.w	r8, #3
 8008622:	b18d      	cbz	r5, 8008648 <_dtoa_r+0x7e8>
 8008624:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 80088d4 <_dtoa_r+0xa74>
 8008628:	4630      	mov	r0, r6
 800862a:	4639      	mov	r1, r7
 800862c:	07ea      	lsls	r2, r5, #31
 800862e:	d505      	bpl.n	800863c <_dtoa_r+0x7dc>
 8008630:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008634:	f7f8 f81e 	bl	8000674 <__aeabi_dmul>
 8008638:	f108 0801 	add.w	r8, r8, #1
 800863c:	106d      	asrs	r5, r5, #1
 800863e:	f109 0908 	add.w	r9, r9, #8
 8008642:	d1f3      	bne.n	800862c <_dtoa_r+0x7cc>
 8008644:	4606      	mov	r6, r0
 8008646:	460f      	mov	r7, r1
 8008648:	e9dd 0100 	ldrd	r0, r1, [sp]
 800864c:	4632      	mov	r2, r6
 800864e:	463b      	mov	r3, r7
 8008650:	f7f8 f93a 	bl	80008c8 <__aeabi_ddiv>
 8008654:	e9cd 0100 	strd	r0, r1, [sp]
 8008658:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800865a:	b143      	cbz	r3, 800866e <_dtoa_r+0x80e>
 800865c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008660:	2200      	movs	r2, #0
 8008662:	4b9d      	ldr	r3, [pc, #628]	; (80088d8 <_dtoa_r+0xa78>)
 8008664:	f7f8 fa78 	bl	8000b58 <__aeabi_dcmplt>
 8008668:	2800      	cmp	r0, #0
 800866a:	f040 82ae 	bne.w	8008bca <_dtoa_r+0xd6a>
 800866e:	4640      	mov	r0, r8
 8008670:	f7f7 ff9a 	bl	80005a8 <__aeabi_i2d>
 8008674:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008678:	f7f7 fffc 	bl	8000674 <__aeabi_dmul>
 800867c:	4b97      	ldr	r3, [pc, #604]	; (80088dc <_dtoa_r+0xa7c>)
 800867e:	2200      	movs	r2, #0
 8008680:	f7f7 fe46 	bl	8000310 <__adddf3>
 8008684:	9b08      	ldr	r3, [sp, #32]
 8008686:	4606      	mov	r6, r0
 8008688:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 800868c:	2b00      	cmp	r3, #0
 800868e:	f000 8162 	beq.w	8008956 <_dtoa_r+0xaf6>
 8008692:	9b05      	ldr	r3, [sp, #20]
 8008694:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008698:	9314      	str	r3, [sp, #80]	; 0x50
 800869a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 8223 	beq.w	8008ae8 <_dtoa_r+0xc88>
 80086a2:	4b8b      	ldr	r3, [pc, #556]	; (80088d0 <_dtoa_r+0xa70>)
 80086a4:	498e      	ldr	r1, [pc, #568]	; (80088e0 <_dtoa_r+0xa80>)
 80086a6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80086aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086ae:	2000      	movs	r0, #0
 80086b0:	f7f8 f90a 	bl	80008c8 <__aeabi_ddiv>
 80086b4:	4632      	mov	r2, r6
 80086b6:	463b      	mov	r3, r7
 80086b8:	f7f7 fe28 	bl	800030c <__aeabi_dsub>
 80086bc:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086c0:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80086c4:	4639      	mov	r1, r7
 80086c6:	4630      	mov	r0, r6
 80086c8:	f7f8 fa6e 	bl	8000ba8 <__aeabi_d2iz>
 80086cc:	4605      	mov	r5, r0
 80086ce:	f7f7 ff6b 	bl	80005a8 <__aeabi_i2d>
 80086d2:	3530      	adds	r5, #48	; 0x30
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	4630      	mov	r0, r6
 80086da:	4639      	mov	r1, r7
 80086dc:	f7f7 fe16 	bl	800030c <__aeabi_dsub>
 80086e0:	fa5f f885 	uxtb.w	r8, r5
 80086e4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80086e6:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80086ea:	f885 8000 	strb.w	r8, [r5]
 80086ee:	4606      	mov	r6, r0
 80086f0:	460f      	mov	r7, r1
 80086f2:	3501      	adds	r5, #1
 80086f4:	f7f8 fa30 	bl	8000b58 <__aeabi_dcmplt>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f040 82a7 	bne.w	8008c4c <_dtoa_r+0xdec>
 80086fe:	4632      	mov	r2, r6
 8008700:	463b      	mov	r3, r7
 8008702:	2000      	movs	r0, #0
 8008704:	4974      	ldr	r1, [pc, #464]	; (80088d8 <_dtoa_r+0xa78>)
 8008706:	f7f7 fe01 	bl	800030c <__aeabi_dsub>
 800870a:	4602      	mov	r2, r0
 800870c:	460b      	mov	r3, r1
 800870e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008712:	f7f8 fa3f 	bl	8000b94 <__aeabi_dcmpgt>
 8008716:	2800      	cmp	r0, #0
 8008718:	f040 82ad 	bne.w	8008c76 <_dtoa_r+0xe16>
 800871c:	f1b9 0f01 	cmp.w	r9, #1
 8008720:	f340 8184 	ble.w	8008a2c <_dtoa_r+0xbcc>
 8008724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008726:	f8cd b000 	str.w	fp, [sp]
 800872a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 800872e:	4499      	add	r9, r3
 8008730:	46a0      	mov	r8, r4
 8008732:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
 8008736:	e00d      	b.n	8008754 <_dtoa_r+0x8f4>
 8008738:	2000      	movs	r0, #0
 800873a:	4967      	ldr	r1, [pc, #412]	; (80088d8 <_dtoa_r+0xa78>)
 800873c:	f7f7 fde6 	bl	800030c <__aeabi_dsub>
 8008740:	4652      	mov	r2, sl
 8008742:	465b      	mov	r3, fp
 8008744:	f7f8 fa08 	bl	8000b58 <__aeabi_dcmplt>
 8008748:	2800      	cmp	r0, #0
 800874a:	f040 828f 	bne.w	8008c6c <_dtoa_r+0xe0c>
 800874e:	454d      	cmp	r5, r9
 8008750:	f000 8167 	beq.w	8008a22 <_dtoa_r+0xbc2>
 8008754:	4650      	mov	r0, sl
 8008756:	4659      	mov	r1, fp
 8008758:	2200      	movs	r2, #0
 800875a:	4b62      	ldr	r3, [pc, #392]	; (80088e4 <_dtoa_r+0xa84>)
 800875c:	f7f7 ff8a 	bl	8000674 <__aeabi_dmul>
 8008760:	2200      	movs	r2, #0
 8008762:	4b60      	ldr	r3, [pc, #384]	; (80088e4 <_dtoa_r+0xa84>)
 8008764:	4682      	mov	sl, r0
 8008766:	468b      	mov	fp, r1
 8008768:	4630      	mov	r0, r6
 800876a:	4639      	mov	r1, r7
 800876c:	f7f7 ff82 	bl	8000674 <__aeabi_dmul>
 8008770:	460f      	mov	r7, r1
 8008772:	4606      	mov	r6, r0
 8008774:	f7f8 fa18 	bl	8000ba8 <__aeabi_d2iz>
 8008778:	4604      	mov	r4, r0
 800877a:	f7f7 ff15 	bl	80005a8 <__aeabi_i2d>
 800877e:	4602      	mov	r2, r0
 8008780:	460b      	mov	r3, r1
 8008782:	4630      	mov	r0, r6
 8008784:	4639      	mov	r1, r7
 8008786:	f7f7 fdc1 	bl	800030c <__aeabi_dsub>
 800878a:	3430      	adds	r4, #48	; 0x30
 800878c:	b2e4      	uxtb	r4, r4
 800878e:	4652      	mov	r2, sl
 8008790:	465b      	mov	r3, fp
 8008792:	f805 4b01 	strb.w	r4, [r5], #1
 8008796:	4606      	mov	r6, r0
 8008798:	460f      	mov	r7, r1
 800879a:	f7f8 f9dd 	bl	8000b58 <__aeabi_dcmplt>
 800879e:	4632      	mov	r2, r6
 80087a0:	463b      	mov	r3, r7
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d0c8      	beq.n	8008738 <_dtoa_r+0x8d8>
 80087a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80087a8:	f8dd b000 	ldr.w	fp, [sp]
 80087ac:	9305      	str	r3, [sp, #20]
 80087ae:	4644      	mov	r4, r8
 80087b0:	e52d      	b.n	800820e <_dtoa_r+0x3ae>
 80087b2:	2300      	movs	r3, #0
 80087b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80087b6:	9b05      	ldr	r3, [sp, #20]
 80087b8:	4453      	add	r3, sl
 80087ba:	930e      	str	r3, [sp, #56]	; 0x38
 80087bc:	3301      	adds	r3, #1
 80087be:	2b00      	cmp	r3, #0
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	f340 8101 	ble.w	80089c8 <_dtoa_r+0xb68>
 80087c6:	9d08      	ldr	r5, [sp, #32]
 80087c8:	462e      	mov	r6, r5
 80087ca:	e6f0      	b.n	80085ae <_dtoa_r+0x74e>
 80087cc:	2300      	movs	r3, #0
 80087ce:	930b      	str	r3, [sp, #44]	; 0x2c
 80087d0:	e6e3      	b.n	800859a <_dtoa_r+0x73a>
 80087d2:	9b08      	ldr	r3, [sp, #32]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	f73f ac67 	bgt.w	80080a8 <_dtoa_r+0x248>
 80087da:	f040 80d4 	bne.w	8008986 <_dtoa_r+0xb26>
 80087de:	4640      	mov	r0, r8
 80087e0:	2200      	movs	r2, #0
 80087e2:	4b41      	ldr	r3, [pc, #260]	; (80088e8 <_dtoa_r+0xa88>)
 80087e4:	4649      	mov	r1, r9
 80087e6:	f7f7 ff45 	bl	8000674 <__aeabi_dmul>
 80087ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80087ee:	f7f8 f9c7 	bl	8000b80 <__aeabi_dcmpge>
 80087f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087f6:	4646      	mov	r6, r8
 80087f8:	2800      	cmp	r0, #0
 80087fa:	f000 808b 	beq.w	8008914 <_dtoa_r+0xab4>
 80087fe:	ea6f 030a 	mvn.w	r3, sl
 8008802:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008804:	9305      	str	r3, [sp, #20]
 8008806:	4641      	mov	r1, r8
 8008808:	4620      	mov	r0, r4
 800880a:	f000 fd87 	bl	800931c <_Bfree>
 800880e:	2e00      	cmp	r6, #0
 8008810:	f47f ae2b 	bne.w	800846a <_dtoa_r+0x60a>
 8008814:	e4fb      	b.n	800820e <_dtoa_r+0x3ae>
 8008816:	4659      	mov	r1, fp
 8008818:	4620      	mov	r0, r4
 800881a:	f000 febd 	bl	8009598 <__pow5mult>
 800881e:	4683      	mov	fp, r0
 8008820:	e554      	b.n	80082cc <_dtoa_r+0x46c>
 8008822:	9b00      	ldr	r3, [sp, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f47f ad63 	bne.w	80082f0 <_dtoa_r+0x490>
 800882a:	9b01      	ldr	r3, [sp, #4]
 800882c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008830:	2b00      	cmp	r3, #0
 8008832:	f47f ad90 	bne.w	8008356 <_dtoa_r+0x4f6>
 8008836:	9b01      	ldr	r3, [sp, #4]
 8008838:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 800883c:	0d3f      	lsrs	r7, r7, #20
 800883e:	053f      	lsls	r7, r7, #20
 8008840:	2f00      	cmp	r7, #0
 8008842:	f000 821c 	beq.w	8008c7e <_dtoa_r+0xe1e>
 8008846:	9b07      	ldr	r3, [sp, #28]
 8008848:	3301      	adds	r3, #1
 800884a:	9307      	str	r3, [sp, #28]
 800884c:	9b06      	ldr	r3, [sp, #24]
 800884e:	3301      	adds	r3, #1
 8008850:	9306      	str	r3, [sp, #24]
 8008852:	f04f 0901 	mov.w	r9, #1
 8008856:	e580      	b.n	800835a <_dtoa_r+0x4fa>
 8008858:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800885a:	2a00      	cmp	r2, #0
 800885c:	f000 81a7 	beq.w	8008bae <_dtoa_r+0xd4e>
 8008860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008864:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008866:	9d07      	ldr	r5, [sp, #28]
 8008868:	e4f9      	b.n	800825e <_dtoa_r+0x3fe>
 800886a:	f000 fd61 	bl	8009330 <__multadd>
 800886e:	4657      	mov	r7, sl
 8008870:	4606      	mov	r6, r0
 8008872:	4681      	mov	r9, r0
 8008874:	e62f      	b.n	80084d6 <_dtoa_r+0x676>
 8008876:	4601      	mov	r1, r0
 8008878:	4620      	mov	r0, r4
 800887a:	f8cd c000 	str.w	ip, [sp]
 800887e:	f000 fd4d 	bl	800931c <_Bfree>
 8008882:	2201      	movs	r2, #1
 8008884:	f8dd c000 	ldr.w	ip, [sp]
 8008888:	e652      	b.n	8008530 <_dtoa_r+0x6d0>
 800888a:	4658      	mov	r0, fp
 800888c:	4641      	mov	r1, r8
 800888e:	f000 ff29 	bl	80096e4 <__mcmp>
 8008892:	2800      	cmp	r0, #0
 8008894:	f6bf ad8f 	bge.w	80083b6 <_dtoa_r+0x556>
 8008898:	9f05      	ldr	r7, [sp, #20]
 800889a:	4659      	mov	r1, fp
 800889c:	2300      	movs	r3, #0
 800889e:	4620      	mov	r0, r4
 80088a0:	220a      	movs	r2, #10
 80088a2:	3f01      	subs	r7, #1
 80088a4:	9705      	str	r7, [sp, #20]
 80088a6:	f000 fd43 	bl	8009330 <__multadd>
 80088aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ac:	4683      	mov	fp, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f47f adee 	bne.w	8008490 <_dtoa_r+0x630>
 80088b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	f340 81f5 	ble.w	8008ca6 <_dtoa_r+0xe46>
 80088bc:	9308      	str	r3, [sp, #32]
 80088be:	e581      	b.n	80083c4 <_dtoa_r+0x564>
 80088c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80088c2:	f7ff bb04 	b.w	8007ece <_dtoa_r+0x6e>
 80088c6:	9b00      	ldr	r3, [sp, #0]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f47f ad44 	bne.w	8008356 <_dtoa_r+0x4f6>
 80088ce:	e7ac      	b.n	800882a <_dtoa_r+0x9ca>
 80088d0:	08019ce8 	.word	0x08019ce8
 80088d4:	08019dc0 	.word	0x08019dc0
 80088d8:	3ff00000 	.word	0x3ff00000
 80088dc:	401c0000 	.word	0x401c0000
 80088e0:	3fe00000 	.word	0x3fe00000
 80088e4:	40240000 	.word	0x40240000
 80088e8:	40140000 	.word	0x40140000
 80088ec:	9b03      	ldr	r3, [sp, #12]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	f77f ad65 	ble.w	80083be <_dtoa_r+0x55e>
 80088f4:	9b08      	ldr	r3, [sp, #32]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d181      	bne.n	80087fe <_dtoa_r+0x99e>
 80088fa:	4641      	mov	r1, r8
 80088fc:	2205      	movs	r2, #5
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 fd16 	bl	8009330 <__multadd>
 8008904:	4680      	mov	r8, r0
 8008906:	4641      	mov	r1, r8
 8008908:	4658      	mov	r0, fp
 800890a:	f000 feeb 	bl	80096e4 <__mcmp>
 800890e:	2800      	cmp	r0, #0
 8008910:	f77f af75 	ble.w	80087fe <_dtoa_r+0x99e>
 8008914:	9a05      	ldr	r2, [sp, #20]
 8008916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008918:	2331      	movs	r3, #49	; 0x31
 800891a:	3201      	adds	r2, #1
 800891c:	9205      	str	r2, [sp, #20]
 800891e:	700b      	strb	r3, [r1, #0]
 8008920:	1c4d      	adds	r5, r1, #1
 8008922:	e770      	b.n	8008806 <_dtoa_r+0x9a6>
 8008924:	9a05      	ldr	r2, [sp, #20]
 8008926:	3201      	adds	r2, #1
 8008928:	9205      	str	r2, [sp, #20]
 800892a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800892c:	2331      	movs	r3, #49	; 0x31
 800892e:	7013      	strb	r3, [r2, #0]
 8008930:	e58b      	b.n	800844a <_dtoa_r+0x5ea>
 8008932:	f8dd b000 	ldr.w	fp, [sp]
 8008936:	9c03      	ldr	r4, [sp, #12]
 8008938:	e469      	b.n	800820e <_dtoa_r+0x3ae>
 800893a:	4640      	mov	r0, r8
 800893c:	f7f7 fe34 	bl	80005a8 <__aeabi_i2d>
 8008940:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008944:	f7f7 fe96 	bl	8000674 <__aeabi_dmul>
 8008948:	2200      	movs	r2, #0
 800894a:	4bc2      	ldr	r3, [pc, #776]	; (8008c54 <_dtoa_r+0xdf4>)
 800894c:	f7f7 fce0 	bl	8000310 <__adddf3>
 8008950:	4606      	mov	r6, r0
 8008952:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8008956:	2200      	movs	r2, #0
 8008958:	4bbf      	ldr	r3, [pc, #764]	; (8008c58 <_dtoa_r+0xdf8>)
 800895a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800895e:	f7f7 fcd5 	bl	800030c <__aeabi_dsub>
 8008962:	4632      	mov	r2, r6
 8008964:	463b      	mov	r3, r7
 8008966:	4680      	mov	r8, r0
 8008968:	4689      	mov	r9, r1
 800896a:	f7f8 f913 	bl	8000b94 <__aeabi_dcmpgt>
 800896e:	2800      	cmp	r0, #0
 8008970:	f040 80b6 	bne.w	8008ae0 <_dtoa_r+0xc80>
 8008974:	4632      	mov	r2, r6
 8008976:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800897a:	4640      	mov	r0, r8
 800897c:	4649      	mov	r1, r9
 800897e:	f7f8 f8eb 	bl	8000b58 <__aeabi_dcmplt>
 8008982:	2800      	cmp	r0, #0
 8008984:	d052      	beq.n	8008a2c <_dtoa_r+0xbcc>
 8008986:	f04f 0800 	mov.w	r8, #0
 800898a:	4646      	mov	r6, r8
 800898c:	e737      	b.n	80087fe <_dtoa_r+0x99e>
 800898e:	4659      	mov	r1, fp
 8008990:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008992:	4620      	mov	r0, r4
 8008994:	f000 fe00 	bl	8009598 <__pow5mult>
 8008998:	4683      	mov	fp, r0
 800899a:	e497      	b.n	80082cc <_dtoa_r+0x46c>
 800899c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800899e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80089a0:	970a      	str	r7, [sp, #40]	; 0x28
 80089a2:	1afb      	subs	r3, r7, r3
 80089a4:	441a      	add	r2, r3
 80089a6:	920c      	str	r2, [sp, #48]	; 0x30
 80089a8:	2700      	movs	r7, #0
 80089aa:	e452      	b.n	8008252 <_dtoa_r+0x3f2>
 80089ac:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80089b0:	f04f 0802 	mov.w	r8, #2
 80089b4:	ed8d 7b00 	vstr	d7, [sp]
 80089b8:	e633      	b.n	8008622 <_dtoa_r+0x7c2>
 80089ba:	2501      	movs	r5, #1
 80089bc:	950e      	str	r5, [sp, #56]	; 0x38
 80089be:	9508      	str	r5, [sp, #32]
 80089c0:	46aa      	mov	sl, r5
 80089c2:	2100      	movs	r1, #0
 80089c4:	6461      	str	r1, [r4, #68]	; 0x44
 80089c6:	e601      	b.n	80085cc <_dtoa_r+0x76c>
 80089c8:	461d      	mov	r5, r3
 80089ca:	e7fa      	b.n	80089c2 <_dtoa_r+0xb62>
 80089cc:	2a00      	cmp	r2, #0
 80089ce:	dd15      	ble.n	80089fc <_dtoa_r+0xb9c>
 80089d0:	4659      	mov	r1, fp
 80089d2:	2201      	movs	r2, #1
 80089d4:	4620      	mov	r0, r4
 80089d6:	f8cd c000 	str.w	ip, [sp]
 80089da:	f000 fe2d 	bl	8009638 <__lshift>
 80089de:	4641      	mov	r1, r8
 80089e0:	4683      	mov	fp, r0
 80089e2:	f000 fe7f 	bl	80096e4 <__mcmp>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	f8dd c000 	ldr.w	ip, [sp]
 80089ec:	f340 8154 	ble.w	8008c98 <_dtoa_r+0xe38>
 80089f0:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 80089f4:	f000 8111 	beq.w	8008c1a <_dtoa_r+0xdba>
 80089f8:	f10c 0c01 	add.w	ip, ip, #1
 80089fc:	46b2      	mov	sl, r6
 80089fe:	f887 c000 	strb.w	ip, [r7]
 8008a02:	1c7d      	adds	r5, r7, #1
 8008a04:	464e      	mov	r6, r9
 8008a06:	e520      	b.n	800844a <_dtoa_r+0x5ea>
 8008a08:	d104      	bne.n	8008a14 <_dtoa_r+0xbb4>
 8008a0a:	f01c 0f01 	tst.w	ip, #1
 8008a0e:	d001      	beq.n	8008a14 <_dtoa_r+0xbb4>
 8008a10:	e50b      	b.n	800842a <_dtoa_r+0x5ca>
 8008a12:	4615      	mov	r5, r2
 8008a14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008a18:	2b30      	cmp	r3, #48	; 0x30
 8008a1a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008a1e:	d0f8      	beq.n	8008a12 <_dtoa_r+0xbb2>
 8008a20:	e513      	b.n	800844a <_dtoa_r+0x5ea>
 8008a22:	f8dd b000 	ldr.w	fp, [sp]
 8008a26:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8008a2a:	4644      	mov	r4, r8
 8008a2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008a30:	e9cd 2300 	strd	r2, r3, [sp]
 8008a34:	f7ff bb27 	b.w	8008086 <_dtoa_r+0x226>
 8008a38:	9b05      	ldr	r3, [sp, #20]
 8008a3a:	425d      	negs	r5, r3
 8008a3c:	2d00      	cmp	r5, #0
 8008a3e:	f000 80bd 	beq.w	8008bbc <_dtoa_r+0xd5c>
 8008a42:	4b86      	ldr	r3, [pc, #536]	; (8008c5c <_dtoa_r+0xdfc>)
 8008a44:	f005 020f 	and.w	r2, r5, #15
 8008a48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008a54:	f7f7 fe0e 	bl	8000674 <__aeabi_dmul>
 8008a58:	112d      	asrs	r5, r5, #4
 8008a5a:	e9cd 0100 	strd	r0, r1, [sp]
 8008a5e:	f000 8127 	beq.w	8008cb0 <_dtoa_r+0xe50>
 8008a62:	4e7f      	ldr	r6, [pc, #508]	; (8008c60 <_dtoa_r+0xe00>)
 8008a64:	f04f 0802 	mov.w	r8, #2
 8008a68:	07eb      	lsls	r3, r5, #31
 8008a6a:	d505      	bpl.n	8008a78 <_dtoa_r+0xc18>
 8008a6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008a70:	f7f7 fe00 	bl	8000674 <__aeabi_dmul>
 8008a74:	f108 0801 	add.w	r8, r8, #1
 8008a78:	106d      	asrs	r5, r5, #1
 8008a7a:	f106 0608 	add.w	r6, r6, #8
 8008a7e:	d1f3      	bne.n	8008a68 <_dtoa_r+0xc08>
 8008a80:	e9cd 0100 	strd	r0, r1, [sp]
 8008a84:	e5e8      	b.n	8008658 <_dtoa_r+0x7f8>
 8008a86:	9a05      	ldr	r2, [sp, #20]
 8008a88:	3201      	adds	r2, #1
 8008a8a:	9205      	str	r2, [sp, #20]
 8008a8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a8e:	2330      	movs	r3, #48	; 0x30
 8008a90:	7013      	strb	r3, [r2, #0]
 8008a92:	2331      	movs	r3, #49	; 0x31
 8008a94:	7013      	strb	r3, [r2, #0]
 8008a96:	f7ff bbba 	b.w	800820e <_dtoa_r+0x3ae>
 8008a9a:	6871      	ldr	r1, [r6, #4]
 8008a9c:	4620      	mov	r0, r4
 8008a9e:	f000 fc17 	bl	80092d0 <_Balloc>
 8008aa2:	6933      	ldr	r3, [r6, #16]
 8008aa4:	1c9a      	adds	r2, r3, #2
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	0092      	lsls	r2, r2, #2
 8008aaa:	f106 010c 	add.w	r1, r6, #12
 8008aae:	300c      	adds	r0, #12
 8008ab0:	f7f8 f8f2 	bl	8000c98 <memcpy>
 8008ab4:	4620      	mov	r0, r4
 8008ab6:	4629      	mov	r1, r5
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f000 fdbd 	bl	8009638 <__lshift>
 8008abe:	4681      	mov	r9, r0
 8008ac0:	e4ff      	b.n	80084c2 <_dtoa_r+0x662>
 8008ac2:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008ac6:	f000 80a8 	beq.w	8008c1a <_dtoa_r+0xdba>
 8008aca:	f10c 0c01 	add.w	ip, ip, #1
 8008ace:	46b2      	mov	sl, r6
 8008ad0:	f887 c000 	strb.w	ip, [r7]
 8008ad4:	1c7d      	adds	r5, r7, #1
 8008ad6:	464e      	mov	r6, r9
 8008ad8:	e4b7      	b.n	800844a <_dtoa_r+0x5ea>
 8008ada:	46b2      	mov	sl, r6
 8008adc:	464e      	mov	r6, r9
 8008ade:	e494      	b.n	800840a <_dtoa_r+0x5aa>
 8008ae0:	f04f 0800 	mov.w	r8, #0
 8008ae4:	4646      	mov	r6, r8
 8008ae6:	e715      	b.n	8008914 <_dtoa_r+0xab4>
 8008ae8:	495c      	ldr	r1, [pc, #368]	; (8008c5c <_dtoa_r+0xdfc>)
 8008aea:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8008aee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008af2:	4632      	mov	r2, r6
 8008af4:	9315      	str	r3, [sp, #84]	; 0x54
 8008af6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008afa:	463b      	mov	r3, r7
 8008afc:	f7f7 fdba 	bl	8000674 <__aeabi_dmul>
 8008b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b04:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8008b08:	4639      	mov	r1, r7
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7f8 f84c 	bl	8000ba8 <__aeabi_d2iz>
 8008b10:	4605      	mov	r5, r0
 8008b12:	f7f7 fd49 	bl	80005a8 <__aeabi_i2d>
 8008b16:	4602      	mov	r2, r0
 8008b18:	460b      	mov	r3, r1
 8008b1a:	4630      	mov	r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	f7f7 fbf5 	bl	800030c <__aeabi_dsub>
 8008b22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b24:	3530      	adds	r5, #48	; 0x30
 8008b26:	f1b9 0f01 	cmp.w	r9, #1
 8008b2a:	7015      	strb	r5, [r2, #0]
 8008b2c:	4606      	mov	r6, r0
 8008b2e:	460f      	mov	r7, r1
 8008b30:	f102 0501 	add.w	r5, r2, #1
 8008b34:	d023      	beq.n	8008b7e <_dtoa_r+0xd1e>
 8008b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b38:	f8cd b000 	str.w	fp, [sp]
 8008b3c:	444b      	add	r3, r9
 8008b3e:	4698      	mov	r8, r3
 8008b40:	46a9      	mov	r9, r5
 8008b42:	46ab      	mov	fp, r5
 8008b44:	2200      	movs	r2, #0
 8008b46:	4b47      	ldr	r3, [pc, #284]	; (8008c64 <_dtoa_r+0xe04>)
 8008b48:	f7f7 fd94 	bl	8000674 <__aeabi_dmul>
 8008b4c:	460f      	mov	r7, r1
 8008b4e:	4606      	mov	r6, r0
 8008b50:	f7f8 f82a 	bl	8000ba8 <__aeabi_d2iz>
 8008b54:	4605      	mov	r5, r0
 8008b56:	f7f7 fd27 	bl	80005a8 <__aeabi_i2d>
 8008b5a:	3530      	adds	r5, #48	; 0x30
 8008b5c:	4602      	mov	r2, r0
 8008b5e:	460b      	mov	r3, r1
 8008b60:	4630      	mov	r0, r6
 8008b62:	4639      	mov	r1, r7
 8008b64:	f7f7 fbd2 	bl	800030c <__aeabi_dsub>
 8008b68:	f809 5b01 	strb.w	r5, [r9], #1
 8008b6c:	45c1      	cmp	r9, r8
 8008b6e:	d1e9      	bne.n	8008b44 <_dtoa_r+0xce4>
 8008b70:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008b72:	465d      	mov	r5, fp
 8008b74:	f8dd b000 	ldr.w	fp, [sp]
 8008b78:	4606      	mov	r6, r0
 8008b7a:	460f      	mov	r7, r1
 8008b7c:	441d      	add	r5, r3
 8008b7e:	2200      	movs	r2, #0
 8008b80:	4b39      	ldr	r3, [pc, #228]	; (8008c68 <_dtoa_r+0xe08>)
 8008b82:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008b86:	f7f7 fbc3 	bl	8000310 <__adddf3>
 8008b8a:	4632      	mov	r2, r6
 8008b8c:	463b      	mov	r3, r7
 8008b8e:	f7f7 ffe3 	bl	8000b58 <__aeabi_dcmplt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d047      	beq.n	8008c26 <_dtoa_r+0xdc6>
 8008b96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008b98:	9305      	str	r3, [sp, #20]
 8008b9a:	f815 8c01 	ldrb.w	r8, [r5, #-1]
 8008b9e:	f7ff bb24 	b.w	80081ea <_dtoa_r+0x38a>
 8008ba2:	9b07      	ldr	r3, [sp, #28]
 8008ba4:	9a08      	ldr	r2, [sp, #32]
 8008ba6:	1a9d      	subs	r5, r3, r2
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f7ff bb58 	b.w	800825e <_dtoa_r+0x3fe>
 8008bae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008bb0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8008bb2:	9d07      	ldr	r5, [sp, #28]
 8008bb4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bb8:	f7ff bb51 	b.w	800825e <_dtoa_r+0x3fe>
 8008bbc:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 8008bc0:	f04f 0802 	mov.w	r8, #2
 8008bc4:	ed8d 7b00 	vstr	d7, [sp]
 8008bc8:	e546      	b.n	8008658 <_dtoa_r+0x7f8>
 8008bca:	9b08      	ldr	r3, [sp, #32]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	f43f aeb4 	beq.w	800893a <_dtoa_r+0xada>
 8008bd2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008bd4:	2d00      	cmp	r5, #0
 8008bd6:	f77f af29 	ble.w	8008a2c <_dtoa_r+0xbcc>
 8008bda:	2200      	movs	r2, #0
 8008bdc:	4b21      	ldr	r3, [pc, #132]	; (8008c64 <_dtoa_r+0xe04>)
 8008bde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008be2:	f7f7 fd47 	bl	8000674 <__aeabi_dmul>
 8008be6:	4606      	mov	r6, r0
 8008be8:	460f      	mov	r7, r1
 8008bea:	f108 0001 	add.w	r0, r8, #1
 8008bee:	e9cd 6700 	strd	r6, r7, [sp]
 8008bf2:	f7f7 fcd9 	bl	80005a8 <__aeabi_i2d>
 8008bf6:	4602      	mov	r2, r0
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fd39 	bl	8000674 <__aeabi_dmul>
 8008c02:	4b14      	ldr	r3, [pc, #80]	; (8008c54 <_dtoa_r+0xdf4>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	f7f7 fb83 	bl	8000310 <__adddf3>
 8008c0a:	9b05      	ldr	r3, [sp, #20]
 8008c0c:	3b01      	subs	r3, #1
 8008c0e:	4606      	mov	r6, r0
 8008c10:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8008c14:	9314      	str	r3, [sp, #80]	; 0x50
 8008c16:	46a9      	mov	r9, r5
 8008c18:	e53f      	b.n	800869a <_dtoa_r+0x83a>
 8008c1a:	2239      	movs	r2, #57	; 0x39
 8008c1c:	46b2      	mov	sl, r6
 8008c1e:	703a      	strb	r2, [r7, #0]
 8008c20:	464e      	mov	r6, r9
 8008c22:	1c7d      	adds	r5, r7, #1
 8008c24:	e403      	b.n	800842e <_dtoa_r+0x5ce>
 8008c26:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008c2a:	2000      	movs	r0, #0
 8008c2c:	490e      	ldr	r1, [pc, #56]	; (8008c68 <_dtoa_r+0xe08>)
 8008c2e:	f7f7 fb6d 	bl	800030c <__aeabi_dsub>
 8008c32:	4632      	mov	r2, r6
 8008c34:	463b      	mov	r3, r7
 8008c36:	f7f7 ffad 	bl	8000b94 <__aeabi_dcmpgt>
 8008c3a:	b908      	cbnz	r0, 8008c40 <_dtoa_r+0xde0>
 8008c3c:	e6f6      	b.n	8008a2c <_dtoa_r+0xbcc>
 8008c3e:	4615      	mov	r5, r2
 8008c40:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c44:	2b30      	cmp	r3, #48	; 0x30
 8008c46:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8008c4a:	d0f8      	beq.n	8008c3e <_dtoa_r+0xdde>
 8008c4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c4e:	9305      	str	r3, [sp, #20]
 8008c50:	f7ff badd 	b.w	800820e <_dtoa_r+0x3ae>
 8008c54:	401c0000 	.word	0x401c0000
 8008c58:	40140000 	.word	0x40140000
 8008c5c:	08019ce8 	.word	0x08019ce8
 8008c60:	08019dc0 	.word	0x08019dc0
 8008c64:	40240000 	.word	0x40240000
 8008c68:	3fe00000 	.word	0x3fe00000
 8008c6c:	4643      	mov	r3, r8
 8008c6e:	f8dd b000 	ldr.w	fp, [sp]
 8008c72:	46a0      	mov	r8, r4
 8008c74:	461c      	mov	r4, r3
 8008c76:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c78:	9305      	str	r3, [sp, #20]
 8008c7a:	f7ff bab6 	b.w	80081ea <_dtoa_r+0x38a>
 8008c7e:	46b9      	mov	r9, r7
 8008c80:	f7ff bb6b 	b.w	800835a <_dtoa_r+0x4fa>
 8008c84:	f1bc 0f39 	cmp.w	ip, #57	; 0x39
 8008c88:	d0c7      	beq.n	8008c1a <_dtoa_r+0xdba>
 8008c8a:	f1ba 0f00 	cmp.w	sl, #0
 8008c8e:	f77f aeb5 	ble.w	80089fc <_dtoa_r+0xb9c>
 8008c92:	f105 0c31 	add.w	ip, r5, #49	; 0x31
 8008c96:	e6b1      	b.n	80089fc <_dtoa_r+0xb9c>
 8008c98:	f47f aeb0 	bne.w	80089fc <_dtoa_r+0xb9c>
 8008c9c:	f01c 0f01 	tst.w	ip, #1
 8008ca0:	f43f aeac 	beq.w	80089fc <_dtoa_r+0xb9c>
 8008ca4:	e6a4      	b.n	80089f0 <_dtoa_r+0xb90>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	dc04      	bgt.n	8008cb6 <_dtoa_r+0xe56>
 8008cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cae:	e605      	b.n	80088bc <_dtoa_r+0xa5c>
 8008cb0:	f04f 0802 	mov.w	r8, #2
 8008cb4:	e4d0      	b.n	8008658 <_dtoa_r+0x7f8>
 8008cb6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cb8:	9308      	str	r3, [sp, #32]
 8008cba:	e61b      	b.n	80088f4 <_dtoa_r+0xa94>
 8008cbc:	9b03      	ldr	r3, [sp, #12]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	dcf9      	bgt.n	8008cb6 <_dtoa_r+0xe56>
 8008cc2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cc4:	f7ff bbef 	b.w	80084a6 <_dtoa_r+0x646>
 8008cc8:	2500      	movs	r5, #0
 8008cca:	6465      	str	r5, [r4, #68]	; 0x44
 8008ccc:	4629      	mov	r1, r5
 8008cce:	4620      	mov	r0, r4
 8008cd0:	f000 fafe 	bl	80092d0 <_Balloc>
 8008cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008cd8:	9308      	str	r3, [sp, #32]
 8008cda:	930e      	str	r3, [sp, #56]	; 0x38
 8008cdc:	2301      	movs	r3, #1
 8008cde:	9009      	str	r0, [sp, #36]	; 0x24
 8008ce0:	46aa      	mov	sl, r5
 8008ce2:	6420      	str	r0, [r4, #64]	; 0x40
 8008ce4:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ce6:	f7ff b9ce 	b.w	8008086 <_dtoa_r+0x226>
 8008cea:	f43f ab4e 	beq.w	800838a <_dtoa_r+0x52a>
 8008cee:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8008cf2:	f7ff bb43 	b.w	800837c <_dtoa_r+0x51c>
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008cfa:	e55c      	b.n	80087b6 <_dtoa_r+0x956>
 8008cfc:	2701      	movs	r7, #1
 8008cfe:	f7ff b98d 	b.w	800801c <_dtoa_r+0x1bc>
 8008d02:	bf00      	nop
 8008d04:	f3af 8000 	nop.w

08008d08 <_localeconv_r>:
 8008d08:	4800      	ldr	r0, [pc, #0]	; (8008d0c <_localeconv_r+0x4>)
 8008d0a:	4770      	bx	lr
 8008d0c:	20000c64 	.word	0x20000c64

08008d10 <_malloc_r>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	f101 050b 	add.w	r5, r1, #11
 8008d18:	2d16      	cmp	r5, #22
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	d927      	bls.n	8008d70 <_malloc_r+0x60>
 8008d20:	f035 0507 	bics.w	r5, r5, #7
 8008d24:	f100 80b6 	bmi.w	8008e94 <_malloc_r+0x184>
 8008d28:	42a9      	cmp	r1, r5
 8008d2a:	f200 80b3 	bhi.w	8008e94 <_malloc_r+0x184>
 8008d2e:	f000 facb 	bl	80092c8 <__malloc_lock>
 8008d32:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 8008d36:	d222      	bcs.n	8008d7e <_malloc_r+0x6e>
 8008d38:	4fc2      	ldr	r7, [pc, #776]	; (8009044 <_malloc_r+0x334>)
 8008d3a:	08e8      	lsrs	r0, r5, #3
 8008d3c:	eb07 03c0 	add.w	r3, r7, r0, lsl #3
 8008d40:	68dc      	ldr	r4, [r3, #12]
 8008d42:	429c      	cmp	r4, r3
 8008d44:	f000 81c8 	beq.w	80090d8 <_malloc_r+0x3c8>
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	68e1      	ldr	r1, [r4, #12]
 8008d4c:	68a5      	ldr	r5, [r4, #8]
 8008d4e:	f023 0303 	bic.w	r3, r3, #3
 8008d52:	4423      	add	r3, r4
 8008d54:	4630      	mov	r0, r6
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	60e9      	str	r1, [r5, #12]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	608d      	str	r5, [r1, #8]
 8008d60:	605a      	str	r2, [r3, #4]
 8008d62:	f000 fab3 	bl	80092cc <__malloc_unlock>
 8008d66:	3408      	adds	r4, #8
 8008d68:	4620      	mov	r0, r4
 8008d6a:	b003      	add	sp, #12
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	2910      	cmp	r1, #16
 8008d72:	f200 808f 	bhi.w	8008e94 <_malloc_r+0x184>
 8008d76:	f000 faa7 	bl	80092c8 <__malloc_lock>
 8008d7a:	2510      	movs	r5, #16
 8008d7c:	e7dc      	b.n	8008d38 <_malloc_r+0x28>
 8008d7e:	0a68      	lsrs	r0, r5, #9
 8008d80:	f000 808f 	beq.w	8008ea2 <_malloc_r+0x192>
 8008d84:	2804      	cmp	r0, #4
 8008d86:	f200 8154 	bhi.w	8009032 <_malloc_r+0x322>
 8008d8a:	09a8      	lsrs	r0, r5, #6
 8008d8c:	3038      	adds	r0, #56	; 0x38
 8008d8e:	0041      	lsls	r1, r0, #1
 8008d90:	4fac      	ldr	r7, [pc, #688]	; (8009044 <_malloc_r+0x334>)
 8008d92:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8008d96:	68cc      	ldr	r4, [r1, #12]
 8008d98:	42a1      	cmp	r1, r4
 8008d9a:	d106      	bne.n	8008daa <_malloc_r+0x9a>
 8008d9c:	e00c      	b.n	8008db8 <_malloc_r+0xa8>
 8008d9e:	2a00      	cmp	r2, #0
 8008da0:	f280 8082 	bge.w	8008ea8 <_malloc_r+0x198>
 8008da4:	68e4      	ldr	r4, [r4, #12]
 8008da6:	42a1      	cmp	r1, r4
 8008da8:	d006      	beq.n	8008db8 <_malloc_r+0xa8>
 8008daa:	6863      	ldr	r3, [r4, #4]
 8008dac:	f023 0303 	bic.w	r3, r3, #3
 8008db0:	1b5a      	subs	r2, r3, r5
 8008db2:	2a0f      	cmp	r2, #15
 8008db4:	ddf3      	ble.n	8008d9e <_malloc_r+0x8e>
 8008db6:	3801      	subs	r0, #1
 8008db8:	3001      	adds	r0, #1
 8008dba:	49a2      	ldr	r1, [pc, #648]	; (8009044 <_malloc_r+0x334>)
 8008dbc:	693c      	ldr	r4, [r7, #16]
 8008dbe:	f101 0e08 	add.w	lr, r1, #8
 8008dc2:	4574      	cmp	r4, lr
 8008dc4:	f000 817d 	beq.w	80090c2 <_malloc_r+0x3b2>
 8008dc8:	6863      	ldr	r3, [r4, #4]
 8008dca:	f023 0303 	bic.w	r3, r3, #3
 8008dce:	1b5a      	subs	r2, r3, r5
 8008dd0:	2a0f      	cmp	r2, #15
 8008dd2:	f300 8163 	bgt.w	800909c <_malloc_r+0x38c>
 8008dd6:	2a00      	cmp	r2, #0
 8008dd8:	f8c1 e014 	str.w	lr, [r1, #20]
 8008ddc:	f8c1 e010 	str.w	lr, [r1, #16]
 8008de0:	da73      	bge.n	8008eca <_malloc_r+0x1ba>
 8008de2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008de6:	f080 8139 	bcs.w	800905c <_malloc_r+0x34c>
 8008dea:	08db      	lsrs	r3, r3, #3
 8008dec:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
 8008df0:	ea4f 0ca3 	mov.w	ip, r3, asr #2
 8008df4:	684a      	ldr	r2, [r1, #4]
 8008df6:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8008dfa:	f8c4 9008 	str.w	r9, [r4, #8]
 8008dfe:	2301      	movs	r3, #1
 8008e00:	fa03 f30c 	lsl.w	r3, r3, ip
 8008e04:	4313      	orrs	r3, r2
 8008e06:	f8c4 800c 	str.w	r8, [r4, #12]
 8008e0a:	604b      	str	r3, [r1, #4]
 8008e0c:	f8c8 4008 	str.w	r4, [r8, #8]
 8008e10:	f8c9 400c 	str.w	r4, [r9, #12]
 8008e14:	1082      	asrs	r2, r0, #2
 8008e16:	2401      	movs	r4, #1
 8008e18:	4094      	lsls	r4, r2
 8008e1a:	429c      	cmp	r4, r3
 8008e1c:	d862      	bhi.n	8008ee4 <_malloc_r+0x1d4>
 8008e1e:	4223      	tst	r3, r4
 8008e20:	d106      	bne.n	8008e30 <_malloc_r+0x120>
 8008e22:	f020 0003 	bic.w	r0, r0, #3
 8008e26:	0064      	lsls	r4, r4, #1
 8008e28:	4223      	tst	r3, r4
 8008e2a:	f100 0004 	add.w	r0, r0, #4
 8008e2e:	d0fa      	beq.n	8008e26 <_malloc_r+0x116>
 8008e30:	eb07 08c0 	add.w	r8, r7, r0, lsl #3
 8008e34:	46c4      	mov	ip, r8
 8008e36:	4681      	mov	r9, r0
 8008e38:	f8dc 300c 	ldr.w	r3, [ip, #12]
 8008e3c:	459c      	cmp	ip, r3
 8008e3e:	d107      	bne.n	8008e50 <_malloc_r+0x140>
 8008e40:	e141      	b.n	80090c6 <_malloc_r+0x3b6>
 8008e42:	2900      	cmp	r1, #0
 8008e44:	f280 8151 	bge.w	80090ea <_malloc_r+0x3da>
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	459c      	cmp	ip, r3
 8008e4c:	f000 813b 	beq.w	80090c6 <_malloc_r+0x3b6>
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	f022 0203 	bic.w	r2, r2, #3
 8008e56:	1b51      	subs	r1, r2, r5
 8008e58:	290f      	cmp	r1, #15
 8008e5a:	ddf2      	ble.n	8008e42 <_malloc_r+0x132>
 8008e5c:	461c      	mov	r4, r3
 8008e5e:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008e62:	f854 8f08 	ldr.w	r8, [r4, #8]!
 8008e66:	195a      	adds	r2, r3, r5
 8008e68:	f045 0901 	orr.w	r9, r5, #1
 8008e6c:	f041 0501 	orr.w	r5, r1, #1
 8008e70:	f8c3 9004 	str.w	r9, [r3, #4]
 8008e74:	4630      	mov	r0, r6
 8008e76:	f8c8 c00c 	str.w	ip, [r8, #12]
 8008e7a:	f8cc 8008 	str.w	r8, [ip, #8]
 8008e7e:	617a      	str	r2, [r7, #20]
 8008e80:	613a      	str	r2, [r7, #16]
 8008e82:	f8c2 e00c 	str.w	lr, [r2, #12]
 8008e86:	f8c2 e008 	str.w	lr, [r2, #8]
 8008e8a:	6055      	str	r5, [r2, #4]
 8008e8c:	5051      	str	r1, [r2, r1]
 8008e8e:	f000 fa1d 	bl	80092cc <__malloc_unlock>
 8008e92:	e769      	b.n	8008d68 <_malloc_r+0x58>
 8008e94:	2400      	movs	r4, #0
 8008e96:	230c      	movs	r3, #12
 8008e98:	4620      	mov	r0, r4
 8008e9a:	6033      	str	r3, [r6, #0]
 8008e9c:	b003      	add	sp, #12
 8008e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ea2:	217e      	movs	r1, #126	; 0x7e
 8008ea4:	203f      	movs	r0, #63	; 0x3f
 8008ea6:	e773      	b.n	8008d90 <_malloc_r+0x80>
 8008ea8:	4423      	add	r3, r4
 8008eaa:	68e1      	ldr	r1, [r4, #12]
 8008eac:	685a      	ldr	r2, [r3, #4]
 8008eae:	68a5      	ldr	r5, [r4, #8]
 8008eb0:	f042 0201 	orr.w	r2, r2, #1
 8008eb4:	60e9      	str	r1, [r5, #12]
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	608d      	str	r5, [r1, #8]
 8008eba:	605a      	str	r2, [r3, #4]
 8008ebc:	f000 fa06 	bl	80092cc <__malloc_unlock>
 8008ec0:	3408      	adds	r4, #8
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	b003      	add	sp, #12
 8008ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008eca:	4423      	add	r3, r4
 8008ecc:	4630      	mov	r0, r6
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	605a      	str	r2, [r3, #4]
 8008ed6:	f000 f9f9 	bl	80092cc <__malloc_unlock>
 8008eda:	3408      	adds	r4, #8
 8008edc:	4620      	mov	r0, r4
 8008ede:	b003      	add	sp, #12
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee4:	68bc      	ldr	r4, [r7, #8]
 8008ee6:	6863      	ldr	r3, [r4, #4]
 8008ee8:	f023 0803 	bic.w	r8, r3, #3
 8008eec:	4545      	cmp	r5, r8
 8008eee:	d804      	bhi.n	8008efa <_malloc_r+0x1ea>
 8008ef0:	ebc5 0308 	rsb	r3, r5, r8
 8008ef4:	2b0f      	cmp	r3, #15
 8008ef6:	f300 808c 	bgt.w	8009012 <_malloc_r+0x302>
 8008efa:	4b53      	ldr	r3, [pc, #332]	; (8009048 <_malloc_r+0x338>)
 8008efc:	f8df a158 	ldr.w	sl, [pc, #344]	; 8009058 <_malloc_r+0x348>
 8008f00:	681a      	ldr	r2, [r3, #0]
 8008f02:	f8da 3000 	ldr.w	r3, [sl]
 8008f06:	3301      	adds	r3, #1
 8008f08:	442a      	add	r2, r5
 8008f0a:	eb04 0b08 	add.w	fp, r4, r8
 8008f0e:	f000 8150 	beq.w	80091b2 <_malloc_r+0x4a2>
 8008f12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008f16:	320f      	adds	r2, #15
 8008f18:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8008f1c:	f022 020f 	bic.w	r2, r2, #15
 8008f20:	4611      	mov	r1, r2
 8008f22:	4630      	mov	r0, r6
 8008f24:	9201      	str	r2, [sp, #4]
 8008f26:	f7fc fd3b 	bl	80059a0 <_sbrk_r>
 8008f2a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008f2e:	4681      	mov	r9, r0
 8008f30:	9a01      	ldr	r2, [sp, #4]
 8008f32:	f000 8147 	beq.w	80091c4 <_malloc_r+0x4b4>
 8008f36:	4583      	cmp	fp, r0
 8008f38:	f200 80ee 	bhi.w	8009118 <_malloc_r+0x408>
 8008f3c:	4b43      	ldr	r3, [pc, #268]	; (800904c <_malloc_r+0x33c>)
 8008f3e:	6819      	ldr	r1, [r3, #0]
 8008f40:	45cb      	cmp	fp, r9
 8008f42:	4411      	add	r1, r2
 8008f44:	6019      	str	r1, [r3, #0]
 8008f46:	f000 8142 	beq.w	80091ce <_malloc_r+0x4be>
 8008f4a:	f8da 0000 	ldr.w	r0, [sl]
 8008f4e:	f8df e108 	ldr.w	lr, [pc, #264]	; 8009058 <_malloc_r+0x348>
 8008f52:	3001      	adds	r0, #1
 8008f54:	bf1b      	ittet	ne
 8008f56:	ebcb 0b09 	rsbne	fp, fp, r9
 8008f5a:	4459      	addne	r1, fp
 8008f5c:	f8ce 9000 	streq.w	r9, [lr]
 8008f60:	6019      	strne	r1, [r3, #0]
 8008f62:	f019 0107 	ands.w	r1, r9, #7
 8008f66:	f000 8107 	beq.w	8009178 <_malloc_r+0x468>
 8008f6a:	f1c1 0008 	rsb	r0, r1, #8
 8008f6e:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
 8008f72:	4481      	add	r9, r0
 8008f74:	3108      	adds	r1, #8
 8008f76:	444a      	add	r2, r9
 8008f78:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8008f7c:	ebc2 0a01 	rsb	sl, r2, r1
 8008f80:	4651      	mov	r1, sl
 8008f82:	4630      	mov	r0, r6
 8008f84:	9301      	str	r3, [sp, #4]
 8008f86:	f7fc fd0b 	bl	80059a0 <_sbrk_r>
 8008f8a:	1c43      	adds	r3, r0, #1
 8008f8c:	9b01      	ldr	r3, [sp, #4]
 8008f8e:	f000 812c 	beq.w	80091ea <_malloc_r+0x4da>
 8008f92:	ebc9 0200 	rsb	r2, r9, r0
 8008f96:	4452      	add	r2, sl
 8008f98:	f042 0201 	orr.w	r2, r2, #1
 8008f9c:	6819      	ldr	r1, [r3, #0]
 8008f9e:	f8c7 9008 	str.w	r9, [r7, #8]
 8008fa2:	4451      	add	r1, sl
 8008fa4:	42bc      	cmp	r4, r7
 8008fa6:	f8c9 2004 	str.w	r2, [r9, #4]
 8008faa:	6019      	str	r1, [r3, #0]
 8008fac:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800904c <_malloc_r+0x33c>
 8008fb0:	d016      	beq.n	8008fe0 <_malloc_r+0x2d0>
 8008fb2:	f1b8 0f0f 	cmp.w	r8, #15
 8008fb6:	f240 80ee 	bls.w	8009196 <_malloc_r+0x486>
 8008fba:	6862      	ldr	r2, [r4, #4]
 8008fbc:	f1a8 030c 	sub.w	r3, r8, #12
 8008fc0:	f023 0307 	bic.w	r3, r3, #7
 8008fc4:	18e0      	adds	r0, r4, r3
 8008fc6:	f002 0201 	and.w	r2, r2, #1
 8008fca:	f04f 0e05 	mov.w	lr, #5
 8008fce:	431a      	orrs	r2, r3
 8008fd0:	2b0f      	cmp	r3, #15
 8008fd2:	6062      	str	r2, [r4, #4]
 8008fd4:	f8c0 e004 	str.w	lr, [r0, #4]
 8008fd8:	f8c0 e008 	str.w	lr, [r0, #8]
 8008fdc:	f200 8109 	bhi.w	80091f2 <_malloc_r+0x4e2>
 8008fe0:	4b1b      	ldr	r3, [pc, #108]	; (8009050 <_malloc_r+0x340>)
 8008fe2:	68bc      	ldr	r4, [r7, #8]
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	4291      	cmp	r1, r2
 8008fe8:	bf88      	it	hi
 8008fea:	6019      	strhi	r1, [r3, #0]
 8008fec:	4b19      	ldr	r3, [pc, #100]	; (8009054 <_malloc_r+0x344>)
 8008fee:	681a      	ldr	r2, [r3, #0]
 8008ff0:	4291      	cmp	r1, r2
 8008ff2:	6862      	ldr	r2, [r4, #4]
 8008ff4:	bf88      	it	hi
 8008ff6:	6019      	strhi	r1, [r3, #0]
 8008ff8:	f022 0203 	bic.w	r2, r2, #3
 8008ffc:	4295      	cmp	r5, r2
 8008ffe:	eba2 0305 	sub.w	r3, r2, r5
 8009002:	d801      	bhi.n	8009008 <_malloc_r+0x2f8>
 8009004:	2b0f      	cmp	r3, #15
 8009006:	dc04      	bgt.n	8009012 <_malloc_r+0x302>
 8009008:	4630      	mov	r0, r6
 800900a:	f000 f95f 	bl	80092cc <__malloc_unlock>
 800900e:	2400      	movs	r4, #0
 8009010:	e6aa      	b.n	8008d68 <_malloc_r+0x58>
 8009012:	1962      	adds	r2, r4, r5
 8009014:	f043 0301 	orr.w	r3, r3, #1
 8009018:	f045 0501 	orr.w	r5, r5, #1
 800901c:	6065      	str	r5, [r4, #4]
 800901e:	4630      	mov	r0, r6
 8009020:	60ba      	str	r2, [r7, #8]
 8009022:	6053      	str	r3, [r2, #4]
 8009024:	f000 f952 	bl	80092cc <__malloc_unlock>
 8009028:	3408      	adds	r4, #8
 800902a:	4620      	mov	r0, r4
 800902c:	b003      	add	sp, #12
 800902e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009032:	2814      	cmp	r0, #20
 8009034:	d968      	bls.n	8009108 <_malloc_r+0x3f8>
 8009036:	2854      	cmp	r0, #84	; 0x54
 8009038:	f200 8097 	bhi.w	800916a <_malloc_r+0x45a>
 800903c:	0b28      	lsrs	r0, r5, #12
 800903e:	306e      	adds	r0, #110	; 0x6e
 8009040:	0041      	lsls	r1, r0, #1
 8009042:	e6a5      	b.n	8008d90 <_malloc_r+0x80>
 8009044:	20000c9c 	.word	0x20000c9c
 8009048:	20005c34 	.word	0x20005c34
 800904c:	20005c38 	.word	0x20005c38
 8009050:	20005c30 	.word	0x20005c30
 8009054:	20005c2c 	.word	0x20005c2c
 8009058:	200010a8 	.word	0x200010a8
 800905c:	0a5a      	lsrs	r2, r3, #9
 800905e:	2a04      	cmp	r2, #4
 8009060:	d955      	bls.n	800910e <_malloc_r+0x3fe>
 8009062:	2a14      	cmp	r2, #20
 8009064:	f200 80a7 	bhi.w	80091b6 <_malloc_r+0x4a6>
 8009068:	325b      	adds	r2, #91	; 0x5b
 800906a:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 800906e:	eb07 0c8c 	add.w	ip, r7, ip, lsl #2
 8009072:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009230 <_malloc_r+0x520>
 8009076:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800907a:	4561      	cmp	r1, ip
 800907c:	d07f      	beq.n	800917e <_malloc_r+0x46e>
 800907e:	684a      	ldr	r2, [r1, #4]
 8009080:	f022 0203 	bic.w	r2, r2, #3
 8009084:	4293      	cmp	r3, r2
 8009086:	d202      	bcs.n	800908e <_malloc_r+0x37e>
 8009088:	6889      	ldr	r1, [r1, #8]
 800908a:	458c      	cmp	ip, r1
 800908c:	d1f7      	bne.n	800907e <_malloc_r+0x36e>
 800908e:	68ca      	ldr	r2, [r1, #12]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	60e2      	str	r2, [r4, #12]
 8009094:	60a1      	str	r1, [r4, #8]
 8009096:	6094      	str	r4, [r2, #8]
 8009098:	60cc      	str	r4, [r1, #12]
 800909a:	e6bb      	b.n	8008e14 <_malloc_r+0x104>
 800909c:	1963      	adds	r3, r4, r5
 800909e:	f042 0701 	orr.w	r7, r2, #1
 80090a2:	f045 0501 	orr.w	r5, r5, #1
 80090a6:	6065      	str	r5, [r4, #4]
 80090a8:	4630      	mov	r0, r6
 80090aa:	614b      	str	r3, [r1, #20]
 80090ac:	610b      	str	r3, [r1, #16]
 80090ae:	f8c3 e00c 	str.w	lr, [r3, #12]
 80090b2:	f8c3 e008 	str.w	lr, [r3, #8]
 80090b6:	605f      	str	r7, [r3, #4]
 80090b8:	509a      	str	r2, [r3, r2]
 80090ba:	3408      	adds	r4, #8
 80090bc:	f000 f906 	bl	80092cc <__malloc_unlock>
 80090c0:	e652      	b.n	8008d68 <_malloc_r+0x58>
 80090c2:	684b      	ldr	r3, [r1, #4]
 80090c4:	e6a6      	b.n	8008e14 <_malloc_r+0x104>
 80090c6:	f109 0901 	add.w	r9, r9, #1
 80090ca:	f019 0f03 	tst.w	r9, #3
 80090ce:	f10c 0c08 	add.w	ip, ip, #8
 80090d2:	f47f aeb1 	bne.w	8008e38 <_malloc_r+0x128>
 80090d6:	e02c      	b.n	8009132 <_malloc_r+0x422>
 80090d8:	f104 0308 	add.w	r3, r4, #8
 80090dc:	6964      	ldr	r4, [r4, #20]
 80090de:	42a3      	cmp	r3, r4
 80090e0:	bf08      	it	eq
 80090e2:	3002      	addeq	r0, #2
 80090e4:	f43f ae69 	beq.w	8008dba <_malloc_r+0xaa>
 80090e8:	e62e      	b.n	8008d48 <_malloc_r+0x38>
 80090ea:	441a      	add	r2, r3
 80090ec:	461c      	mov	r4, r3
 80090ee:	6851      	ldr	r1, [r2, #4]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f854 5f08 	ldr.w	r5, [r4, #8]!
 80090f6:	f041 0101 	orr.w	r1, r1, #1
 80090fa:	6051      	str	r1, [r2, #4]
 80090fc:	4630      	mov	r0, r6
 80090fe:	60eb      	str	r3, [r5, #12]
 8009100:	609d      	str	r5, [r3, #8]
 8009102:	f000 f8e3 	bl	80092cc <__malloc_unlock>
 8009106:	e62f      	b.n	8008d68 <_malloc_r+0x58>
 8009108:	305b      	adds	r0, #91	; 0x5b
 800910a:	0041      	lsls	r1, r0, #1
 800910c:	e640      	b.n	8008d90 <_malloc_r+0x80>
 800910e:	099a      	lsrs	r2, r3, #6
 8009110:	3238      	adds	r2, #56	; 0x38
 8009112:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009116:	e7aa      	b.n	800906e <_malloc_r+0x35e>
 8009118:	42bc      	cmp	r4, r7
 800911a:	4b45      	ldr	r3, [pc, #276]	; (8009230 <_malloc_r+0x520>)
 800911c:	f43f af0e 	beq.w	8008f3c <_malloc_r+0x22c>
 8009120:	689c      	ldr	r4, [r3, #8]
 8009122:	6862      	ldr	r2, [r4, #4]
 8009124:	f022 0203 	bic.w	r2, r2, #3
 8009128:	e768      	b.n	8008ffc <_malloc_r+0x2ec>
 800912a:	f8d8 8000 	ldr.w	r8, [r8]
 800912e:	4598      	cmp	r8, r3
 8009130:	d17c      	bne.n	800922c <_malloc_r+0x51c>
 8009132:	f010 0f03 	tst.w	r0, #3
 8009136:	f1a8 0308 	sub.w	r3, r8, #8
 800913a:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 800913e:	d1f4      	bne.n	800912a <_malloc_r+0x41a>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	ea23 0304 	bic.w	r3, r3, r4
 8009146:	607b      	str	r3, [r7, #4]
 8009148:	0064      	lsls	r4, r4, #1
 800914a:	429c      	cmp	r4, r3
 800914c:	f63f aeca 	bhi.w	8008ee4 <_malloc_r+0x1d4>
 8009150:	2c00      	cmp	r4, #0
 8009152:	f43f aec7 	beq.w	8008ee4 <_malloc_r+0x1d4>
 8009156:	4223      	tst	r3, r4
 8009158:	4648      	mov	r0, r9
 800915a:	f47f ae69 	bne.w	8008e30 <_malloc_r+0x120>
 800915e:	0064      	lsls	r4, r4, #1
 8009160:	4223      	tst	r3, r4
 8009162:	f100 0004 	add.w	r0, r0, #4
 8009166:	d0fa      	beq.n	800915e <_malloc_r+0x44e>
 8009168:	e662      	b.n	8008e30 <_malloc_r+0x120>
 800916a:	f5b0 7faa 	cmp.w	r0, #340	; 0x154
 800916e:	d818      	bhi.n	80091a2 <_malloc_r+0x492>
 8009170:	0be8      	lsrs	r0, r5, #15
 8009172:	3077      	adds	r0, #119	; 0x77
 8009174:	0041      	lsls	r1, r0, #1
 8009176:	e60b      	b.n	8008d90 <_malloc_r+0x80>
 8009178:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800917c:	e6fb      	b.n	8008f76 <_malloc_r+0x266>
 800917e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009182:	1092      	asrs	r2, r2, #2
 8009184:	f04f 0c01 	mov.w	ip, #1
 8009188:	fa0c f202 	lsl.w	r2, ip, r2
 800918c:	4313      	orrs	r3, r2
 800918e:	f8c8 3004 	str.w	r3, [r8, #4]
 8009192:	460a      	mov	r2, r1
 8009194:	e77d      	b.n	8009092 <_malloc_r+0x382>
 8009196:	2301      	movs	r3, #1
 8009198:	f8c9 3004 	str.w	r3, [r9, #4]
 800919c:	464c      	mov	r4, r9
 800919e:	2200      	movs	r2, #0
 80091a0:	e72c      	b.n	8008ffc <_malloc_r+0x2ec>
 80091a2:	f240 5354 	movw	r3, #1364	; 0x554
 80091a6:	4298      	cmp	r0, r3
 80091a8:	d81c      	bhi.n	80091e4 <_malloc_r+0x4d4>
 80091aa:	0ca8      	lsrs	r0, r5, #18
 80091ac:	307c      	adds	r0, #124	; 0x7c
 80091ae:	0041      	lsls	r1, r0, #1
 80091b0:	e5ee      	b.n	8008d90 <_malloc_r+0x80>
 80091b2:	3210      	adds	r2, #16
 80091b4:	e6b4      	b.n	8008f20 <_malloc_r+0x210>
 80091b6:	2a54      	cmp	r2, #84	; 0x54
 80091b8:	d823      	bhi.n	8009202 <_malloc_r+0x4f2>
 80091ba:	0b1a      	lsrs	r2, r3, #12
 80091bc:	326e      	adds	r2, #110	; 0x6e
 80091be:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 80091c2:	e754      	b.n	800906e <_malloc_r+0x35e>
 80091c4:	68bc      	ldr	r4, [r7, #8]
 80091c6:	6862      	ldr	r2, [r4, #4]
 80091c8:	f022 0203 	bic.w	r2, r2, #3
 80091cc:	e716      	b.n	8008ffc <_malloc_r+0x2ec>
 80091ce:	f3cb 000b 	ubfx	r0, fp, #0, #12
 80091d2:	2800      	cmp	r0, #0
 80091d4:	f47f aeb9 	bne.w	8008f4a <_malloc_r+0x23a>
 80091d8:	4442      	add	r2, r8
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	f042 0201 	orr.w	r2, r2, #1
 80091e0:	605a      	str	r2, [r3, #4]
 80091e2:	e6fd      	b.n	8008fe0 <_malloc_r+0x2d0>
 80091e4:	21fc      	movs	r1, #252	; 0xfc
 80091e6:	207e      	movs	r0, #126	; 0x7e
 80091e8:	e5d2      	b.n	8008d90 <_malloc_r+0x80>
 80091ea:	2201      	movs	r2, #1
 80091ec:	f04f 0a00 	mov.w	sl, #0
 80091f0:	e6d4      	b.n	8008f9c <_malloc_r+0x28c>
 80091f2:	f104 0108 	add.w	r1, r4, #8
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 fc60 	bl	8009abc <_free_r>
 80091fc:	f8da 1000 	ldr.w	r1, [sl]
 8009200:	e6ee      	b.n	8008fe0 <_malloc_r+0x2d0>
 8009202:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009206:	d804      	bhi.n	8009212 <_malloc_r+0x502>
 8009208:	0bda      	lsrs	r2, r3, #15
 800920a:	3277      	adds	r2, #119	; 0x77
 800920c:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009210:	e72d      	b.n	800906e <_malloc_r+0x35e>
 8009212:	f240 5154 	movw	r1, #1364	; 0x554
 8009216:	428a      	cmp	r2, r1
 8009218:	d804      	bhi.n	8009224 <_malloc_r+0x514>
 800921a:	0c9a      	lsrs	r2, r3, #18
 800921c:	327c      	adds	r2, #124	; 0x7c
 800921e:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8009222:	e724      	b.n	800906e <_malloc_r+0x35e>
 8009224:	f04f 0cfc 	mov.w	ip, #252	; 0xfc
 8009228:	227e      	movs	r2, #126	; 0x7e
 800922a:	e720      	b.n	800906e <_malloc_r+0x35e>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	e78b      	b.n	8009148 <_malloc_r+0x438>
 8009230:	20000c9c 	.word	0x20000c9c

08009234 <memchr>:
 8009234:	0783      	lsls	r3, r0, #30
 8009236:	b470      	push	{r4, r5, r6}
 8009238:	b2c9      	uxtb	r1, r1
 800923a:	d040      	beq.n	80092be <memchr+0x8a>
 800923c:	1e54      	subs	r4, r2, #1
 800923e:	2a00      	cmp	r2, #0
 8009240:	d03f      	beq.n	80092c2 <memchr+0x8e>
 8009242:	7803      	ldrb	r3, [r0, #0]
 8009244:	428b      	cmp	r3, r1
 8009246:	bf18      	it	ne
 8009248:	1c43      	addne	r3, r0, #1
 800924a:	d106      	bne.n	800925a <memchr+0x26>
 800924c:	e01d      	b.n	800928a <memchr+0x56>
 800924e:	b1f4      	cbz	r4, 800928e <memchr+0x5a>
 8009250:	7802      	ldrb	r2, [r0, #0]
 8009252:	428a      	cmp	r2, r1
 8009254:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8009258:	d017      	beq.n	800928a <memchr+0x56>
 800925a:	f013 0f03 	tst.w	r3, #3
 800925e:	4618      	mov	r0, r3
 8009260:	f103 0301 	add.w	r3, r3, #1
 8009264:	d1f3      	bne.n	800924e <memchr+0x1a>
 8009266:	2c03      	cmp	r4, #3
 8009268:	d814      	bhi.n	8009294 <memchr+0x60>
 800926a:	b184      	cbz	r4, 800928e <memchr+0x5a>
 800926c:	7803      	ldrb	r3, [r0, #0]
 800926e:	428b      	cmp	r3, r1
 8009270:	d00b      	beq.n	800928a <memchr+0x56>
 8009272:	1905      	adds	r5, r0, r4
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	e002      	b.n	800927e <memchr+0x4a>
 8009278:	7802      	ldrb	r2, [r0, #0]
 800927a:	428a      	cmp	r2, r1
 800927c:	d005      	beq.n	800928a <memchr+0x56>
 800927e:	42ab      	cmp	r3, r5
 8009280:	4618      	mov	r0, r3
 8009282:	f103 0301 	add.w	r3, r3, #1
 8009286:	d1f7      	bne.n	8009278 <memchr+0x44>
 8009288:	2000      	movs	r0, #0
 800928a:	bc70      	pop	{r4, r5, r6}
 800928c:	4770      	bx	lr
 800928e:	4620      	mov	r0, r4
 8009290:	bc70      	pop	{r4, r5, r6}
 8009292:	4770      	bx	lr
 8009294:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
 8009298:	4602      	mov	r2, r0
 800929a:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
 800929e:	4610      	mov	r0, r2
 80092a0:	3204      	adds	r2, #4
 80092a2:	6803      	ldr	r3, [r0, #0]
 80092a4:	4073      	eors	r3, r6
 80092a6:	f1a3 3501 	sub.w	r5, r3, #16843009	; 0x1010101
 80092aa:	ea25 0303 	bic.w	r3, r5, r3
 80092ae:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
 80092b2:	d1da      	bne.n	800926a <memchr+0x36>
 80092b4:	3c04      	subs	r4, #4
 80092b6:	2c03      	cmp	r4, #3
 80092b8:	4610      	mov	r0, r2
 80092ba:	d8f0      	bhi.n	800929e <memchr+0x6a>
 80092bc:	e7d5      	b.n	800926a <memchr+0x36>
 80092be:	4614      	mov	r4, r2
 80092c0:	e7d1      	b.n	8009266 <memchr+0x32>
 80092c2:	4610      	mov	r0, r2
 80092c4:	e7e1      	b.n	800928a <memchr+0x56>
 80092c6:	bf00      	nop

080092c8 <__malloc_lock>:
 80092c8:	4770      	bx	lr
 80092ca:	bf00      	nop

080092cc <__malloc_unlock>:
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop

080092d0 <_Balloc>:
 80092d0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80092d2:	b570      	push	{r4, r5, r6, lr}
 80092d4:	4605      	mov	r5, r0
 80092d6:	460c      	mov	r4, r1
 80092d8:	b14b      	cbz	r3, 80092ee <_Balloc+0x1e>
 80092da:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80092de:	b180      	cbz	r0, 8009302 <_Balloc+0x32>
 80092e0:	6802      	ldr	r2, [r0, #0]
 80092e2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80092e6:	2300      	movs	r3, #0
 80092e8:	6103      	str	r3, [r0, #16]
 80092ea:	60c3      	str	r3, [r0, #12]
 80092ec:	bd70      	pop	{r4, r5, r6, pc}
 80092ee:	2104      	movs	r1, #4
 80092f0:	2221      	movs	r2, #33	; 0x21
 80092f2:	f000 fb65 	bl	80099c0 <_calloc_r>
 80092f6:	64e8      	str	r0, [r5, #76]	; 0x4c
 80092f8:	4603      	mov	r3, r0
 80092fa:	2800      	cmp	r0, #0
 80092fc:	d1ed      	bne.n	80092da <_Balloc+0xa>
 80092fe:	2000      	movs	r0, #0
 8009300:	bd70      	pop	{r4, r5, r6, pc}
 8009302:	2101      	movs	r1, #1
 8009304:	fa01 f604 	lsl.w	r6, r1, r4
 8009308:	1d72      	adds	r2, r6, #5
 800930a:	4628      	mov	r0, r5
 800930c:	0092      	lsls	r2, r2, #2
 800930e:	f000 fb57 	bl	80099c0 <_calloc_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	d0f3      	beq.n	80092fe <_Balloc+0x2e>
 8009316:	6044      	str	r4, [r0, #4]
 8009318:	6086      	str	r6, [r0, #8]
 800931a:	e7e4      	b.n	80092e6 <_Balloc+0x16>

0800931c <_Bfree>:
 800931c:	b131      	cbz	r1, 800932c <_Bfree+0x10>
 800931e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8009320:	684a      	ldr	r2, [r1, #4]
 8009322:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009326:	6008      	str	r0, [r1, #0]
 8009328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800932c:	4770      	bx	lr
 800932e:	bf00      	nop

08009330 <__multadd>:
 8009330:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009332:	690c      	ldr	r4, [r1, #16]
 8009334:	b083      	sub	sp, #12
 8009336:	460d      	mov	r5, r1
 8009338:	4606      	mov	r6, r0
 800933a:	f101 0e14 	add.w	lr, r1, #20
 800933e:	2700      	movs	r7, #0
 8009340:	f8de 1000 	ldr.w	r1, [lr]
 8009344:	b288      	uxth	r0, r1
 8009346:	0c09      	lsrs	r1, r1, #16
 8009348:	fb02 3300 	mla	r3, r2, r0, r3
 800934c:	fb02 f101 	mul.w	r1, r2, r1
 8009350:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8009354:	3701      	adds	r7, #1
 8009356:	b29b      	uxth	r3, r3
 8009358:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 800935c:	42bc      	cmp	r4, r7
 800935e:	f84e 3b04 	str.w	r3, [lr], #4
 8009362:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8009366:	dceb      	bgt.n	8009340 <__multadd+0x10>
 8009368:	b13b      	cbz	r3, 800937a <__multadd+0x4a>
 800936a:	68aa      	ldr	r2, [r5, #8]
 800936c:	4294      	cmp	r4, r2
 800936e:	da07      	bge.n	8009380 <__multadd+0x50>
 8009370:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8009374:	3401      	adds	r4, #1
 8009376:	6153      	str	r3, [r2, #20]
 8009378:	612c      	str	r4, [r5, #16]
 800937a:	4628      	mov	r0, r5
 800937c:	b003      	add	sp, #12
 800937e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009380:	6869      	ldr	r1, [r5, #4]
 8009382:	9301      	str	r3, [sp, #4]
 8009384:	3101      	adds	r1, #1
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ffa2 	bl	80092d0 <_Balloc>
 800938c:	692a      	ldr	r2, [r5, #16]
 800938e:	3202      	adds	r2, #2
 8009390:	f105 010c 	add.w	r1, r5, #12
 8009394:	4607      	mov	r7, r0
 8009396:	0092      	lsls	r2, r2, #2
 8009398:	300c      	adds	r0, #12
 800939a:	f7f7 fc7d 	bl	8000c98 <memcpy>
 800939e:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 80093a0:	6869      	ldr	r1, [r5, #4]
 80093a2:	9b01      	ldr	r3, [sp, #4]
 80093a4:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 80093a8:	6028      	str	r0, [r5, #0]
 80093aa:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 80093ae:	463d      	mov	r5, r7
 80093b0:	e7de      	b.n	8009370 <__multadd+0x40>
 80093b2:	bf00      	nop

080093b4 <__hi0bits>:
 80093b4:	0c03      	lsrs	r3, r0, #16
 80093b6:	041b      	lsls	r3, r3, #16
 80093b8:	b9b3      	cbnz	r3, 80093e8 <__hi0bits+0x34>
 80093ba:	0400      	lsls	r0, r0, #16
 80093bc:	2310      	movs	r3, #16
 80093be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80093c2:	bf04      	itt	eq
 80093c4:	0200      	lsleq	r0, r0, #8
 80093c6:	3308      	addeq	r3, #8
 80093c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80093cc:	bf04      	itt	eq
 80093ce:	0100      	lsleq	r0, r0, #4
 80093d0:	3304      	addeq	r3, #4
 80093d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80093d6:	bf04      	itt	eq
 80093d8:	0080      	lsleq	r0, r0, #2
 80093da:	3302      	addeq	r3, #2
 80093dc:	2800      	cmp	r0, #0
 80093de:	db07      	blt.n	80093f0 <__hi0bits+0x3c>
 80093e0:	0042      	lsls	r2, r0, #1
 80093e2:	d403      	bmi.n	80093ec <__hi0bits+0x38>
 80093e4:	2020      	movs	r0, #32
 80093e6:	4770      	bx	lr
 80093e8:	2300      	movs	r3, #0
 80093ea:	e7e8      	b.n	80093be <__hi0bits+0xa>
 80093ec:	1c58      	adds	r0, r3, #1
 80093ee:	4770      	bx	lr
 80093f0:	4618      	mov	r0, r3
 80093f2:	4770      	bx	lr

080093f4 <__lo0bits>:
 80093f4:	6803      	ldr	r3, [r0, #0]
 80093f6:	f013 0207 	ands.w	r2, r3, #7
 80093fa:	d007      	beq.n	800940c <__lo0bits+0x18>
 80093fc:	07d9      	lsls	r1, r3, #31
 80093fe:	d420      	bmi.n	8009442 <__lo0bits+0x4e>
 8009400:	079a      	lsls	r2, r3, #30
 8009402:	d420      	bmi.n	8009446 <__lo0bits+0x52>
 8009404:	089b      	lsrs	r3, r3, #2
 8009406:	6003      	str	r3, [r0, #0]
 8009408:	2002      	movs	r0, #2
 800940a:	4770      	bx	lr
 800940c:	b299      	uxth	r1, r3
 800940e:	b909      	cbnz	r1, 8009414 <__lo0bits+0x20>
 8009410:	0c1b      	lsrs	r3, r3, #16
 8009412:	2210      	movs	r2, #16
 8009414:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009418:	bf04      	itt	eq
 800941a:	0a1b      	lsreq	r3, r3, #8
 800941c:	3208      	addeq	r2, #8
 800941e:	0719      	lsls	r1, r3, #28
 8009420:	bf04      	itt	eq
 8009422:	091b      	lsreq	r3, r3, #4
 8009424:	3204      	addeq	r2, #4
 8009426:	0799      	lsls	r1, r3, #30
 8009428:	bf04      	itt	eq
 800942a:	089b      	lsreq	r3, r3, #2
 800942c:	3202      	addeq	r2, #2
 800942e:	07d9      	lsls	r1, r3, #31
 8009430:	d404      	bmi.n	800943c <__lo0bits+0x48>
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	d101      	bne.n	800943a <__lo0bits+0x46>
 8009436:	2020      	movs	r0, #32
 8009438:	4770      	bx	lr
 800943a:	3201      	adds	r2, #1
 800943c:	6003      	str	r3, [r0, #0]
 800943e:	4610      	mov	r0, r2
 8009440:	4770      	bx	lr
 8009442:	2000      	movs	r0, #0
 8009444:	4770      	bx	lr
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	6003      	str	r3, [r0, #0]
 800944a:	2001      	movs	r0, #1
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop

08009450 <__i2b>:
 8009450:	b510      	push	{r4, lr}
 8009452:	460c      	mov	r4, r1
 8009454:	2101      	movs	r1, #1
 8009456:	f7ff ff3b 	bl	80092d0 <_Balloc>
 800945a:	2201      	movs	r2, #1
 800945c:	6144      	str	r4, [r0, #20]
 800945e:	6102      	str	r2, [r0, #16]
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop

08009464 <__multiply>:
 8009464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009468:	690f      	ldr	r7, [r1, #16]
 800946a:	6916      	ldr	r6, [r2, #16]
 800946c:	42b7      	cmp	r7, r6
 800946e:	b083      	sub	sp, #12
 8009470:	460d      	mov	r5, r1
 8009472:	4614      	mov	r4, r2
 8009474:	f2c0 808d 	blt.w	8009592 <__multiply+0x12e>
 8009478:	4633      	mov	r3, r6
 800947a:	463e      	mov	r6, r7
 800947c:	461f      	mov	r7, r3
 800947e:	68ab      	ldr	r3, [r5, #8]
 8009480:	6869      	ldr	r1, [r5, #4]
 8009482:	eb06 0807 	add.w	r8, r6, r7
 8009486:	4598      	cmp	r8, r3
 8009488:	bfc8      	it	gt
 800948a:	3101      	addgt	r1, #1
 800948c:	f7ff ff20 	bl	80092d0 <_Balloc>
 8009490:	f100 0c14 	add.w	ip, r0, #20
 8009494:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
 8009498:	45cc      	cmp	ip, r9
 800949a:	9000      	str	r0, [sp, #0]
 800949c:	d205      	bcs.n	80094aa <__multiply+0x46>
 800949e:	4663      	mov	r3, ip
 80094a0:	2100      	movs	r1, #0
 80094a2:	f843 1b04 	str.w	r1, [r3], #4
 80094a6:	4599      	cmp	r9, r3
 80094a8:	d8fb      	bhi.n	80094a2 <__multiply+0x3e>
 80094aa:	f104 0214 	add.w	r2, r4, #20
 80094ae:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
 80094b2:	f105 0314 	add.w	r3, r5, #20
 80094b6:	4552      	cmp	r2, sl
 80094b8:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 80094bc:	d254      	bcs.n	8009568 <__multiply+0x104>
 80094be:	f8cd 9004 	str.w	r9, [sp, #4]
 80094c2:	4699      	mov	r9, r3
 80094c4:	f852 3b04 	ldr.w	r3, [r2], #4
 80094c8:	fa1f fb83 	uxth.w	fp, r3
 80094cc:	f1bb 0f00 	cmp.w	fp, #0
 80094d0:	d020      	beq.n	8009514 <__multiply+0xb0>
 80094d2:	2000      	movs	r0, #0
 80094d4:	464f      	mov	r7, r9
 80094d6:	4666      	mov	r6, ip
 80094d8:	4605      	mov	r5, r0
 80094da:	e000      	b.n	80094de <__multiply+0x7a>
 80094dc:	461e      	mov	r6, r3
 80094de:	f857 4b04 	ldr.w	r4, [r7], #4
 80094e2:	6830      	ldr	r0, [r6, #0]
 80094e4:	b2a1      	uxth	r1, r4
 80094e6:	b283      	uxth	r3, r0
 80094e8:	fb0b 3101 	mla	r1, fp, r1, r3
 80094ec:	0c24      	lsrs	r4, r4, #16
 80094ee:	0c00      	lsrs	r0, r0, #16
 80094f0:	194b      	adds	r3, r1, r5
 80094f2:	fb0b 0004 	mla	r0, fp, r4, r0
 80094f6:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 80094fa:	b299      	uxth	r1, r3
 80094fc:	4633      	mov	r3, r6
 80094fe:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009502:	45be      	cmp	lr, r7
 8009504:	ea4f 4510 	mov.w	r5, r0, lsr #16
 8009508:	f843 1b04 	str.w	r1, [r3], #4
 800950c:	d8e6      	bhi.n	80094dc <__multiply+0x78>
 800950e:	6075      	str	r5, [r6, #4]
 8009510:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8009514:	ea5f 4b13 	movs.w	fp, r3, lsr #16
 8009518:	d020      	beq.n	800955c <__multiply+0xf8>
 800951a:	f8dc 3000 	ldr.w	r3, [ip]
 800951e:	4667      	mov	r7, ip
 8009520:	4618      	mov	r0, r3
 8009522:	464d      	mov	r5, r9
 8009524:	2100      	movs	r1, #0
 8009526:	e000      	b.n	800952a <__multiply+0xc6>
 8009528:	4637      	mov	r7, r6
 800952a:	882c      	ldrh	r4, [r5, #0]
 800952c:	0c00      	lsrs	r0, r0, #16
 800952e:	fb0b 0004 	mla	r0, fp, r4, r0
 8009532:	4401      	add	r1, r0
 8009534:	b29c      	uxth	r4, r3
 8009536:	463e      	mov	r6, r7
 8009538:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
 800953c:	f846 3b04 	str.w	r3, [r6], #4
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f855 4b04 	ldr.w	r4, [r5], #4
 8009546:	b283      	uxth	r3, r0
 8009548:	0c24      	lsrs	r4, r4, #16
 800954a:	fb0b 3404 	mla	r4, fp, r4, r3
 800954e:	eb04 4311 	add.w	r3, r4, r1, lsr #16
 8009552:	45ae      	cmp	lr, r5
 8009554:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8009558:	d8e6      	bhi.n	8009528 <__multiply+0xc4>
 800955a:	607b      	str	r3, [r7, #4]
 800955c:	4592      	cmp	sl, r2
 800955e:	f10c 0c04 	add.w	ip, ip, #4
 8009562:	d8af      	bhi.n	80094c4 <__multiply+0x60>
 8009564:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8009568:	f1b8 0f00 	cmp.w	r8, #0
 800956c:	dd0b      	ble.n	8009586 <__multiply+0x122>
 800956e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 8009572:	f1a9 0904 	sub.w	r9, r9, #4
 8009576:	b11b      	cbz	r3, 8009580 <__multiply+0x11c>
 8009578:	e005      	b.n	8009586 <__multiply+0x122>
 800957a:	f859 3d04 	ldr.w	r3, [r9, #-4]!
 800957e:	b913      	cbnz	r3, 8009586 <__multiply+0x122>
 8009580:	f1b8 0801 	subs.w	r8, r8, #1
 8009584:	d1f9      	bne.n	800957a <__multiply+0x116>
 8009586:	9800      	ldr	r0, [sp, #0]
 8009588:	f8c0 8010 	str.w	r8, [r0, #16]
 800958c:	b003      	add	sp, #12
 800958e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009592:	4615      	mov	r5, r2
 8009594:	460c      	mov	r4, r1
 8009596:	e772      	b.n	800947e <__multiply+0x1a>

08009598 <__pow5mult>:
 8009598:	f012 0303 	ands.w	r3, r2, #3
 800959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095a0:	4614      	mov	r4, r2
 80095a2:	4607      	mov	r7, r0
 80095a4:	460e      	mov	r6, r1
 80095a6:	d12d      	bne.n	8009604 <__pow5mult+0x6c>
 80095a8:	10a4      	asrs	r4, r4, #2
 80095aa:	d01c      	beq.n	80095e6 <__pow5mult+0x4e>
 80095ac:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 80095ae:	b395      	cbz	r5, 8009616 <__pow5mult+0x7e>
 80095b0:	07e3      	lsls	r3, r4, #31
 80095b2:	f04f 0800 	mov.w	r8, #0
 80095b6:	d406      	bmi.n	80095c6 <__pow5mult+0x2e>
 80095b8:	1064      	asrs	r4, r4, #1
 80095ba:	d014      	beq.n	80095e6 <__pow5mult+0x4e>
 80095bc:	6828      	ldr	r0, [r5, #0]
 80095be:	b1a8      	cbz	r0, 80095ec <__pow5mult+0x54>
 80095c0:	4605      	mov	r5, r0
 80095c2:	07e3      	lsls	r3, r4, #31
 80095c4:	d5f8      	bpl.n	80095b8 <__pow5mult+0x20>
 80095c6:	4638      	mov	r0, r7
 80095c8:	4631      	mov	r1, r6
 80095ca:	462a      	mov	r2, r5
 80095cc:	f7ff ff4a 	bl	8009464 <__multiply>
 80095d0:	b1b6      	cbz	r6, 8009600 <__pow5mult+0x68>
 80095d2:	6872      	ldr	r2, [r6, #4]
 80095d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d6:	1064      	asrs	r4, r4, #1
 80095d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80095dc:	6031      	str	r1, [r6, #0]
 80095de:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80095e2:	4606      	mov	r6, r0
 80095e4:	d1ea      	bne.n	80095bc <__pow5mult+0x24>
 80095e6:	4630      	mov	r0, r6
 80095e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095ec:	4629      	mov	r1, r5
 80095ee:	462a      	mov	r2, r5
 80095f0:	4638      	mov	r0, r7
 80095f2:	f7ff ff37 	bl	8009464 <__multiply>
 80095f6:	6028      	str	r0, [r5, #0]
 80095f8:	f8c0 8000 	str.w	r8, [r0]
 80095fc:	4605      	mov	r5, r0
 80095fe:	e7e0      	b.n	80095c2 <__pow5mult+0x2a>
 8009600:	4606      	mov	r6, r0
 8009602:	e7d9      	b.n	80095b8 <__pow5mult+0x20>
 8009604:	1e5a      	subs	r2, r3, #1
 8009606:	4d0b      	ldr	r5, [pc, #44]	; (8009634 <__pow5mult+0x9c>)
 8009608:	2300      	movs	r3, #0
 800960a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 800960e:	f7ff fe8f 	bl	8009330 <__multadd>
 8009612:	4606      	mov	r6, r0
 8009614:	e7c8      	b.n	80095a8 <__pow5mult+0x10>
 8009616:	2101      	movs	r1, #1
 8009618:	4638      	mov	r0, r7
 800961a:	f7ff fe59 	bl	80092d0 <_Balloc>
 800961e:	f240 2171 	movw	r1, #625	; 0x271
 8009622:	2201      	movs	r2, #1
 8009624:	2300      	movs	r3, #0
 8009626:	6141      	str	r1, [r0, #20]
 8009628:	6102      	str	r2, [r0, #16]
 800962a:	4605      	mov	r5, r0
 800962c:	64b8      	str	r0, [r7, #72]	; 0x48
 800962e:	6003      	str	r3, [r0, #0]
 8009630:	e7be      	b.n	80095b0 <__pow5mult+0x18>
 8009632:	bf00      	nop
 8009634:	08019db0 	.word	0x08019db0

08009638 <__lshift>:
 8009638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800963c:	690f      	ldr	r7, [r1, #16]
 800963e:	688b      	ldr	r3, [r1, #8]
 8009640:	ea4f 1962 	mov.w	r9, r2, asr #5
 8009644:	444f      	add	r7, r9
 8009646:	1c7d      	adds	r5, r7, #1
 8009648:	429d      	cmp	r5, r3
 800964a:	460e      	mov	r6, r1
 800964c:	4614      	mov	r4, r2
 800964e:	6849      	ldr	r1, [r1, #4]
 8009650:	4680      	mov	r8, r0
 8009652:	dd04      	ble.n	800965e <__lshift+0x26>
 8009654:	005b      	lsls	r3, r3, #1
 8009656:	429d      	cmp	r5, r3
 8009658:	f101 0101 	add.w	r1, r1, #1
 800965c:	dcfa      	bgt.n	8009654 <__lshift+0x1c>
 800965e:	4640      	mov	r0, r8
 8009660:	f7ff fe36 	bl	80092d0 <_Balloc>
 8009664:	f1b9 0f00 	cmp.w	r9, #0
 8009668:	f100 0114 	add.w	r1, r0, #20
 800966c:	dd09      	ble.n	8009682 <__lshift+0x4a>
 800966e:	2300      	movs	r3, #0
 8009670:	469e      	mov	lr, r3
 8009672:	460a      	mov	r2, r1
 8009674:	3301      	adds	r3, #1
 8009676:	454b      	cmp	r3, r9
 8009678:	f842 eb04 	str.w	lr, [r2], #4
 800967c:	d1fa      	bne.n	8009674 <__lshift+0x3c>
 800967e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009682:	6932      	ldr	r2, [r6, #16]
 8009684:	f106 0314 	add.w	r3, r6, #20
 8009688:	f014 0c1f 	ands.w	ip, r4, #31
 800968c:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
 8009690:	d01f      	beq.n	80096d2 <__lshift+0x9a>
 8009692:	f1cc 0920 	rsb	r9, ip, #32
 8009696:	2200      	movs	r2, #0
 8009698:	681c      	ldr	r4, [r3, #0]
 800969a:	fa04 f40c 	lsl.w	r4, r4, ip
 800969e:	4314      	orrs	r4, r2
 80096a0:	468a      	mov	sl, r1
 80096a2:	f841 4b04 	str.w	r4, [r1], #4
 80096a6:	f853 4b04 	ldr.w	r4, [r3], #4
 80096aa:	459e      	cmp	lr, r3
 80096ac:	fa24 f209 	lsr.w	r2, r4, r9
 80096b0:	d8f2      	bhi.n	8009698 <__lshift+0x60>
 80096b2:	f8ca 2004 	str.w	r2, [sl, #4]
 80096b6:	b102      	cbz	r2, 80096ba <__lshift+0x82>
 80096b8:	1cbd      	adds	r5, r7, #2
 80096ba:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80096be:	6872      	ldr	r2, [r6, #4]
 80096c0:	3d01      	subs	r5, #1
 80096c2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096c6:	6105      	str	r5, [r0, #16]
 80096c8:	6031      	str	r1, [r6, #0]
 80096ca:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80096ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096d2:	3904      	subs	r1, #4
 80096d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80096d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80096dc:	459e      	cmp	lr, r3
 80096de:	d8f9      	bhi.n	80096d4 <__lshift+0x9c>
 80096e0:	e7eb      	b.n	80096ba <__lshift+0x82>
 80096e2:	bf00      	nop

080096e4 <__mcmp>:
 80096e4:	6902      	ldr	r2, [r0, #16]
 80096e6:	690b      	ldr	r3, [r1, #16]
 80096e8:	1ad2      	subs	r2, r2, r3
 80096ea:	d113      	bne.n	8009714 <__mcmp+0x30>
 80096ec:	009b      	lsls	r3, r3, #2
 80096ee:	3014      	adds	r0, #20
 80096f0:	3114      	adds	r1, #20
 80096f2:	4419      	add	r1, r3
 80096f4:	b410      	push	{r4}
 80096f6:	4403      	add	r3, r0
 80096f8:	e001      	b.n	80096fe <__mcmp+0x1a>
 80096fa:	4298      	cmp	r0, r3
 80096fc:	d20c      	bcs.n	8009718 <__mcmp+0x34>
 80096fe:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8009702:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009706:	4294      	cmp	r4, r2
 8009708:	d0f7      	beq.n	80096fa <__mcmp+0x16>
 800970a:	d309      	bcc.n	8009720 <__mcmp+0x3c>
 800970c:	2001      	movs	r0, #1
 800970e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009712:	4770      	bx	lr
 8009714:	4610      	mov	r0, r2
 8009716:	4770      	bx	lr
 8009718:	2000      	movs	r0, #0
 800971a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800971e:	4770      	bx	lr
 8009720:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009728:	4770      	bx	lr
 800972a:	bf00      	nop

0800972c <__mdiff>:
 800972c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009730:	460e      	mov	r6, r1
 8009732:	4605      	mov	r5, r0
 8009734:	4611      	mov	r1, r2
 8009736:	4630      	mov	r0, r6
 8009738:	4614      	mov	r4, r2
 800973a:	f7ff ffd3 	bl	80096e4 <__mcmp>
 800973e:	1e07      	subs	r7, r0, #0
 8009740:	d054      	beq.n	80097ec <__mdiff+0xc0>
 8009742:	db4d      	blt.n	80097e0 <__mdiff+0xb4>
 8009744:	f04f 0800 	mov.w	r8, #0
 8009748:	6871      	ldr	r1, [r6, #4]
 800974a:	4628      	mov	r0, r5
 800974c:	f7ff fdc0 	bl	80092d0 <_Balloc>
 8009750:	6937      	ldr	r7, [r6, #16]
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	f8c0 800c 	str.w	r8, [r0, #12]
 8009758:	3614      	adds	r6, #20
 800975a:	f104 0214 	add.w	r2, r4, #20
 800975e:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8009762:	f100 0514 	add.w	r5, r0, #20
 8009766:	eb06 0e87 	add.w	lr, r6, r7, lsl #2
 800976a:	2300      	movs	r3, #0
 800976c:	f856 8b04 	ldr.w	r8, [r6], #4
 8009770:	f852 4b04 	ldr.w	r4, [r2], #4
 8009774:	fa13 f388 	uxtah	r3, r3, r8
 8009778:	b2a1      	uxth	r1, r4
 800977a:	0c24      	lsrs	r4, r4, #16
 800977c:	1a59      	subs	r1, r3, r1
 800977e:	ebc4 4318 	rsb	r3, r4, r8, lsr #16
 8009782:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009786:	b289      	uxth	r1, r1
 8009788:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800978c:	4594      	cmp	ip, r2
 800978e:	f845 1b04 	str.w	r1, [r5], #4
 8009792:	ea4f 4323 	mov.w	r3, r3, asr #16
 8009796:	4634      	mov	r4, r6
 8009798:	d8e8      	bhi.n	800976c <__mdiff+0x40>
 800979a:	45b6      	cmp	lr, r6
 800979c:	46ac      	mov	ip, r5
 800979e:	d915      	bls.n	80097cc <__mdiff+0xa0>
 80097a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80097a4:	fa13 f182 	uxtah	r1, r3, r2
 80097a8:	0c13      	lsrs	r3, r2, #16
 80097aa:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80097ae:	b289      	uxth	r1, r1
 80097b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80097b4:	45a6      	cmp	lr, r4
 80097b6:	f845 1b04 	str.w	r1, [r5], #4
 80097ba:	ea4f 4323 	mov.w	r3, r3, asr #16
 80097be:	d8ef      	bhi.n	80097a0 <__mdiff+0x74>
 80097c0:	43f6      	mvns	r6, r6
 80097c2:	4476      	add	r6, lr
 80097c4:	f026 0503 	bic.w	r5, r6, #3
 80097c8:	3504      	adds	r5, #4
 80097ca:	4465      	add	r5, ip
 80097cc:	3d04      	subs	r5, #4
 80097ce:	b921      	cbnz	r1, 80097da <__mdiff+0xae>
 80097d0:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80097d4:	3f01      	subs	r7, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d0fa      	beq.n	80097d0 <__mdiff+0xa4>
 80097da:	6107      	str	r7, [r0, #16]
 80097dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097e0:	4633      	mov	r3, r6
 80097e2:	f04f 0801 	mov.w	r8, #1
 80097e6:	4626      	mov	r6, r4
 80097e8:	461c      	mov	r4, r3
 80097ea:	e7ad      	b.n	8009748 <__mdiff+0x1c>
 80097ec:	4628      	mov	r0, r5
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7ff fd6e 	bl	80092d0 <_Balloc>
 80097f4:	2301      	movs	r3, #1
 80097f6:	6147      	str	r7, [r0, #20]
 80097f8:	6103      	str	r3, [r0, #16]
 80097fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097fe:	bf00      	nop

08009800 <__d2b>:
 8009800:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009804:	ec57 6b10 	vmov	r6, r7, d0
 8009808:	b083      	sub	sp, #12
 800980a:	4688      	mov	r8, r1
 800980c:	2101      	movs	r1, #1
 800980e:	463c      	mov	r4, r7
 8009810:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009814:	4617      	mov	r7, r2
 8009816:	f7ff fd5b 	bl	80092d0 <_Balloc>
 800981a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800981e:	4681      	mov	r9, r0
 8009820:	b10d      	cbz	r5, 8009826 <__d2b+0x26>
 8009822:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8009826:	9401      	str	r4, [sp, #4]
 8009828:	b31e      	cbz	r6, 8009872 <__d2b+0x72>
 800982a:	a802      	add	r0, sp, #8
 800982c:	f840 6d08 	str.w	r6, [r0, #-8]!
 8009830:	f7ff fde0 	bl	80093f4 <__lo0bits>
 8009834:	2800      	cmp	r0, #0
 8009836:	d134      	bne.n	80098a2 <__d2b+0xa2>
 8009838:	e89d 000c 	ldmia.w	sp, {r2, r3}
 800983c:	f8c9 2014 	str.w	r2, [r9, #20]
 8009840:	2b00      	cmp	r3, #0
 8009842:	bf14      	ite	ne
 8009844:	2402      	movne	r4, #2
 8009846:	2401      	moveq	r4, #1
 8009848:	f8c9 3018 	str.w	r3, [r9, #24]
 800984c:	f8c9 4010 	str.w	r4, [r9, #16]
 8009850:	b9dd      	cbnz	r5, 800988a <__d2b+0x8a>
 8009852:	eb09 0384 	add.w	r3, r9, r4, lsl #2
 8009856:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800985a:	f8c8 0000 	str.w	r0, [r8]
 800985e:	6918      	ldr	r0, [r3, #16]
 8009860:	f7ff fda8 	bl	80093b4 <__hi0bits>
 8009864:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
 8009868:	6038      	str	r0, [r7, #0]
 800986a:	4648      	mov	r0, r9
 800986c:	b003      	add	sp, #12
 800986e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009872:	a801      	add	r0, sp, #4
 8009874:	f7ff fdbe 	bl	80093f4 <__lo0bits>
 8009878:	2401      	movs	r4, #1
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	f8c9 3014 	str.w	r3, [r9, #20]
 8009880:	3020      	adds	r0, #32
 8009882:	f8c9 4010 	str.w	r4, [r9, #16]
 8009886:	2d00      	cmp	r5, #0
 8009888:	d0e3      	beq.n	8009852 <__d2b+0x52>
 800988a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800988e:	4405      	add	r5, r0
 8009890:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009894:	f8c8 5000 	str.w	r5, [r8]
 8009898:	6038      	str	r0, [r7, #0]
 800989a:	4648      	mov	r0, r9
 800989c:	b003      	add	sp, #12
 800989e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098a2:	e89d 000c 	ldmia.w	sp, {r2, r3}
 80098a6:	f1c0 0120 	rsb	r1, r0, #32
 80098aa:	fa03 f101 	lsl.w	r1, r3, r1
 80098ae:	430a      	orrs	r2, r1
 80098b0:	40c3      	lsrs	r3, r0
 80098b2:	9301      	str	r3, [sp, #4]
 80098b4:	f8c9 2014 	str.w	r2, [r9, #20]
 80098b8:	e7c2      	b.n	8009840 <__d2b+0x40>
 80098ba:	bf00      	nop

080098bc <__ssprint_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	6893      	ldr	r3, [r2, #8]
 80098c2:	f8d2 8000 	ldr.w	r8, [r2]
 80098c6:	b083      	sub	sp, #12
 80098c8:	4691      	mov	r9, r2
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d072      	beq.n	80099b4 <__ssprint_r+0xf8>
 80098ce:	4607      	mov	r7, r0
 80098d0:	f04f 0b00 	mov.w	fp, #0
 80098d4:	6808      	ldr	r0, [r1, #0]
 80098d6:	688b      	ldr	r3, [r1, #8]
 80098d8:	460d      	mov	r5, r1
 80098da:	465c      	mov	r4, fp
 80098dc:	2c00      	cmp	r4, #0
 80098de:	d045      	beq.n	800996c <__ssprint_r+0xb0>
 80098e0:	429c      	cmp	r4, r3
 80098e2:	461e      	mov	r6, r3
 80098e4:	469a      	mov	sl, r3
 80098e6:	d348      	bcc.n	800997a <__ssprint_r+0xbe>
 80098e8:	89ab      	ldrh	r3, [r5, #12]
 80098ea:	f413 6f90 	tst.w	r3, #1152	; 0x480
 80098ee:	d02d      	beq.n	800994c <__ssprint_r+0x90>
 80098f0:	696e      	ldr	r6, [r5, #20]
 80098f2:	6929      	ldr	r1, [r5, #16]
 80098f4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80098f8:	ebc1 0a00 	rsb	sl, r1, r0
 80098fc:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
 8009900:	1c60      	adds	r0, r4, #1
 8009902:	1076      	asrs	r6, r6, #1
 8009904:	4450      	add	r0, sl
 8009906:	4286      	cmp	r6, r0
 8009908:	4632      	mov	r2, r6
 800990a:	bf3c      	itt	cc
 800990c:	4606      	movcc	r6, r0
 800990e:	4632      	movcc	r2, r6
 8009910:	055b      	lsls	r3, r3, #21
 8009912:	d535      	bpl.n	8009980 <__ssprint_r+0xc4>
 8009914:	4611      	mov	r1, r2
 8009916:	4638      	mov	r0, r7
 8009918:	f7ff f9fa 	bl	8008d10 <_malloc_r>
 800991c:	2800      	cmp	r0, #0
 800991e:	d039      	beq.n	8009994 <__ssprint_r+0xd8>
 8009920:	4652      	mov	r2, sl
 8009922:	6929      	ldr	r1, [r5, #16]
 8009924:	9001      	str	r0, [sp, #4]
 8009926:	f7f7 f9b7 	bl	8000c98 <memcpy>
 800992a:	89aa      	ldrh	r2, [r5, #12]
 800992c:	9b01      	ldr	r3, [sp, #4]
 800992e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009932:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009936:	81aa      	strh	r2, [r5, #12]
 8009938:	ebca 0206 	rsb	r2, sl, r6
 800993c:	eb03 000a 	add.w	r0, r3, sl
 8009940:	616e      	str	r6, [r5, #20]
 8009942:	612b      	str	r3, [r5, #16]
 8009944:	6028      	str	r0, [r5, #0]
 8009946:	60aa      	str	r2, [r5, #8]
 8009948:	4626      	mov	r6, r4
 800994a:	46a2      	mov	sl, r4
 800994c:	4652      	mov	r2, sl
 800994e:	4659      	mov	r1, fp
 8009950:	f000 f98c 	bl	8009c6c <memmove>
 8009954:	f8d9 2008 	ldr.w	r2, [r9, #8]
 8009958:	68ab      	ldr	r3, [r5, #8]
 800995a:	6828      	ldr	r0, [r5, #0]
 800995c:	1b9b      	subs	r3, r3, r6
 800995e:	4450      	add	r0, sl
 8009960:	1b14      	subs	r4, r2, r4
 8009962:	60ab      	str	r3, [r5, #8]
 8009964:	6028      	str	r0, [r5, #0]
 8009966:	f8c9 4008 	str.w	r4, [r9, #8]
 800996a:	b31c      	cbz	r4, 80099b4 <__ssprint_r+0xf8>
 800996c:	f8d8 b000 	ldr.w	fp, [r8]
 8009970:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009974:	f108 0808 	add.w	r8, r8, #8
 8009978:	e7b0      	b.n	80098dc <__ssprint_r+0x20>
 800997a:	4626      	mov	r6, r4
 800997c:	46a2      	mov	sl, r4
 800997e:	e7e5      	b.n	800994c <__ssprint_r+0x90>
 8009980:	4638      	mov	r0, r7
 8009982:	f000 f9d7 	bl	8009d34 <_realloc_r>
 8009986:	4603      	mov	r3, r0
 8009988:	2800      	cmp	r0, #0
 800998a:	d1d5      	bne.n	8009938 <__ssprint_r+0x7c>
 800998c:	4638      	mov	r0, r7
 800998e:	6929      	ldr	r1, [r5, #16]
 8009990:	f000 f894 	bl	8009abc <_free_r>
 8009994:	230c      	movs	r3, #12
 8009996:	603b      	str	r3, [r7, #0]
 8009998:	89ab      	ldrh	r3, [r5, #12]
 800999a:	2200      	movs	r2, #0
 800999c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80099a4:	81ab      	strh	r3, [r5, #12]
 80099a6:	f8c9 2008 	str.w	r2, [r9, #8]
 80099aa:	f8c9 2004 	str.w	r2, [r9, #4]
 80099ae:	b003      	add	sp, #12
 80099b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b4:	2000      	movs	r0, #0
 80099b6:	f8c9 0004 	str.w	r0, [r9, #4]
 80099ba:	b003      	add	sp, #12
 80099bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080099c0 <_calloc_r>:
 80099c0:	b510      	push	{r4, lr}
 80099c2:	fb02 f101 	mul.w	r1, r2, r1
 80099c6:	f7ff f9a3 	bl	8008d10 <_malloc_r>
 80099ca:	4604      	mov	r4, r0
 80099cc:	b168      	cbz	r0, 80099ea <_calloc_r+0x2a>
 80099ce:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80099d2:	f022 0203 	bic.w	r2, r2, #3
 80099d6:	3a04      	subs	r2, #4
 80099d8:	2a24      	cmp	r2, #36	; 0x24
 80099da:	d818      	bhi.n	8009a0e <_calloc_r+0x4e>
 80099dc:	2a13      	cmp	r2, #19
 80099de:	d806      	bhi.n	80099ee <_calloc_r+0x2e>
 80099e0:	4603      	mov	r3, r0
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	605a      	str	r2, [r3, #4]
 80099e8:	609a      	str	r2, [r3, #8]
 80099ea:	4620      	mov	r0, r4
 80099ec:	bd10      	pop	{r4, pc}
 80099ee:	2300      	movs	r3, #0
 80099f0:	2a1b      	cmp	r2, #27
 80099f2:	6003      	str	r3, [r0, #0]
 80099f4:	6043      	str	r3, [r0, #4]
 80099f6:	d90f      	bls.n	8009a18 <_calloc_r+0x58>
 80099f8:	2a24      	cmp	r2, #36	; 0x24
 80099fa:	6083      	str	r3, [r0, #8]
 80099fc:	60c3      	str	r3, [r0, #12]
 80099fe:	bf05      	ittet	eq
 8009a00:	6103      	streq	r3, [r0, #16]
 8009a02:	6143      	streq	r3, [r0, #20]
 8009a04:	f100 0310 	addne.w	r3, r0, #16
 8009a08:	f100 0318 	addeq.w	r3, r0, #24
 8009a0c:	e7e9      	b.n	80099e2 <_calloc_r+0x22>
 8009a0e:	2100      	movs	r1, #0
 8009a10:	f7fc fe82 	bl	8006718 <memset>
 8009a14:	4620      	mov	r0, r4
 8009a16:	bd10      	pop	{r4, pc}
 8009a18:	f100 0308 	add.w	r3, r0, #8
 8009a1c:	e7e1      	b.n	80099e2 <_calloc_r+0x22>
 8009a1e:	bf00      	nop

08009a20 <_malloc_trim_r>:
 8009a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a22:	4f23      	ldr	r7, [pc, #140]	; (8009ab0 <_malloc_trim_r+0x90>)
 8009a24:	460c      	mov	r4, r1
 8009a26:	4606      	mov	r6, r0
 8009a28:	f7ff fc4e 	bl	80092c8 <__malloc_lock>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	685d      	ldr	r5, [r3, #4]
 8009a30:	f025 0503 	bic.w	r5, r5, #3
 8009a34:	1b29      	subs	r1, r5, r4
 8009a36:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
 8009a3a:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8009a3e:	f021 010f 	bic.w	r1, r1, #15
 8009a42:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 8009a46:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8009a4a:	db07      	blt.n	8009a5c <_malloc_trim_r+0x3c>
 8009a4c:	4630      	mov	r0, r6
 8009a4e:	2100      	movs	r1, #0
 8009a50:	f7fb ffa6 	bl	80059a0 <_sbrk_r>
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	442b      	add	r3, r5
 8009a58:	4298      	cmp	r0, r3
 8009a5a:	d004      	beq.n	8009a66 <_malloc_trim_r+0x46>
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	f7ff fc35 	bl	80092cc <__malloc_unlock>
 8009a62:	2000      	movs	r0, #0
 8009a64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a66:	4630      	mov	r0, r6
 8009a68:	4261      	negs	r1, r4
 8009a6a:	f7fb ff99 	bl	80059a0 <_sbrk_r>
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d00d      	beq.n	8009a8e <_malloc_trim_r+0x6e>
 8009a72:	4b10      	ldr	r3, [pc, #64]	; (8009ab4 <_malloc_trim_r+0x94>)
 8009a74:	68ba      	ldr	r2, [r7, #8]
 8009a76:	6819      	ldr	r1, [r3, #0]
 8009a78:	1b2d      	subs	r5, r5, r4
 8009a7a:	f045 0501 	orr.w	r5, r5, #1
 8009a7e:	4630      	mov	r0, r6
 8009a80:	1b09      	subs	r1, r1, r4
 8009a82:	6055      	str	r5, [r2, #4]
 8009a84:	6019      	str	r1, [r3, #0]
 8009a86:	f7ff fc21 	bl	80092cc <__malloc_unlock>
 8009a8a:	2001      	movs	r0, #1
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009a8e:	4630      	mov	r0, r6
 8009a90:	2100      	movs	r1, #0
 8009a92:	f7fb ff85 	bl	80059a0 <_sbrk_r>
 8009a96:	68ba      	ldr	r2, [r7, #8]
 8009a98:	1a83      	subs	r3, r0, r2
 8009a9a:	2b0f      	cmp	r3, #15
 8009a9c:	ddde      	ble.n	8009a5c <_malloc_trim_r+0x3c>
 8009a9e:	4c06      	ldr	r4, [pc, #24]	; (8009ab8 <_malloc_trim_r+0x98>)
 8009aa0:	4904      	ldr	r1, [pc, #16]	; (8009ab4 <_malloc_trim_r+0x94>)
 8009aa2:	6824      	ldr	r4, [r4, #0]
 8009aa4:	f043 0301 	orr.w	r3, r3, #1
 8009aa8:	1b00      	subs	r0, r0, r4
 8009aaa:	6053      	str	r3, [r2, #4]
 8009aac:	6008      	str	r0, [r1, #0]
 8009aae:	e7d5      	b.n	8009a5c <_malloc_trim_r+0x3c>
 8009ab0:	20000c9c 	.word	0x20000c9c
 8009ab4:	20005c38 	.word	0x20005c38
 8009ab8:	200010a8 	.word	0x200010a8

08009abc <_free_r>:
 8009abc:	2900      	cmp	r1, #0
 8009abe:	d04e      	beq.n	8009b5e <_free_r+0xa2>
 8009ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac4:	460c      	mov	r4, r1
 8009ac6:	4680      	mov	r8, r0
 8009ac8:	f7ff fbfe 	bl	80092c8 <__malloc_lock>
 8009acc:	f854 7c04 	ldr.w	r7, [r4, #-4]
 8009ad0:	4962      	ldr	r1, [pc, #392]	; (8009c5c <_free_r+0x1a0>)
 8009ad2:	f027 0201 	bic.w	r2, r7, #1
 8009ad6:	f1a4 0508 	sub.w	r5, r4, #8
 8009ada:	18ab      	adds	r3, r5, r2
 8009adc:	688e      	ldr	r6, [r1, #8]
 8009ade:	6858      	ldr	r0, [r3, #4]
 8009ae0:	429e      	cmp	r6, r3
 8009ae2:	f020 0003 	bic.w	r0, r0, #3
 8009ae6:	d05a      	beq.n	8009b9e <_free_r+0xe2>
 8009ae8:	07fe      	lsls	r6, r7, #31
 8009aea:	6058      	str	r0, [r3, #4]
 8009aec:	d40b      	bmi.n	8009b06 <_free_r+0x4a>
 8009aee:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8009af2:	1bed      	subs	r5, r5, r7
 8009af4:	f101 0e08 	add.w	lr, r1, #8
 8009af8:	68ac      	ldr	r4, [r5, #8]
 8009afa:	4574      	cmp	r4, lr
 8009afc:	443a      	add	r2, r7
 8009afe:	d067      	beq.n	8009bd0 <_free_r+0x114>
 8009b00:	68ef      	ldr	r7, [r5, #12]
 8009b02:	60e7      	str	r7, [r4, #12]
 8009b04:	60bc      	str	r4, [r7, #8]
 8009b06:	181c      	adds	r4, r3, r0
 8009b08:	6864      	ldr	r4, [r4, #4]
 8009b0a:	07e4      	lsls	r4, r4, #31
 8009b0c:	d40c      	bmi.n	8009b28 <_free_r+0x6c>
 8009b0e:	4f54      	ldr	r7, [pc, #336]	; (8009c60 <_free_r+0x1a4>)
 8009b10:	689c      	ldr	r4, [r3, #8]
 8009b12:	42bc      	cmp	r4, r7
 8009b14:	4402      	add	r2, r0
 8009b16:	d07c      	beq.n	8009c12 <_free_r+0x156>
 8009b18:	68d8      	ldr	r0, [r3, #12]
 8009b1a:	60e0      	str	r0, [r4, #12]
 8009b1c:	f042 0301 	orr.w	r3, r2, #1
 8009b20:	6084      	str	r4, [r0, #8]
 8009b22:	606b      	str	r3, [r5, #4]
 8009b24:	50aa      	str	r2, [r5, r2]
 8009b26:	e003      	b.n	8009b30 <_free_r+0x74>
 8009b28:	f042 0301 	orr.w	r3, r2, #1
 8009b2c:	606b      	str	r3, [r5, #4]
 8009b2e:	50aa      	str	r2, [r5, r2]
 8009b30:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8009b34:	d214      	bcs.n	8009b60 <_free_r+0xa4>
 8009b36:	08d2      	lsrs	r2, r2, #3
 8009b38:	eb01 03c2 	add.w	r3, r1, r2, lsl #3
 8009b3c:	6848      	ldr	r0, [r1, #4]
 8009b3e:	689f      	ldr	r7, [r3, #8]
 8009b40:	60af      	str	r7, [r5, #8]
 8009b42:	1092      	asrs	r2, r2, #2
 8009b44:	2401      	movs	r4, #1
 8009b46:	fa04 f202 	lsl.w	r2, r4, r2
 8009b4a:	4310      	orrs	r0, r2
 8009b4c:	60eb      	str	r3, [r5, #12]
 8009b4e:	6048      	str	r0, [r1, #4]
 8009b50:	609d      	str	r5, [r3, #8]
 8009b52:	60fd      	str	r5, [r7, #12]
 8009b54:	4640      	mov	r0, r8
 8009b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b5a:	f7ff bbb7 	b.w	80092cc <__malloc_unlock>
 8009b5e:	4770      	bx	lr
 8009b60:	0a53      	lsrs	r3, r2, #9
 8009b62:	2b04      	cmp	r3, #4
 8009b64:	d847      	bhi.n	8009bf6 <_free_r+0x13a>
 8009b66:	0993      	lsrs	r3, r2, #6
 8009b68:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8009b6c:	0060      	lsls	r0, r4, #1
 8009b6e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8009b72:	493a      	ldr	r1, [pc, #232]	; (8009c5c <_free_r+0x1a0>)
 8009b74:	6883      	ldr	r3, [r0, #8]
 8009b76:	4283      	cmp	r3, r0
 8009b78:	d043      	beq.n	8009c02 <_free_r+0x146>
 8009b7a:	6859      	ldr	r1, [r3, #4]
 8009b7c:	f021 0103 	bic.w	r1, r1, #3
 8009b80:	4291      	cmp	r1, r2
 8009b82:	d902      	bls.n	8009b8a <_free_r+0xce>
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	4298      	cmp	r0, r3
 8009b88:	d1f7      	bne.n	8009b7a <_free_r+0xbe>
 8009b8a:	68da      	ldr	r2, [r3, #12]
 8009b8c:	60ea      	str	r2, [r5, #12]
 8009b8e:	60ab      	str	r3, [r5, #8]
 8009b90:	4640      	mov	r0, r8
 8009b92:	6095      	str	r5, [r2, #8]
 8009b94:	60dd      	str	r5, [r3, #12]
 8009b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009b9a:	f7ff bb97 	b.w	80092cc <__malloc_unlock>
 8009b9e:	07ff      	lsls	r7, r7, #31
 8009ba0:	4402      	add	r2, r0
 8009ba2:	d407      	bmi.n	8009bb4 <_free_r+0xf8>
 8009ba4:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8009ba8:	1aed      	subs	r5, r5, r3
 8009baa:	441a      	add	r2, r3
 8009bac:	68a8      	ldr	r0, [r5, #8]
 8009bae:	68eb      	ldr	r3, [r5, #12]
 8009bb0:	60c3      	str	r3, [r0, #12]
 8009bb2:	6098      	str	r0, [r3, #8]
 8009bb4:	4b2b      	ldr	r3, [pc, #172]	; (8009c64 <_free_r+0x1a8>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f042 0001 	orr.w	r0, r2, #1
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	6068      	str	r0, [r5, #4]
 8009bc0:	608d      	str	r5, [r1, #8]
 8009bc2:	d3c7      	bcc.n	8009b54 <_free_r+0x98>
 8009bc4:	4b28      	ldr	r3, [pc, #160]	; (8009c68 <_free_r+0x1ac>)
 8009bc6:	4640      	mov	r0, r8
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	f7ff ff29 	bl	8009a20 <_malloc_trim_r>
 8009bce:	e7c1      	b.n	8009b54 <_free_r+0x98>
 8009bd0:	1819      	adds	r1, r3, r0
 8009bd2:	6849      	ldr	r1, [r1, #4]
 8009bd4:	07c9      	lsls	r1, r1, #31
 8009bd6:	d409      	bmi.n	8009bec <_free_r+0x130>
 8009bd8:	68d9      	ldr	r1, [r3, #12]
 8009bda:	689b      	ldr	r3, [r3, #8]
 8009bdc:	4402      	add	r2, r0
 8009bde:	f042 0001 	orr.w	r0, r2, #1
 8009be2:	60d9      	str	r1, [r3, #12]
 8009be4:	608b      	str	r3, [r1, #8]
 8009be6:	6068      	str	r0, [r5, #4]
 8009be8:	50aa      	str	r2, [r5, r2]
 8009bea:	e7b3      	b.n	8009b54 <_free_r+0x98>
 8009bec:	f042 0301 	orr.w	r3, r2, #1
 8009bf0:	606b      	str	r3, [r5, #4]
 8009bf2:	50aa      	str	r2, [r5, r2]
 8009bf4:	e7ae      	b.n	8009b54 <_free_r+0x98>
 8009bf6:	2b14      	cmp	r3, #20
 8009bf8:	d814      	bhi.n	8009c24 <_free_r+0x168>
 8009bfa:	f103 045b 	add.w	r4, r3, #91	; 0x5b
 8009bfe:	0060      	lsls	r0, r4, #1
 8009c00:	e7b5      	b.n	8009b6e <_free_r+0xb2>
 8009c02:	684a      	ldr	r2, [r1, #4]
 8009c04:	10a4      	asrs	r4, r4, #2
 8009c06:	2001      	movs	r0, #1
 8009c08:	40a0      	lsls	r0, r4
 8009c0a:	4302      	orrs	r2, r0
 8009c0c:	604a      	str	r2, [r1, #4]
 8009c0e:	461a      	mov	r2, r3
 8009c10:	e7bc      	b.n	8009b8c <_free_r+0xd0>
 8009c12:	f042 0301 	orr.w	r3, r2, #1
 8009c16:	614d      	str	r5, [r1, #20]
 8009c18:	610d      	str	r5, [r1, #16]
 8009c1a:	60ec      	str	r4, [r5, #12]
 8009c1c:	60ac      	str	r4, [r5, #8]
 8009c1e:	606b      	str	r3, [r5, #4]
 8009c20:	50aa      	str	r2, [r5, r2]
 8009c22:	e797      	b.n	8009b54 <_free_r+0x98>
 8009c24:	2b54      	cmp	r3, #84	; 0x54
 8009c26:	d804      	bhi.n	8009c32 <_free_r+0x176>
 8009c28:	0b13      	lsrs	r3, r2, #12
 8009c2a:	f103 046e 	add.w	r4, r3, #110	; 0x6e
 8009c2e:	0060      	lsls	r0, r4, #1
 8009c30:	e79d      	b.n	8009b6e <_free_r+0xb2>
 8009c32:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009c36:	d804      	bhi.n	8009c42 <_free_r+0x186>
 8009c38:	0bd3      	lsrs	r3, r2, #15
 8009c3a:	f103 0477 	add.w	r4, r3, #119	; 0x77
 8009c3e:	0060      	lsls	r0, r4, #1
 8009c40:	e795      	b.n	8009b6e <_free_r+0xb2>
 8009c42:	f240 5054 	movw	r0, #1364	; 0x554
 8009c46:	4283      	cmp	r3, r0
 8009c48:	d804      	bhi.n	8009c54 <_free_r+0x198>
 8009c4a:	0c93      	lsrs	r3, r2, #18
 8009c4c:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 8009c50:	0060      	lsls	r0, r4, #1
 8009c52:	e78c      	b.n	8009b6e <_free_r+0xb2>
 8009c54:	20fc      	movs	r0, #252	; 0xfc
 8009c56:	247e      	movs	r4, #126	; 0x7e
 8009c58:	e789      	b.n	8009b6e <_free_r+0xb2>
 8009c5a:	bf00      	nop
 8009c5c:	20000c9c 	.word	0x20000c9c
 8009c60:	20000ca4 	.word	0x20000ca4
 8009c64:	200010a4 	.word	0x200010a4
 8009c68:	20005c34 	.word	0x20005c34

08009c6c <memmove>:
 8009c6c:	4288      	cmp	r0, r1
 8009c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009c70:	d90d      	bls.n	8009c8e <memmove+0x22>
 8009c72:	188b      	adds	r3, r1, r2
 8009c74:	4298      	cmp	r0, r3
 8009c76:	d20a      	bcs.n	8009c8e <memmove+0x22>
 8009c78:	1881      	adds	r1, r0, r2
 8009c7a:	2a00      	cmp	r2, #0
 8009c7c:	d054      	beq.n	8009d28 <memmove+0xbc>
 8009c7e:	1a9a      	subs	r2, r3, r2
 8009c80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c84:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	d1f9      	bne.n	8009c80 <memmove+0x14>
 8009c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c8e:	2a0f      	cmp	r2, #15
 8009c90:	d948      	bls.n	8009d24 <memmove+0xb8>
 8009c92:	ea40 0301 	orr.w	r3, r0, r1
 8009c96:	079b      	lsls	r3, r3, #30
 8009c98:	d147      	bne.n	8009d2a <memmove+0xbe>
 8009c9a:	f100 0410 	add.w	r4, r0, #16
 8009c9e:	f101 0310 	add.w	r3, r1, #16
 8009ca2:	4615      	mov	r5, r2
 8009ca4:	f853 6c10 	ldr.w	r6, [r3, #-16]
 8009ca8:	f844 6c10 	str.w	r6, [r4, #-16]
 8009cac:	f853 6c0c 	ldr.w	r6, [r3, #-12]
 8009cb0:	f844 6c0c 	str.w	r6, [r4, #-12]
 8009cb4:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8009cb8:	f844 6c08 	str.w	r6, [r4, #-8]
 8009cbc:	3d10      	subs	r5, #16
 8009cbe:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8009cc2:	f844 6c04 	str.w	r6, [r4, #-4]
 8009cc6:	2d0f      	cmp	r5, #15
 8009cc8:	f103 0310 	add.w	r3, r3, #16
 8009ccc:	f104 0410 	add.w	r4, r4, #16
 8009cd0:	d8e8      	bhi.n	8009ca4 <memmove+0x38>
 8009cd2:	f1a2 0310 	sub.w	r3, r2, #16
 8009cd6:	f023 030f 	bic.w	r3, r3, #15
 8009cda:	f002 0e0f 	and.w	lr, r2, #15
 8009cde:	3310      	adds	r3, #16
 8009ce0:	f1be 0f03 	cmp.w	lr, #3
 8009ce4:	4419      	add	r1, r3
 8009ce6:	4403      	add	r3, r0
 8009ce8:	d921      	bls.n	8009d2e <memmove+0xc2>
 8009cea:	1f1e      	subs	r6, r3, #4
 8009cec:	460d      	mov	r5, r1
 8009cee:	4674      	mov	r4, lr
 8009cf0:	3c04      	subs	r4, #4
 8009cf2:	f855 7b04 	ldr.w	r7, [r5], #4
 8009cf6:	f846 7f04 	str.w	r7, [r6, #4]!
 8009cfa:	2c03      	cmp	r4, #3
 8009cfc:	d8f8      	bhi.n	8009cf0 <memmove+0x84>
 8009cfe:	f1ae 0404 	sub.w	r4, lr, #4
 8009d02:	f024 0403 	bic.w	r4, r4, #3
 8009d06:	3404      	adds	r4, #4
 8009d08:	4423      	add	r3, r4
 8009d0a:	4421      	add	r1, r4
 8009d0c:	f002 0203 	and.w	r2, r2, #3
 8009d10:	b152      	cbz	r2, 8009d28 <memmove+0xbc>
 8009d12:	3b01      	subs	r3, #1
 8009d14:	440a      	add	r2, r1
 8009d16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d1e:	4291      	cmp	r1, r2
 8009d20:	d1f9      	bne.n	8009d16 <memmove+0xaa>
 8009d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d24:	4603      	mov	r3, r0
 8009d26:	e7f3      	b.n	8009d10 <memmove+0xa4>
 8009d28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	e7f1      	b.n	8009d12 <memmove+0xa6>
 8009d2e:	4672      	mov	r2, lr
 8009d30:	e7ee      	b.n	8009d10 <memmove+0xa4>
 8009d32:	bf00      	nop

08009d34 <_realloc_r>:
 8009d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d38:	4617      	mov	r7, r2
 8009d3a:	b083      	sub	sp, #12
 8009d3c:	460e      	mov	r6, r1
 8009d3e:	2900      	cmp	r1, #0
 8009d40:	f000 80e7 	beq.w	8009f12 <_realloc_r+0x1de>
 8009d44:	4681      	mov	r9, r0
 8009d46:	f107 050b 	add.w	r5, r7, #11
 8009d4a:	f7ff fabd 	bl	80092c8 <__malloc_lock>
 8009d4e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009d52:	2d16      	cmp	r5, #22
 8009d54:	f023 0403 	bic.w	r4, r3, #3
 8009d58:	f1a6 0808 	sub.w	r8, r6, #8
 8009d5c:	d84c      	bhi.n	8009df8 <_realloc_r+0xc4>
 8009d5e:	2210      	movs	r2, #16
 8009d60:	4615      	mov	r5, r2
 8009d62:	42af      	cmp	r7, r5
 8009d64:	d84d      	bhi.n	8009e02 <_realloc_r+0xce>
 8009d66:	4294      	cmp	r4, r2
 8009d68:	f280 8084 	bge.w	8009e74 <_realloc_r+0x140>
 8009d6c:	f8df b3ac 	ldr.w	fp, [pc, #940]	; 800a11c <_realloc_r+0x3e8>
 8009d70:	f8db 0008 	ldr.w	r0, [fp, #8]
 8009d74:	eb08 0104 	add.w	r1, r8, r4
 8009d78:	4288      	cmp	r0, r1
 8009d7a:	f000 80d6 	beq.w	8009f2a <_realloc_r+0x1f6>
 8009d7e:	6848      	ldr	r0, [r1, #4]
 8009d80:	f020 0e01 	bic.w	lr, r0, #1
 8009d84:	448e      	add	lr, r1
 8009d86:	f8de e004 	ldr.w	lr, [lr, #4]
 8009d8a:	f01e 0f01 	tst.w	lr, #1
 8009d8e:	d13f      	bne.n	8009e10 <_realloc_r+0xdc>
 8009d90:	f020 0003 	bic.w	r0, r0, #3
 8009d94:	4420      	add	r0, r4
 8009d96:	4290      	cmp	r0, r2
 8009d98:	f280 80c1 	bge.w	8009f1e <_realloc_r+0x1ea>
 8009d9c:	07db      	lsls	r3, r3, #31
 8009d9e:	f100 808f 	bmi.w	8009ec0 <_realloc_r+0x18c>
 8009da2:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009da6:	ebc3 0a08 	rsb	sl, r3, r8
 8009daa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009dae:	f023 0303 	bic.w	r3, r3, #3
 8009db2:	eb00 0e03 	add.w	lr, r0, r3
 8009db6:	4596      	cmp	lr, r2
 8009db8:	db34      	blt.n	8009e24 <_realloc_r+0xf0>
 8009dba:	68cb      	ldr	r3, [r1, #12]
 8009dbc:	688a      	ldr	r2, [r1, #8]
 8009dbe:	4657      	mov	r7, sl
 8009dc0:	60d3      	str	r3, [r2, #12]
 8009dc2:	609a      	str	r2, [r3, #8]
 8009dc4:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009dc8:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009dcc:	60cb      	str	r3, [r1, #12]
 8009dce:	1f22      	subs	r2, r4, #4
 8009dd0:	2a24      	cmp	r2, #36	; 0x24
 8009dd2:	6099      	str	r1, [r3, #8]
 8009dd4:	f200 8136 	bhi.w	800a044 <_realloc_r+0x310>
 8009dd8:	2a13      	cmp	r2, #19
 8009dda:	f240 80fd 	bls.w	8009fd8 <_realloc_r+0x2a4>
 8009dde:	6833      	ldr	r3, [r6, #0]
 8009de0:	f8ca 3008 	str.w	r3, [sl, #8]
 8009de4:	6873      	ldr	r3, [r6, #4]
 8009de6:	f8ca 300c 	str.w	r3, [sl, #12]
 8009dea:	2a1b      	cmp	r2, #27
 8009dec:	f200 8140 	bhi.w	800a070 <_realloc_r+0x33c>
 8009df0:	3608      	adds	r6, #8
 8009df2:	f10a 0310 	add.w	r3, sl, #16
 8009df6:	e0f0      	b.n	8009fda <_realloc_r+0x2a6>
 8009df8:	f025 0507 	bic.w	r5, r5, #7
 8009dfc:	2d00      	cmp	r5, #0
 8009dfe:	462a      	mov	r2, r5
 8009e00:	daaf      	bge.n	8009d62 <_realloc_r+0x2e>
 8009e02:	230c      	movs	r3, #12
 8009e04:	2000      	movs	r0, #0
 8009e06:	f8c9 3000 	str.w	r3, [r9]
 8009e0a:	b003      	add	sp, #12
 8009e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e10:	07d9      	lsls	r1, r3, #31
 8009e12:	d455      	bmi.n	8009ec0 <_realloc_r+0x18c>
 8009e14:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009e18:	ebc3 0a08 	rsb	sl, r3, r8
 8009e1c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e20:	f023 0303 	bic.w	r3, r3, #3
 8009e24:	4423      	add	r3, r4
 8009e26:	4293      	cmp	r3, r2
 8009e28:	db4a      	blt.n	8009ec0 <_realloc_r+0x18c>
 8009e2a:	4657      	mov	r7, sl
 8009e2c:	f8da 100c 	ldr.w	r1, [sl, #12]
 8009e30:	f857 0f08 	ldr.w	r0, [r7, #8]!
 8009e34:	1f22      	subs	r2, r4, #4
 8009e36:	2a24      	cmp	r2, #36	; 0x24
 8009e38:	60c1      	str	r1, [r0, #12]
 8009e3a:	6088      	str	r0, [r1, #8]
 8009e3c:	f200 810e 	bhi.w	800a05c <_realloc_r+0x328>
 8009e40:	2a13      	cmp	r2, #19
 8009e42:	f240 8109 	bls.w	800a058 <_realloc_r+0x324>
 8009e46:	6831      	ldr	r1, [r6, #0]
 8009e48:	f8ca 1008 	str.w	r1, [sl, #8]
 8009e4c:	6871      	ldr	r1, [r6, #4]
 8009e4e:	f8ca 100c 	str.w	r1, [sl, #12]
 8009e52:	2a1b      	cmp	r2, #27
 8009e54:	f200 8121 	bhi.w	800a09a <_realloc_r+0x366>
 8009e58:	3608      	adds	r6, #8
 8009e5a:	f10a 0210 	add.w	r2, sl, #16
 8009e5e:	6831      	ldr	r1, [r6, #0]
 8009e60:	6011      	str	r1, [r2, #0]
 8009e62:	6871      	ldr	r1, [r6, #4]
 8009e64:	6051      	str	r1, [r2, #4]
 8009e66:	68b1      	ldr	r1, [r6, #8]
 8009e68:	6091      	str	r1, [r2, #8]
 8009e6a:	461c      	mov	r4, r3
 8009e6c:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009e70:	463e      	mov	r6, r7
 8009e72:	46d0      	mov	r8, sl
 8009e74:	1b62      	subs	r2, r4, r5
 8009e76:	2a0f      	cmp	r2, #15
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	d80e      	bhi.n	8009e9c <_realloc_r+0x168>
 8009e7e:	4323      	orrs	r3, r4
 8009e80:	4444      	add	r4, r8
 8009e82:	f8c8 3004 	str.w	r3, [r8, #4]
 8009e86:	6863      	ldr	r3, [r4, #4]
 8009e88:	f043 0301 	orr.w	r3, r3, #1
 8009e8c:	6063      	str	r3, [r4, #4]
 8009e8e:	4648      	mov	r0, r9
 8009e90:	f7ff fa1c 	bl	80092cc <__malloc_unlock>
 8009e94:	4630      	mov	r0, r6
 8009e96:	b003      	add	sp, #12
 8009e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9c:	eb08 0105 	add.w	r1, r8, r5
 8009ea0:	431d      	orrs	r5, r3
 8009ea2:	f042 0301 	orr.w	r3, r2, #1
 8009ea6:	440a      	add	r2, r1
 8009ea8:	f8c8 5004 	str.w	r5, [r8, #4]
 8009eac:	604b      	str	r3, [r1, #4]
 8009eae:	6853      	ldr	r3, [r2, #4]
 8009eb0:	f043 0301 	orr.w	r3, r3, #1
 8009eb4:	3108      	adds	r1, #8
 8009eb6:	6053      	str	r3, [r2, #4]
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f7ff fdff 	bl	8009abc <_free_r>
 8009ebe:	e7e6      	b.n	8009e8e <_realloc_r+0x15a>
 8009ec0:	4639      	mov	r1, r7
 8009ec2:	4648      	mov	r0, r9
 8009ec4:	f7fe ff24 	bl	8008d10 <_malloc_r>
 8009ec8:	4607      	mov	r7, r0
 8009eca:	b1d8      	cbz	r0, 8009f04 <_realloc_r+0x1d0>
 8009ecc:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009ed0:	f023 0201 	bic.w	r2, r3, #1
 8009ed4:	4442      	add	r2, r8
 8009ed6:	f1a0 0108 	sub.w	r1, r0, #8
 8009eda:	4291      	cmp	r1, r2
 8009edc:	f000 80ac 	beq.w	800a038 <_realloc_r+0x304>
 8009ee0:	1f22      	subs	r2, r4, #4
 8009ee2:	2a24      	cmp	r2, #36	; 0x24
 8009ee4:	f200 8099 	bhi.w	800a01a <_realloc_r+0x2e6>
 8009ee8:	2a13      	cmp	r2, #19
 8009eea:	d86a      	bhi.n	8009fc2 <_realloc_r+0x28e>
 8009eec:	4603      	mov	r3, r0
 8009eee:	4632      	mov	r2, r6
 8009ef0:	6811      	ldr	r1, [r2, #0]
 8009ef2:	6019      	str	r1, [r3, #0]
 8009ef4:	6851      	ldr	r1, [r2, #4]
 8009ef6:	6059      	str	r1, [r3, #4]
 8009ef8:	6892      	ldr	r2, [r2, #8]
 8009efa:	609a      	str	r2, [r3, #8]
 8009efc:	4631      	mov	r1, r6
 8009efe:	4648      	mov	r0, r9
 8009f00:	f7ff fddc 	bl	8009abc <_free_r>
 8009f04:	4648      	mov	r0, r9
 8009f06:	f7ff f9e1 	bl	80092cc <__malloc_unlock>
 8009f0a:	4638      	mov	r0, r7
 8009f0c:	b003      	add	sp, #12
 8009f0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f12:	4611      	mov	r1, r2
 8009f14:	b003      	add	sp, #12
 8009f16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f7fe bef9 	b.w	8008d10 <_malloc_r>
 8009f1e:	68ca      	ldr	r2, [r1, #12]
 8009f20:	6889      	ldr	r1, [r1, #8]
 8009f22:	4604      	mov	r4, r0
 8009f24:	60ca      	str	r2, [r1, #12]
 8009f26:	6091      	str	r1, [r2, #8]
 8009f28:	e7a4      	b.n	8009e74 <_realloc_r+0x140>
 8009f2a:	6841      	ldr	r1, [r0, #4]
 8009f2c:	f021 0103 	bic.w	r1, r1, #3
 8009f30:	4421      	add	r1, r4
 8009f32:	f105 0010 	add.w	r0, r5, #16
 8009f36:	4281      	cmp	r1, r0
 8009f38:	da5b      	bge.n	8009ff2 <_realloc_r+0x2be>
 8009f3a:	07db      	lsls	r3, r3, #31
 8009f3c:	d4c0      	bmi.n	8009ec0 <_realloc_r+0x18c>
 8009f3e:	f856 3c08 	ldr.w	r3, [r6, #-8]
 8009f42:	ebc3 0a08 	rsb	sl, r3, r8
 8009f46:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	eb01 0c03 	add.w	ip, r1, r3
 8009f52:	4560      	cmp	r0, ip
 8009f54:	f73f af66 	bgt.w	8009e24 <_realloc_r+0xf0>
 8009f58:	4657      	mov	r7, sl
 8009f5a:	f8da 300c 	ldr.w	r3, [sl, #12]
 8009f5e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8009f62:	1f22      	subs	r2, r4, #4
 8009f64:	2a24      	cmp	r2, #36	; 0x24
 8009f66:	60cb      	str	r3, [r1, #12]
 8009f68:	6099      	str	r1, [r3, #8]
 8009f6a:	f200 80b8 	bhi.w	800a0de <_realloc_r+0x3aa>
 8009f6e:	2a13      	cmp	r2, #19
 8009f70:	f240 80a9 	bls.w	800a0c6 <_realloc_r+0x392>
 8009f74:	6833      	ldr	r3, [r6, #0]
 8009f76:	f8ca 3008 	str.w	r3, [sl, #8]
 8009f7a:	6873      	ldr	r3, [r6, #4]
 8009f7c:	f8ca 300c 	str.w	r3, [sl, #12]
 8009f80:	2a1b      	cmp	r2, #27
 8009f82:	f200 80b5 	bhi.w	800a0f0 <_realloc_r+0x3bc>
 8009f86:	3608      	adds	r6, #8
 8009f88:	f10a 0310 	add.w	r3, sl, #16
 8009f8c:	6832      	ldr	r2, [r6, #0]
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	6872      	ldr	r2, [r6, #4]
 8009f92:	605a      	str	r2, [r3, #4]
 8009f94:	68b2      	ldr	r2, [r6, #8]
 8009f96:	609a      	str	r2, [r3, #8]
 8009f98:	eb0a 0205 	add.w	r2, sl, r5
 8009f9c:	ebc5 030c 	rsb	r3, r5, ip
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	f8cb 2008 	str.w	r2, [fp, #8]
 8009fa8:	6053      	str	r3, [r2, #4]
 8009faa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009fae:	f003 0301 	and.w	r3, r3, #1
 8009fb2:	431d      	orrs	r5, r3
 8009fb4:	4648      	mov	r0, r9
 8009fb6:	f8ca 5004 	str.w	r5, [sl, #4]
 8009fba:	f7ff f987 	bl	80092cc <__malloc_unlock>
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	e769      	b.n	8009e96 <_realloc_r+0x162>
 8009fc2:	6833      	ldr	r3, [r6, #0]
 8009fc4:	6003      	str	r3, [r0, #0]
 8009fc6:	6873      	ldr	r3, [r6, #4]
 8009fc8:	6043      	str	r3, [r0, #4]
 8009fca:	2a1b      	cmp	r2, #27
 8009fcc:	d829      	bhi.n	800a022 <_realloc_r+0x2ee>
 8009fce:	f100 0308 	add.w	r3, r0, #8
 8009fd2:	f106 0208 	add.w	r2, r6, #8
 8009fd6:	e78b      	b.n	8009ef0 <_realloc_r+0x1bc>
 8009fd8:	463b      	mov	r3, r7
 8009fda:	6832      	ldr	r2, [r6, #0]
 8009fdc:	601a      	str	r2, [r3, #0]
 8009fde:	6872      	ldr	r2, [r6, #4]
 8009fe0:	605a      	str	r2, [r3, #4]
 8009fe2:	68b2      	ldr	r2, [r6, #8]
 8009fe4:	609a      	str	r2, [r3, #8]
 8009fe6:	463e      	mov	r6, r7
 8009fe8:	4674      	mov	r4, lr
 8009fea:	f8da 3004 	ldr.w	r3, [sl, #4]
 8009fee:	46d0      	mov	r8, sl
 8009ff0:	e740      	b.n	8009e74 <_realloc_r+0x140>
 8009ff2:	eb08 0205 	add.w	r2, r8, r5
 8009ff6:	1b4b      	subs	r3, r1, r5
 8009ff8:	f043 0301 	orr.w	r3, r3, #1
 8009ffc:	f8cb 2008 	str.w	r2, [fp, #8]
 800a000:	6053      	str	r3, [r2, #4]
 800a002:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	431d      	orrs	r5, r3
 800a00c:	4648      	mov	r0, r9
 800a00e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a012:	f7ff f95b 	bl	80092cc <__malloc_unlock>
 800a016:	4630      	mov	r0, r6
 800a018:	e73d      	b.n	8009e96 <_realloc_r+0x162>
 800a01a:	4631      	mov	r1, r6
 800a01c:	f7ff fe26 	bl	8009c6c <memmove>
 800a020:	e76c      	b.n	8009efc <_realloc_r+0x1c8>
 800a022:	68b3      	ldr	r3, [r6, #8]
 800a024:	6083      	str	r3, [r0, #8]
 800a026:	68f3      	ldr	r3, [r6, #12]
 800a028:	60c3      	str	r3, [r0, #12]
 800a02a:	2a24      	cmp	r2, #36	; 0x24
 800a02c:	d02c      	beq.n	800a088 <_realloc_r+0x354>
 800a02e:	f100 0310 	add.w	r3, r0, #16
 800a032:	f106 0210 	add.w	r2, r6, #16
 800a036:	e75b      	b.n	8009ef0 <_realloc_r+0x1bc>
 800a038:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a03c:	f022 0203 	bic.w	r2, r2, #3
 800a040:	4414      	add	r4, r2
 800a042:	e717      	b.n	8009e74 <_realloc_r+0x140>
 800a044:	4631      	mov	r1, r6
 800a046:	4638      	mov	r0, r7
 800a048:	4674      	mov	r4, lr
 800a04a:	463e      	mov	r6, r7
 800a04c:	f7ff fe0e 	bl	8009c6c <memmove>
 800a050:	46d0      	mov	r8, sl
 800a052:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a056:	e70d      	b.n	8009e74 <_realloc_r+0x140>
 800a058:	463a      	mov	r2, r7
 800a05a:	e700      	b.n	8009e5e <_realloc_r+0x12a>
 800a05c:	4631      	mov	r1, r6
 800a05e:	4638      	mov	r0, r7
 800a060:	461c      	mov	r4, r3
 800a062:	463e      	mov	r6, r7
 800a064:	f7ff fe02 	bl	8009c6c <memmove>
 800a068:	46d0      	mov	r8, sl
 800a06a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a06e:	e701      	b.n	8009e74 <_realloc_r+0x140>
 800a070:	68b3      	ldr	r3, [r6, #8]
 800a072:	f8ca 3010 	str.w	r3, [sl, #16]
 800a076:	68f3      	ldr	r3, [r6, #12]
 800a078:	f8ca 3014 	str.w	r3, [sl, #20]
 800a07c:	2a24      	cmp	r2, #36	; 0x24
 800a07e:	d018      	beq.n	800a0b2 <_realloc_r+0x37e>
 800a080:	3610      	adds	r6, #16
 800a082:	f10a 0318 	add.w	r3, sl, #24
 800a086:	e7a8      	b.n	8009fda <_realloc_r+0x2a6>
 800a088:	6933      	ldr	r3, [r6, #16]
 800a08a:	6103      	str	r3, [r0, #16]
 800a08c:	6973      	ldr	r3, [r6, #20]
 800a08e:	6143      	str	r3, [r0, #20]
 800a090:	f106 0218 	add.w	r2, r6, #24
 800a094:	f100 0318 	add.w	r3, r0, #24
 800a098:	e72a      	b.n	8009ef0 <_realloc_r+0x1bc>
 800a09a:	68b1      	ldr	r1, [r6, #8]
 800a09c:	f8ca 1010 	str.w	r1, [sl, #16]
 800a0a0:	68f1      	ldr	r1, [r6, #12]
 800a0a2:	f8ca 1014 	str.w	r1, [sl, #20]
 800a0a6:	2a24      	cmp	r2, #36	; 0x24
 800a0a8:	d00f      	beq.n	800a0ca <_realloc_r+0x396>
 800a0aa:	3610      	adds	r6, #16
 800a0ac:	f10a 0218 	add.w	r2, sl, #24
 800a0b0:	e6d5      	b.n	8009e5e <_realloc_r+0x12a>
 800a0b2:	6933      	ldr	r3, [r6, #16]
 800a0b4:	f8ca 3018 	str.w	r3, [sl, #24]
 800a0b8:	6973      	ldr	r3, [r6, #20]
 800a0ba:	f8ca 301c 	str.w	r3, [sl, #28]
 800a0be:	3618      	adds	r6, #24
 800a0c0:	f10a 0320 	add.w	r3, sl, #32
 800a0c4:	e789      	b.n	8009fda <_realloc_r+0x2a6>
 800a0c6:	463b      	mov	r3, r7
 800a0c8:	e760      	b.n	8009f8c <_realloc_r+0x258>
 800a0ca:	6932      	ldr	r2, [r6, #16]
 800a0cc:	f8ca 2018 	str.w	r2, [sl, #24]
 800a0d0:	6972      	ldr	r2, [r6, #20]
 800a0d2:	f8ca 201c 	str.w	r2, [sl, #28]
 800a0d6:	3618      	adds	r6, #24
 800a0d8:	f10a 0220 	add.w	r2, sl, #32
 800a0dc:	e6bf      	b.n	8009e5e <_realloc_r+0x12a>
 800a0de:	4631      	mov	r1, r6
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	f8cd c004 	str.w	ip, [sp, #4]
 800a0e6:	f7ff fdc1 	bl	8009c6c <memmove>
 800a0ea:	f8dd c004 	ldr.w	ip, [sp, #4]
 800a0ee:	e753      	b.n	8009f98 <_realloc_r+0x264>
 800a0f0:	68b3      	ldr	r3, [r6, #8]
 800a0f2:	f8ca 3010 	str.w	r3, [sl, #16]
 800a0f6:	68f3      	ldr	r3, [r6, #12]
 800a0f8:	f8ca 3014 	str.w	r3, [sl, #20]
 800a0fc:	2a24      	cmp	r2, #36	; 0x24
 800a0fe:	d003      	beq.n	800a108 <_realloc_r+0x3d4>
 800a100:	3610      	adds	r6, #16
 800a102:	f10a 0318 	add.w	r3, sl, #24
 800a106:	e741      	b.n	8009f8c <_realloc_r+0x258>
 800a108:	6933      	ldr	r3, [r6, #16]
 800a10a:	f8ca 3018 	str.w	r3, [sl, #24]
 800a10e:	6973      	ldr	r3, [r6, #20]
 800a110:	f8ca 301c 	str.w	r3, [sl, #28]
 800a114:	3618      	adds	r6, #24
 800a116:	f10a 0320 	add.w	r3, sl, #32
 800a11a:	e737      	b.n	8009f8c <_realloc_r+0x258>
 800a11c:	20000c9c 	.word	0x20000c9c
