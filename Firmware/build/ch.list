
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000279 	.word	0x08000279
 8000008:	0800027b 	.word	0x0800027b
 800000c:	0800027a 	.word	0x0800027a
 8000010:	0800027a 	.word	0x0800027a
 8000014:	0800027a 	.word	0x0800027a
 8000018:	0800027a 	.word	0x0800027a
 800001c:	0800027a 	.word	0x0800027a
 8000020:	0800027a 	.word	0x0800027a
 8000024:	0800027a 	.word	0x0800027a
 8000028:	0800027a 	.word	0x0800027a
 800002c:	08002481 	.word	0x08002481
 8000030:	0800027a 	.word	0x0800027a
 8000034:	0800027a 	.word	0x0800027a
 8000038:	0800027a 	.word	0x0800027a
 800003c:	0800027a 	.word	0x0800027a
 8000040:	0800027a 	.word	0x0800027a
 8000044:	0800027a 	.word	0x0800027a
 8000048:	0800027a 	.word	0x0800027a
 800004c:	0800027a 	.word	0x0800027a
 8000050:	0800027a 	.word	0x0800027a
 8000054:	0800027a 	.word	0x0800027a
 8000058:	0800027a 	.word	0x0800027a
 800005c:	0800027a 	.word	0x0800027a
 8000060:	0800027a 	.word	0x0800027a
 8000064:	0800027a 	.word	0x0800027a
 8000068:	0800027a 	.word	0x0800027a
 800006c:	08000df1 	.word	0x08000df1
 8000070:	08000da1 	.word	0x08000da1
 8000074:	08000d51 	.word	0x08000d51
 8000078:	08000d01 	.word	0x08000d01
 800007c:	08000cb1 	.word	0x08000cb1
 8000080:	08000c61 	.word	0x08000c61
 8000084:	08000c11 	.word	0x08000c11
 8000088:	08000ec1 	.word	0x08000ec1
 800008c:	0800027a 	.word	0x0800027a
 8000090:	0800027a 	.word	0x0800027a
 8000094:	0800027a 	.word	0x0800027a
 8000098:	0800027a 	.word	0x0800027a
 800009c:	0800027a 	.word	0x0800027a
 80000a0:	0800027a 	.word	0x0800027a
 80000a4:	0800027a 	.word	0x0800027a
 80000a8:	0800027a 	.word	0x0800027a
 80000ac:	0800027a 	.word	0x0800027a
 80000b0:	08000f51 	.word	0x08000f51
 80000b4:	0800027a 	.word	0x0800027a
 80000b8:	0800027a 	.word	0x0800027a
 80000bc:	0800027a 	.word	0x0800027a
 80000c0:	0800027a 	.word	0x0800027a
 80000c4:	0800027a 	.word	0x0800027a
 80000c8:	0800027a 	.word	0x0800027a
 80000cc:	0800027a 	.word	0x0800027a
 80000d0:	0800027a 	.word	0x0800027a
 80000d4:	08000981 	.word	0x08000981
 80000d8:	08000951 	.word	0x08000951
 80000dc:	0800027a 	.word	0x0800027a
 80000e0:	0800027a 	.word	0x0800027a
 80000e4:	0800027a 	.word	0x0800027a
 80000e8:	0800027a 	.word	0x0800027a
 80000ec:	0800027a 	.word	0x0800027a
 80000f0:	0800027a 	.word	0x0800027a
 80000f4:	0800027a 	.word	0x0800027a
 80000f8:	0800027a 	.word	0x0800027a
 80000fc:	08000e81 	.word	0x08000e81
 8000100:	0800027a 	.word	0x0800027a
 8000104:	0800027a 	.word	0x0800027a
 8000108:	0800027a 	.word	0x0800027a
 800010c:	0800027a 	.word	0x0800027a
 8000110:	0800027a 	.word	0x0800027a
 8000114:	0800027a 	.word	0x0800027a
 8000118:	0800027a 	.word	0x0800027a
 800011c:	0800027a 	.word	0x0800027a
 8000120:	08000bc1 	.word	0x08000bc1
 8000124:	08000b71 	.word	0x08000b71
 8000128:	08000b21 	.word	0x08000b21
 800012c:	08000ad1 	.word	0x08000ad1
 8000130:	08000a81 	.word	0x08000a81
 8000134:	08000e41 	.word	0x08000e41
 8000138:	0800027a 	.word	0x0800027a
 800013c:	0800027a 	.word	0x0800027a
 8000140:	0800027a 	.word	0x0800027a
 8000144:	0800027a 	.word	0x0800027a
 8000148:	0800027a 	.word	0x0800027a
 800014c:	0800027a 	.word	0x0800027a
 8000150:	0800027a 	.word	0x0800027a
 8000154:	0800027a 	.word	0x0800027a
 8000158:	0800027a 	.word	0x0800027a
 800015c:	0800027a 	.word	0x0800027a
 8000160:	0800027a 	.word	0x0800027a
 8000164:	0800027a 	.word	0x0800027a
 8000168:	0800027a 	.word	0x0800027a
 800016c:	0800027a 	.word	0x0800027a
 8000170:	0800027a 	.word	0x0800027a
 8000174:	0800027a 	.word	0x0800027a
 8000178:	0800027a 	.word	0x0800027a
 800017c:	0800027a 	.word	0x0800027a
 8000180:	0800027a 	.word	0x0800027a
 8000184:	0800027a 	.word	0x0800027a
 8000188:	0800027a 	.word	0x0800027a
 800018c:	0800027a 	.word	0x0800027a
 8000190:	0800027a 	.word	0x0800027a
 8000194:	0800027a 	.word	0x0800027a
 8000198:	0800027a 	.word	0x0800027a
 800019c:	0800027a 	.word	0x0800027a

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4827      	ldr	r0, [pc, #156]	; (8000240 <endfiniloop+0x4>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4826      	ldr	r0, [pc, #152]	; (8000244 <endfiniloop+0x8>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4826      	ldr	r0, [pc, #152]	; (8000248 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80001ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80001bc:	f380 8814 	msr	CONTROL, r0
                isb
 80001c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80001c4:	f000 ff7c 	bl	80010c0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80001c8:	f000 fada 	bl	8000780 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80001cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80001d0:	491e      	ldr	r1, [pc, #120]	; (800024c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80001d2:	4a1b      	ldr	r2, [pc, #108]	; (8000240 <endfiniloop+0x4>)

080001d4 <msloop>:
msloop:
                cmp     r1, r2
 80001d4:	4291      	cmp	r1, r2
                itt     lo
 80001d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80001dc:	e7fa      	bcc.n	80001d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80001de:	491c      	ldr	r1, [pc, #112]	; (8000250 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80001e0:	4a18      	ldr	r2, [pc, #96]	; (8000244 <endfiniloop+0x8>)

080001e2 <psloop>:
psloop:
                cmp     r1, r2
 80001e2:	4291      	cmp	r1, r2
                itt     lo
 80001e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80001e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80001ea:	e7fa      	bcc.n	80001e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 80001ec:	4919      	ldr	r1, [pc, #100]	; (8000254 <endfiniloop+0x18>)
                ldr     r2, =_data_start
 80001ee:	4a1a      	ldr	r2, [pc, #104]	; (8000258 <endfiniloop+0x1c>)
                ldr     r3, =_data_end
 80001f0:	4b1a      	ldr	r3, [pc, #104]	; (800025c <endfiniloop+0x20>)

080001f2 <dloop>:
dloop:
                cmp     r2, r3
 80001f2:	429a      	cmp	r2, r3
                ittt    lo
 80001f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80001f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80001fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80001fe:	e7f8      	bcc.n	80001f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000200:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000202:	4917      	ldr	r1, [pc, #92]	; (8000260 <endfiniloop+0x24>)
                ldr     r2, =_bss_end
 8000204:	4a17      	ldr	r2, [pc, #92]	; (8000264 <endfiniloop+0x28>)

08000206 <bloop>:
bloop:
                cmp     r1, r2
 8000206:	4291      	cmp	r1, r2
                itt     lo
 8000208:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800020a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800020e:	e7fa      	bcc.n	8000206 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000210:	f000 ff1e 	bl	8001050 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000214:	f000 ff4c 	bl	80010b0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000218:	4c13      	ldr	r4, [pc, #76]	; (8000268 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end
 800021a:	4d14      	ldr	r5, [pc, #80]	; (800026c <endfiniloop+0x30>)

0800021c <initloop>:
initloop:
                cmp     r4, r5
 800021c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800021e:	da03      	bge.n	8000228 <endinitloop>
                ldr     r1, [r4], #4
 8000220:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000224:	4788      	blx	r1
                b       initloop
 8000226:	e7f9      	b.n	800021c <initloop>

08000228 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000228:	f001 f9ca 	bl	80015c0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 800022c:	4c10      	ldr	r4, [pc, #64]	; (8000270 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end
 800022e:	4d11      	ldr	r5, [pc, #68]	; (8000274 <endfiniloop+0x38>)

08000230 <finiloop>:
finiloop:
                cmp     r4, r5
 8000230:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000232:	da03      	bge.n	800023c <endfiniloop>
                ldr     r1, [r4], #4
 8000234:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000238:	4788      	blx	r1
                b       finiloop
 800023a:	e7f9      	b.n	8000230 <finiloop>

0800023c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800023c:	f000 bf30 	b.w	80010a0 <__default_exit>
                /* Interrupts are globally masked initially.*/
                cpsid   i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 8000240:	20000400 	.word	0x20000400
                msr     MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 8000244:	20000800 	.word	0x20000800
                msr     PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 8000248:	08000000 	.word	0x08000000
#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 800024c:	20000000 	.word	0x20000000
                blo     msloop

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000250:	20000400 	.word	0x20000400
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000254:	08003598 	.word	0x08003598
                ldr     r2, =_data_start
 8000258:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 800025c:	20000824 	.word	0x20000824

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
                ldr     r1, =_bss_start
 8000260:	20000828 	.word	0x20000828
                ldr     r2, =_bss_end
 8000264:	200014b0 	.word	0x200014b0
                /* Late initialization..*/
                bl      __late_init

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 8000268:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 800026c:	080001a0 	.word	0x080001a0
                /* Main program invocation, r0 contains the returned value.*/
                bl      main

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000270:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 8000274:	080001a0 	.word	0x080001a0

08000278 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000278:	e792      	b.n	80001a0 <_crt0_entry>

0800027a <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 800027a:	f000 f800 	bl	800027e <_unhandled_exception>

0800027e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800027e:	e7fe      	b.n	800027e <_unhandled_exception>

08000280 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000284:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 8000288:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 800028a:	469d      	mov	sp, r3
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000290 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 8000290:	f002 fc5e 	bl	8002b50 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000294:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000296:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 800029a:	4628      	mov	r0, r5
                blx     r4
 800029c:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 800029e:	2000      	movs	r0, #0
                bl      chThdExit
 80002a0:	f002 fc9e 	bl	8002be0 <chThdExit>

080002a4 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002a4:	f002 fc64 	bl	8002b70 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002a8:	f002 fb1a 	bl	80028e0 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002ac:	f002 fc50 	bl	8002b50 <_dbg_check_unlock>

080002b0 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80002b0:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80002b2:	e7fe      	b.n	80002b2 <_port_exit_from_isr+0x2>

080002b4 <memcpy>:
 80002b4:	4684      	mov	ip, r0
 80002b6:	ea41 0300 	orr.w	r3, r1, r0
 80002ba:	f013 0303 	ands.w	r3, r3, #3
 80002be:	d16d      	bne.n	800039c <memcpy+0xe8>
 80002c0:	3a40      	subs	r2, #64	; 0x40
 80002c2:	d341      	bcc.n	8000348 <memcpy+0x94>
 80002c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002c8:	f840 3b04 	str.w	r3, [r0], #4
 80002cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d0:	f840 3b04 	str.w	r3, [r0], #4
 80002d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002d8:	f840 3b04 	str.w	r3, [r0], #4
 80002dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e0:	f840 3b04 	str.w	r3, [r0], #4
 80002e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002e8:	f840 3b04 	str.w	r3, [r0], #4
 80002ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f0:	f840 3b04 	str.w	r3, [r0], #4
 80002f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80002f8:	f840 3b04 	str.w	r3, [r0], #4
 80002fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000300:	f840 3b04 	str.w	r3, [r0], #4
 8000304:	f851 3b04 	ldr.w	r3, [r1], #4
 8000308:	f840 3b04 	str.w	r3, [r0], #4
 800030c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000310:	f840 3b04 	str.w	r3, [r0], #4
 8000314:	f851 3b04 	ldr.w	r3, [r1], #4
 8000318:	f840 3b04 	str.w	r3, [r0], #4
 800031c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000320:	f840 3b04 	str.w	r3, [r0], #4
 8000324:	f851 3b04 	ldr.w	r3, [r1], #4
 8000328:	f840 3b04 	str.w	r3, [r0], #4
 800032c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000330:	f840 3b04 	str.w	r3, [r0], #4
 8000334:	f851 3b04 	ldr.w	r3, [r1], #4
 8000338:	f840 3b04 	str.w	r3, [r0], #4
 800033c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000340:	f840 3b04 	str.w	r3, [r0], #4
 8000344:	3a40      	subs	r2, #64	; 0x40
 8000346:	d2bd      	bcs.n	80002c4 <memcpy+0x10>
 8000348:	3230      	adds	r2, #48	; 0x30
 800034a:	d311      	bcc.n	8000370 <memcpy+0xbc>
 800034c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000350:	f840 3b04 	str.w	r3, [r0], #4
 8000354:	f851 3b04 	ldr.w	r3, [r1], #4
 8000358:	f840 3b04 	str.w	r3, [r0], #4
 800035c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000360:	f840 3b04 	str.w	r3, [r0], #4
 8000364:	f851 3b04 	ldr.w	r3, [r1], #4
 8000368:	f840 3b04 	str.w	r3, [r0], #4
 800036c:	3a10      	subs	r2, #16
 800036e:	d2ed      	bcs.n	800034c <memcpy+0x98>
 8000370:	320c      	adds	r2, #12
 8000372:	d305      	bcc.n	8000380 <memcpy+0xcc>
 8000374:	f851 3b04 	ldr.w	r3, [r1], #4
 8000378:	f840 3b04 	str.w	r3, [r0], #4
 800037c:	3a04      	subs	r2, #4
 800037e:	d2f9      	bcs.n	8000374 <memcpy+0xc0>
 8000380:	3204      	adds	r2, #4
 8000382:	d008      	beq.n	8000396 <memcpy+0xe2>
 8000384:	07d2      	lsls	r2, r2, #31
 8000386:	bf1c      	itt	ne
 8000388:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800038c:	f800 3b01 	strbne.w	r3, [r0], #1
 8000390:	d301      	bcc.n	8000396 <memcpy+0xe2>
 8000392:	880b      	ldrh	r3, [r1, #0]
 8000394:	8003      	strh	r3, [r0, #0]
 8000396:	4660      	mov	r0, ip
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	2a08      	cmp	r2, #8
 800039e:	d313      	bcc.n	80003c8 <memcpy+0x114>
 80003a0:	078b      	lsls	r3, r1, #30
 80003a2:	d08d      	beq.n	80002c0 <memcpy+0xc>
 80003a4:	f010 0303 	ands.w	r3, r0, #3
 80003a8:	d08a      	beq.n	80002c0 <memcpy+0xc>
 80003aa:	f1c3 0304 	rsb	r3, r3, #4
 80003ae:	1ad2      	subs	r2, r2, r3
 80003b0:	07db      	lsls	r3, r3, #31
 80003b2:	bf1c      	itt	ne
 80003b4:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80003b8:	f800 3b01 	strbne.w	r3, [r0], #1
 80003bc:	d380      	bcc.n	80002c0 <memcpy+0xc>
 80003be:	f831 3b02 	ldrh.w	r3, [r1], #2
 80003c2:	f820 3b02 	strh.w	r3, [r0], #2
 80003c6:	e77b      	b.n	80002c0 <memcpy+0xc>
 80003c8:	3a04      	subs	r2, #4
 80003ca:	d3d9      	bcc.n	8000380 <memcpy+0xcc>
 80003cc:	3a01      	subs	r2, #1
 80003ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80003d2:	f800 3b01 	strb.w	r3, [r0], #1
 80003d6:	d2f9      	bcs.n	80003cc <memcpy+0x118>
 80003d8:	780b      	ldrb	r3, [r1, #0]
 80003da:	7003      	strb	r3, [r0, #0]
 80003dc:	784b      	ldrb	r3, [r1, #1]
 80003de:	7043      	strb	r3, [r0, #1]
 80003e0:	788b      	ldrb	r3, [r1, #2]
 80003e2:	7083      	strb	r3, [r0, #2]
 80003e4:	4660      	mov	r0, ip
 80003e6:	4770      	bx	lr
	...

080003f0 <notify2.lto_priv.26>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 80003f0:	4a02      	ldr	r2, [pc, #8]	; (80003fc <notify2.lto_priv.26+0xc>)
 80003f2:	6813      	ldr	r3, [r2, #0]
 80003f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f8:	6013      	str	r3, [r2, #0]
 80003fa:	4770      	bx	lr
 80003fc:	40004400 	.word	0x40004400

08000400 <notify1.lto_priv.25>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8000400:	4a02      	ldr	r2, [pc, #8]	; (800040c <notify1.lto_priv.25+0xc>)
 8000402:	6813      	ldr	r3, [r2, #0]
 8000404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000408:	6013      	str	r3, [r2, #0]
 800040a:	4770      	bx	lr
 800040c:	40013800 	.word	0x40013800

08000410 <adc_lld_stop_conversion>:
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
 8000410:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8000412:	6a82      	ldr	r2, [r0, #40]	; 0x28
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8000414:	b430      	push	{r4, r5}

  dmaStreamDisable(adcp->dmastp);
 8000416:	684c      	ldr	r4, [r1, #4]
 8000418:	680d      	ldr	r5, [r1, #0]
 800041a:	6820      	ldr	r0, [r4, #0]
 800041c:	f020 000f 	bic.w	r0, r0, #15
 8000420:	6020      	str	r0, [r4, #0]
 8000422:	7c09      	ldrb	r1, [r1, #16]
 8000424:	230e      	movs	r3, #14
 8000426:	408b      	lsls	r3, r1
 8000428:	606b      	str	r3, [r5, #4]
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
 800042a:	6893      	ldr	r3, [r2, #8]
 800042c:	0759      	lsls	r1, r3, #29
 800042e:	d506      	bpl.n	800043e <adc_lld_stop_conversion+0x2e>
    adcp->adcm->CR |= ADC_CR_ADSTP;
 8000430:	6893      	ldr	r3, [r2, #8]
 8000432:	f043 0310 	orr.w	r3, r3, #16
 8000436:	6093      	str	r3, [r2, #8]
    while (adcp->adcm->CR & ADC_CR_ADSTP)
 8000438:	6893      	ldr	r3, [r2, #8]
 800043a:	06db      	lsls	r3, r3, #27
 800043c:	d4fc      	bmi.n	8000438 <adc_lld_stop_conversion+0x28>
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {

  dmaStreamDisable(adcp->dmastp);
  adc_lld_stop_adc(adcp);
}
 800043e:	bc30      	pop	{r4, r5}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
	...

08000450 <serve_interrupt>:
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 8000450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USART_TypeDef *u = sdp->usart;
 8000454:	6d46      	ldr	r6, [r0, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 8000456:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8000458:	69f4      	ldr	r4, [r6, #28]
  u->ICR = isr;
 800045a:	6234      	str	r4, [r6, #32]

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 800045c:	0723      	lsls	r3, r4, #28
/**
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
static void serve_interrupt(SerialDriver *sdp) {
 800045e:	4605      	mov	r5, r0
  /* Reading and clearing status.*/
  isr = u->ISR;
  u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8000460:	d144      	bne.n	80004ec <serve_interrupt+0x9c>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 8000462:	05e3      	lsls	r3, r4, #23
 8000464:	d465      	bmi.n	8000532 <serve_interrupt+0xe2>
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8000466:	06a0      	lsls	r0, r4, #26
 8000468:	d474      	bmi.n	8000554 <serve_interrupt+0x104>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 800046a:	0639      	lsls	r1, r7, #24
 800046c:	d403      	bmi.n	8000476 <serve_interrupt+0x26>
      u->TDR = b;
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 800046e:	0663      	lsls	r3, r4, #25
 8000470:	d429      	bmi.n	80004c6 <serve_interrupt+0x76>
 8000472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();
  }

  /* Transmission buffer empty.*/
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8000476:	0622      	lsls	r2, r4, #24
 8000478:	d5f9      	bpl.n	800046e <serve_interrupt+0x1e>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800047a:	2320      	movs	r3, #32
 800047c:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000480:	f002 fb16 	bl	8002ab0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 8000484:	f002 f8fc 	bl	8002680 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8000488:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800048a:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800048c:	429a      	cmp	r2, r3
 800048e:	f000 80a3 	beq.w	80005d8 <serve_interrupt+0x188>
    uint8_t b;

    oqp->q_counter++;
 8000492:	6baa      	ldr	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
    if (oqp->q_rdptr >= oqp->q_top) {
 8000494:	6c29      	ldr	r1, [r5, #64]	; 0x40
  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
    b = *oqp->q_rdptr++;
 8000496:	1c58      	adds	r0, r3, #1

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
 8000498:	3201      	adds	r2, #1
 800049a:	63aa      	str	r2, [r5, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800049c:	64a8      	str	r0, [r5, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 800049e:	4288      	cmp	r0, r1
  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
    uint8_t b;

    oqp->q_counter++;
    b = *oqp->q_rdptr++;
 80004a0:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 80004a4:	d301      	bcc.n	80004aa <serve_interrupt+0x5a>
      oqp->q_rdptr = oqp->q_buffer;
 80004a6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 80004a8:	64ab      	str	r3, [r5, #72]	; 0x48
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 80004aa:	f105 0030 	add.w	r0, r5, #48	; 0x30
 80004ae:	f002 fbef 	bl	8002c90 <chThdDequeueNextI.constprop.10>
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
    }
    else
      u->TDR = b;
 80004b2:	fa1f f388 	uxth.w	r3, r8
 80004b6:	8533      	strh	r3, [r6, #40]	; 0x28
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80004b8:	f002 fae2 	bl	8002a80 <_dbg_check_unlock_from_isr>
 80004bc:	2300      	movs	r3, #0
 80004be:	f383 8811 	msr	BASEPRI, r3
    osalSysUnlockFromISR();
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
 80004c2:	0663      	lsls	r3, r4, #25
 80004c4:	d5d5      	bpl.n	8000472 <serve_interrupt+0x22>
 80004c6:	2320      	movs	r3, #32
 80004c8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80004cc:	f002 faf0 	bl	8002ab0 <_dbg_check_lock_from_isr>
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80004d0:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 80004d2:	6cab      	ldr	r3, [r5, #72]	; 0x48
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d06e      	beq.n	80005b6 <serve_interrupt+0x166>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 80004d8:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80004dc:	6037      	str	r7, [r6, #0]
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80004de:	f002 facf 	bl	8002a80 <_dbg_check_unlock_from_isr>
 80004e2:	2300      	movs	r3, #0
 80004e4:	f383 8811 	msr	BASEPRI, r3
 80004e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 */
static void set_error(SerialDriver *sdp, uint32_t isr) {
  eventflags_t sts = 0;

  if (isr & USART_ISR_ORE)
    sts |= SD_OVERRUN_ERROR;
 80004ec:	f014 0f08 	tst.w	r4, #8
 80004f0:	bf0c      	ite	eq
 80004f2:	f04f 0800 	moveq.w	r8, #0
 80004f6:	f04f 0880 	movne.w	r8, #128	; 0x80
  if (isr & USART_ISR_PE)
 80004fa:	07e0      	lsls	r0, r4, #31
    sts |= SD_PARITY_ERROR;
 80004fc:	bf48      	it	mi
 80004fe:	f048 0820 	orrmi.w	r8, r8, #32
  if (isr & USART_ISR_FE)
 8000502:	07a1      	lsls	r1, r4, #30
    sts |= SD_FRAMING_ERROR;
 8000504:	bf48      	it	mi
 8000506:	f048 0840 	orrmi.w	r8, r8, #64	; 0x40
  if (isr & USART_ISR_NE)
 800050a:	0762      	lsls	r2, r4, #29
    sts |= SD_NOISE_ERROR;
 800050c:	bf48      	it	mi
 800050e:	f448 7880 	orrmi.w	r8, r8, #256	; 0x100
 8000512:	2320      	movs	r3, #32
 8000514:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000518:	f002 faca 	bl	8002ab0 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 800051c:	4641      	mov	r1, r8
 800051e:	1d28      	adds	r0, r5, #4
 8000520:	f002 fa2e 	bl	8002980 <chEvtBroadcastFlagsI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000524:	f002 faac 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8000528:	2300      	movs	r3, #0
 800052a:	f383 8811 	msr	BASEPRI, r3
  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 800052e:	05e3      	lsls	r3, r4, #23
 8000530:	d599      	bpl.n	8000466 <serve_interrupt+0x16>
 8000532:	2320      	movs	r3, #32
 8000534:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000538:	f002 faba 	bl	8002ab0 <_dbg_check_lock_from_isr>
 800053c:	1d28      	adds	r0, r5, #4
 800053e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000542:	f002 fa1d 	bl	8002980 <chEvtBroadcastFlagsI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000546:	f002 fa9b 	bl	8002a80 <_dbg_check_unlock_from_isr>
 800054a:	2300      	movs	r3, #0
 800054c:	f383 8811 	msr	BASEPRI, r3
    chnAddFlagsI(sdp, SD_BREAK_DETECTED);
    osalSysUnlockFromISR();
  }

  /* Data available.*/
  if (isr & USART_ISR_RXNE) {
 8000550:	06a0      	lsls	r0, r4, #26
 8000552:	d58a      	bpl.n	800046a <serve_interrupt+0x1a>
 8000554:	2320      	movs	r3, #32
 8000556:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800055a:	f002 faa9 	bl	8002ab0 <_dbg_check_lock_from_isr>
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 800055e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 8000560:	f895 805c 	ldrb.w	r8, [r5, #92]	; 0x5c
 8000564:	ea08 0803 	and.w	r8, r8, r3
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 8000568:	f002 f88a 	bl	8002680 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 800056c:	696b      	ldr	r3, [r5, #20]
 800056e:	b1eb      	cbz	r3, 80005ac <serve_interrupt+0x15c>
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();
 8000570:	f002 f886 	bl	8002680 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 8000574:	6a2b      	ldr	r3, [r5, #32]
 8000576:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000578:	4293      	cmp	r3, r2
 800057a:	d024      	beq.n	80005c6 <serve_interrupt+0x176>
    iqp->q_counter++;
 800057c:	696a      	ldr	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 800057e:	1c59      	adds	r1, r3, #1

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
    iqp->q_counter++;
 8000580:	3201      	adds	r2, #1
 8000582:	616a      	str	r2, [r5, #20]
    *iqp->q_wrptr++ = b;
 8000584:	6229      	str	r1, [r5, #32]
 8000586:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 800058a:	6a2a      	ldr	r2, [r5, #32]
 800058c:	69eb      	ldr	r3, [r5, #28]
 800058e:	429a      	cmp	r2, r3
 8000590:	d209      	bcs.n	80005a6 <serve_interrupt+0x156>
 *
 * @iclass
 */
static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {

  chThdDequeueNextI(tqp, msg);
 8000592:	f105 000c 	add.w	r0, r5, #12
 8000596:	f002 fb7b 	bl	8002c90 <chThdDequeueNextI.constprop.10>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800059a:	f002 fa71 	bl	8002a80 <_dbg_check_unlock_from_isr>
 800059e:	2300      	movs	r3, #0
 80005a0:	f383 8811 	msr	BASEPRI, r3
 80005a4:	e761      	b.n	800046a <serve_interrupt+0x1a>
      iqp->q_wrptr = iqp->q_buffer;
 80005a6:	69ab      	ldr	r3, [r5, #24]
 80005a8:	622b      	str	r3, [r5, #32]
 80005aa:	e7f2      	b.n	8000592 <serve_interrupt+0x142>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 80005ac:	1d28      	adds	r0, r5, #4
 80005ae:	2104      	movs	r1, #4
 80005b0:	f002 f9e6 	bl	8002980 <chEvtBroadcastFlagsI>
 80005b4:	e7dc      	b.n	8000570 <serve_interrupt+0x120>
  }

  /* Physical transmission end.*/
  if (isr & USART_ISR_TC) {
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue))
 80005b6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d08d      	beq.n	80004d8 <serve_interrupt+0x88>
 80005bc:	1d28      	adds	r0, r5, #4
 80005be:	2110      	movs	r1, #16
 80005c0:	f002 f9de 	bl	8002980 <chEvtBroadcastFlagsI>
 80005c4:	e788      	b.n	80004d8 <serve_interrupt+0x88>
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 80005c6:	696a      	ldr	r2, [r5, #20]
 80005c8:	2a00      	cmp	r2, #0
 80005ca:	d0d7      	beq.n	800057c <serve_interrupt+0x12c>
 80005cc:	1d28      	adds	r0, r5, #4
 80005ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d2:	f002 f9d5 	bl	8002980 <chEvtBroadcastFlagsI>
 80005d6:	e7e0      	b.n	800059a <serve_interrupt+0x14a>
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 80005d8:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80005da:	2a00      	cmp	r2, #0
 80005dc:	f43f af59 	beq.w	8000492 <serve_interrupt+0x42>
 80005e0:	1d28      	adds	r0, r5, #4
 80005e2:	2108      	movs	r1, #8
 80005e4:	f002 f9cc 	bl	8002980 <chEvtBroadcastFlagsI>
    msg_t b;
    osalSysLockFromISR();
    b = oqGetI(&sdp->oqueue);
    if (b < MSG_OK) {
      chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 80005e8:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 80005ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005f0:	6033      	str	r3, [r6, #0]
 80005f2:	e761      	b.n	80004b8 <serve_interrupt+0x68>
	...

08000600 <_ctl.lto_priv.36>:
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
}

static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 8000600:	b508      	push	{r3, lr}
  SerialDriver *sdp = (SerialDriver *)ip;

  osalDbgCheck(sdp != NULL);
 8000602:	b118      	cbz	r0, 800060c <_ctl.lto_priv.36+0xc>

  switch (operation) {
 8000604:	b111      	cbz	r1, 800060c <_ctl.lto_priv.36+0xc>
 8000606:	2901      	cmp	r1, #1
 8000608:	d103      	bne.n	8000612 <_ctl.lto_priv.36+0x12>
  case CHN_CTL_NOP:
    osalDbgCheck(arg == NULL);
 800060a:	b112      	cbz	r2, 8000612 <_ctl.lto_priv.36+0x12>
    break;
  case CHN_CTL_INVALID:
    osalDbgAssert(false, "invalid CTL operation");
 800060c:	4802      	ldr	r0, [pc, #8]	; (8000618 <_ctl.lto_priv.36+0x18>)
 800060e:	f001 ffcf 	bl	80025b0 <chSysHalt>
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000612:	2000      	movs	r0, #0
 8000614:	bd08      	pop	{r3, pc}
 8000616:	bf00      	nop
 8000618:	08003180 	.word	0x08003180
 800061c:	00000000 	.word	0x00000000

08000620 <adc_lld_serve_interrupt>:
 * @brief   ADC ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] isr       content of the ISR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 8000620:	b538      	push	{r3, r4, r5, lr}

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 8000622:	6903      	ldr	r3, [r0, #16]
 * @brief   ADC ISR service routine.
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 * @param[in] isr       content of the ISR register
 */
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 8000624:	4604      	mov	r4, r0

  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
 8000626:	b143      	cbz	r3, 800063a <adc_lld_serve_interrupt+0x1a>
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 8000628:	06cb      	lsls	r3, r1, #27
 800062a:	460d      	mov	r5, r1
 800062c:	d406      	bmi.n	800063c <adc_lld_serve_interrupt+0x1c>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
 800062e:	0629      	lsls	r1, r5, #24
 8000630:	d42c      	bmi.n	800068c <adc_lld_serve_interrupt+0x6c>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
    }
    if (isr & ADC_ISR_AWD2) {
 8000632:	05ea      	lsls	r2, r5, #23
 8000634:	d44d      	bmi.n	80006d2 <adc_lld_serve_interrupt+0xb2>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
    }
    if (isr & ADC_ISR_AWD3) {
 8000636:	05ab      	lsls	r3, r5, #22
 8000638:	d46e      	bmi.n	8000718 <adc_lld_serve_interrupt+0xf8>
 800063a:	bd38      	pop	{r3, r4, r5, pc}
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
 800063c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
  /* It could be a spurious interrupt caused by overflows after DMA disabling,
     just ignore it in this case.*/
  if (adcp->grpp != NULL) {
    /* Note, an overflow may occur after the conversion ended before the driver
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
 8000642:	2b00      	cmp	r3, #0
 8000644:	d0f3      	beq.n	800062e <adc_lld_serve_interrupt+0xe>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 8000646:	f7ff fee3 	bl	8000410 <adc_lld_stop_conversion>
 800064a:	6923      	ldr	r3, [r4, #16]
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	f000 808f 	beq.w	8000772 <adc_lld_serve_interrupt+0x152>
 8000654:	2205      	movs	r2, #5
 8000656:	7022      	strb	r2, [r4, #0]
 8000658:	4620      	mov	r0, r4
 800065a:	2101      	movs	r1, #1
 800065c:	4798      	blx	r3
 800065e:	7823      	ldrb	r3, [r4, #0]
 8000660:	2b05      	cmp	r3, #5
 8000662:	bf04      	itt	eq
 8000664:	2302      	moveq	r3, #2
 8000666:	7023      	strbeq	r3, [r4, #0]
 8000668:	2300      	movs	r3, #0
 800066a:	6123      	str	r3, [r4, #16]
 800066c:	2320      	movs	r3, #32
 800066e:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000672:	f002 fa1d 	bl	8002ab0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {

  chThdResumeI(trp, msg);
 8000676:	f104 0014 	add.w	r0, r4, #20
 800067a:	f002 fb21 	bl	8002cc0 <chThdResumeI.constprop.9>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800067e:	f002 f9ff 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8000682:	2300      	movs	r3, #0
 8000684:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD1) {
 8000688:	0629      	lsls	r1, r5, #24
 800068a:	d5d2      	bpl.n	8000632 <adc_lld_serve_interrupt+0x12>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 800068c:	4620      	mov	r0, r4
 800068e:	f7ff febf 	bl	8000410 <adc_lld_stop_conversion>
 8000692:	6923      	ldr	r3, [r4, #16]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d05f      	beq.n	800075a <adc_lld_serve_interrupt+0x13a>
 800069a:	2205      	movs	r2, #5
 800069c:	7022      	strb	r2, [r4, #0]
 800069e:	4620      	mov	r0, r4
 80006a0:	2102      	movs	r1, #2
 80006a2:	4798      	blx	r3
 80006a4:	7823      	ldrb	r3, [r4, #0]
 80006a6:	2b05      	cmp	r3, #5
 80006a8:	bf04      	itt	eq
 80006aa:	2302      	moveq	r3, #2
 80006ac:	7023      	strbeq	r3, [r4, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	6123      	str	r3, [r4, #16]
 80006b2:	2320      	movs	r3, #32
 80006b4:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80006b8:	f002 f9fa 	bl	8002ab0 <_dbg_check_lock_from_isr>
 80006bc:	f104 0014 	add.w	r0, r4, #20
 80006c0:	f002 fafe 	bl	8002cc0 <chThdResumeI.constprop.9>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 80006c4:	f002 f9dc 	bl	8002a80 <_dbg_check_unlock_from_isr>
 80006c8:	2300      	movs	r3, #0
 80006ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD2) {
 80006ce:	05ea      	lsls	r2, r5, #23
 80006d0:	d5b1      	bpl.n	8000636 <adc_lld_serve_interrupt+0x16>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 80006d2:	4620      	mov	r0, r4
 80006d4:	f7ff fe9c 	bl	8000410 <adc_lld_stop_conversion>
 80006d8:	6923      	ldr	r3, [r4, #16]
 80006da:	689b      	ldr	r3, [r3, #8]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d040      	beq.n	8000762 <adc_lld_serve_interrupt+0x142>
 80006e0:	2205      	movs	r2, #5
 80006e2:	7022      	strb	r2, [r4, #0]
 80006e4:	4620      	mov	r0, r4
 80006e6:	2103      	movs	r1, #3
 80006e8:	4798      	blx	r3
 80006ea:	7823      	ldrb	r3, [r4, #0]
 80006ec:	2b05      	cmp	r3, #5
 80006ee:	bf04      	itt	eq
 80006f0:	2302      	moveq	r3, #2
 80006f2:	7023      	strbeq	r3, [r4, #0]
 80006f4:	2300      	movs	r3, #0
 80006f6:	6123      	str	r3, [r4, #16]
 80006f8:	2320      	movs	r3, #32
 80006fa:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 80006fe:	f002 f9d7 	bl	8002ab0 <_dbg_check_lock_from_isr>
 8000702:	f104 0014 	add.w	r0, r4, #20
 8000706:	f002 fadb 	bl	8002cc0 <chThdResumeI.constprop.9>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800070a:	f002 f9b9 	bl	8002a80 <_dbg_check_unlock_from_isr>
 800070e:	2300      	movs	r3, #0
 8000710:	f383 8811 	msr	BASEPRI, r3
    }
    if (isr & ADC_ISR_AWD3) {
 8000714:	05ab      	lsls	r3, r5, #22
 8000716:	d590      	bpl.n	800063a <adc_lld_serve_interrupt+0x1a>
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 8000718:	4620      	mov	r0, r4
 800071a:	f7ff fe79 	bl	8000410 <adc_lld_stop_conversion>
 800071e:	6923      	ldr	r3, [r4, #16]
 8000720:	689b      	ldr	r3, [r3, #8]
 8000722:	b313      	cbz	r3, 800076a <adc_lld_serve_interrupt+0x14a>
 8000724:	2205      	movs	r2, #5
 8000726:	7022      	strb	r2, [r4, #0]
 8000728:	4620      	mov	r0, r4
 800072a:	2104      	movs	r1, #4
 800072c:	4798      	blx	r3
 800072e:	7823      	ldrb	r3, [r4, #0]
 8000730:	2b05      	cmp	r3, #5
 8000732:	bf04      	itt	eq
 8000734:	2302      	moveq	r3, #2
 8000736:	7023      	strbeq	r3, [r4, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	6123      	str	r3, [r4, #16]
 800073c:	2320      	movs	r3, #32
 800073e:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000742:	f002 f9b5 	bl	8002ab0 <_dbg_check_lock_from_isr>
 8000746:	f104 0014 	add.w	r0, r4, #20
 800074a:	f002 fab9 	bl	8002cc0 <chThdResumeI.constprop.9>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 800074e:	f002 f997 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8000752:	2300      	movs	r3, #0
 8000754:	f383 8811 	msr	BASEPRI, r3
 8000758:	bd38      	pop	{r3, r4, r5, pc}
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
    }
    if (isr & ADC_ISR_AWD1) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 800075a:	2202      	movs	r2, #2
 800075c:	6123      	str	r3, [r4, #16]
 800075e:	7022      	strb	r2, [r4, #0]
 8000760:	e7a7      	b.n	80006b2 <adc_lld_serve_interrupt+0x92>
    }
    if (isr & ADC_ISR_AWD2) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 8000762:	2202      	movs	r2, #2
 8000764:	6123      	str	r3, [r4, #16]
 8000766:	7022      	strb	r2, [r4, #0]
 8000768:	e7c6      	b.n	80006f8 <adc_lld_serve_interrupt+0xd8>
    }
    if (isr & ADC_ISR_AWD3) {
      /* Analog watchdog error.*/
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 800076a:	2202      	movs	r2, #2
 800076c:	6123      	str	r3, [r4, #16]
 800076e:	7022      	strb	r2, [r4, #0]
 8000770:	e7e4      	b.n	800073c <adc_lld_serve_interrupt+0x11c>
       is able to stop the ADC, this is why the DMA channel is checked too.*/
    if ((isr & ADC_ISR_OVR) &&
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
      /* ADC overflow condition, this could happen only if the DMA is unable
         to read data fast enough.*/
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 8000772:	2202      	movs	r2, #2
 8000774:	6123      	str	r3, [r4, #16]
 8000776:	7022      	strb	r2, [r4, #0]
 8000778:	e778      	b.n	800066c <adc_lld_serve_interrupt+0x4c>
 800077a:	bf00      	nop
 800077c:	0000      	movs	r0, r0
	...

08000780 <__early_init>:

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 8000780:	495e      	ldr	r1, [pc, #376]	; (80008fc <__early_init+0x17c>)

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000782:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8000924 <__early_init+0x1a4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000786:	485e      	ldr	r0, [pc, #376]	; (8000900 <__early_init+0x180>)
 8000788:	4a5e      	ldr	r2, [pc, #376]	; (8000904 <__early_init+0x184>)
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800078a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 800078e:	6a8f      	ldr	r7, [r1, #40]	; 0x28
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000790:	4e5d      	ldr	r6, [pc, #372]	; (8000908 <__early_init+0x188>)
  gpiop->OSPEEDR = config->ospeedr;
 8000792:	f8df b194 	ldr.w	fp, [pc, #404]	; 8000928 <__early_init+0x1a8>
  gpiop->PUPDR   = config->pupdr;
 8000796:	f8df a194 	ldr.w	sl, [pc, #404]	; 800092c <__early_init+0x1ac>
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 800079a:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8000930 <__early_init+0x1b0>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800079e:	4d5b      	ldr	r5, [pc, #364]	; (800090c <__early_init+0x18c>)
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80007a0:	f8df 8190 	ldr.w	r8, [pc, #400]	; 8000934 <__early_init+0x1b4>
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007a4:	4c5a      	ldr	r4, [pc, #360]	; (8000910 <__early_init+0x190>)

static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
 80007a6:	2300      	movs	r3, #0
 80007a8:	f447 07fc 	orr.w	r7, r7, #8257536	; 0x7e0000
 80007ac:	628f      	str	r7, [r1, #40]	; 0x28
 80007ae:	628b      	str	r3, [r1, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 80007b0:	f8d1 e014 	ldr.w	lr, [r1, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007b4:	f04f 4790 	mov.w	r7, #1207959552	; 0x48000000
static void stm32_gpio_init(void) {

  /* Enabling GPIO-related clocks, the mask comes from the
     registry header file.*/
  rccResetAHB(STM32_GPIO_EN_MASK);
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 80007b8:	f44e 0efc 	orr.w	lr, lr, #8257536	; 0x7e0000
 80007bc:	f8c1 e014 	str.w	lr, [r1, #20]
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80007c0:	f64f 7eff 	movw	lr, #65535	; 0xffff
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007c4:	607b      	str	r3, [r7, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80007c6:	f8c7 b008 	str.w	fp, [r7, #8]
  gpiop->PUPDR   = config->pupdr;
 80007ca:	f8c7 a00c 	str.w	sl, [r7, #12]
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80007ce:	f44f 2b6e 	mov.w	fp, #974848	; 0xee000
static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
 80007d2:	f8c7 e014 	str.w	lr, [r7, #20]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007d6:	f04f 0ac0 	mov.w	sl, #192	; 0xc0
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80007da:	f8c7 9020 	str.w	r9, [r7, #32]
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80007de:	f24f 09c0 	movw	r9, #61632	; 0xf0c0
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
 80007e2:	f8c7 b024 	str.w	fp, [r7, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80007e6:	f8c7 8000 	str.w	r8, [r7]

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 80007ea:	f04f 4b88 	mov.w	fp, #1140850688	; 0x44000000
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80007ee:	f8c6 a004 	str.w	sl, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 80007f2:	f24a 0880 	movw	r8, #41088	; 0xa080
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 80007f6:	f8c6 9008 	str.w	r9, [r6, #8]
 80007fa:	f04f 4770 	mov.w	r7, #4026531840	; 0xf0000000
  gpiop->PUPDR   = config->pupdr;
 80007fe:	f8c6 c00c 	str.w	ip, [r6, #12]
 8000802:	f8df a134 	ldr.w	sl, [pc, #308]	; 8000938 <__early_init+0x1b8>
  gpiop->ODR     = config->odr;
 8000806:	f8c6 e014 	str.w	lr, [r6, #20]
  gpiop->AFRL    = config->afrl;
 800080a:	f44f 09ee 	mov.w	r9, #7798784	; 0x770000
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800080e:	f44f 6c20 	mov.w	ip, #2560	; 0xa00

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000812:	f8c6 b020 	str.w	fp, [r6, #32]
  gpiop->AFRH    = config->afrh;
 8000816:	6273      	str	r3, [r6, #36]	; 0x24

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000818:	f04f 3b55 	mov.w	fp, #1431655765	; 0x55555555
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 800081c:	f8c6 8000 	str.w	r8, [r6]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000820:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8000822:	f8df 8118 	ldr.w	r8, [pc, #280]	; 800093c <__early_init+0x1bc>
 8000826:	60af      	str	r7, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 8000828:	4e3a      	ldr	r6, [pc, #232]	; (8000914 <__early_init+0x194>)
 800082a:	f8c5 a00c 	str.w	sl, [r5, #12]
  gpiop->ODR     = config->odr;
 800082e:	27ff      	movs	r7, #255	; 0xff
 8000830:	f8c5 e014 	str.w	lr, [r5, #20]
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000834:	f8df a108 	ldr.w	sl, [pc, #264]	; 8000940 <__early_init+0x1c0>

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
 8000838:	f8c5 9020 	str.w	r9, [r5, #32]
  gpiop->AFRH    = config->afrh;
 800083c:	626b      	str	r3, [r5, #36]	; 0x24
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
 800083e:	f04f 090f 	mov.w	r9, #15
  gpiop->PUPDR   = config->pupdr;
  gpiop->ODR     = config->odr;
  gpiop->AFRL    = config->afrl;
  gpiop->AFRH    = config->afrh;
  gpiop->MODER   = config->moder;
 8000842:	f8c5 c000 	str.w	ip, [r5]

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
  gpiop->OSPEEDR = config->ospeedr;
  gpiop->PUPDR   = config->pupdr;
 8000846:	4d34      	ldr	r5, [pc, #208]	; (8000918 <__early_init+0x198>)
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 8000848:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800084a:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 800084c:	f8c4 b00c 	str.w	fp, [r4, #12]
  gpiop->ODR     = config->odr;
 8000850:	f8c4 e014 	str.w	lr, [r4, #20]
  gpiop->AFRL    = config->afrl;
 8000854:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 8000856:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000858:	6023      	str	r3, [r4, #0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800085a:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800085c:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8000860:	60c6      	str	r6, [r0, #12]
  gpiop->ODR     = config->odr;
 8000862:	6147      	str	r7, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8000864:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8000866:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8000868:	f8c0 a000 	str.w	sl, [r0]
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 800086c:	6053      	str	r3, [r2, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800086e:	f8c2 9008 	str.w	r9, [r2, #8]
  gpiop->PUPDR   = config->pupdr;
 8000872:	60d5      	str	r5, [r2, #12]
  gpiop->ODR     = config->odr;
 8000874:	f8c2 e014 	str.w	lr, [r2, #20]
  gpiop->AFRL    = config->afrl;
 8000878:	6213      	str	r3, [r2, #32]
  gpiop->AFRH    = config->afrh;
 800087a:	6253      	str	r3, [r2, #36]	; 0x24
  gpiop->MODER   = config->moder;
 800087c:	6013      	str	r3, [r2, #0]
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800087e:	680b      	ldr	r3, [r1, #0]
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	600b      	str	r3, [r1, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8000886:	680a      	ldr	r2, [r1, #0]
 8000888:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <__early_init+0x17c>)
 800088a:	0794      	lsls	r4, r2, #30
 800088c:	d5fb      	bpl.n	8000886 <__early_init+0x106>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	f022 0203 	bic.w	r2, r2, #3
 8000894:	605a      	str	r2, [r3, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8000896:	4619      	mov	r1, r3
 8000898:	684b      	ldr	r3, [r1, #4]
 800089a:	4a18      	ldr	r2, [pc, #96]	; (80008fc <__early_init+0x17c>)
 800089c:	f013 030c 	ands.w	r3, r3, #12
 80008a0:	d1fa      	bne.n	8000898 <__early_init+0x118>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 80008a2:	6811      	ldr	r1, [r2, #0]
 80008a4:	f001 01f9 	and.w	r1, r1, #249	; 0xf9
 80008a8:	6011      	str	r1, [r2, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 80008aa:	6053      	str	r3, [r2, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 80008ac:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80008ae:	f043 0301 	orr.w	r3, r3, #1
 80008b2:	6253      	str	r3, [r2, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 80008b4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <__early_init+0x17c>)
 80008b8:	0788      	lsls	r0, r1, #30
 80008ba:	d5fb      	bpl.n	80008b4 <__early_init+0x134>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 80008bc:	4a17      	ldr	r2, [pc, #92]	; (800091c <__early_init+0x19c>)
 80008be:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 80008c0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 80008c4:	2230      	movs	r2, #48	; 0x30

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 80008c6:	62d9      	str	r1, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 80008c8:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80008d0:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 80008d2:	6819      	ldr	r1, [r3, #0]
 80008d4:	4a09      	ldr	r2, [pc, #36]	; (80008fc <__early_init+0x17c>)
 80008d6:	0189      	lsls	r1, r1, #6
 80008d8:	d5fb      	bpl.n	80008d2 <__early_init+0x152>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <__early_init+0x1a0>)
 80008dc:	2111      	movs	r1, #17
 80008de:	6019      	str	r1, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 80008e0:	6853      	ldr	r3, [r2, #4]
 80008e2:	f043 0302 	orr.w	r3, r3, #2
 80008e6:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 80008e8:	6853      	ldr	r3, [r2, #4]
 80008ea:	4904      	ldr	r1, [pc, #16]	; (80008fc <__early_init+0x17c>)
 80008ec:	f003 030c 	and.w	r3, r3, #12
 80008f0:	2b08      	cmp	r3, #8
 80008f2:	d1f9      	bne.n	80008e8 <__early_init+0x168>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_HRTIM1SW | STM32_TIM8SW | STM32_TIM1SW;
 80008f4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 80008f6:	630b      	str	r3, [r1, #48]	; 0x30
 80008f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008fc:	40021000 	.word	0x40021000
 8000900:	48001000 	.word	0x48001000
 8000904:	48001400 	.word	0x48001400
 8000908:	48000400 	.word	0x48000400
 800090c:	48000800 	.word	0x48000800
 8000910:	48000c00 	.word	0x48000c00
 8000914:	01155515 	.word	0x01155515
 8000918:	55555550 	.word	0x55555550
 800091c:	001c2400 	.word	0x001c2400
 8000920:	40022000 	.word	0x40022000
 8000924:	55550515 	.word	0x55550515
 8000928:	3cc0fc00 	.word	0x3cc0fc00
 800092c:	64151154 	.word	0x64151154
 8000930:	55500000 	.word	0x55500000
 8000934:	2a80a800 	.word	0x2a80a800
 8000938:	05555555 	.word	0x05555555
 800093c:	ffff00c0 	.word	0xffff00c0
 8000940:	55550040 	.word	0x55550040
	...

08000950 <VectorD8>:
/**
 * @brief   USART2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 8000950:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000952:	4c09      	ldr	r4, [pc, #36]	; (8000978 <VectorD8+0x28>)
 8000954:	4620      	mov	r0, r4
 8000956:	f001 fdeb 	bl	8002530 <_trace_isr_enter>
 800095a:	f002 f879 	bl	8002a50 <_dbg_check_enter_isr>

  serve_interrupt(&SD2);
 800095e:	4807      	ldr	r0, [pc, #28]	; (800097c <VectorD8+0x2c>)
 8000960:	f7ff fd76 	bl	8000450 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8000964:	f002 f85c 	bl	8002a20 <_dbg_check_leave_isr>
 8000968:	4620      	mov	r0, r4
 800096a:	f001 fdc1 	bl	80024f0 <_trace_isr_leave>
}
 800096e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD2);

  OSAL_IRQ_EPILOGUE();
 8000972:	f001 bd55 	b.w	8002420 <_port_irq_epilogue>
 8000976:	bf00      	nop
 8000978:	08003188 	.word	0x08003188
 800097c:	2000089c 	.word	0x2000089c

08000980 <VectorD4>:
/**
 * @brief   USART1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 8000980:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000982:	4c09      	ldr	r4, [pc, #36]	; (80009a8 <VectorD4+0x28>)
 8000984:	4620      	mov	r0, r4
 8000986:	f001 fdd3 	bl	8002530 <_trace_isr_enter>
 800098a:	f002 f861 	bl	8002a50 <_dbg_check_enter_isr>

  serve_interrupt(&SD1);
 800098e:	4807      	ldr	r0, [pc, #28]	; (80009ac <VectorD4+0x2c>)
 8000990:	f7ff fd5e 	bl	8000450 <serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8000994:	f002 f844 	bl	8002a20 <_dbg_check_leave_isr>
 8000998:	4620      	mov	r0, r4
 800099a:	f001 fda9 	bl	80024f0 <_trace_isr_leave>
}
 800099e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  serve_interrupt(&SD1);

  OSAL_IRQ_EPILOGUE();
 80009a2:	f001 bd3d 	b.w	8002420 <_port_irq_epilogue>
 80009a6:	bf00      	nop
 80009a8:	0800304c 	.word	0x0800304c
 80009ac:	20001450 	.word	0x20001450

080009b0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80009b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80009b4:	f002 0a03 	and.w	sl, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80009b8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80009bc:	f3c2 0cc1 	ubfx	ip, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80009c0:	f3c2 1e41 	ubfx	lr, r2, #5, #2
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80009c4:	46d1      	mov	r9, sl
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80009c6:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t bit     = 0;
 80009ca:	2700      	movs	r7, #0
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 80009cc:	f04f 0b0f 	mov.w	fp, #15
 80009d0:	e00f      	b.n	80009f2 <_pal_lld_setgroupmode+0x42>
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80009d2:	6a04      	ldr	r4, [r0, #32]
 80009d4:	ea24 0303 	bic.w	r3, r4, r3
 80009d8:	431d      	orrs	r5, r3
 80009da:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80009dc:	0849      	lsrs	r1, r1, #1
 80009de:	d039      	beq.n	8000a54 <_pal_lld_setgroupmode+0xa4>
      return;
    otyper <<= 1;
 80009e0:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 80009e4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    pupdr <<= 2;
 80009e8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    moder <<= 2;
 80009ec:	ea4f 0989 	mov.w	r9, r9, lsl #2
    bit++;
 80009f0:	3701      	adds	r7, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
 80009f2:	07cb      	lsls	r3, r1, #31
 80009f4:	d5f2      	bpl.n	80009dc <_pal_lld_setgroupmode+0x2c>

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80009f6:	6843      	ldr	r3, [r0, #4]
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
 80009f8:	2401      	movs	r4, #1
 80009fa:	40bc      	lsls	r4, r7
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 80009fc:	ea23 0304 	bic.w	r3, r3, r4
 8000a00:	ea43 0308 	orr.w	r3, r3, r8
 8000a04:	6043      	str	r3, [r0, #4]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000a06:	2503      	movs	r5, #3
 8000a08:	007c      	lsls	r4, r7, #1
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a0a:	6883      	ldr	r3, [r0, #8]
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
 8000a0c:	fa05 f404 	lsl.w	r4, r5, r4
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8000a10:	43e4      	mvns	r4, r4
 8000a12:	4023      	ands	r3, r4
 8000a14:	ea43 030c 	orr.w	r3, r3, ip
 8000a18:	6083      	str	r3, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a1a:	68c5      	ldr	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000a1c:	f007 0307 	and.w	r3, r7, #7
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a20:	4025      	ands	r5, r4
 8000a22:	ea45 050e 	orr.w	r5, r5, lr
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000a26:	009b      	lsls	r3, r3, #2
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a28:	f1ba 0f02 	cmp.w	sl, #2
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8000a2c:	60c5      	str	r5, [r0, #12]
  uint32_t bit     = 0;
  while (true) {
    if ((mask & 1) != 0) {
      uint32_t altrmask, m1, m2, m4;

      altrmask = altr << ((bit & 7) * 4);
 8000a2e:	fa02 f503 	lsl.w	r5, r2, r3
      m1 = 1 << bit;
      m2 = 3 << (bit * 2);
      m4 = 15 << ((bit & 7) * 4);
 8000a32:	fa0b f303 	lsl.w	r3, fp, r3
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8000a36:	d00f      	beq.n	8000a58 <_pal_lld_setgroupmode+0xa8>
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a38:	6806      	ldr	r6, [r0, #0]
 8000a3a:	4034      	ands	r4, r6
 8000a3c:	ea44 0409 	orr.w	r4, r4, r9
        if (bit < 8)
 8000a40:	2f07      	cmp	r7, #7
        port->MODER   = (port->MODER & ~m2) | moder;
      }
      else {
        /* If going into a non-alternate mode then the mode is switched
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a42:	6004      	str	r4, [r0, #0]
        if (bit < 8)
 8000a44:	d9c5      	bls.n	80009d2 <_pal_lld_setgroupmode+0x22>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8000a48:	ea24 0303 	bic.w	r3, r4, r3
 8000a4c:	431d      	orrs	r5, r3
      }
    }
    mask >>= 1;
    if (!mask)
 8000a4e:	0849      	lsrs	r1, r1, #1
           before setting the alternate mode in order to avoid glitches.*/
        port->MODER   = (port->MODER & ~m2) | moder;
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a50:	6245      	str	r5, [r0, #36]	; 0x24
      }
    }
    mask >>= 1;
    if (!mask)
 8000a52:	d1c5      	bne.n	80009e0 <_pal_lld_setgroupmode+0x30>
 8000a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 8000a58:	2f07      	cmp	r7, #7
 8000a5a:	d80a      	bhi.n	8000a72 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8000a5c:	6a06      	ldr	r6, [r0, #32]
 8000a5e:	ea26 0303 	bic.w	r3, r6, r3
 8000a62:	431d      	orrs	r5, r3
 8000a64:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 8000a66:	6803      	ldr	r3, [r0, #0]
 8000a68:	401c      	ands	r4, r3
 8000a6a:	ea44 0409 	orr.w	r4, r4, r9
 8000a6e:	6004      	str	r4, [r0, #0]
 8000a70:	e7b4      	b.n	80009dc <_pal_lld_setgroupmode+0x2c>
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
          port->AFRL = (port->AFRL & ~m4) | altrmask;
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8000a72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8000a74:	ea26 0303 	bic.w	r3, r6, r3
 8000a78:	431d      	orrs	r5, r3
 8000a7a:	6245      	str	r5, [r0, #36]	; 0x24
 8000a7c:	e7f3      	b.n	8000a66 <_pal_lld_setgroupmode+0xb6>
 8000a7e:	bf00      	nop

08000a80 <Vector130>:
/**
 * @brief   DMA2 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8000a80:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000a82:	480f      	ldr	r0, [pc, #60]	; (8000ac0 <Vector130+0x40>)
 8000a84:	f001 fd54 	bl	8002530 <_trace_isr_enter>
 8000a88:	f001 ffe2 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM5);
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <Vector130+0x44>)
 8000a8e:	4a0e      	ldr	r2, [pc, #56]	; (8000ac8 <Vector130+0x48>)
 8000a90:	6819      	ldr	r1, [r3, #0]
 8000a92:	6812      	ldr	r2, [r2, #0]
 8000a94:	0c09      	lsrs	r1, r1, #16
 8000a96:	f001 010e 	and.w	r1, r1, #14
 8000a9a:	4211      	tst	r1, r2
 8000a9c:	d006      	beq.n	8000aac <Vector130+0x2c>
 8000a9e:	480b      	ldr	r0, [pc, #44]	; (8000acc <Vector130+0x4c>)
 8000aa0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8000aa2:	040c      	lsls	r4, r1, #16
 8000aa4:	605c      	str	r4, [r3, #4]
 8000aa6:	b10a      	cbz	r2, 8000aac <Vector130+0x2c>
 8000aa8:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8000aaa:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000aac:	f001 ffb8 	bl	8002a20 <_dbg_check_leave_isr>
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <Vector130+0x40>)
 8000ab2:	f001 fd1d 	bl	80024f0 <_trace_isr_leave>
}
 8000ab6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8000aba:	f001 bcb1 	b.w	8002420 <_port_irq_epilogue>
 8000abe:	bf00      	nop
 8000ac0:	080030cc 	.word	0x080030cc
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40020458 	.word	0x40020458
 8000acc:	20000908 	.word	0x20000908

08000ad0 <Vector12C>:
/**
 * @brief   DMA2 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8000ad0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000ad2:	480f      	ldr	r0, [pc, #60]	; (8000b10 <Vector12C+0x40>)
 8000ad4:	f001 fd2c 	bl	8002530 <_trace_isr_enter>
 8000ad8:	f001 ffba 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM4);
 8000adc:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <Vector12C+0x44>)
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <Vector12C+0x48>)
 8000ae0:	6819      	ldr	r1, [r3, #0]
 8000ae2:	6812      	ldr	r2, [r2, #0]
 8000ae4:	0b09      	lsrs	r1, r1, #12
 8000ae6:	f001 010e 	and.w	r1, r1, #14
 8000aea:	4211      	tst	r1, r2
 8000aec:	d006      	beq.n	8000afc <Vector12C+0x2c>
 8000aee:	480b      	ldr	r0, [pc, #44]	; (8000b1c <Vector12C+0x4c>)
 8000af0:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000af2:	030c      	lsls	r4, r1, #12
 8000af4:	605c      	str	r4, [r3, #4]
 8000af6:	b10a      	cbz	r2, 8000afc <Vector12C+0x2c>
 8000af8:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8000afa:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000afc:	f001 ff90 	bl	8002a20 <_dbg_check_leave_isr>
 8000b00:	4803      	ldr	r0, [pc, #12]	; (8000b10 <Vector12C+0x40>)
 8000b02:	f001 fcf5 	bl	80024f0 <_trace_isr_leave>
}
 8000b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8000b0a:	f001 bc89 	b.w	8002420 <_port_irq_epilogue>
 8000b0e:	bf00      	nop
 8000b10:	080030c0 	.word	0x080030c0
 8000b14:	40020400 	.word	0x40020400
 8000b18:	40020444 	.word	0x40020444
 8000b1c:	20000908 	.word	0x20000908

08000b20 <Vector128>:
/**
 * @brief   DMA2 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8000b20:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000b22:	480f      	ldr	r0, [pc, #60]	; (8000b60 <Vector128+0x40>)
 8000b24:	f001 fd04 	bl	8002530 <_trace_isr_enter>
 8000b28:	f001 ff92 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM3);
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <Vector128+0x44>)
 8000b2e:	4a0e      	ldr	r2, [pc, #56]	; (8000b68 <Vector128+0x48>)
 8000b30:	6819      	ldr	r1, [r3, #0]
 8000b32:	6812      	ldr	r2, [r2, #0]
 8000b34:	0a09      	lsrs	r1, r1, #8
 8000b36:	f001 010e 	and.w	r1, r1, #14
 8000b3a:	4211      	tst	r1, r2
 8000b3c:	d006      	beq.n	8000b4c <Vector128+0x2c>
 8000b3e:	480b      	ldr	r0, [pc, #44]	; (8000b6c <Vector128+0x4c>)
 8000b40:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000b42:	020c      	lsls	r4, r1, #8
 8000b44:	605c      	str	r4, [r3, #4]
 8000b46:	b10a      	cbz	r2, 8000b4c <Vector128+0x2c>
 8000b48:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8000b4a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000b4c:	f001 ff68 	bl	8002a20 <_dbg_check_leave_isr>
 8000b50:	4803      	ldr	r0, [pc, #12]	; (8000b60 <Vector128+0x40>)
 8000b52:	f001 fccd 	bl	80024f0 <_trace_isr_leave>
}
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8000b5a:	f001 bc61 	b.w	8002420 <_port_irq_epilogue>
 8000b5e:	bf00      	nop
 8000b60:	080030ac 	.word	0x080030ac
 8000b64:	40020400 	.word	0x40020400
 8000b68:	40020430 	.word	0x40020430
 8000b6c:	20000908 	.word	0x20000908

08000b70 <Vector124>:
/**
 * @brief   DMA2 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 8000b70:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000b72:	480f      	ldr	r0, [pc, #60]	; (8000bb0 <Vector124+0x40>)
 8000b74:	f001 fcdc 	bl	8002530 <_trace_isr_enter>
 8000b78:	f001 ff6a 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM2);
 8000b7c:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <Vector124+0x44>)
 8000b7e:	4a0e      	ldr	r2, [pc, #56]	; (8000bb8 <Vector124+0x48>)
 8000b80:	6819      	ldr	r1, [r3, #0]
 8000b82:	6812      	ldr	r2, [r2, #0]
 8000b84:	0909      	lsrs	r1, r1, #4
 8000b86:	f001 010e 	and.w	r1, r1, #14
 8000b8a:	4211      	tst	r1, r2
 8000b8c:	d006      	beq.n	8000b9c <Vector124+0x2c>
 8000b8e:	480b      	ldr	r0, [pc, #44]	; (8000bbc <Vector124+0x4c>)
 8000b90:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000b92:	010c      	lsls	r4, r1, #4
 8000b94:	605c      	str	r4, [r3, #4]
 8000b96:	b10a      	cbz	r2, 8000b9c <Vector124+0x2c>
 8000b98:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8000b9a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000b9c:	f001 ff40 	bl	8002a20 <_dbg_check_leave_isr>
 8000ba0:	4803      	ldr	r0, [pc, #12]	; (8000bb0 <Vector124+0x40>)
 8000ba2:	f001 fca5 	bl	80024f0 <_trace_isr_leave>
}
 8000ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8000baa:	f001 bc39 	b.w	8002420 <_port_irq_epilogue>
 8000bae:	bf00      	nop
 8000bb0:	080030a0 	.word	0x080030a0
 8000bb4:	40020400 	.word	0x40020400
 8000bb8:	4002041c 	.word	0x4002041c
 8000bbc:	20000908 	.word	0x20000908

08000bc0 <Vector120>:
/**
 * @brief   DMA2 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8000bc0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8000bc2:	480e      	ldr	r0, [pc, #56]	; (8000bfc <Vector120+0x3c>)
 8000bc4:	f001 fcb4 	bl	8002530 <_trace_isr_enter>
 8000bc8:	f001 ff42 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA2_STREAM1);
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <Vector120+0x40>)
 8000bce:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <Vector120+0x44>)
 8000bd0:	6819      	ldr	r1, [r3, #0]
 8000bd2:	6812      	ldr	r2, [r2, #0]
 8000bd4:	f001 010e 	and.w	r1, r1, #14
 8000bd8:	4211      	tst	r1, r2
 8000bda:	d005      	beq.n	8000be8 <Vector120+0x28>
 8000bdc:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <Vector120+0x48>)
 8000bde:	6059      	str	r1, [r3, #4]
 8000be0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000be2:	b10b      	cbz	r3, 8000be8 <Vector120+0x28>
 8000be4:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8000be6:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8000be8:	f001 ff1a 	bl	8002a20 <_dbg_check_leave_isr>
 8000bec:	4803      	ldr	r0, [pc, #12]	; (8000bfc <Vector120+0x3c>)
 8000bee:	f001 fc7f 	bl	80024f0 <_trace_isr_leave>
}
 8000bf2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA2_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8000bf6:	f001 bc13 	b.w	8002420 <_port_irq_epilogue>
 8000bfa:	bf00      	nop
 8000bfc:	080031cc 	.word	0x080031cc
 8000c00:	40020400 	.word	0x40020400
 8000c04:	40020408 	.word	0x40020408
 8000c08:	20000908 	.word	0x20000908
 8000c0c:	00000000 	.word	0x00000000

08000c10 <Vector84>:
/**
 * @brief   DMA1 stream 7 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8000c10:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000c12:	480f      	ldr	r0, [pc, #60]	; (8000c50 <Vector84+0x40>)
 8000c14:	f001 fc8c 	bl	8002530 <_trace_isr_enter>
 8000c18:	f001 ff1a 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM7);
 8000c1c:	4b0d      	ldr	r3, [pc, #52]	; (8000c54 <Vector84+0x44>)
 8000c1e:	4a0e      	ldr	r2, [pc, #56]	; (8000c58 <Vector84+0x48>)
 8000c20:	6819      	ldr	r1, [r3, #0]
 8000c22:	6812      	ldr	r2, [r2, #0]
 8000c24:	0e09      	lsrs	r1, r1, #24
 8000c26:	f001 010e 	and.w	r1, r1, #14
 8000c2a:	4211      	tst	r1, r2
 8000c2c:	d006      	beq.n	8000c3c <Vector84+0x2c>
 8000c2e:	480b      	ldr	r0, [pc, #44]	; (8000c5c <Vector84+0x4c>)
 8000c30:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8000c32:	060c      	lsls	r4, r1, #24
 8000c34:	605c      	str	r4, [r3, #4]
 8000c36:	b10a      	cbz	r2, 8000c3c <Vector84+0x2c>
 8000c38:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000c3a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000c3c:	f001 fef0 	bl	8002a20 <_dbg_check_leave_isr>
 8000c40:	4803      	ldr	r0, [pc, #12]	; (8000c50 <Vector84+0x40>)
 8000c42:	f001 fc55 	bl	80024f0 <_trace_isr_leave>
}
 8000c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM7);

  OSAL_IRQ_EPILOGUE();
 8000c4a:	f001 bbe9 	b.w	8002420 <_port_irq_epilogue>
 8000c4e:	bf00      	nop
 8000c50:	08003058 	.word	0x08003058
 8000c54:	40020000 	.word	0x40020000
 8000c58:	40020080 	.word	0x40020080
 8000c5c:	20000908 	.word	0x20000908

08000c60 <Vector80>:
/**
 * @brief   DMA1 stream 6 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 8000c60:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000c62:	480f      	ldr	r0, [pc, #60]	; (8000ca0 <Vector80+0x40>)
 8000c64:	f001 fc64 	bl	8002530 <_trace_isr_enter>
 8000c68:	f001 fef2 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM6);
 8000c6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <Vector80+0x44>)
 8000c6e:	4a0e      	ldr	r2, [pc, #56]	; (8000ca8 <Vector80+0x48>)
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	0d09      	lsrs	r1, r1, #20
 8000c76:	f001 010e 	and.w	r1, r1, #14
 8000c7a:	4211      	tst	r1, r2
 8000c7c:	d006      	beq.n	8000c8c <Vector80+0x2c>
 8000c7e:	480b      	ldr	r0, [pc, #44]	; (8000cac <Vector80+0x4c>)
 8000c80:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8000c82:	050c      	lsls	r4, r1, #20
 8000c84:	605c      	str	r4, [r3, #4]
 8000c86:	b10a      	cbz	r2, 8000c8c <Vector80+0x2c>
 8000c88:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 8000c8a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000c8c:	f001 fec8 	bl	8002a20 <_dbg_check_leave_isr>
 8000c90:	4803      	ldr	r0, [pc, #12]	; (8000ca0 <Vector80+0x40>)
 8000c92:	f001 fc2d 	bl	80024f0 <_trace_isr_leave>
}
 8000c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM6);

  OSAL_IRQ_EPILOGUE();
 8000c9a:	f001 bbc1 	b.w	8002420 <_port_irq_epilogue>
 8000c9e:	bf00      	nop
 8000ca0:	08003194 	.word	0x08003194
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	4002006c 	.word	0x4002006c
 8000cac:	20000908 	.word	0x20000908

08000cb0 <Vector7C>:
/**
 * @brief   DMA1 stream 5 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8000cb0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000cb2:	480f      	ldr	r0, [pc, #60]	; (8000cf0 <Vector7C+0x40>)
 8000cb4:	f001 fc3c 	bl	8002530 <_trace_isr_enter>
 8000cb8:	f001 feca 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM5);
 8000cbc:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <Vector7C+0x44>)
 8000cbe:	4a0e      	ldr	r2, [pc, #56]	; (8000cf8 <Vector7C+0x48>)
 8000cc0:	6819      	ldr	r1, [r3, #0]
 8000cc2:	6812      	ldr	r2, [r2, #0]
 8000cc4:	0c09      	lsrs	r1, r1, #16
 8000cc6:	f001 010e 	and.w	r1, r1, #14
 8000cca:	4211      	tst	r1, r2
 8000ccc:	d006      	beq.n	8000cdc <Vector7C+0x2c>
 8000cce:	480b      	ldr	r0, [pc, #44]	; (8000cfc <Vector7C+0x4c>)
 8000cd0:	6a02      	ldr	r2, [r0, #32]
 8000cd2:	040c      	lsls	r4, r1, #16
 8000cd4:	605c      	str	r4, [r3, #4]
 8000cd6:	b10a      	cbz	r2, 8000cdc <Vector7C+0x2c>
 8000cd8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000cda:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000cdc:	f001 fea0 	bl	8002a20 <_dbg_check_leave_isr>
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <Vector7C+0x40>)
 8000ce2:	f001 fc05 	bl	80024f0 <_trace_isr_leave>
}
 8000ce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM5);

  OSAL_IRQ_EPILOGUE();
 8000cea:	f001 bb99 	b.w	8002420 <_port_irq_epilogue>
 8000cee:	bf00      	nop
 8000cf0:	080031e4 	.word	0x080031e4
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020058 	.word	0x40020058
 8000cfc:	20000908 	.word	0x20000908

08000d00 <Vector78>:
/**
 * @brief   DMA1 stream 4 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8000d00:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000d02:	480f      	ldr	r0, [pc, #60]	; (8000d40 <Vector78+0x40>)
 8000d04:	f001 fc14 	bl	8002530 <_trace_isr_enter>
 8000d08:	f001 fea2 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM4);
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <Vector78+0x44>)
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <Vector78+0x48>)
 8000d10:	6819      	ldr	r1, [r3, #0]
 8000d12:	6812      	ldr	r2, [r2, #0]
 8000d14:	0b09      	lsrs	r1, r1, #12
 8000d16:	f001 010e 	and.w	r1, r1, #14
 8000d1a:	4211      	tst	r1, r2
 8000d1c:	d006      	beq.n	8000d2c <Vector78+0x2c>
 8000d1e:	480b      	ldr	r0, [pc, #44]	; (8000d4c <Vector78+0x4c>)
 8000d20:	6982      	ldr	r2, [r0, #24]
 8000d22:	030c      	lsls	r4, r1, #12
 8000d24:	605c      	str	r4, [r3, #4]
 8000d26:	b10a      	cbz	r2, 8000d2c <Vector78+0x2c>
 8000d28:	69c0      	ldr	r0, [r0, #28]
 8000d2a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000d2c:	f001 fe78 	bl	8002a20 <_dbg_check_leave_isr>
 8000d30:	4803      	ldr	r0, [pc, #12]	; (8000d40 <Vector78+0x40>)
 8000d32:	f001 fbdd 	bl	80024f0 <_trace_isr_leave>
}
 8000d36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM4);

  OSAL_IRQ_EPILOGUE();
 8000d3a:	f001 bb71 	b.w	8002420 <_port_irq_epilogue>
 8000d3e:	bf00      	nop
 8000d40:	080031d8 	.word	0x080031d8
 8000d44:	40020000 	.word	0x40020000
 8000d48:	40020044 	.word	0x40020044
 8000d4c:	20000908 	.word	0x20000908

08000d50 <Vector74>:
/**
 * @brief   DMA1 stream 3 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8000d50:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000d52:	480f      	ldr	r0, [pc, #60]	; (8000d90 <Vector74+0x40>)
 8000d54:	f001 fbec 	bl	8002530 <_trace_isr_enter>
 8000d58:	f001 fe7a 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM3);
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <Vector74+0x44>)
 8000d5e:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <Vector74+0x48>)
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	0a09      	lsrs	r1, r1, #8
 8000d66:	f001 010e 	and.w	r1, r1, #14
 8000d6a:	4211      	tst	r1, r2
 8000d6c:	d006      	beq.n	8000d7c <Vector74+0x2c>
 8000d6e:	480b      	ldr	r0, [pc, #44]	; (8000d9c <Vector74+0x4c>)
 8000d70:	6902      	ldr	r2, [r0, #16]
 8000d72:	020c      	lsls	r4, r1, #8
 8000d74:	605c      	str	r4, [r3, #4]
 8000d76:	b10a      	cbz	r2, 8000d7c <Vector74+0x2c>
 8000d78:	6940      	ldr	r0, [r0, #20]
 8000d7a:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000d7c:	f001 fe50 	bl	8002a20 <_dbg_check_leave_isr>
 8000d80:	4803      	ldr	r0, [pc, #12]	; (8000d90 <Vector74+0x40>)
 8000d82:	f001 fbb5 	bl	80024f0 <_trace_isr_leave>
}
 8000d86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM3);

  OSAL_IRQ_EPILOGUE();
 8000d8a:	f001 bb49 	b.w	8002420 <_port_irq_epilogue>
 8000d8e:	bf00      	nop
 8000d90:	080031b0 	.word	0x080031b0
 8000d94:	40020000 	.word	0x40020000
 8000d98:	40020030 	.word	0x40020030
 8000d9c:	20000908 	.word	0x20000908

08000da0 <Vector70>:
/**
 * @brief   DMA1 stream 2 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 8000da0:	b510      	push	{r4, lr}

  OSAL_IRQ_PROLOGUE();
 8000da2:	480f      	ldr	r0, [pc, #60]	; (8000de0 <Vector70+0x40>)
 8000da4:	f001 fbc4 	bl	8002530 <_trace_isr_enter>
 8000da8:	f001 fe52 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM2);
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <Vector70+0x44>)
 8000dae:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <Vector70+0x48>)
 8000db0:	6819      	ldr	r1, [r3, #0]
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	0909      	lsrs	r1, r1, #4
 8000db6:	f001 010e 	and.w	r1, r1, #14
 8000dba:	4211      	tst	r1, r2
 8000dbc:	d006      	beq.n	8000dcc <Vector70+0x2c>
 8000dbe:	480b      	ldr	r0, [pc, #44]	; (8000dec <Vector70+0x4c>)
 8000dc0:	6882      	ldr	r2, [r0, #8]
 8000dc2:	010c      	lsls	r4, r1, #4
 8000dc4:	605c      	str	r4, [r3, #4]
 8000dc6:	b10a      	cbz	r2, 8000dcc <Vector70+0x2c>
 8000dc8:	68c0      	ldr	r0, [r0, #12]
 8000dca:	4790      	blx	r2

  OSAL_IRQ_EPILOGUE();
 8000dcc:	f001 fe28 	bl	8002a20 <_dbg_check_leave_isr>
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <Vector70+0x40>)
 8000dd2:	f001 fb8d 	bl	80024f0 <_trace_isr_leave>
}
 8000dd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM2);

  OSAL_IRQ_EPILOGUE();
 8000dda:	f001 bb21 	b.w	8002420 <_port_irq_epilogue>
 8000dde:	bf00      	nop
 8000de0:	08003088 	.word	0x08003088
 8000de4:	40020000 	.word	0x40020000
 8000de8:	4002001c 	.word	0x4002001c
 8000dec:	20000908 	.word	0x20000908

08000df0 <Vector6C>:
/**
 * @brief   DMA1 stream 1 shared ISR.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8000df0:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <Vector6C+0x3c>)
 8000df4:	f001 fb9c 	bl	8002530 <_trace_isr_enter>
 8000df8:	f001 fe2a 	bl	8002a50 <_dbg_check_enter_isr>

  dmaServeInterrupt(STM32_DMA1_STREAM1);
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <Vector6C+0x40>)
 8000dfe:	4a0d      	ldr	r2, [pc, #52]	; (8000e34 <Vector6C+0x44>)
 8000e00:	6819      	ldr	r1, [r3, #0]
 8000e02:	6812      	ldr	r2, [r2, #0]
 8000e04:	f001 010e 	and.w	r1, r1, #14
 8000e08:	4211      	tst	r1, r2
 8000e0a:	d005      	beq.n	8000e18 <Vector6C+0x28>
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <Vector6C+0x48>)
 8000e0e:	6059      	str	r1, [r3, #4]
 8000e10:	6813      	ldr	r3, [r2, #0]
 8000e12:	b10b      	cbz	r3, 8000e18 <Vector6C+0x28>
 8000e14:	6850      	ldr	r0, [r2, #4]
 8000e16:	4798      	blx	r3

  OSAL_IRQ_EPILOGUE();
 8000e18:	f001 fe02 	bl	8002a20 <_dbg_check_leave_isr>
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <Vector6C+0x3c>)
 8000e1e:	f001 fb67 	bl	80024f0 <_trace_isr_leave>
}
 8000e22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

  OSAL_IRQ_PROLOGUE();

  dmaServeInterrupt(STM32_DMA1_STREAM1);

  OSAL_IRQ_EPILOGUE();
 8000e26:	f001 bafb 	b.w	8002420 <_port_irq_epilogue>
 8000e2a:	bf00      	nop
 8000e2c:	0800307c 	.word	0x0800307c
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020008 	.word	0x40020008
 8000e38:	20000908 	.word	0x20000908
 8000e3c:	00000000 	.word	0x00000000

08000e40 <Vector134>:
/**
 * @brief   ADC4 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
 8000e40:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8000e42:	4c0a      	ldr	r4, [pc, #40]	; (8000e6c <Vector134+0x2c>)
 8000e44:	4620      	mov	r0, r4
 8000e46:	f001 fb73 	bl	8002530 <_trace_isr_enter>
 8000e4a:	f001 fe01 	bl	8002a50 <_dbg_check_enter_isr>

  isr  = ADC4->ISR;
 8000e4e:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <Vector134+0x30>)
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);
 8000e50:	4808      	ldr	r0, [pc, #32]	; (8000e74 <Vector134+0x34>)
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC4->ISR;
 8000e52:	6819      	ldr	r1, [r3, #0]
  ADC4->ISR = isr;
 8000e54:	6019      	str	r1, [r3, #0]

  adc_lld_serve_interrupt(&ADCD4, isr);
 8000e56:	f7ff fbe3 	bl	8000620 <adc_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8000e5a:	f001 fde1 	bl	8002a20 <_dbg_check_leave_isr>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	f001 fb46 	bl	80024f0 <_trace_isr_leave>
}
 8000e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  isr  = ADC4->ISR;
  ADC4->ISR = isr;

  adc_lld_serve_interrupt(&ADCD4, isr);

  OSAL_IRQ_EPILOGUE();
 8000e68:	f001 bada 	b.w	8002420 <_port_irq_epilogue>
 8000e6c:	08003064 	.word	0x08003064
 8000e70:	50000500 	.word	0x50000500
 8000e74:	20000b10 	.word	0x20000b10
	...

08000e80 <VectorFC>:
/**
 * @brief   ADC3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
 8000e80:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8000e82:	4c0a      	ldr	r4, [pc, #40]	; (8000eac <VectorFC+0x2c>)
 8000e84:	4620      	mov	r0, r4
 8000e86:	f001 fb53 	bl	8002530 <_trace_isr_enter>
 8000e8a:	f001 fde1 	bl	8002a50 <_dbg_check_enter_isr>

  isr  = ADC3->ISR;
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <VectorFC+0x30>)
  ADC3->ISR = isr;
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);
 8000e90:	4808      	ldr	r0, [pc, #32]	; (8000eb4 <VectorFC+0x34>)
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();

  isr  = ADC3->ISR;
 8000e92:	6819      	ldr	r1, [r3, #0]
  ADC3->ISR = isr;
 8000e94:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);
 8000e96:	f7ff fbc3 	bl	8000620 <adc_lld_serve_interrupt>

  OSAL_IRQ_EPILOGUE();
 8000e9a:	f001 fdc1 	bl	8002a20 <_dbg_check_leave_isr>
 8000e9e:	4620      	mov	r0, r4
 8000ea0:	f001 fb26 	bl	80024f0 <_trace_isr_leave>
}
 8000ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if defined(STM32_ADC_ADC3_IRQ_HOOK)
  STM32_ADC_ADC3_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD3, isr);

  OSAL_IRQ_EPILOGUE();
 8000ea8:	f001 baba 	b.w	8002420 <_port_irq_epilogue>
 8000eac:	08003094 	.word	0x08003094
 8000eb0:	50000400 	.word	0x50000400
 8000eb4:	20000ad8 	.word	0x20000ad8
	...

08000ec0 <Vector88>:
/**
 * @brief   ADC1/ADC2 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_ADC1_HANDLER) {
 8000ec0:	b510      	push	{r4, lr}
  uint32_t isr;

  OSAL_IRQ_PROLOGUE();
 8000ec2:	4c0e      	ldr	r4, [pc, #56]	; (8000efc <Vector88+0x3c>)
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	f001 fb33 	bl	8002530 <_trace_isr_enter>
 8000eca:	f001 fdc1 	bl	8002a50 <_dbg_check_enter_isr>
  adc_lld_serve_interrupt(&ADCD1, isr);

#else /* !STM32_ADC_DUAL_MODE */

#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8000ece:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  ADC1->ISR = isr;
#if defined(STM32_ADC_ADC1_IRQ_HOOK)
  STM32_ADC_ADC1_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
 8000ed2:	480b      	ldr	r0, [pc, #44]	; (8000f00 <Vector88+0x40>)
  adc_lld_serve_interrupt(&ADCD1, isr);

#else /* !STM32_ADC_DUAL_MODE */

#if STM32_ADC_USE_ADC1
  isr  = ADC1->ISR;
 8000ed4:	6819      	ldr	r1, [r3, #0]
  ADC1->ISR = isr;
 8000ed6:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC1_IRQ_HOOK)
  STM32_ADC_ADC1_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
 8000ed8:	f7ff fba2 	bl	8000620 <adc_lld_serve_interrupt>
#endif

#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <Vector88+0x44>)
  ADC2->ISR = isr;
#if defined(STM32_ADC_ADC2_IRQ_HOOK)
  STM32_ADC_ADC2_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD2, isr);
 8000ede:	480a      	ldr	r0, [pc, #40]	; (8000f08 <Vector88+0x48>)
#endif
  adc_lld_serve_interrupt(&ADCD1, isr);
#endif

#if STM32_ADC_USE_ADC2
  isr  = ADC2->ISR;
 8000ee0:	6819      	ldr	r1, [r3, #0]
  ADC2->ISR = isr;
 8000ee2:	6019      	str	r1, [r3, #0]
#if defined(STM32_ADC_ADC2_IRQ_HOOK)
  STM32_ADC_ADC2_IRQ_HOOK
#endif
  adc_lld_serve_interrupt(&ADCD2, isr);
 8000ee4:	f7ff fb9c 	bl	8000620 <adc_lld_serve_interrupt>
#endif

#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
 8000ee8:	f001 fd9a 	bl	8002a20 <_dbg_check_leave_isr>
 8000eec:	4620      	mov	r0, r4
 8000eee:	f001 faff 	bl	80024f0 <_trace_isr_leave>
}
 8000ef2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  adc_lld_serve_interrupt(&ADCD2, isr);
#endif

#endif /* !STM32_ADC_DUAL_MODE */

  OSAL_IRQ_EPILOGUE();
 8000ef6:	f001 ba93 	b.w	8002420 <_port_irq_epilogue>
 8000efa:	bf00      	nop
 8000efc:	080031f0 	.word	0x080031f0
 8000f00:	20000a68 	.word	0x20000a68
 8000f04:	50000100 	.word	0x50000100
 8000f08:	20000aa0 	.word	0x20000aa0
 8000f0c:	00000000 	.word	0x00000000

08000f10 <adcObjectInit>:
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
  adcp->config   = NULL;
 8000f10:	2300      	movs	r3, #0
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {

  adcp->state    = ADC_STOP;
 8000f12:	2201      	movs	r2, #1
 8000f14:	7002      	strb	r2, [r0, #0]
  adcp->config   = NULL;
 8000f16:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8000f18:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8000f1a:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8000f1c:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8000f1e:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8000f20:	3018      	adds	r0, #24
 8000f22:	f001 bb65 	b.w	80025f0 <chMtxObjectInit>
 8000f26:	bf00      	nop
	...

08000f30 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8000f30:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8000f32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f36:	68da      	ldr	r2, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8000f38:	0792      	lsls	r2, r2, #30
 8000f3a:	d501      	bpl.n	8000f40 <stSetAlarm+0x10>
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8000f3c:	6358      	str	r0, [r3, #52]	; 0x34
 8000f3e:	bd08      	pop	{r3, pc}
 8000f40:	4801      	ldr	r0, [pc, #4]	; (8000f48 <stSetAlarm+0x18>)
 8000f42:	f001 fb35 	bl	80025b0 <chSysHalt>
 8000f46:	bf00      	nop
 8000f48:	08003070 	.word	0x08003070
 8000f4c:	00000000 	.word	0x00000000

08000f50 <VectorB0>:
 * @brief   TIM2 interrupt handler.
 * @details This interrupt is used for system tick in free running mode.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {
 8000f50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_PROLOGUE();

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000f54:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
 *
 * @isr
 */
OSAL_IRQ_HANDLER(ST_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8000f58:	483a      	ldr	r0, [pc, #232]	; (8001044 <VectorB0+0xf4>)
 8000f5a:	f001 fae9 	bl	8002530 <_trace_isr_enter>
 8000f5e:	f001 fd77 	bl	8002a50 <_dbg_check_enter_isr>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 8000f62:	693b      	ldr	r3, [r7, #16]
 8000f64:	079b      	lsls	r3, r3, #30
 8000f66:	d408      	bmi.n	8000f7a <VectorB0+0x2a>
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000f68:	f001 fd5a 	bl	8002a20 <_dbg_check_leave_isr>
 8000f6c:	4835      	ldr	r0, [pc, #212]	; (8001044 <VectorB0+0xf4>)
 8000f6e:	f001 fabf 	bl	80024f0 <_trace_isr_leave>
}
 8000f72:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    osalSysLockFromISR();
    osalOsTimerHandlerI();
    osalSysUnlockFromISR();
  }

  OSAL_IRQ_EPILOGUE();
 8000f76:	f001 ba53 	b.w	8002420 <_port_irq_epilogue>

  /* Note, under rare circumstances an interrupt can remain latched even if
     the timer SR register has been cleared, in those cases the interrupt
     is simply ignored.*/
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
    STM32_ST_TIM->SR = 0U;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	613b      	str	r3, [r7, #16]
 8000f7e:	2320      	movs	r3, #32
 8000f80:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8000f84:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001048 <VectorB0+0xf8>
 8000f88:	46ca      	mov	sl, r9
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000f8a:	f001 fd91 	bl	8002ab0 <_dbg_check_lock_from_isr>
 *
 * @iclass
 */
void chSysTimerHandlerI(void) {

  chDbgCheckClassI();
 8000f8e:	f001 fb77 	bl	8002680 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 8000f92:	f001 fb75 	bl	8002680 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 8000f96:	f85a 4f1c 	ldr.w	r4, [sl, #28]!
 8000f9a:	68a1      	ldr	r1, [r4, #8]
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000f9c:	46bb      	mov	fp, r7
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8000f9e:	464e      	mov	r6, r9
 8000fa0:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 8000fa4:	f8d9 3028 	ldr.w	r3, [r9, #40]	; 0x28
 8000fa8:	4827      	ldr	r0, [pc, #156]	; (8001048 <VectorB0+0xf8>)
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8000faa:	ebc3 0802 	rsb	r8, r3, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 8000fae:	4588      	cmp	r8, r1
 8000fb0:	d322      	bcc.n	8000ff8 <VectorB0+0xa8>
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 8000fb2:	2500      	movs	r5, #0

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000fb4:	6822      	ldr	r2, [r4, #0]
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
 8000fb6:	68e7      	ldr	r7, [r4, #12]
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 8000fb8:	440b      	add	r3, r1
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000fba:	4552      	cmp	r2, sl
    /* Consuming all timers between "vtp->lasttime" and now.*/
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
 8000fbc:	f8c9 3028 	str.w	r3, [r9, #40]	; 0x28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8000fc0:	f8c2 a004 	str.w	sl, [r2, #4]
      ch.vtlist.next = vtp->next;
 8000fc4:	f8c9 201c 	str.w	r2, [r9, #28]
      fn = vtp->func;
      vtp->func = NULL;
 8000fc8:	60e5      	str	r5, [r4, #12]
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8000fca:	bf08      	it	eq
 8000fcc:	f8cb 500c 	streq.w	r5, [fp, #12]
    do {
      vtfunc_t fn;

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;
 8000fd0:	ebc1 0808 	rsb	r8, r1, r8
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8000fd4:	f001 fd54 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8000fd8:	f385 8811 	msr	BASEPRI, r5
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 8000fdc:	6920      	ldr	r0, [r4, #16]
 8000fde:	47b8      	blx	r7
 8000fe0:	2320      	movs	r3, #32
 8000fe2:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8000fe6:	f001 fd63 	bl	8002ab0 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 8000fea:	f8d9 401c 	ldr.w	r4, [r9, #28]
    }
    while (vtp->delta <= nowdelta);
 8000fee:	68a1      	ldr	r1, [r4, #8]
 8000ff0:	4588      	cmp	r8, r1
 8000ff2:	d3d5      	bcc.n	8000fa0 <VectorB0+0x50>
 8000ff4:	6ab3      	ldr	r3, [r6, #40]	; 0x28
 8000ff6:	e7dd      	b.n	8000fb4 <VectorB0+0x64>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8000ff8:	69c5      	ldr	r5, [r0, #28]
 8000ffa:	4555      	cmp	r5, sl
 8000ffc:	d018      	beq.n	8001030 <VectorB0+0xe0>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8000ffe:	68a9      	ldr	r1, [r5, #8]
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8001000:	4443      	add	r3, r8
  ch.vtlist.next->delta -= nowdelta;
 8001002:	ebc8 0101 	rsb	r1, r8, r1
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 8001006:	6283      	str	r3, [r0, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 8001008:	60a9      	str	r1, [r5, #8]
 800100a:	68a4      	ldr	r4, [r4, #8]
 800100c:	1a9b      	subs	r3, r3, r2
 800100e:	4423      	add	r3, r4

  /* Recalculating the next alarm time.*/
  delta = chTimeDiffX(now, chTimeAddX(ch.vtlist.lasttime, vtp->delta));
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
    delta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001010:	2b01      	cmp	r3, #1
 8001012:	bf98      	it	ls
 8001014:	2302      	movls	r3, #2

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8001016:	189c      	adds	r4, r3, r2
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 8001018:	4620      	mov	r0, r4
 800101a:	f7ff ff89 	bl	8000f30 <stSetAlarm>
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 800101e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 8001022:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8001028:	1a62      	subs	r2, r4, r1
 800102a:	1a5b      	subs	r3, r3, r1
 800102c:	4293      	cmp	r3, r2
 800102e:	d805      	bhi.n	800103c <VectorB0+0xec>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8001030:	f001 fd26 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8001034:	2300      	movs	r3, #0
 8001036:	f383 8811 	msr	BASEPRI, r3
 800103a:	e795      	b.n	8000f68 <VectorB0+0x18>
 800103c:	4803      	ldr	r0, [pc, #12]	; (800104c <VectorB0+0xfc>)
 800103e:	f001 fab7 	bl	80025b0 <chSysHalt>
 8001042:	bf00      	nop
 8001044:	08003040 	.word	0x08003040
 8001048:	20000b48 	.word	0x20000b48
 800104c:	080030d8 	.word	0x080030d8

08001050 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8001050:	b4f0      	push	{r4, r5, r6, r7}
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;
 8001052:	4e11      	ldr	r6, [pc, #68]	; (8001098 <__init_ram_areas+0x48>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8001054:	2500      	movs	r5, #0
 8001056:	f106 0780 	add.w	r7, r6, #128	; 0x80
void __init_ram_areas(void) {
#if CRT1_AREAS_NUMBER > 0
  const ram_init_area_t *rap = ram_areas;

  do {
    uint32_t *tp = rap->init_text_area;
 800105a:	e896 001a 	ldmia.w	r6, {r1, r3, r4}
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800105e:	42a3      	cmp	r3, r4
 8001060:	d20d      	bcs.n	800107e <__init_ram_areas+0x2e>
 8001062:	3904      	subs	r1, #4
 8001064:	461a      	mov	r2, r3
      *p = *tp;
 8001066:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800106a:	f842 0b04 	str.w	r0, [r2], #4
  do {
    uint32_t *tp = rap->init_text_area;
    uint32_t *p = rap->init_area;

    /* Copying initialization data.*/
    while (p < rap->clear_area) {
 800106e:	42a2      	cmp	r2, r4
 8001070:	d3f9      	bcc.n	8001066 <__init_ram_areas+0x16>
 8001072:	43da      	mvns	r2, r3
 8001074:	4414      	add	r4, r2
 8001076:	f024 0403 	bic.w	r4, r4, #3
 800107a:	3404      	adds	r4, #4
 800107c:	4423      	add	r3, r4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 800107e:	68f2      	ldr	r2, [r6, #12]
 8001080:	4293      	cmp	r3, r2
 8001082:	d203      	bcs.n	800108c <__init_ram_areas+0x3c>
      *p = 0;
 8001084:	f843 5b04 	str.w	r5, [r3], #4
      p++;
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
 8001088:	4293      	cmp	r3, r2
 800108a:	d3fb      	bcc.n	8001084 <__init_ram_areas+0x34>
      *p = 0;
      p++;
    }
    rap++;
 800108c:	3610      	adds	r6, #16
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800108e:	42be      	cmp	r6, r7
 8001090:	d3e3      	bcc.n	800105a <__init_ram_areas+0xa>
#endif
}
 8001092:	bcf0      	pop	{r4, r5, r6, r7}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	080030e4 	.word	0x080030e4
 800109c:	00000000 	.word	0x00000000

080010a0 <__default_exit>:
 */
#if !defined(__DOXYGEN__)
__attribute__((noreturn, weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __default_exit(void) {
 80010a0:	e7fe      	b.n	80010a0 <__default_exit>
 80010a2:	bf00      	nop
	...

080010b0 <__late_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __late_init(void) {}
 80010b0:	4770      	bx	lr
 80010b2:	bf00      	nop
	...

080010c0 <__core_init>:
 */
#if !defined(__DOXYGEN__)
__attribute__((weak))
#endif
/*lint -save -e9075 [8.4] All symbols are invoked from asm context.*/
void __core_init(void) {
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
	...

080010d0 <sdStart>:
 *                      If this parameter is set to @p NULL then a default
 *                      configuration is used.
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80010d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  osalDbgCheck(sdp != NULL);
 80010d2:	4604      	mov	r4, r0
 80010d4:	b148      	cbz	r0, 80010ea <sdStart+0x1a>
 80010d6:	460d      	mov	r5, r1
 80010d8:	2320      	movs	r3, #32
 80010da:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80010de:	f001 fd47 	bl	8002b70 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80010e2:	7a23      	ldrb	r3, [r4, #8]
 80010e4:	1e5a      	subs	r2, r3, #1
 80010e6:	2a01      	cmp	r2, #1
 80010e8:	d902      	bls.n	80010f0 <sdStart+0x20>
 *
 * @api
 */
void sdStart(SerialDriver *sdp, const SerialConfig *config) {

  osalDbgCheck(sdp != NULL);
 80010ea:	482c      	ldr	r0, [pc, #176]	; (800119c <sdStart+0xcc>)
 80010ec:	f001 fa60 	bl	80025b0 <chSysHalt>
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 80010f0:	4a2b      	ldr	r2, [pc, #172]	; (80011a0 <sdStart+0xd0>)
 80010f2:	2d00      	cmp	r5, #0
 80010f4:	bf08      	it	eq
 80010f6:	4615      	moveq	r5, r2

  if (sdp->state == SD_STOP) {
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d038      	beq.n	800116e <sdStart+0x9e>
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 80010fc:	686a      	ldr	r2, [r5, #4]
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 80010fe:	68ae      	ldr	r6, [r5, #8]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001100:	68e8      	ldr	r0, [r5, #12]
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001102:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8001104:	682f      	ldr	r7, [r5, #0]
 *
 * @param[in] sdp       pointer to a @p SerialDriver object
 * @param[in] config    the architecture-dependent serial driver configuration
 */
static void usart_init(SerialDriver *sdp, const SerialConfig *config) {
  USART_TypeDef *u = sdp->usart;
 8001106:	6d63      	ldr	r3, [r4, #84]	; 0x54
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001108:	fbb1 f7f7 	udiv	r7, r1, r7

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
  u->CR3 = config->cr3 | USART_CR3_EIE;
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 800110c:	f442 7196 	orr.w	r1, r2, #300	; 0x12c
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001110:	f046 0540 	orr.w	r5, r6, #64	; 0x40
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001114:	f040 0001 	orr.w	r0, r0, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8001118:	f041 0101 	orr.w	r1, r1, #1
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 800111c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
  {
      u->BRR = (uint32_t)( ( (uint64_t)sdp->clock * 256 ) / config->speed);
  }
  else
#endif
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8001120:	60df      	str	r7, [r3, #12]

  /* Note that some bits are enforced.*/
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8001122:	605d      	str	r5, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8001124:	6098      	str	r0, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 8001126:	6019      	str	r1, [r3, #0]
                         USART_CR1_RXNEIE | USART_CR1_TE |
                         USART_CR1_RE;
  u->ICR = 0xFFFFFFFFU;
 8001128:	621e      	str	r6, [r3, #32]

  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 800112a:	0553      	lsls	r3, r2, #21
 800112c:	d509      	bpl.n	8001142 <sdStart+0x72>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 800112e:	f012 2210 	ands.w	r2, r2, #268439552	; 0x10001000
 8001132:	d028      	beq.n	8001186 <sdStart+0xb6>
 8001134:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8001138:	d103      	bne.n	8001142 <sdStart+0x72>
    case 0:
      sdp->rxmask = 0x7F;
      break;
    case USART_CR1_M_1:
      sdp->rxmask = 0x3F;
 800113a:	233f      	movs	r3, #63	; 0x3f
 800113c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8001140:	e001      	b.n	8001146 <sdStart+0x76>
    default:
      sdp->rxmask = 0xFF;
    }
  }
  else {
    sdp->rxmask = 0xFF;
 8001142:	f884 605c 	strb.w	r6, [r4, #92]	; 0x5c

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8001146:	2302      	movs	r3, #2
 8001148:	7223      	strb	r3, [r4, #8]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800114a:	f001 fd01 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <sdStart+0xd4>)
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	429a      	cmp	r2, r3
 8001154:	d004      	beq.n	8001160 <sdStart+0x90>
 8001156:	6999      	ldr	r1, [r3, #24]
 8001158:	6893      	ldr	r3, [r2, #8]
 800115a:	688a      	ldr	r2, [r1, #8]
 800115c:	429a      	cmp	r2, r3
 800115e:	d303      	bcc.n	8001168 <sdStart+0x98>
 8001160:	2300      	movs	r3, #0
 8001162:	f383 8811 	msr	BASEPRI, r3
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001168:	480f      	ldr	r0, [pc, #60]	; (80011a8 <sdStart+0xd8>)
 800116a:	f001 fa21 	bl	80025b0 <chSysHalt>
  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <sdStart+0xdc>)
 8001170:	429c      	cmp	r4, r3
 8001172:	d00c      	beq.n	800118e <sdStart+0xbe>
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8001174:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <sdStart+0xe0>)
 8001176:	429c      	cmp	r4, r3
 8001178:	d1c0      	bne.n	80010fc <sdStart+0x2c>
      rccEnableUSART2(true);
 800117a:	4a0e      	ldr	r2, [pc, #56]	; (80011b4 <sdStart+0xe4>)
 800117c:	69d3      	ldr	r3, [r2, #28]
 800117e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001182:	61d3      	str	r3, [r2, #28]
 8001184:	e7ba      	b.n	80010fc <sdStart+0x2c>
  /* Deciding mask to be applied on the data register on receive, this is
     required in order to mask out the parity bit.*/
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
    case 0:
      sdp->rxmask = 0x7F;
 8001186:	237f      	movs	r3, #127	; 0x7f
 8001188:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 800118c:	e7db      	b.n	8001146 <sdStart+0x76>
    config = &default_config;

  if (sdp->state == SD_STOP) {
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
      rccEnableUSART1(true);
 800118e:	4a09      	ldr	r2, [pc, #36]	; (80011b4 <sdStart+0xe4>)
 8001190:	6993      	ldr	r3, [r2, #24]
 8001192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001196:	6193      	str	r3, [r2, #24]
 8001198:	e7b0      	b.n	80010fc <sdStart+0x2c>
 800119a:	bf00      	nop
 800119c:	080030b8 	.word	0x080030b8
 80011a0:	08003170 	.word	0x08003170
 80011a4:	20000b48 	.word	0x20000b48
 80011a8:	08003034 	.word	0x08003034
 80011ac:	20001450 	.word	0x20001450
 80011b0:	2000089c 	.word	0x2000089c
 80011b4:	40021000 	.word	0x40021000
	...

080011c0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80011c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011c4:	b085      	sub	sp, #20
 80011c6:	4604      	mov	r4, r0
 80011c8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
 80011ca:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t wr = 0;

  osalDbgCheck(n > 0U);
 80011ce:	4615      	mov	r5, r2
 80011d0:	2a00      	cmp	r2, #0
 80011d2:	d075      	beq.n	80012c0 <oqWriteTimeout+0x100>
 80011d4:	460e      	mov	r6, r1
 80011d6:	2320      	movs	r3, #32
 80011d8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80011dc:	f001 fcc8 	bl	8002b70 <_dbg_check_lock>
 80011e0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80012dc <oqWriteTimeout+0x11c>
 80011e4:	2700      	movs	r7, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80011e6:	46c3      	mov	fp, r8
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80011e8:	68a3      	ldr	r3, [r4, #8]
    n = oqGetEmptyI(oqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80011ea:	6960      	ldr	r0, [r4, #20]
 80011ec:	6922      	ldr	r2, [r4, #16]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80011ee:	429d      	cmp	r5, r3
    n = oqGetEmptyI(oqp);
 80011f0:	bf8c      	ite	hi
 80011f2:	f8d4 a008 	ldrhi.w	sl, [r4, #8]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be written in a single atomic operation.*/
  if (n > oqGetEmptyI(oqp)) {
 80011f6:	46aa      	movls	sl, r5
    n = oqGetEmptyI(oqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80011f8:	ebc0 0c02 	rsb	ip, r0, r2
  /*lint -restore*/
  if (n < s1) {
 80011fc:	45d4      	cmp	ip, sl
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80011fe:	4631      	mov	r1, r6

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  /*lint -restore*/
  if (n < s1) {
 8001200:	d864      	bhi.n	80012cc <oqWriteTimeout+0x10c>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
 8001202:	d33b      	bcc.n	800127c <oqWriteTimeout+0xbc>
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
    oqp->q_wrptr = oqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8001204:	4652      	mov	r2, sl
 8001206:	f7ff f855 	bl	80002b4 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 800120a:	68e2      	ldr	r2, [r4, #12]
 800120c:	6162      	str	r2, [r4, #20]
  }

  oqp->q_counter -= n;
 800120e:	68a2      	ldr	r2, [r4, #8]
 8001210:	ebca 0202 	rsb	r2, sl, r2
 8001214:	60a2      	str	r2, [r4, #8]

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8001216:	f1ba 0f00 	cmp.w	sl, #0
 800121a:	d04a      	beq.n	80012b2 <oqWriteTimeout+0xf2>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 800121c:	f1b9 0f00 	cmp.w	r9, #0
 8001220:	d001      	beq.n	8001226 <oqWriteTimeout+0x66>
        nfy(oqp);
 8001222:	4620      	mov	r0, r4
 8001224:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001226:	f001 fc93 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800122a:	f8d8 2000 	ldr.w	r2, [r8]
 800122e:	4542      	cmp	r2, r8
 8001230:	d005      	beq.n	800123e <oqWriteTimeout+0x7e>
 8001232:	f8db 1018 	ldr.w	r1, [fp, #24]
 8001236:	6892      	ldr	r2, [r2, #8]
 8001238:	6889      	ldr	r1, [r1, #8]
 800123a:	4291      	cmp	r1, r2
 800123c:	d343      	bcc.n	80012c6 <oqWriteTimeout+0x106>
 800123e:	2300      	movs	r3, #0
 8001240:	f383 8811 	msr	BASEPRI, r3
 8001244:	2220      	movs	r2, #32
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8001246:	4457      	add	r7, sl
      bp += done;
 8001248:	4456      	add	r6, sl
 800124a:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800124e:	f001 fc8f 	bl	8002b70 <_dbg_check_lock>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (wr < n) {
 8001252:	42bd      	cmp	r5, r7
 8001254:	d8c8      	bhi.n	80011e8 <oqWriteTimeout+0x28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001256:	f001 fc7b 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800125a:	f8d8 3000 	ldr.w	r3, [r8]
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <oqWriteTimeout+0x11c>)
 8001260:	4543      	cmp	r3, r8
 8001262:	d004      	beq.n	800126e <oqWriteTimeout+0xae>
 8001264:	6992      	ldr	r2, [r2, #24]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	6892      	ldr	r2, [r2, #8]
 800126a:	429a      	cmp	r2, r3
 800126c:	d32b      	bcc.n	80012c6 <oqWriteTimeout+0x106>
 800126e:	2300      	movs	r3, #0
 8001270:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 8001274:	4638      	mov	r0, r7
 8001276:	b005      	add	sp, #20
 8001278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
    bp += s1;
    s2 = n - s1;
 800127c:	ebcc 030a 	rsb	r3, ip, sl
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001280:	4662      	mov	r2, ip
    bp += s1;
    s2 = n - s1;
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	f8cd c00c 	str.w	ip, [sp, #12]
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr += n;
  }
  else if (n > s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8001288:	f7ff f814 	bl	80002b4 <memcpy>
    bp += s1;
    s2 = n - s1;
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 800128c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8001290:	9a02      	ldr	r2, [sp, #8]
 8001292:	68e0      	ldr	r0, [r4, #12]
 8001294:	eb06 010c 	add.w	r1, r6, ip
 8001298:	f7ff f80c 	bl	80002b4 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 800129c:	68e2      	ldr	r2, [r4, #12]
 800129e:	9b02      	ldr	r3, [sp, #8]
 80012a0:	441a      	add	r2, r3
 80012a2:	6162      	str	r2, [r4, #20]
  else { /* n == s1 */
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
    oqp->q_wrptr = oqp->q_buffer;
  }

  oqp->q_counter -= n;
 80012a4:	68a2      	ldr	r2, [r4, #8]
 80012a6:	ebca 0202 	rsb	r2, sl, r2
 80012aa:	60a2      	str	r2, [r4, #8]

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 80012ac:	f1ba 0f00 	cmp.w	sl, #0
 80012b0:	d1b4      	bne.n	800121c <oqWriteTimeout+0x5c>
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
 80012b2:	4620      	mov	r0, r4
 80012b4:	9901      	ldr	r1, [sp, #4]
 80012b6:	f001 fad3 	bl	8002860 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d0c9      	beq.n	8001252 <oqWriteTimeout+0x92>
 80012be:	e7ca      	b.n	8001256 <oqWriteTimeout+0x96>
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
  qnotify_t nfy = oqp->q_notify;
  size_t wr = 0;

  osalDbgCheck(n > 0U);
 80012c0:	4807      	ldr	r0, [pc, #28]	; (80012e0 <oqWriteTimeout+0x120>)
 80012c2:	f001 f975 	bl	80025b0 <chSysHalt>
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <oqWriteTimeout+0x124>)
 80012c8:	f001 f972 	bl	80025b0 <chSysHalt>
  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
  /*lint -restore*/
  if (n < s1) {
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 80012cc:	4652      	mov	r2, sl
 80012ce:	f7fe fff1 	bl	80002b4 <memcpy>
    oqp->q_wrptr += n;
 80012d2:	6962      	ldr	r2, [r4, #20]
 80012d4:	4452      	add	r2, sl
 80012d6:	6162      	str	r2, [r4, #20]
 80012d8:	e799      	b.n	800120e <oqWriteTimeout+0x4e>
 80012da:	bf00      	nop
 80012dc:	20000b48 	.word	0x20000b48
 80012e0:	080031bc 	.word	0x080031bc
 80012e4:	08003164 	.word	0x08003164
	...

080012f0 <_writet.lto_priv.34>:
}

static size_t _writet(void *ip, const uint8_t *bp, size_t n,
                      sysinterval_t timeout) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 80012f0:	3030      	adds	r0, #48	; 0x30
 80012f2:	f7ff bf65 	b.w	80011c0 <oqWriteTimeout>
 80012f6:	bf00      	nop
	...

08001300 <_write.lto_priv.28>:
 * queue-level function or macro.
 */

static size_t _write(void *ip, const uint8_t *bp, size_t n) {

  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 8001300:	3030      	adds	r0, #48	; 0x30
 8001302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001306:	f7ff bf5b 	b.w	80011c0 <oqWriteTimeout>
 800130a:	bf00      	nop
 800130c:	0000      	movs	r0, r0
	...

08001310 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 8001310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001312:	4604      	mov	r4, r0
 8001314:	460f      	mov	r7, r1
 8001316:	4616      	mov	r6, r2
 8001318:	2320      	movs	r3, #32
 800131a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800131e:	f001 fc27 	bl	8002b70 <_dbg_check_lock>
 8001322:	e005      	b.n	8001330 <oqPutTimeout+0x20>
 8001324:	4620      	mov	r0, r4
 8001326:	4631      	mov	r1, r6
 8001328:	f001 fa9a 	bl	8002860 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800132c:	1e05      	subs	r5, r0, #0
 800132e:	db22      	blt.n	8001376 <oqPutTimeout+0x66>
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {

  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
 8001330:	68a3      	ldr	r3, [r4, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f6      	beq.n	8001324 <oqPutTimeout+0x14>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 8001336:	6962      	ldr	r2, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001338:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800133a:	1c51      	adds	r1, r2, #1
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 800133c:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 800133e:	6161      	str	r1, [r4, #20]
      return msg;
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
 8001340:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 8001342:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 8001344:	6923      	ldr	r3, [r4, #16]
 8001346:	6962      	ldr	r2, [r4, #20]
 8001348:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800134a:	bf24      	itt	cs
 800134c:	68e3      	ldrcs	r3, [r4, #12]
 800134e:	6163      	strcs	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 8001350:	69e3      	ldr	r3, [r4, #28]
 8001352:	b10b      	cbz	r3, 8001358 <oqPutTimeout+0x48>
    oqp->q_notify(oqp);
 8001354:	4620      	mov	r0, r4
 8001356:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001358:	f001 fbfa 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <oqPutTimeout+0x8c>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	429a      	cmp	r2, r3
 8001362:	d004      	beq.n	800136e <oqPutTimeout+0x5e>
 8001364:	6999      	ldr	r1, [r3, #24]
 8001366:	6893      	ldr	r3, [r2, #8]
 8001368:	688a      	ldr	r2, [r1, #8]
 800136a:	429a      	cmp	r2, r3
 800136c:	d313      	bcc.n	8001396 <oqPutTimeout+0x86>
 800136e:	2000      	movs	r0, #0
 8001370:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 8001374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001376:	f001 fbeb 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800137a:	4b08      	ldr	r3, [pc, #32]	; (800139c <oqPutTimeout+0x8c>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	429a      	cmp	r2, r3
 8001380:	d004      	beq.n	800138c <oqPutTimeout+0x7c>
 8001382:	6999      	ldr	r1, [r3, #24]
 8001384:	6893      	ldr	r3, [r2, #8]
 8001386:	688a      	ldr	r2, [r1, #8]
 8001388:	429a      	cmp	r2, r3
 800138a:	d304      	bcc.n	8001396 <oqPutTimeout+0x86>
 800138c:	2300      	movs	r3, #0
 800138e:	f383 8811 	msr	BASEPRI, r3
 8001392:	4628      	mov	r0, r5
 8001394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001396:	4802      	ldr	r0, [pc, #8]	; (80013a0 <oqPutTimeout+0x90>)
 8001398:	f001 f90a 	bl	80025b0 <chSysHalt>
 800139c:	20000b48 	.word	0x20000b48
 80013a0:	08003164 	.word	0x08003164
	...

080013b0 <_putt.lto_priv.32>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
}

static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 80013b0:	3030      	adds	r0, #48	; 0x30
 80013b2:	f7ff bfad 	b.w	8001310 <oqPutTimeout>
 80013b6:	bf00      	nop
	...

080013c0 <_put.lto_priv.30>:
                       n, TIME_INFINITE);
}

static msg_t _put(void *ip, uint8_t b) {

  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 80013c0:	3030      	adds	r0, #48	; 0x30
 80013c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c6:	f7ff bfa3 	b.w	8001310 <oqPutTimeout>
 80013ca:	bf00      	nop
 80013cc:	0000      	movs	r0, r0
	...

080013d0 <iqReadTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
 80013d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013d4:	b085      	sub	sp, #20
 80013d6:	4604      	mov	r4, r0
 80013d8:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = iqp->q_notify;
 80013da:	f8d0 901c 	ldr.w	r9, [r0, #28]
  size_t rd = 0;

  osalDbgCheck(n > 0U);
 80013de:	4615      	mov	r5, r2
 80013e0:	2a00      	cmp	r2, #0
 80013e2:	d075      	beq.n	80014d0 <iqReadTimeout+0x100>
 80013e4:	460e      	mov	r6, r1
 80013e6:	2320      	movs	r3, #32
 80013e8:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80013ec:	f001 fbc0 	bl	8002b70 <_dbg_check_lock>
 80013f0:	f8df 80f8 	ldr.w	r8, [pc, #248]	; 80014ec <iqReadTimeout+0x11c>
 80013f4:	2700      	movs	r7, #0

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80013f6:	46c3      	mov	fp, r8
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80013f8:	68a3      	ldr	r3, [r4, #8]
    n = iqGetFullI(iqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80013fa:	69a1      	ldr	r1, [r4, #24]
 80013fc:	6922      	ldr	r2, [r4, #16]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 80013fe:	429d      	cmp	r5, r3
    n = iqGetFullI(iqp);
 8001400:	bf8c      	ite	hi
 8001402:	f8d4 a008 	ldrhi.w	sl, [r4, #8]
  size_t s1, s2;

  osalDbgCheck(n > 0U);

  /* Number of bytes that can be read in a single atomic operation.*/
  if (n > iqGetFullI(iqp)) {
 8001406:	46aa      	movls	sl, r5
    n = iqGetFullI(iqp);
  }

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8001408:	ebc1 0c02 	rsb	ip, r1, r2
  /*lint -restore*/
  if (n < s1) {
 800140c:	45d4      	cmp	ip, sl
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800140e:	4630      	mov	r0, r6

  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  /*lint -restore*/
  if (n < s1) {
 8001410:	d864      	bhi.n	80014dc <iqReadTimeout+0x10c>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
 8001412:	d33b      	bcc.n	800148c <iqReadTimeout+0xbc>
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
    iqp->q_rdptr = iqp->q_buffer + s2;
  }
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 8001414:	4652      	mov	r2, sl
 8001416:	f7fe ff4d 	bl	80002b4 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800141a:	68e2      	ldr	r2, [r4, #12]
 800141c:	61a2      	str	r2, [r4, #24]
  }

  iqp->q_counter -= n;
 800141e:	68a2      	ldr	r2, [r4, #8]
 8001420:	ebca 0202 	rsb	r2, sl, r2
 8001424:	60a2      	str	r2, [r4, #8]

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 8001426:	f1ba 0f00 	cmp.w	sl, #0
 800142a:	d04a      	beq.n	80014c2 <iqReadTimeout+0xf2>
      }
    }
    else {
      /* Inform the low side that the queue has at least one empty slot
         available.*/
      if (nfy != NULL) {
 800142c:	f1b9 0f00 	cmp.w	r9, #0
 8001430:	d001      	beq.n	8001436 <iqReadTimeout+0x66>
        nfy(iqp);
 8001432:	4620      	mov	r0, r4
 8001434:	47c8      	blx	r9
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001436:	f001 fb8b 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800143a:	f8d8 2000 	ldr.w	r2, [r8]
 800143e:	4542      	cmp	r2, r8
 8001440:	d005      	beq.n	800144e <iqReadTimeout+0x7e>
 8001442:	f8db 1018 	ldr.w	r1, [fp, #24]
 8001446:	6892      	ldr	r2, [r2, #8]
 8001448:	6889      	ldr	r1, [r1, #8]
 800144a:	4291      	cmp	r1, r2
 800144c:	d343      	bcc.n	80014d6 <iqReadTimeout+0x106>
 800144e:	2300      	movs	r3, #0
 8001450:	f383 8811 	msr	BASEPRI, r3
 8001454:	2220      	movs	r2, #32
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      rd += done;
 8001456:	4457      	add	r7, sl
      bp += done;
 8001458:	4456      	add	r6, sl
 800145a:	f382 8811 	msr	BASEPRI, r2
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800145e:	f001 fb87 	bl	8002b70 <_dbg_check_lock>

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (rd < n) {
 8001462:	42bd      	cmp	r5, r7
 8001464:	d8c8      	bhi.n	80013f8 <iqReadTimeout+0x28>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001466:	f001 fb73 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800146a:	f8d8 3000 	ldr.w	r3, [r8]
 800146e:	4a1f      	ldr	r2, [pc, #124]	; (80014ec <iqReadTimeout+0x11c>)
 8001470:	4543      	cmp	r3, r8
 8001472:	d004      	beq.n	800147e <iqReadTimeout+0xae>
 8001474:	6992      	ldr	r2, [r2, #24]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	6892      	ldr	r2, [r2, #8]
 800147a:	429a      	cmp	r2, r3
 800147c:	d32b      	bcc.n	80014d6 <iqReadTimeout+0x106>
 800147e:	2300      	movs	r3, #0
 8001480:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return rd;
}
 8001484:	4638      	mov	r0, r7
 8001486:	b005      	add	sp, #20
 8001488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
    bp += s1;
    s2 = n - s1;
 800148c:	ebcc 030a 	rsb	r3, ip, sl
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001490:	4662      	mov	r2, ip
    bp += s1;
    s2 = n - s1;
 8001492:	9302      	str	r3, [sp, #8]
 8001494:	f8cd c00c 	str.w	ip, [sp, #12]
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr += n;
  }
  else if (n > s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 8001498:	f7fe ff0c 	bl	80002b4 <memcpy>
    bp += s1;
    s2 = n - s1;
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800149c:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80014a0:	9a02      	ldr	r2, [sp, #8]
 80014a2:	68e1      	ldr	r1, [r4, #12]
 80014a4:	eb06 000c 	add.w	r0, r6, ip
 80014a8:	f7fe ff04 	bl	80002b4 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 80014ac:	68e2      	ldr	r2, [r4, #12]
 80014ae:	9b02      	ldr	r3, [sp, #8]
 80014b0:	441a      	add	r2, r3
 80014b2:	61a2      	str	r2, [r4, #24]
  else { /* n == s1 */
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
    iqp->q_rdptr = iqp->q_buffer;
  }

  iqp->q_counter -= n;
 80014b4:	68a2      	ldr	r2, [r4, #8]
 80014b6:	ebca 0202 	rsb	r2, sl, r2
 80014ba:	60a2      	str	r2, [r4, #8]

  while (rd < n) {
    size_t done;

    done = iq_read(iqp, bp, n);
    if (done == (size_t)0) {
 80014bc:	f1ba 0f00 	cmp.w	sl, #0
 80014c0:	d1b4      	bne.n	800142c <iqReadTimeout+0x5c>
 80014c2:	4620      	mov	r0, r4
 80014c4:	9901      	ldr	r1, [sp, #4]
 80014c6:	f001 f9cb 	bl	8002860 <chThdEnqueueTimeoutS>
      msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
 80014ca:	2800      	cmp	r0, #0
 80014cc:	d0c9      	beq.n	8001462 <iqReadTimeout+0x92>
 80014ce:	e7ca      	b.n	8001466 <iqReadTimeout+0x96>
size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
                     size_t n, sysinterval_t timeout) {
  qnotify_t nfy = iqp->q_notify;
  size_t rd = 0;

  osalDbgCheck(n > 0U);
 80014d0:	4807      	ldr	r0, [pc, #28]	; (80014f0 <iqReadTimeout+0x120>)
 80014d2:	f001 f86d 	bl	80025b0 <chSysHalt>
 80014d6:	4807      	ldr	r0, [pc, #28]	; (80014f4 <iqReadTimeout+0x124>)
 80014d8:	f001 f86a 	bl	80025b0 <chSysHalt>
  /* Number of bytes before buffer limit.*/
  /*lint -save -e9033 [10.8] Checked to be safe.*/
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  /*lint -restore*/
  if (n < s1) {
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 80014dc:	4652      	mov	r2, sl
 80014de:	f7fe fee9 	bl	80002b4 <memcpy>
    iqp->q_rdptr += n;
 80014e2:	69a2      	ldr	r2, [r4, #24]
 80014e4:	4452      	add	r2, sl
 80014e6:	61a2      	str	r2, [r4, #24]
 80014e8:	e799      	b.n	800141e <iqReadTimeout+0x4e>
 80014ea:	bf00      	nop
 80014ec:	20000b48 	.word	0x20000b48
 80014f0:	080031a0 	.word	0x080031a0
 80014f4:	08003164 	.word	0x08003164
	...

08001500 <_readt.lto_priv.35>:
}

static size_t _readt(void *ip, uint8_t *bp, size_t n,
                     sysinterval_t timeout) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8001500:	300c      	adds	r0, #12
 8001502:	f7ff bf65 	b.w	80013d0 <iqReadTimeout>
 8001506:	bf00      	nop
	...

08001510 <_read.lto_priv.29>:
                        n, TIME_INFINITE);
}

static size_t _read(void *ip, uint8_t *bp, size_t n) {

  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 8001510:	300c      	adds	r0, #12
 8001512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001516:	f7ff bf5b 	b.w	80013d0 <iqReadTimeout>
 800151a:	bf00      	nop
 800151c:	0000      	movs	r0, r0
	...

08001520 <iqGetTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001520:	b570      	push	{r4, r5, r6, lr}
 8001522:	2320      	movs	r3, #32
 8001524:	4604      	mov	r4, r0
 8001526:	460e      	mov	r6, r1
 8001528:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800152c:	f001 fb20 	bl	8002b70 <_dbg_check_lock>
 8001530:	e005      	b.n	800153e <iqGetTimeout+0x1e>
 8001532:	4620      	mov	r0, r4
 8001534:	4631      	mov	r1, r6
 8001536:	f001 f993 	bl	8002860 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 800153a:	1e05      	subs	r5, r0, #0
 800153c:	db13      	blt.n	8001566 <iqGetTimeout+0x46>
  uint8_t b;

  osalSysLock();

  /* Waiting until there is a character available or a timeout occurs.*/
  while (iqIsEmptyI(iqp)) {
 800153e:	68a3      	ldr	r3, [r4, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d0f6      	beq.n	8001532 <iqGetTimeout+0x12>
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001544:	69a1      	ldr	r1, [r4, #24]
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001546:	68a3      	ldr	r3, [r4, #8]
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 8001548:	6920      	ldr	r0, [r4, #16]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 800154a:	1c4a      	adds	r2, r1, #1
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 800154c:	3b01      	subs	r3, #1
  b = *iqp->q_rdptr++;
  if (iqp->q_rdptr >= iqp->q_top) {
 800154e:	4282      	cmp	r2, r0
      return msg;
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
 8001550:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 8001552:	61a2      	str	r2, [r4, #24]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 8001554:	bf28      	it	cs
 8001556:	68e3      	ldrcs	r3, [r4, #12]
    }
  }

  /* Getting the character from the queue.*/
  iqp->q_counter--;
  b = *iqp->q_rdptr++;
 8001558:	780d      	ldrb	r5, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
    iqp->q_rdptr = iqp->q_buffer;
 800155a:	bf28      	it	cs
 800155c:	61a3      	strcs	r3, [r4, #24]
  }

  /* Inform the low side that the queue has at least one slot available.*/
  if (iqp->q_notify != NULL) {
 800155e:	69e3      	ldr	r3, [r4, #28]
 8001560:	b10b      	cbz	r3, 8001566 <iqGetTimeout+0x46>
    iqp->q_notify(iqp);
 8001562:	4620      	mov	r0, r4
 8001564:	4798      	blx	r3
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001566:	f001 faf3 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <iqGetTimeout+0x6c>)
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d004      	beq.n	800157c <iqGetTimeout+0x5c>
 8001572:	6999      	ldr	r1, [r3, #24]
 8001574:	6893      	ldr	r3, [r2, #8]
 8001576:	688a      	ldr	r2, [r1, #8]
 8001578:	429a      	cmp	r2, r3
 800157a:	d304      	bcc.n	8001586 <iqGetTimeout+0x66>
 800157c:	2300      	movs	r3, #0
 800157e:	f383 8811 	msr	BASEPRI, r3
  }

  osalSysUnlock();

  return (msg_t)b;
 8001582:	4628      	mov	r0, r5
}
 8001584:	bd70      	pop	{r4, r5, r6, pc}
 8001586:	4802      	ldr	r0, [pc, #8]	; (8001590 <iqGetTimeout+0x70>)
 8001588:	f001 f812 	bl	80025b0 <chSysHalt>
 800158c:	20000b48 	.word	0x20000b48
 8001590:	08003164 	.word	0x08003164
	...

080015a0 <_gett.lto_priv.33>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
}

static msg_t _gett(void *ip, sysinterval_t timeout) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 80015a0:	300c      	adds	r0, #12
 80015a2:	f7ff bfbd 	b.w	8001520 <iqGetTimeout>
 80015a6:	bf00      	nop
	...

080015b0 <_get.lto_priv.31>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
}

static msg_t _get(void *ip) {

  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80015b0:	300c      	adds	r0, #12
 80015b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b6:	f7ff bfb3 	b.w	8001520 <iqGetTimeout>
 80015ba:	bf00      	nop
 80015bc:	0000      	movs	r0, r0
	...

080015c0 <main>:
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 80015c0:	4bbd      	ldr	r3, [pc, #756]	; (80018b8 <main+0x2f8>)
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80015c2:	48be      	ldr	r0, [pc, #760]	; (80018bc <main+0x2fc>)
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 80015c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015c6:	2200      	movs	r2, #0
 80015c8:	f461 01fc 	orn	r1, r1, #8257536	; 0x7e0000
	}

    }


int main(void) {
 80015cc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80015d0:	6299      	str	r1, [r3, #40]	; 0x28
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80015d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d8:	691c      	ldr	r4, [r3, #16]
 80015da:	6119      	str	r1, [r3, #16]
 80015dc:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80015de:	68dc      	ldr	r4, [r3, #12]
 80015e0:	60d9      	str	r1, [r3, #12]
 80015e2:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80015e4:	69d9      	ldr	r1, [r3, #28]
 80015e6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80015ea:	61d9      	str	r1, [r3, #28]
 *          of the whole BKP domain.
 */
static void hal_lld_backup_domain_init(void) {

  /* Backup domain access enabled and left open.*/
  PWR->CR |= PWR_CR_DBP;
 80015ec:	6801      	ldr	r1, [r0, #0]
 80015ee:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80015f2:	6001      	str	r1, [r0, #0]

  /* Reset BKP domain if different clock source selected.*/
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80015f4:	6a19      	ldr	r1, [r3, #32]
 80015f6:	f401 7140 	and.w	r1, r1, #768	; 0x300
 80015fa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80015fe:	b08b      	sub	sp, #44	; 0x2c
 8001600:	d003      	beq.n	800160a <main+0x4a>
    /* Backup domain reset.*/
    RCC->BDCR = RCC_BDCR_BDRST;
 8001602:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001606:	6219      	str	r1, [r3, #32]
    RCC->BDCR = 0;
 8001608:	621a      	str	r2, [r3, #32]
#endif

#if STM32_RTCSEL != STM32_RTCSEL_NOCLOCK
  /* If the backup domain hasn't been initialized yet then proceed with
     initialization.*/
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 800160a:	4bab      	ldr	r3, [pc, #684]	; (80018b8 <main+0x2f8>)
 800160c:	6a1a      	ldr	r2, [r3, #32]
 800160e:	0412      	lsls	r2, r2, #16
 8001610:	d407      	bmi.n	8001622 <main+0x62>
    /* Selects clock source.*/
    RCC->BDCR |= STM32_RTCSEL;
 8001612:	6a1a      	ldr	r2, [r3, #32]
 8001614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001618:	621a      	str	r2, [r3, #32]

    /* RTC clock enabled.*/
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800161a:	6a1a      	ldr	r2, [r3, #32]
 800161c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001620:	621a      	str	r2, [r3, #32]
 * @init
 */
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
 8001622:	4ca7      	ldr	r4, [pc, #668]	; (80018c0 <main+0x300>)
 8001624:	49a7      	ldr	r1, [pc, #668]	; (80018c4 <main+0x304>)
 8001626:	4da8      	ldr	r5, [pc, #672]	; (80018c8 <main+0x308>)
 8001628:	2200      	movs	r2, #0
 800162a:	6022      	str	r2, [r4, #0]
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800162c:	4613      	mov	r3, r2
    _stm32_dma_streams[i].channel->CCR = 0U;
 800162e:	4610      	mov	r0, r2
 */
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
 8001630:	6062      	str	r2, [r4, #4]
 8001632:	460a      	mov	r2, r1
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001634:	6854      	ldr	r4, [r2, #4]
 8001636:	6020      	str	r0, [r4, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8001638:	f845 0033 	str.w	r0, [r5, r3, lsl #3]
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 800163c:	3301      	adds	r3, #1
 800163e:	2b0c      	cmp	r3, #12
 8001640:	f102 0214 	add.w	r2, r2, #20
    _stm32_dma_streams[i].channel->CCR = 0U;
 8001644:	f04f 0400 	mov.w	r4, #0
void dmaInit(void) {
  int i;

  dma.streams_mask = 0U;
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8001648:	d1f4      	bne.n	8001634 <main+0x74>
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 800164a:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 8001918 <main+0x358>
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 800164e:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800191c <main+0x35c>
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001652:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <main+0x30c>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001654:	4d9e      	ldr	r5, [pc, #632]	; (80018d0 <main+0x310>)
 8001656:	9302      	str	r3, [sp, #8]
  dma.isr_mask = 0U;
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].channel->CCR = 0U;
    _stm32_dma_isr_redir[i].dma_func = NULL;
  }
  DMA1->IFCR = 0xFFFFFFFFU;
 8001658:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800165c:	9103      	str	r1, [sp, #12]
 800165e:	2060      	movs	r0, #96	; 0x60
 8001660:	f8cc 3004 	str.w	r3, [ip, #4]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001664:	f04f 0b40 	mov.w	fp, #64	; 0x40
#if STM32_DMA2_NUM_CHANNELS > 0
  DMA2->IFCR = 0xFFFFFFFFU;
 8001668:	f8c8 3004 	str.w	r3, [r8, #4]
 800166c:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	f44f 7800 	mov.w	r8, #512	; 0x200

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001676:	f885 0306 	strb.w	r0, [r5, #774]	; 0x306
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800167a:	f8c5 b180 	str.w	fp, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800167e:	f8c5 b000 	str.w	fp, [r5]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001682:	f885 0307 	strb.w	r0, [r5, #775]	; 0x307
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001686:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800168a:	602b      	str	r3, [r5, #0]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800168c:	f885 0308 	strb.w	r0, [r5, #776]	; 0x308
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001690:	f8c5 c180 	str.w	ip, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001694:	f8c5 c000 	str.w	ip, [r5]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001698:	f885 0309 	strb.w	r0, [r5, #777]	; 0x309
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800169c:	f8c5 8180 	str.w	r8, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016a0:	f8c5 8000 	str.w	r8, [r5]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016a4:	f44f 6880 	mov.w	r8, #1024	; 0x400
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80016a8:	4e83      	ldr	r6, [pc, #524]	; (80018b8 <main+0x2f8>)

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016aa:	f885 030a 	strb.w	r0, [r5, #778]	; 0x30a
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016ae:	f8c5 8180 	str.w	r8, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016b2:	f8c5 8000 	str.w	r8, [r5]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016b6:	f44f 0800 	mov.w	r8, #8388608	; 0x800000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016ba:	f885 0317 	strb.w	r0, [r5, #791]	; 0x317
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016be:	f8c5 8180 	str.w	r8, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016c2:	f8c5 8000 	str.w	r8, [r5]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80016c6:	f885 0328 	strb.w	r0, [r5, #808]	; 0x328
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80016ca:	f8c5 c184 	str.w	ip, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80016ce:	f8c5 c004 	str.w	ip, [r5, #4]
 80016d2:	69b0      	ldr	r0, [r6, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 80016d4:	f8df e248 	ldr.w	lr, [pc, #584]	; 8001920 <main+0x360>

  clkmask = 0;

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 80016d8:	4a7e      	ldr	r2, [pc, #504]	; (80018d4 <main+0x314>)
 *
 * @notapi
 */
void adc_lld_init(void) {

  clkmask = 0;
 80016da:	4f7f      	ldr	r7, [pc, #508]	; (80018d8 <main+0x318>)
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 80016dc:	f8df a244 	ldr.w	sl, [pc, #580]	; 8001924 <main+0x364>
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 80016e0:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8001928 <main+0x368>
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 80016e4:	f8df 9244 	ldr.w	r9, [pc, #580]	; 800192c <main+0x36c>
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 80016e8:	f040 0001 	orr.w	r0, r0, #1
 80016ec:	61b0      	str	r0, [r6, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 80016ee:	f8de 0000 	ldr.w	r0, [lr]
 80016f2:	f040 0020 	orr.w	r0, r0, #32
 80016f6:	f8ce 0000 	str.w	r0, [lr]

  clkmask = 0;

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 80016fa:	4610      	mov	r0, r2
 80016fc:	9201      	str	r2, [sp, #4]
 *
 * @notapi
 */
void adc_lld_init(void) {

  clkmask = 0;
 80016fe:	603c      	str	r4, [r7, #0]

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
 8001700:	f7ff fc06 	bl	8000f10 <adcObjectInit>
#endif
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8001704:	9a01      	ldr	r2, [sp, #4]
 8001706:	9903      	ldr	r1, [sp, #12]
 8001708:	6311      	str	r1, [r2, #48]	; 0x30
  ADCD1.dmamode = ADC_DMA_SIZE |
 800170a:	f242 578a 	movw	r7, #9610	; 0x258a
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD1.adcc = ADC1_COMMON;
#endif
  ADCD1.adcm    = ADC1;
 800170e:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 8001712:	4650      	mov	r0, sl

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 8001714:	4b71      	ldr	r3, [pc, #452]	; (80018dc <main+0x31c>)
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD1.adcc = ADC1_COMMON;
#endif
  ADCD1.adcm    = ADC1;
 8001716:	6291      	str	r1, [r2, #40]	; 0x28

#if STM32_ADC_USE_ADC1
  /* Driver initialization.*/
  adcObjectInit(&ADCD1);
#if defined(ADC1_2_COMMON)
  ADCD1.adcc = ADC1_2_COMMON;
 8001718:	62d3      	str	r3, [r2, #44]	; 0x2c
  ADCD1.adcm    = ADC1;
#if STM32_ADC_DUAL_MODE
  ADCD1.adcs    = ADC2;
#endif
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
  ADCD1.dmamode = ADC_DMA_SIZE |
 800171a:	6357      	str	r7, [r2, #52]	; 0x34
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC1 */

#if STM32_ADC_USE_ADC2
  /* Driver initialization.*/
  adcObjectInit(&ADCD2);
 800171c:	f7ff fbf8 	bl	8000f10 <adcObjectInit>
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
 8001720:	4b6e      	ldr	r3, [pc, #440]	; (80018dc <main+0x31c>)
 8001722:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001726:	9b02      	ldr	r3, [sp, #8]
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
 8001728:	4a6d      	ldr	r2, [pc, #436]	; (80018e0 <main+0x320>)
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
  ADCD2.dmamode = ADC_DMA_SIZE |
 800172a:	f8ca 7034 	str.w	r7, [sl, #52]	; 0x34
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 800172e:	4618      	mov	r0, r3
#if defined(ADC1_2_COMMON)
  ADCD2.adcc = ADC1_2_COMMON;
#elif defined(ADC123_COMMON)
  ADCD2.adcc = ADC123_COMMON;
#endif
  ADCD2.adcm    = ADC2;
 8001730:	f8ca 2028 	str.w	r2, [sl, #40]	; 0x28
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 8001734:	f8ca 8030 	str.w	r8, [sl, #48]	; 0x30
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC2 */

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	f7ff fbe9 	bl	8000f10 <adcObjectInit>
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = ADC_DMA_SIZE |
 800173e:	9b01      	ldr	r3, [sp, #4]
#elif defined(ADC123_COMMON)
  ADCD1.adcc = ADC123_COMMON;
#else
  ADCD3.adcc = ADC3_COMMON;
#endif
  ADCD3.adcm    = ADC3;
 8001740:	4868      	ldr	r0, [pc, #416]	; (80018e4 <main+0x324>)
 8001742:	6298      	str	r0, [r3, #40]	; 0x28
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8001744:	f108 0250 	add.w	r2, r8, #80	; 0x50
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 8001748:	4648      	mov	r0, r9
#endif
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 800174a:	631a      	str	r2, [r3, #48]	; 0x30

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 800174c:	4a66      	ldr	r2, [pc, #408]	; (80018e8 <main+0x328>)
  ADCD3.adcm    = ADC3;
#if STM32_ADC_DUAL_MODE
  ADCD3.adcs    = ADC4;
#endif
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
  ADCD3.dmamode = ADC_DMA_SIZE |
 800174e:	635f      	str	r7, [r3, #52]	; 0x34

#if STM32_ADC_USE_ADC3
  /* Driver initialization.*/
  adcObjectInit(&ADCD3);
#if defined(ADC3_4_COMMON)
  ADCD3.adcc = ADC3_4_COMMON;
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
                  STM32_DMA_CR_DMEIE       | STM32_DMA_CR_TEIE;
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
 8001752:	f7ff fbdd 	bl	8000f10 <adcObjectInit>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001756:	2350      	movs	r3, #80	; 0x50
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001758:	f44f 2280 	mov.w	r2, #262144	; 0x40000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800175c:	f885 3312 	strb.w	r3, [r5, #786]	; 0x312
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001760:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001764:	f8c5 2180 	str.w	r2, [r5, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001768:	602a      	str	r2, [r5, #0]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800176a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800176e:	f885 332f 	strb.w	r3, [r5, #815]	; 0x32f
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001772:	f8c5 0184 	str.w	r0, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001776:	6068      	str	r0, [r5, #4]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001778:	f885 333d 	strb.w	r3, [r5, #829]	; 0x33d
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800177c:	f8c5 2184 	str.w	r2, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001780:	606a      	str	r2, [r5, #4]

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
 8001782:	6970      	ldr	r0, [r6, #20]
#endif /* STM32_ADC_USE_ADC3 */

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
 8001784:	4958      	ldr	r1, [pc, #352]	; (80018e8 <main+0x328>)
 8001786:	f8c9 102c 	str.w	r1, [r9, #44]	; 0x2c

  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
 800178a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800178e:	6170      	str	r0, [r6, #20]
  rccResetADC12();
 8001790:	6ab0      	ldr	r0, [r6, #40]	; 0x28
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
  ADCD4.dmamode = ADC_DMA_SIZE |
 8001792:	f8c9 7034 	str.w	r7, [r9, #52]	; 0x34
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
  rccResetADC12();
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8001796:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
  rccResetADC12();
 800179a:	f040 5780 	orr.w	r7, r0, #268435456	; 0x10000000
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 800179e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  /* ADC units pre-initializations.*/
#if defined(STM32F3XX)
#if STM32_HAS_ADC1 && STM32_HAS_ADC2
#if STM32_ADC_USE_ADC1 || STM32_ADC_USE_ADC2
  rccEnableADC12(true);
  rccResetADC12();
 80017a2:	62b7      	str	r7, [r6, #40]	; 0x28
 80017a4:	62b4      	str	r4, [r6, #40]	; 0x28
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 80017a6:	6088      	str	r0, [r1, #8]
  rccDisableADC12();
 80017a8:	6971      	ldr	r1, [r6, #20]
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 80017aa:	4a50      	ldr	r2, [pc, #320]	; (80018ec <main+0x32c>)
 80017ac:	4f50      	ldr	r7, [pc, #320]	; (80018f0 <main+0x330>)
 80017ae:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <main+0x334>)
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 80017b0:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8001930 <main+0x370>
 80017b4:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80017b8:	6171      	str	r1, [r6, #20]
  ADC1_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
 80017ba:	6971      	ldr	r1, [r6, #20]
 80017bc:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80017c0:	6171      	str	r1, [r6, #20]
  rccResetADC34();
 80017c2:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80017c4:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80017c8:	62b1      	str	r1, [r6, #40]	; 0x28
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 80017ca:	4947      	ldr	r1, [pc, #284]	; (80018e8 <main+0x328>)
  rccDisableADC12();
#endif
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
  rccResetADC34();
 80017cc:	62b4      	str	r4, [r6, #40]	; 0x28
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 80017ce:	6088      	str	r0, [r1, #8]
  rccDisableADC34();
 80017d0:	f8d6 e014 	ldr.w	lr, [r6, #20]
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 80017d4:	4848      	ldr	r0, [pc, #288]	; (80018f8 <main+0x338>)

#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
 80017d6:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
 80017da:	f8c9 1028 	str.w	r1, [r9, #40]	; 0x28
 80017de:	4611      	mov	r1, r2
#endif
#if STM32_ADC_USE_ADC3 || STM32_ADC_USE_ADC4
  rccEnableADC34(true);
  rccResetADC34();
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
  rccDisableADC34();
 80017e0:	f02e 5e00 	bic.w	lr, lr, #536870912	; 0x20000000
 80017e4:	f8c6 e014 	str.w	lr, [r6, #20]
 80017e8:	f841 7b04 	str.w	r7, [r1], #4
#if STM32_ADC_USE_ADC4
  /* Driver initialization.*/
  adcObjectInit(&ADCD4);
  ADCD4.adcc = ADC3_4_COMMON;
  ADCD4.adcm    = ADC4;
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
 80017ec:	f108 0e14 	add.w	lr, r8, #20
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80017f0:	f102 0c0c 	add.w	ip, r2, #12
 80017f4:	f8c9 e030 	str.w	lr, [r9, #48]	; 0x30
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 80017f8:	6051      	str	r1, [r2, #4]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80017fa:	f04f 0901 	mov.w	r9, #1
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 80017fe:	2110      	movs	r1, #16
 8001800:	f8c2 c00c 	str.w	ip, [r2, #12]
 8001804:	f882 9008 	strb.w	r9, [r2, #8]
  tqp->prev = (thread_t *)tqp;
 8001808:	f8c2 c010 	str.w	ip, [r2, #16]
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800180c:	6154      	str	r4, [r2, #20]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 800180e:	f04f 0cc0 	mov.w	ip, #192	; 0xc0
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001812:	6391      	str	r1, [r2, #56]	; 0x38
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001814:	2120      	movs	r1, #32

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001816:	f885 c325 	strb.w	ip, [r5, #805]	; 0x325
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 800181a:	f8c5 1184 	str.w	r1, [r5, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 800181e:	6069      	str	r1, [r5, #4]
  oqp->q_buffer  = bp;
 8001820:	4936      	ldr	r1, [pc, #216]	; (80018fc <main+0x33c>)
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001822:	6190      	str	r0, [r2, #24]
  iqp->q_rdptr   = bp;
 8001824:	6250      	str	r0, [r2, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8001826:	6210      	str	r0, [r2, #32]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 8001828:	63d1      	str	r1, [r2, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 800182a:	6491      	str	r1, [r2, #72]	; 0x48
  oqp->q_wrptr   = bp;
 800182c:	6451      	str	r1, [r2, #68]	; 0x44
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 800182e:	3010      	adds	r0, #16
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001830:	3110      	adds	r1, #16
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001832:	61d0      	str	r0, [r2, #28]
  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 8001834:	6411      	str	r1, [r2, #64]	; 0x40
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 8001836:	4832      	ldr	r0, [pc, #200]	; (8001900 <main+0x340>)
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
 8001838:	4932      	ldr	r1, [pc, #200]	; (8001904 <main+0x344>)
 800183a:	64d1      	str	r1, [r2, #76]	; 0x4c
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 800183c:	469e      	mov	lr, r3

#if STM32_SERIAL_USE_USART1
  sdObjectInit(&SD1);
  iqObjectInit(&SD1.iqueue, sd_in_buf1, sizeof sd_in_buf1, NULL, &SD1);
  oqObjectInit(&SD1.oqueue, sd_out_buf1, sizeof sd_out_buf1, notify1, &SD1);
  SD1.usart = USART1;
 800183e:	4932      	ldr	r1, [pc, #200]	; (8001908 <main+0x348>)
 8001840:	6551      	str	r1, [r2, #84]	; 0x54
  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
 8001842:	f100 0110 	add.w	r1, r0, #16
 8001846:	f84e 7b04 	str.w	r7, [lr], #4
 800184a:	61d9      	str	r1, [r3, #28]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 800184c:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8001850:	6311      	str	r1, [r2, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001852:	6351      	str	r1, [r2, #52]	; 0x34
  SD1.clock = STM32_USART1CLK;
 8001854:	492d      	ldr	r1, [pc, #180]	; (800190c <main+0x34c>)
 8001856:	f8c3 e004 	str.w	lr, [r3, #4]
 800185a:	6591      	str	r1, [r2, #88]	; 0x58
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 800185c:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 8001934 <main+0x374>
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001860:	6294      	str	r4, [r2, #40]	; 0x28
  iqp->q_link    = link;
 8001862:	62d2      	str	r2, [r2, #44]	; 0x2c
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
  oqp->q_notify  = onfy;
  oqp->q_link    = link;
 8001864:	6512      	str	r2, [r2, #80]	; 0x50
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001866:	f103 020c 	add.w	r2, r3, #12
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
  iqp->q_buffer  = bp;
 800186a:	6198      	str	r0, [r3, #24]
  iqp->q_rdptr   = bp;
 800186c:	6258      	str	r0, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 800186e:	6218      	str	r0, [r3, #32]
 8001870:	60da      	str	r2, [r3, #12]
 8001872:	f103 0030 	add.w	r0, r3, #48	; 0x30
  tqp->prev = (thread_t *)tqp;
 8001876:	611a      	str	r2, [r3, #16]
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001878:	2210      	movs	r2, #16
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 800187a:	f883 9008 	strb.w	r9, [r3, #8]
 */
void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
                  qnotify_t infy, void *link) {

  osalThreadQueueObjectInit(&iqp->q_waiting);
  iqp->q_counter = 0;
 800187e:	615c      	str	r4, [r3, #20]
  iqp->q_buffer  = bp;
  iqp->q_rdptr   = bp;
  iqp->q_wrptr   = bp;
  iqp->q_top     = bp + size;
  iqp->q_notify  = infy;
 8001880:	629c      	str	r4, [r3, #40]	; 0x28
  iqp->q_link    = link;
 8001882:	62db      	str	r3, [r3, #44]	; 0x2c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001884:	6318      	str	r0, [r3, #48]	; 0x30
 */
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
 8001886:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001888:	f885 c326 	strb.w	ip, [r5, #806]	; 0x326
  oqp->q_buffer  = bp;
  oqp->q_rdptr   = bp;
  oqp->q_wrptr   = bp;
  oqp->q_top     = bp + size;
 800188c:	eb0e 0c02 	add.w	ip, lr, r2
  oqp->q_notify  = onfy;
 8001890:	4a1f      	ldr	r2, [pc, #124]	; (8001910 <main+0x350>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001892:	f8c5 b184 	str.w	fp, [r5, #388]	; 0x184
 8001896:	4f1f      	ldr	r7, [pc, #124]	; (8001914 <main+0x354>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001898:	f8c5 b004 	str.w	fp, [r5, #4]
void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
                  qnotify_t onfy, void *link) {

  osalThreadQueueObjectInit(&oqp->q_waiting);
  oqp->q_counter = size;
  oqp->q_buffer  = bp;
 800189c:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 80018a0:	f8c3 e048 	str.w	lr, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 80018a4:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
  oqp->q_top     = bp + size;
 80018a8:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  tqp->prev = (thread_t *)tqp;
 80018ac:	6358      	str	r0, [r3, #52]	; 0x34
  oqp->q_notify  = onfy;
 80018ae:	64da      	str	r2, [r3, #76]	; 0x4c
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 80018b0:	f10a 000c 	add.w	r0, sl, #12
 80018b4:	e040      	b.n	8001938 <main+0x378>
 80018b6:	bf00      	nop
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40007000 	.word	0x40007000
 80018c0:	20000828 	.word	0x20000828
 80018c4:	0800325c 	.word	0x0800325c
 80018c8:	20000908 	.word	0x20000908
 80018cc:	20000ad8 	.word	0x20000ad8
 80018d0:	e000e100 	.word	0xe000e100
 80018d4:	20000a68 	.word	0x20000a68
 80018d8:	20000968 	.word	0x20000968
 80018dc:	50000300 	.word	0x50000300
 80018e0:	50000100 	.word	0x50000100
 80018e4:	50000400 	.word	0x50000400
 80018e8:	50000700 	.word	0x50000700
 80018ec:	20001450 	.word	0x20001450
 80018f0:	08003214 	.word	0x08003214
 80018f4:	2000089c 	.word	0x2000089c
 80018f8:	2000096c 	.word	0x2000096c
 80018fc:	20001414 	.word	0x20001414
 8001900:	2000097c 	.word	0x2000097c
 8001904:	08000401 	.word	0x08000401
 8001908:	40013800 	.word	0x40013800
 800190c:	0112a880 	.word	0x0112a880
 8001910:	080003f1 	.word	0x080003f1
 8001914:	2000086c 	.word	0x2000086c
 8001918:	40020000 	.word	0x40020000
 800191c:	40020400 	.word	0x40020400
 8001920:	40010000 	.word	0x40010000
 8001924:	20000aa0 	.word	0x20000aa0
 8001928:	080032e8 	.word	0x080032e8
 800192c:	20000b10 	.word	0x20000b10
 8001930:	2000083c 	.word	0x2000083c
 8001934:	20001424 	.word	0x20001424

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
 8001938:	f8df b380 	ldr.w	fp, [pc, #896]	; 8001cbc <main+0x6fc>
  oqp->q_link    = link;
 800193c:	651b      	str	r3, [r3, #80]	; 0x50
  SD2.clock = STM32_USART2CLK;
 800193e:	6599      	str	r1, [r3, #88]	; 0x58

#if STM32_SERIAL_USE_USART2
  sdObjectInit(&SD2);
  iqObjectInit(&SD2.iqueue, sd_in_buf2, sizeof sd_in_buf2, NULL, &SD2);
  oqObjectInit(&SD2.oqueue, sd_out_buf2, sizeof sd_out_buf2, notify2, &SD2);
  SD2.usart = USART2;
 8001940:	f8c3 b054 	str.w	fp, [r3, #84]	; 0x54
 8001944:	f88a 9000 	strb.w	r9, [sl]
  spip->config = NULL;
 8001948:	f8ca 4004 	str.w	r4, [sl, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 800194c:	f8ca 4008 	str.w	r4, [sl, #8]
 8001950:	f000 fe4e 	bl	80025f0 <chMtxObjectInit>
 */
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
 8001954:	4ac7      	ldr	r2, [pc, #796]	; (8001c74 <main+0x6b4>)
 8001956:	f8ca 201c 	str.w	r2, [sl, #28]
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800195a:	f241 0318 	movw	r3, #4120	; 0x1018
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800195e:	f1a8 0178 	sub.w	r1, r8, #120	; 0x78
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001962:	f1a8 0264 	sub.w	r2, r8, #100	; 0x64
 8001966:	f107 000c 	add.w	r0, r7, #12
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800196a:	f241 0b0a 	movw	fp, #4106	; 0x100a
void spi_lld_init(void) {

#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 800196e:	f8ca 1020 	str.w	r1, [sl, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8001972:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8001976:	f8ca 302c 	str.w	r3, [sl, #44]	; 0x2c
#if STM32_SPI_USE_SPI1
  spiObjectInit(&SPID1);
  SPID1.spi       = SPI1;
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 800197a:	f8ca b028 	str.w	fp, [sl, #40]	; 0x28
                    STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 800197e:	9301      	str	r3, [sp, #4]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 8001980:	f887 9000 	strb.w	r9, [r7]
  spip->config = NULL;
 8001984:	607c      	str	r4, [r7, #4]
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 8001986:	60bc      	str	r4, [r7, #8]
 8001988:	f000 fe32 	bl	80025f0 <chMtxObjectInit>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 800198c:	69f2      	ldr	r2, [r6, #28]
 * @notapi
 */
void wdg_lld_init(void) {

#if STM32_WDG_USE_IWDG
  WDGD1.state = WDG_STOP;
 800198e:	48ba      	ldr	r0, [pc, #744]	; (8001c78 <main+0x6b8>)

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8001990:	49ba      	ldr	r1, [pc, #744]	; (8001c7c <main+0x6bc>)
#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8001992:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8001996:	ea42 0209 	orr.w	r2, r2, r9
 800199a:	f880 9000 	strb.w	r9, [r0]
 800199e:	61f2      	str	r2, [r6, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019a0:	688a      	ldr	r2, [r1, #8]
                    STM32_DMA_CR_PL(STM32_SPI_SPI2_DMA_PRIORITY) |
                    STM32_DMA_CR_DIR_P2M |
                    STM32_DMA_CR_TCIE |
                    STM32_DMA_CR_DMEIE |
                    STM32_DMA_CR_TEIE;
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 80019a2:	9b01      	ldr	r3, [sp, #4]
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80019a6:	f8df a2d8 	ldr.w	sl, [pc, #728]	; 8001c80 <main+0x6c0>
                    STM32_DMA_CR_TEIE;
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
 80019aa:	f8df e314 	ldr.w	lr, [pc, #788]	; 8001cc0 <main+0x700>
 80019ae:	f8c7 e01c 	str.w	lr, [r7, #28]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 80019b6:	f1a8 0c50 	sub.w	ip, r8, #80	; 0x50

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019ba:	ea42 0209 	orr.w	r2, r2, r9
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 80019be:	f1a8 083c 	sub.w	r8, r8, #60	; 0x3c
  WDGD1.wdg   = IWDG;
 80019c2:	f5a6 36f0 	sub.w	r6, r6, #122880	; 0x1e000
#endif

#if STM32_SPI_USE_SPI2
  spiObjectInit(&SPID2);
  SPID2.spi       = SPI2;
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 80019c6:	f8c7 c020 	str.w	ip, [r7, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 80019ca:	f8c7 8024 	str.w	r8, [r7, #36]	; 0x24
 80019ce:	6086      	str	r6, [r0, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019d0:	f640 6e0f 	movw	lr, #3599	; 0xe0f

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 80019d4:	608a      	str	r2, [r1, #8]
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
 80019d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019da:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 80019de:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  tqp->prev = (thread_t *)tqp;
 80019e2:	f8ca a004 	str.w	sl, [sl, #4]
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 80019e6:	62da      	str	r2, [r3, #44]	; 0x2c
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 80019e8:	f04f 0280 	mov.w	r2, #128	; 0x80
 * @notapi
 */
void _scheduler_init(void) {

  queue_init(&ch.rlist.queue);
  ch.rlist.prio = NOPRIO;
 80019ec:	f8ca 4008 	str.w	r4, [sl, #8]
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80019f0:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
  STM32_ST_TIM->CCMR1  = 0;
 80019f4:	619c      	str	r4, [r3, #24]
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80019f6:	f10a 001c 	add.w	r0, sl, #28
#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.newer = (thread_t *)&ch.rlist;
 80019fa:	f8ca a010 	str.w	sl, [sl, #16]
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 80019fe:	f64f 7cf0 	movw	ip, #65520	; 0xfff0
  STM32_ST_TIM->CCR[0] = 0;
 8001a02:	635c      	str	r4, [r3, #52]	; 0x34
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001a04:	f10a 0840 	add.w	r8, sl, #64	; 0x40
  ch.rlist.older = (thread_t *)&ch.rlist;
 8001a08:	f8ca a014 	str.w	sl, [sl, #20]
  STM32_ST_TIM->DIER   = 0;
 8001a0c:	60dc      	str	r4, [r3, #12]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
  ch.vtlist.delta = (sysinterval_t)-1;
#if CH_CFG_ST_TIMEDELTA == 0
  ch.vtlist.systime = (systime_t)0;
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  ch.vtlist.lasttime = (systime_t)0;
 8001a0e:	f8ca 4028 	str.w	r4, [sl, #40]	; 0x28
  STM32_ST_TIM->CR2    = 0;
 8001a12:	605c      	str	r4, [r3, #4]
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8001a14:	f8aa 203a 	strh.w	r2, [sl, #58]	; 0x3a
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8001a18:	f8c3 9014 	str.w	r9, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8001a1c:	f8c3 9000 	str.w	r9, [r3]

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8001a20:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 * @note    Internal use only.
 */
void _trace_init(void) {
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8001a24:	f8aa c038 	strh.w	ip, [sl, #56]	; 0x38
 8001a28:	f885 331c 	strb.w	r3, [r5, #796]	; 0x31c
 *
 * @notapi
 */
void _vt_init(void) {

  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8001a2c:	f8ca 001c 	str.w	r0, [sl, #28]
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8001a30:	f8c5 7180 	str.w	r7, [r5, #384]	; 0x180
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8001a34:	f8ca 0020 	str.w	r0, [sl, #32]
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8001a38:	602f      	str	r7, [r5, #0]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001a3a:	f8ca a000 	str.w	sl, [sl]
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8001a3e:	f8ca 803c 	str.w	r8, [sl, #60]	; 0x3c
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8001a42:	3401      	adds	r4, #1
 8001a44:	eb0a 1304 	add.w	r3, sl, r4, lsl #4
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001a48:	2c80      	cmp	r4, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8001a4a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8001a4e:	4d8c      	ldr	r5, [pc, #560]	; (8001c80 <main+0x6c0>)
 8001a50:	f36f 0202 	bfc	r2, #0, #3
 8001a54:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  unsigned i;

  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8001a58:	d1f3      	bne.n	8001a42 <main+0x482>
  _scheduler_init();
  _vt_init();
  _trace_init();

#if CH_DBG_SYSTEM_STATE_CHECK == TRUE
  ch.dbg.isr_cnt  = (cnt_t)0;
 8001a5a:	2600      	movs	r6, #0
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001a5c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001a60:	2200      	movs	r2, #0
 8001a62:	2300      	movs	r3, #0
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001a64:	a804      	add	r0, sp, #16

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
  tmp->last       = (rtcnt_t)0;
  tmp->n          = (ucnt_t)0;
  tmp->cumulative = (rttime_t)0;
 8001a66:	e9cd 2308 	strd	r2, r3, [sp, #32]
 *
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
 8001a6a:	9104      	str	r1, [sp, #16]
 8001a6c:	632e      	str	r6, [r5, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8001a6e:	636e      	str	r6, [r5, #52]	; 0x34
  time_measurement_t tm;

  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
 8001a70:	f8c5 6884 	str.w	r6, [r5, #2180]	; 0x884
 * @init
 */
void chTMObjectInit(time_measurement_t *tmp) {

  tmp->best       = (rtcnt_t)-1;
  tmp->worst      = (rtcnt_t)0;
 8001a74:	9605      	str	r6, [sp, #20]
  tmp->last       = (rtcnt_t)0;
 8001a76:	9606      	str	r6, [sp, #24]
  tmp->n          = (ucnt_t)0;
 8001a78:	9607      	str	r6, [sp, #28]
  /* Time Measurement subsystem calibration, it does a null measurement
     and calculates the call overhead which is subtracted to real
     measurements.*/
  ch.tm.offset = (rtcnt_t)0;
  chTMObjectInit(&tm);
  chTMStartMeasurementX(&tm);
 8001a7a:	f001 f939 	bl	8002cf0 <chTMStartMeasurementX.constprop.3>
  chTMStopMeasurementX(&tm);
 8001a7e:	a804      	add	r0, sp, #16
 8001a80:	f000 fd0e 	bl	80024a0 <chTMStopMeasurementX>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001a84:	4a7f      	ldr	r2, [pc, #508]	; (8001c84 <main+0x6c4>)
 8001a86:	4b80      	ldr	r3, [pc, #512]	; (8001c88 <main+0x6c8>)
 8001a88:	f8df b238 	ldr.w	fp, [pc, #568]	; 8001cc4 <main+0x704>
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001a8c:	f8c5 4848 	str.w	r4, [r5, #2120]	; 0x848
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001a90:	f8c5 487c 	str.w	r4, [r5, #2172]	; 0x87c
 8001a94:	f102 040c 	add.w	r4, r2, #12
  H_NEXT(&default_heap.header) = NULL;
 8001a98:	6056      	str	r6, [r2, #4]
  H_PAGES(&default_heap.header) = 0;
 8001a9a:	6096      	str	r6, [r2, #8]
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 8001a9c:	6156      	str	r6, [r2, #20]
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 8001a9e:	f8c2 b000 	str.w	fp, [r2]
 8001aa2:	60d4      	str	r4, [r2, #12]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 8001aa4:	f103 0b10 	add.w	fp, r3, #16
  tqp->prev = (thread_t *)tqp;
 8001aa8:	6114      	str	r4, [r2, #16]
 8001aaa:	609e      	str	r6, [r3, #8]
 8001aac:	f103 0224 	add.w	r2, r3, #36	; 0x24
void chPoolObjectInitAligned(memory_pool_t *mp, size_t size,
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
 8001ab0:	615e      	str	r6, [r3, #20]
 8001ab2:	62de      	str	r6, [r3, #44]	; 0x2c
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001ab4:	f885 6861 	strb.w	r6, [r5, #2145]	; 0x861
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8001ab8:	f8c5 6878 	str.w	r6, [r5, #2168]	; 0x878
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8001abc:	f8c5 6874 	str.w	r6, [r5, #2164]	; 0x874
  mp->object_size = size;
 8001ac0:	2414      	movs	r4, #20
 8001ac2:	f103 0628 	add.w	r6, r3, #40	; 0x28
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac6:	4971      	ldr	r1, [pc, #452]	; (8001c8c <main+0x6cc>)
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001ac8:	4f71      	ldr	r7, [pc, #452]	; (8001c90 <main+0x6d0>)
  mp->align = align;
  mp->provider = provider;
 8001aca:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 8001cc8 <main+0x708>
 8001ace:	f8c3 b010 	str.w	fp, [r3, #16]
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
 8001ad2:	619c      	str	r4, [r3, #24]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ad6:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8001ada:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8001ade:	629e      	str	r6, [r3, #40]	; 0x28
 8001ae0:	f04f 0b1c 	mov.w	fp, #28
  mp->align = align;
 8001ae4:	2604      	movs	r6, #4
                             unsigned align, memgetfunc_t provider) {

  chDbgCheck((mp != NULL) && (size >= sizeof(void *)));

  mp->next = NULL;
  mp->object_size = size;
 8001ae6:	f8c3 b030 	str.w	fp, [r3, #48]	; 0x30
 8001aea:	63dc      	str	r4, [r3, #60]	; 0x3c
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001aec:	f04f 0b01 	mov.w	fp, #1
 8001af0:	641a      	str	r2, [r3, #64]	; 0x40
  mp->align = align;
 8001af2:	61de      	str	r6, [r3, #28]
 8001af4:	635e      	str	r6, [r3, #52]	; 0x34
  mp->provider = provider;
 8001af6:	f8c3 e020 	str.w	lr, [r3, #32]
 8001afa:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
  tp->name      = name;
 8001afe:	4865      	ldr	r0, [pc, #404]	; (8001c94 <main+0x6d4>)
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001b00:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8001b02:	605b      	str	r3, [r3, #4]
 8001b04:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8001ccc <main+0x70c>
  ch.tm.offset = tm.last;
 8001b08:	9b06      	ldr	r3, [sp, #24]
  ch_memcore.endmem  = __heap_end__;
 8001b0a:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8001cd0 <main+0x710>
#if CH_CFG_MEMCORE_SIZE == 0
  extern uint8_t __heap_base__[];
  extern uint8_t __heap_end__[];

  /*lint -save -e9033 [10.8] Required cast operations.*/
  ch_memcore.nextmem = __heap_base__;
 8001b0e:	f8c7 9000 	str.w	r9, [r7]
  ch_memcore.endmem  = __heap_end__;
 8001b12:	f8c7 8004 	str.w	r8, [r7, #4]
 8001b16:	f8c5 3884 	str.w	r3, [r5, #2180]	; 0x884
 8001b1a:	f8c5 0858 	str.w	r0, [r5, #2136]	; 0x858
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001b1e:	f885 b862 	strb.w	fp, [r5, #2146]	; 0x862
  tp->name      = name;
  REG_INSERT(tp);
 8001b22:	f8c5 5850 	str.w	r5, [r5, #2128]	; 0x850
 8001b26:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8001b28:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <main+0x6d8>)
 8001b2a:	696e      	ldr	r6, [r5, #20]

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b2c:	4c5b      	ldr	r4, [pc, #364]	; (8001c9c <main+0x6dc>)
 8001b2e:	f8c5 6854 	str.w	r6, [r5, #2132]	; 0x854
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b32:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
 8001b36:	4010      	ands	r0, r2
  reg_value  =  (reg_value                                   |
 8001b38:	4303      	orrs	r3, r0
 8001b3a:	f505 6204 	add.w	r2, r5, #2112	; 0x840
 8001b3e:	6132      	str	r2, [r6, #16]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8001b40:	60cb      	str	r3, [r1, #12]
 8001b42:	68e3      	ldr	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b44:	4e56      	ldr	r6, [pc, #344]	; (8001ca0 <main+0x6e0>)
#elif CH_CFG_USE_DYNAMIC == TRUE
  currp->wabase = NULL;
#endif

  /* Setting up the caller as current thread.*/
  currp->state = CH_STATE_CURRENT;
 8001b46:	f885 b860 	strb.w	fp, [r5, #2144]	; 0x860

  /* Initializing priority grouping.*/
  NVIC_SetPriorityGrouping(CORTEX_PRIGROUP_INIT);

  /* DWT cycle counter enable, note, the M7 requires DWT unlocking.*/
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8001b4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b4e:	60e3      	str	r3, [r4, #12]
#if CORTEX_MODEL == 7
  DWT->LAR = 0xC5ACCE55U;
#endif
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8001b50:	6833      	ldr	r3, [r6, #0]
 8001b52:	616a      	str	r2, [r5, #20]
 8001b54:	ea43 030b 	orr.w	r3, r3, fp
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001b58:	f605 046c 	addw	r4, r5, #2156	; 0x86c
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	f04f 0c10 	mov.w	ip, #16
 8001b60:	f04f 0e20 	mov.w	lr, #32
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001b64:	f605 0068 	addw	r0, r5, #2152	; 0x868
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8001b68:	61aa      	str	r2, [r5, #24]
 8001b6a:	6033      	str	r3, [r6, #0]
 8001b6c:	f8c5 0868 	str.w	r0, [r5, #2152]	; 0x868
 8001b70:	f881 c01f 	strb.w	ip, [r1, #31]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001b74:	f8c5 486c 	str.w	r4, [r5, #2156]	; 0x86c
 8001b78:	f881 e022 	strb.w	lr, [r1, #34]	; 0x22
 *
 * @notapi
 */
void _dbg_check_enable(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8001b7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
#if CH_DBG_ENABLE_STACK_CHECK == TRUE
  {
    /* Setting up the base address of the static main thread stack, the
       symbol must be provided externally.*/
    extern stkalign_t __main_thread_stack_base__;
    currp->wabase = &__main_thread_stack_base__;
 8001b7e:	4f49      	ldr	r7, [pc, #292]	; (8001ca4 <main+0x6e4>)
  tqp->prev = (thread_t *)tqp;
 8001b80:	f8c5 4870 	str.w	r4, [r5, #2160]	; 0x870
 8001b84:	f8c5 785c 	str.w	r7, [r5, #2140]	; 0x85c
 8001b88:	b90b      	cbnz	r3, 8001b8e <main+0x5ce>
 8001b8a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001b8c:	b113      	cbz	r3, 8001b94 <main+0x5d4>
    chSysHalt("SV#3");
 8001b8e:	4846      	ldr	r0, [pc, #280]	; (8001ca8 <main+0x6e8>)
 8001b90:	f000 fd0e 	bl	80025b0 <chSysHalt>
 8001b94:	f383 8811 	msr	BASEPRI, r3
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8001b98:	b662      	cpsie	i
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001b9a:	f38e 8811 	msr	BASEPRI, lr
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001b9e:	f000 ffe7 	bl	8002b70 <_dbg_check_lock>
 */
thread_t *chRegFirstThread(void) {
  thread_t *tp;

  chSysLock();
  tp = ch.rlist.newer;
 8001ba2:	692c      	ldr	r4, [r5, #16]
#if CH_CFG_USE_DYNAMIC == TRUE
  tp->refs++;
 8001ba4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001bae:	f000 ffcf 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	42ab      	cmp	r3, r5
 8001bb6:	d004      	beq.n	8001bc2 <main+0x602>
 8001bb8:	69aa      	ldr	r2, [r5, #24]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	6892      	ldr	r2, [r2, #8]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d34f      	bcc.n	8001c62 <main+0x6a2>
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f383 8811 	msr	BASEPRI, r3
 8001bc8:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 8001c80 <main+0x6c0>
  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8001bcc:	9301      	str	r3, [sp, #4]
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8001bce:	69e3      	ldr	r3, [r4, #28]
 8001bd0:	4a36      	ldr	r2, [pc, #216]	; (8001cac <main+0x6ec>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	f000 80c4 	beq.w	8001d60 <main+0x7a0>
 8001bd8:	2320      	movs	r3, #32
 8001bda:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001bde:	f000 ffc7 	bl	8002b70 <_dbg_check_lock>
 */
thread_t *chRegNextThread(thread_t *tp) {
  thread_t *ntp;

  chSysLock();
  ntp = tp->newer;
 8001be2:	f8d4 8010 	ldr.w	r8, [r4, #16]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
 8001be6:	45d0      	cmp	r8, sl
 8001be8:	f000 80c5 	beq.w	8001d76 <main+0x7b6>
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8001bec:	f898 3022 	ldrb.w	r3, [r8, #34]	; 0x22
 8001bf0:	2bff      	cmp	r3, #255	; 0xff
 8001bf2:	d06f      	beq.n	8001cd4 <main+0x714>
    ntp->refs++;
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f888 3022 	strb.w	r3, [r8, #34]	; 0x22
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001bfa:	f000 ffa9 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001bfe:	f8da 3000 	ldr.w	r3, [sl]
 8001c02:	4553      	cmp	r3, sl
 8001c04:	d005      	beq.n	8001c12 <main+0x652>
 8001c06:	f8db 2018 	ldr.w	r2, [fp, #24]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	6892      	ldr	r2, [r2, #8]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d327      	bcc.n	8001c62 <main+0x6a2>
 8001c12:	9b01      	ldr	r3, [sp, #4]
 8001c14:	f383 8811 	msr	BASEPRI, r3
 8001c18:	2320      	movs	r3, #32
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001c1e:	f000 ffa7 	bl	8002b70 <_dbg_check_lock>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8001c22:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8001c26:	b313      	cbz	r3, 8001c6e <main+0x6ae>
  tp->refs--;
 8001c28:	3b01      	subs	r3, #1
 8001c2a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 8001c2e:	6a23      	ldr	r3, [r4, #32]
 8001c30:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d050      	beq.n	8001cda <main+0x71a>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001c38:	f000 ff8a 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001c3c:	f8da 3000 	ldr.w	r3, [sl]
 8001c40:	4553      	cmp	r3, sl
 8001c42:	d005      	beq.n	8001c50 <main+0x690>
 8001c44:	f8db 2018 	ldr.w	r2, [fp, #24]
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	6892      	ldr	r2, [r2, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d30b      	bcc.n	8001c68 <main+0x6a8>
 8001c50:	9b01      	ldr	r3, [sp, #4]
 8001c52:	f383 8811 	msr	BASEPRI, r3
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8001c56:	f1b8 0f00 	cmp.w	r8, #0
 8001c5a:	f000 8097 	beq.w	8001d8c <main+0x7cc>
 8001c5e:	4644      	mov	r4, r8
 8001c60:	e7b5      	b.n	8001bce <main+0x60e>
 8001c62:	4813      	ldr	r0, [pc, #76]	; (8001cb0 <main+0x6f0>)
 8001c64:	f000 fca4 	bl	80025b0 <chSysHalt>
 8001c68:	4812      	ldr	r0, [pc, #72]	; (8001cb4 <main+0x6f4>)
 8001c6a:	f000 fca1 	bl	80025b0 <chSysHalt>
 * @api
 */
void chThdRelease(thread_t *tp) {

  chSysLock();
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 8001c6e:	4812      	ldr	r0, [pc, #72]	; (8001cb8 <main+0x6f8>)
 8001c70:	f000 fc9e 	bl	80025b0 <chSysHalt>
 8001c74:	40013000 	.word	0x40013000
 8001c78:	20000830 	.word	0x20000830
 8001c7c:	e0042000 	.word	0xe0042000
 8001c80:	20000b48 	.word	0x20000b48
 8001c84:	20001434 	.word	0x20001434
 8001c88:	200013d0 	.word	0x200013d0
 8001c8c:	e000ed00 	.word	0xe000ed00
 8001c90:	20000900 	.word	0x20000900
 8001c94:	0800334c 	.word	0x0800334c
 8001c98:	05fa0300 	.word	0x05fa0300
 8001c9c:	e000edf0 	.word	0xe000edf0
 8001ca0:	e0001000 	.word	0xe0001000
 8001ca4:	20000400 	.word	0x20000400
 8001ca8:	08003370 	.word	0x08003370
 8001cac:	20000990 	.word	0x20000990
 8001cb0:	08003434 	.word	0x08003434
 8001cb4:	08003484 	.word	0x08003484
 8001cb8:	0800324c 	.word	0x0800324c
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40003800 	.word	0x40003800
 8001cc4:	08002b91 	.word	0x08002b91
 8001cc8:	080026f1 	.word	0x080026f1
 8001ccc:	200014b0 	.word	0x200014b0
 8001cd0:	2000a000 	.word	0x2000a000
  /*lint -restore*/
    ntp = NULL;
  }
#if CH_CFG_USE_DYNAMIC == TRUE
  else {
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 8001cd4:	4829      	ldr	r0, [pc, #164]	; (8001d7c <main+0x7bc>)
 8001cd6:	f000 fc6b 	bl	80025b0 <chSysHalt>

  /* If the references counter reaches zero and the thread is in its
     terminated state then the memory can be returned to the proper
     allocator.*/
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
    REG_REMOVE(tp);
 8001cda:	6963      	ldr	r3, [r4, #20]
 8001cdc:	6922      	ldr	r2, [r4, #16]
 8001cde:	611a      	str	r2, [r3, #16]
 8001ce0:	6922      	ldr	r2, [r4, #16]
 8001ce2:	6153      	str	r3, [r2, #20]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001ce4:	f000 ff34 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001ce8:	f8da 3000 	ldr.w	r3, [sl]
 8001cec:	4553      	cmp	r3, sl
 8001cee:	d005      	beq.n	8001cfc <main+0x73c>
 8001cf0:	f8db 2018 	ldr.w	r2, [fp, #24]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	6892      	ldr	r2, [r2, #8]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3b5      	bcc.n	8001c68 <main+0x6a8>
 8001cfc:	9b01      	ldr	r3, [sp, #4]
 8001cfe:	f383 8811 	msr	BASEPRI, r3
    chSysUnlock();

#if CH_CFG_USE_DYNAMIC == TRUE
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8001d02:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d02b      	beq.n	8001d66 <main+0x7a6>
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d1a1      	bne.n	8001c56 <main+0x696>
      chHeapFree(chThdGetWorkingAreaX(tp));
      break;
#endif
#if CH_CFG_USE_MEMPOOLS == TRUE
    case CH_FLAG_MODE_MPOOL:
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8001d12:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001d14:	69e4      	ldr	r4, [r4, #28]
 8001d16:	2320      	movs	r3, #32
 8001d18:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001d1c:	f000 ff28 	bl	8002b70 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8001d20:	f000 fcae 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8001d24:	2d00      	cmp	r5, #0
 8001d26:	f000 81b7 	beq.w	8002098 <main+0xad8>
 8001d2a:	2c00      	cmp	r4, #0
 8001d2c:	f000 81b4 	beq.w	8002098 <main+0xad8>

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8001d30:	68ab      	ldr	r3, [r5, #8]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	421c      	tst	r4, r3
 8001d36:	f040 81af 	bne.w	8002098 <main+0xad8>
              "unaligned object");

  php->next = mp->next;
 8001d3a:	682b      	ldr	r3, [r5, #0]
 8001d3c:	6023      	str	r3, [r4, #0]
  mp->next = php;
 8001d3e:	602c      	str	r4, [r5, #0]
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001d40:	f000 ff06 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001d44:	f8da 3000 	ldr.w	r3, [sl]
 8001d48:	4553      	cmp	r3, sl
 8001d4a:	d081      	beq.n	8001c50 <main+0x690>
 8001d4c:	f8db 2018 	ldr.w	r2, [fp, #24]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	6892      	ldr	r2, [r2, #8]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	f4bf af7b 	bcs.w	8001c50 <main+0x690>
 8001d5a:	4809      	ldr	r0, [pc, #36]	; (8001d80 <main+0x7c0>)
 8001d5c:	f000 fc28 	bl	80025b0 <chSysHalt>
thread_t *chThdCreate(const thread_descriptor_t *tdp) {
  thread_t *tp;

#if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
    ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8001d60:	4808      	ldr	r0, [pc, #32]	; (8001d84 <main+0x7c4>)
 8001d62:	f000 fc25 	bl	80025b0 <chSysHalt>
 8001d66:	69e4      	ldr	r4, [r4, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 8001d68:	b114      	cbz	r4, 8001d70 <main+0x7b0>
 8001d6a:	0763      	lsls	r3, r4, #29
 8001d6c:	f000 81ca 	beq.w	8002104 <main+0xb44>
 8001d70:	4805      	ldr	r0, [pc, #20]	; (8001d88 <main+0x7c8>)
 8001d72:	f000 fc1d 	bl	80025b0 <chSysHalt>
  chSysLock();
  ntp = tp->newer;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  if (ntp == (thread_t *)&ch.rlist) {
  /*lint -restore*/
    ntp = NULL;
 8001d76:	f04f 0800 	mov.w	r8, #0
 8001d7a:	e73e      	b.n	8001bfa <main+0x63a>
 8001d7c:	08003440 	.word	0x08003440
 8001d80:	08003450 	.word	0x08003450
 8001d84:	080031fc 	.word	0x080031fc
 8001d88:	08003428 	.word	0x08003428
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
      return ctp;
    }
    ctp = chRegNextThread(ctp);
  } while (ctp != NULL);
 8001d8c:	4643      	mov	r3, r8
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
    *startp++ = v;
 8001d8e:	2255      	movs	r2, #85	; 0x55
 8001d90:	49c3      	ldr	r1, [pc, #780]	; (80020a0 <main+0xae0>)
 8001d92:	54ca      	strb	r2, [r1, r3]
 8001d94:	3301      	adds	r3, #1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8001d96:	2bd8      	cmp	r3, #216	; 0xd8
    *startp++ = v;
 8001d98:	460c      	mov	r4, r1
 *
 * @notapi
 */
void _thread_memfill(uint8_t *startp, uint8_t *endp, uint8_t v) {

  while (startp < endp) {
 8001d9a:	d1f9      	bne.n	8001d90 <main+0x7d0>
 8001d9c:	2320      	movs	r3, #32
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001da2:	f000 fee5 	bl	8002b70 <_dbg_check_lock>
 * @iclass
 */
thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
  thread_t *tp;

  chDbgCheckClassI();
 8001da6:	f000 fc6b 	bl	8002680 <chDbgCheckClassI>
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001daa:	2300      	movs	r3, #0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001dac:	f8da 1014 	ldr.w	r1, [sl, #20]
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001db0:	48bc      	ldr	r0, [pc, #752]	; (80020a4 <main+0xae4>)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001db2:	6723      	str	r3, [r4, #112]	; 0x70
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001db4:	2201      	movs	r2, #1
  tp->state     = CH_STATE_WTSTART;
  tp->flags     = CH_FLAG_MODE_STATIC;
 8001db6:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
  tp->mtxlist   = NULL;
 8001dba:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
#endif
#if CH_CFG_USE_EVENTS == TRUE
  tp->epending  = (eventmask_t)0;
 8001dbe:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 *
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
 8001dc2:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001dc6:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
  tp->flags     = CH_FLAG_MODE_STATIC;
#if CH_CFG_TIME_QUANTUM > 0
  tp->ticks     = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif
#if CH_CFG_USE_MUTEXES == TRUE
  tp->realprio  = prio;
 8001dca:	f8c4 20cc 	str.w	r2, [r4, #204]	; 0xcc
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
 8001dce:	f884 20b2 	strb.w	r2, [r4, #178]	; 0xb2
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001dd2:	f8df e328 	ldr.w	lr, [pc, #808]	; 80020fc <main+0xb3c>
 8001dd6:	4fb4      	ldr	r7, [pc, #720]	; (80020a8 <main+0xae8>)
#if CH_DBG_THREADS_PROFILING == TRUE
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
 8001dd8:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001ddc:	f104 0c6c 	add.w	ip, r4, #108	; 0x6c
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001de0:	f104 0690 	add.w	r6, r4, #144	; 0x90
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001de4:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001de8:	2502      	movs	r5, #2
  tp = (thread_t *)((uint8_t *)tdp->wend -
                    MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN));

#if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
 8001dea:	f8c4 40ac 	str.w	r4, [r4, #172]	; 0xac
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001dee:	f8c4 a0a0 	str.w	sl, [r4, #160]	; 0xa0
  /* Stack boundary.*/
  tp->wabase = tdp->wbase;
#endif

  /* Setting up the port-dependent part of the working area.*/
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8001df2:	f8c4 c09c 	str.w	ip, [r4, #156]	; 0x9c
 8001df6:	f8c4 e06c 	str.w	lr, [r4, #108]	; 0x6c
 8001dfa:	f8c4 708c 	str.w	r7, [r4, #140]	; 0x8c
 * @notapi
 */
thread_t *_thread_init(thread_t *tp, const char *name, tprio_t prio) {

  tp->prio      = prio;
  tp->state     = CH_STATE_WTSTART;
 8001dfe:	f884 50b0 	strb.w	r5, [r4, #176]	; 0xb0
  tp->time      = (systime_t)0;
#endif
#if CH_CFG_USE_REGISTRY == TRUE
  tp->refs      = (trefs_t)1;
  tp->name      = name;
  REG_INSERT(tp);
 8001e02:	f8c4 10a4 	str.w	r1, [r4, #164]	; 0xa4
 8001e06:	610e      	str	r6, [r1, #16]
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8001e08:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
  tqp->prev = (thread_t *)tqp;
 8001e0c:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
 *
 * @notapi
 */
static inline void list_init(threads_list_t *tlp) {

  tlp->next = (thread_t *)tlp;
 8001e10:	f8c4 20b8 	str.w	r2, [r4, #184]	; 0xb8
 8001e14:	f8ca 6014 	str.w	r6, [sl, #20]
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;

  chDbgCheckClassS();
 8001e18:	f000 fbfa 	bl	8002610 <chDbgCheckClassS>

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e1c:	f8da 3000 	ldr.w	r3, [sl]
 * @param[in] msg       the wakeup message
 *
 * @sclass
 */
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;
 8001e20:	f8da 0018 	ldr.w	r0, [sl, #24]

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e24:	4553      	cmp	r3, sl
 8001e26:	f000 8290 	beq.w	800234a <main+0xd8a>
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	6883      	ldr	r3, [r0, #8]
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	f0c0 8288 	bcc.w	8002344 <main+0xd84>
              (ch.rlist.current->prio >= ch.rlist.queue.next->prio),
              "priority order violation");

  /* Storing the message to be retrieved by the target thread when it will
     restart execution.*/
  ntp->u.rdymsg = msg;
 8001e34:	499a      	ldr	r1, [pc, #616]	; (80020a0 <main+0xae0>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c1 20b4 	str.w	r2, [r1, #180]	; 0xb4
 8001e3c:	460c      	mov	r4, r1

  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 827b 	bne.w	800233a <main+0xd7a>
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyI(otp);
 8001e44:	f000 fd74 	bl	8002930 <chSchReadyI>
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001e48:	2301      	movs	r3, #1

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001e4a:	4601      	mov	r1, r0
     list instead.*/
  if (ntp->prio <= otp->prio) {
    (void) chSchReadyI(ntp);
  }
  else {
    otp = chSchReadyI(otp);
 8001e4c:	4605      	mov	r5, r0
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
    ntp->state = CH_STATE_CURRENT;
 8001e4e:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001e52:	f104 0090 	add.w	r0, r4, #144	; 0x90
    if (otp->prio == IDLEPRIO) {
      CH_CFG_IDLE_LEAVE_HOOK();
    }

    /* The extracted thread is marked as current.*/
    currp = ntp;
 8001e56:	f8ca 6018 	str.w	r6, [sl, #24]
    ntp->state = CH_STATE_CURRENT;

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
 8001e5a:	f000 fb89 	bl	8002570 <_trace_switch>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8001e5e:	f3ef 8309 	mrs	r3, PSP
 8001e62:	69ea      	ldr	r2, [r5, #28]
 8001e64:	3b24      	subs	r3, #36	; 0x24
 8001e66:	429a      	cmp	r2, r3
 8001e68:	f200 82a2 	bhi.w	80023b0 <main+0xdf0>
 8001e6c:	f104 0090 	add.w	r0, r4, #144	; 0x90
 8001e70:	4629      	mov	r1, r5
 8001e72:	f7fe fa05 	bl	8000280 <_port_switch>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001e76:	f000 fe6b 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001e7a:	f8da 3000 	ldr.w	r3, [sl]
 8001e7e:	4a8b      	ldr	r2, [pc, #556]	; (80020ac <main+0xaec>)
 8001e80:	4553      	cmp	r3, sl
 8001e82:	d005      	beq.n	8001e90 <main+0x8d0>
 8001e84:	6992      	ldr	r2, [r2, #24]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	6892      	ldr	r2, [r2, #8]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	f4ff aeec 	bcc.w	8001c68 <main+0x6a8>
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8001e90:	2300      	movs	r3, #0
 8001e92:	f383 8811 	msr	BASEPRI, r3
   *   RTOS is active.
   */
  halInit();
  chSysInit();

  palSetPad(GPIOB, 5);
 8001e96:	4c86      	ldr	r4, [pc, #536]	; (80020b0 <main+0xaf0>)
 8001e98:	2520      	movs	r5, #32
 8001e9a:	8325      	strh	r5, [r4, #24]


  /*
   * SPI1 I/O pins setup.
   */
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7));    
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	2140      	movs	r1, #64	; 0x40
 8001ea0:	f240 3282 	movw	r2, #898	; 0x382
 8001ea4:	f7fe fd84 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7));
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	2180      	movs	r1, #128	; 0x80
 8001eac:	f240 3282 	movw	r2, #898	; 0x382
 8001eb0:	f7fe fd7e 	bl	80009b0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));    
 8001eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eb8:	2104      	movs	r1, #4
 8001eba:	f240 3282 	movw	r2, #898	; 0x382
 8001ebe:	f7fe fd77 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8001ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec6:	2108      	movs	r1, #8
 8001ec8:	f240 3282 	movw	r2, #898	; 0x382
 8001ecc:	f7fe fd70 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);
 8001ed0:	4620      	mov	r0, r4
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f7fe fd6b 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_PULLUP);
 8001eda:	4620      	mov	r0, r4
 8001edc:	462a      	mov	r2, r5
 8001ede:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ee2:	f7fe fd65 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_PULLUP);
 8001ee6:	4620      	mov	r0, r4
 8001ee8:	462a      	mov	r2, r5
 8001eea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eee:	f7fe fd5f 	bl	80009b0 <_pal_lld_setgroupmode>
  
  palSetPadMode(GPIOA, 4, PAL_MODE_OUTPUT_PUSHPULL);
 8001ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ef6:	2110      	movs	r1, #16
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f7fe fd59 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8001efe:	4629      	mov	r1, r5
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f240 229a 	movw	r2, #666	; 0x29a
 8001f08:	f7fe fd52 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palClearPad(GPIOA,4);
 8001f0c:	f04f 4690 	mov.w	r6, #1207959552	; 0x48000000
  palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_PULLUP);
  palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_PULLUP);
  
  palSetPadMode(GPIOA, 4, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8001f10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	f240 229a 	movw	r2, #666	; 0x29a
 8001f1a:	f7fe fd49 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8001f1e:	4630      	mov	r0, r6
 8001f20:	2180      	movs	r1, #128	; 0x80
 8001f22:	f240 229a 	movw	r2, #666	; 0x29a
 8001f26:	f7fe fd43 	bl	80009b0 <_pal_lld_setgroupmode>
  palClearPad(GPIOA,4);
 8001f2a:	2310      	movs	r3, #16

  my_address = my_address | palReadPad(GPIOB,8);
 8001f2c:	f8df e1d0 	ldr.w	lr, [pc, #464]	; 8002100 <main+0xb40>
  
  palSetPadMode(GPIOA, 4, PAL_MODE_OUTPUT_PUSHPULL);
  palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palClearPad(GPIOA,4);
 8001f30:	8373      	strh	r3, [r6, #26]

  my_address = my_address | palReadPad(GPIOB,8);
 8001f32:	6927      	ldr	r7, [r4, #16]
 8001f34:	f89e 3000 	ldrb.w	r3, [lr]
  my_address = my_address | (palReadPad(GPIOB,9)<<1);
 8001f38:	6922      	ldr	r2, [r4, #16]

  
  sdStart(&SD1, &uartCfg);
 8001f3a:	485e      	ldr	r0, [pc, #376]	; (80020b4 <main+0xaf4>)
 8001f3c:	495e      	ldr	r1, [pc, #376]	; (80020b8 <main+0xaf8>)
  palSetPadMode(GPIOA, 5, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 6, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palSetPadMode(GPIOA, 7, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
  palClearPad(GPIOA,4);

  my_address = my_address | palReadPad(GPIOB,8);
 8001f3e:	f3c7 2400 	ubfx	r4, r7, #8, #1
 8001f42:	4323      	orrs	r3, r4
  my_address = my_address | (palReadPad(GPIOB,9)<<1);
 8001f44:	f3c2 2240 	ubfx	r2, r2, #9, #1
 8001f48:	ea43 0442 	orr.w	r4, r3, r2, lsl #1
 8001f4c:	f88e 4000 	strb.w	r4, [lr]

  
  sdStart(&SD1, &uartCfg);
 8001f50:	f7ff f8be 	bl	80010d0 <sdStart>
  sdStart(&SD2, &uartCfg2);
 8001f54:	4859      	ldr	r0, [pc, #356]	; (80020bc <main+0xafc>)
 8001f56:	495a      	ldr	r1, [pc, #360]	; (80020c0 <main+0xb00>)
 8001f58:	f7ff f8ba 	bl	80010d0 <sdStart>
    // chprintf((BaseSequentialStream*)&SD2,"Hello World 2\r\n");
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d\r\n",my_address);
 8001f5c:	4622      	mov	r2, r4
 8001f5e:	4959      	ldr	r1, [pc, #356]	; (80020c4 <main+0xb04>)
 8001f60:	4854      	ldr	r0, [pc, #336]	; (80020b4 <main+0xaf4>)
 8001f62:	f000 fecd 	bl	8002d00 <chprintf.constprop.0>
  palSetPadMode(GPIOA, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8001f66:	2101      	movs	r1, #1
 8001f68:	4630      	mov	r0, r6
 8001f6a:	460a      	mov	r2, r1
 8001f6c:	f7fe fd20 	bl	80009b0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL);        
 8001f70:	4630      	mov	r0, r6
 8001f72:	2102      	movs	r1, #2
 8001f74:	2201      	movs	r2, #1
 8001f76:	f7fe fd1b 	bl	80009b0 <_pal_lld_setgroupmode>
  //palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL); 

  //palClearPad(GPIOB, 8);     /* Green.  */

  palSetPad(GPIOA,CS);
  palSetPad(GPIOA,CS2);
 8001f7a:	2302      	movs	r3, #2

  //palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL); 

  //palClearPad(GPIOB, 8);     /* Green.  */

  palSetPad(GPIOA,CS);
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	8332      	strh	r2, [r6, #24]
    


  //  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  chprintf((BaseSequentialStream*)&SD1,"HelloA\r\n")  ;
 8001f80:	4951      	ldr	r1, [pc, #324]	; (80020c8 <main+0xb08>)
  //palSetPadMode(GPIOB, 8, PAL_MODE_OUTPUT_PUSHPULL); 

  //palClearPad(GPIOB, 8);     /* Green.  */

  palSetPad(GPIOA,CS);
  palSetPad(GPIOA,CS2);
 8001f82:	8333      	strh	r3, [r6, #24]
    


  //  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);

  chprintf((BaseSequentialStream*)&SD1,"HelloA\r\n")  ;
 8001f84:	484b      	ldr	r0, [pc, #300]	; (80020b4 <main+0xaf4>)
 8001f86:	f000 febb 	bl	8002d00 <chprintf.constprop.0>
  //  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO, Thread3, NULL);
  chprintf((BaseSequentialStream*)&SD1,"HelloB\r\n")  ;
 8001f8a:	4950      	ldr	r1, [pc, #320]	; (80020cc <main+0xb0c>)
 8001f8c:	4849      	ldr	r0, [pc, #292]	; (80020b4 <main+0xaf4>)
 8001f8e:	f000 feb7 	bl	8002d00 <chprintf.constprop.0>
  //  chThdCreateStatic(waThread4, sizeof(waThread4), NORMALPRIO, Thread4, NULL);
  chprintf((BaseSequentialStream*)&SD1,"HelloC\r\n")  ;
 8001f92:	494f      	ldr	r1, [pc, #316]	; (80020d0 <main+0xb10>)
 8001f94:	4847      	ldr	r0, [pc, #284]	; (80020b4 <main+0xaf4>)
 8001f96:	f000 feb3 	bl	8002d00 <chprintf.constprop.0>


  

  //chThdSleepMilliseconds(500);
  chprintf((BaseSequentialStream*)&SD1,"HelloD\r\n")  ;
 8001f9a:	494e      	ldr	r1, [pc, #312]	; (80020d4 <main+0xb14>)
 8001f9c:	4845      	ldr	r0, [pc, #276]	; (80020b4 <main+0xaf4>)
 8001f9e:	f000 feaf 	bl	8002d00 <chprintf.constprop.0>
  //spiAcquireBus(&SPID1);
  chprintf((BaseSequentialStream*)&SD1,"HelloE\r\n")  ;
  //  x = spi_read(&std_spicfg2,0x0f);

  // should be 0xD4
  chprintf((BaseSequentialStream*)&SD1,"whoami 2  %x\r\n",x);
 8001fa2:	2400      	movs	r4, #0
  

  //chThdSleepMilliseconds(500);
  chprintf((BaseSequentialStream*)&SD1,"HelloD\r\n")  ;
  //spiAcquireBus(&SPID1);
  chprintf((BaseSequentialStream*)&SD1,"HelloE\r\n")  ;
 8001fa4:	494c      	ldr	r1, [pc, #304]	; (80020d8 <main+0xb18>)
 8001fa6:	4843      	ldr	r0, [pc, #268]	; (80020b4 <main+0xaf4>)
 8001fa8:	f000 feaa 	bl	8002d00 <chprintf.constprop.0>
  //  x = spi_read(&std_spicfg2,0x0f);

  // should be 0xD4
  chprintf((BaseSequentialStream*)&SD1,"whoami 2  %x\r\n",x);
 8001fac:	4622      	mov	r2, r4
 8001fae:	494b      	ldr	r1, [pc, #300]	; (80020dc <main+0xb1c>)
 8001fb0:	4840      	ldr	r0, [pc, #256]	; (80020b4 <main+0xaf4>)
 8001fb2:	f000 fea5 	bl	8002d00 <chprintf.constprop.0>
  // x = spi_read(&std_spicfg1,0x0f);
  // should be 0x29
  chprintf((BaseSequentialStream*)&SD1,"whoami 1  %x\r\n",x);
 8001fb6:	4622      	mov	r2, r4
 8001fb8:	4949      	ldr	r1, [pc, #292]	; (80020e0 <main+0xb20>)
 8001fba:	483e      	ldr	r0, [pc, #248]	; (80020b4 <main+0xaf4>)
 8001fbc:	f000 fea0 	bl	8002d00 <chprintf.constprop.0>
  //spi_write(&std_spicfg1,0x20,0x77);  // Read Accel at 100hz
  //spi_write(&std_spicfg1,0x25,0x00);  // set to max 2gauss - best resolution
  //spi_write(&std_spicfg1,0x26,0x00);  // take magneto out of lp mode & set to continuous

  
  chprintf((BaseSequentialStream*)&SD1,"Point A\r\n");
 8001fc0:	4948      	ldr	r1, [pc, #288]	; (80020e4 <main+0xb24>)
 8001fc2:	483c      	ldr	r0, [pc, #240]	; (80020b4 <main+0xaf4>)
 8001fc4:	f000 fe9c 	bl	8002d00 <chprintf.constprop.0>
 8001fc8:	f385 8811 	msr	BASEPRI, r5
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8001fcc:	f000 fdd0 	bl	8002b70 <_dbg_check_lock>
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8001fd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001fd4:	2008      	movs	r0, #8
 8001fd6:	f000 fb93 	bl	8002700 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8001fda:	f000 fdb9 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8001fde:	f8da 3000 	ldr.w	r3, [sl]
 8001fe2:	4a32      	ldr	r2, [pc, #200]	; (80020ac <main+0xaec>)
 8001fe4:	4553      	cmp	r3, sl
 8001fe6:	d005      	beq.n	8001ff4 <main+0xa34>
 8001fe8:	6992      	ldr	r2, [r2, #24]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	6892      	ldr	r2, [r2, #8]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	f4ff ae3a 	bcc.w	8001c68 <main+0x6a8>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f383 8811 	msr	BASEPRI, r3
  
  
  
  
  chThdSleepMilliseconds(500);
  chprintf((BaseSequentialStream*)&SD1,"\r\n");
 8001ffa:	493b      	ldr	r1, [pc, #236]	; (80020e8 <main+0xb28>)
 8001ffc:	482d      	ldr	r0, [pc, #180]	; (80020b4 <main+0xaf4>)
 8001ffe:	4e3b      	ldr	r6, [pc, #236]	; (80020ec <main+0xb2c>)
 8002000:	4d2a      	ldr	r5, [pc, #168]	; (80020ac <main+0xaec>)
 8002002:	f000 fe7d 	bl	8002d00 <chprintf.constprop.0>
  //  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);

  chprintf((BaseSequentialStream*)&SD1,"Point B\r\n");
 8002006:	482b      	ldr	r0, [pc, #172]	; (80020b4 <main+0xaf4>)
 8002008:	4939      	ldr	r1, [pc, #228]	; (80020f0 <main+0xb30>)
 800200a:	f000 fe79 	bl	8002d00 <chprintf.constprop.0>


  while (TRUE)
      {
	  //	  wdgReset(&WDGD1);
	  step = (step +1)%100;
 800200e:	8833      	ldrh	r3, [r6, #0]
	  chprintf((BaseSequentialStream*)&SD1,"%d\r\n",step);
 8002010:	4938      	ldr	r1, [pc, #224]	; (80020f4 <main+0xb34>)
 8002012:	4828      	ldr	r0, [pc, #160]	; (80020b4 <main+0xaf4>)


  while (TRUE)
      {
	  //	  wdgReset(&WDGD1);
	  step = (step +1)%100;
 8002014:	2464      	movs	r4, #100	; 0x64
 8002016:	3301      	adds	r3, #1
 8002018:	fb93 f2f4 	sdiv	r2, r3, r4
 800201c:	fb04 3312 	mls	r3, r4, r2, r3
	  chprintf((BaseSequentialStream*)&SD1,"%d\r\n",step);
 8002020:	461a      	mov	r2, r3


  while (TRUE)
      {
	  //	  wdgReset(&WDGD1);
	  step = (step +1)%100;
 8002022:	8033      	strh	r3, [r6, #0]
	  chprintf((BaseSequentialStream*)&SD1,"%d\r\n",step);
 8002024:	f000 fe6c 	bl	8002d00 <chprintf.constprop.0>
 8002028:	2320      	movs	r3, #32
 800202a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 800202e:	f000 fd9f 	bl	8002b70 <_dbg_check_lock>
 8002032:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8002036:	2008      	movs	r0, #8
 8002038:	f000 fb62 	bl	8002700 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 800203c:	f000 fd88 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002040:	f8da 3000 	ldr.w	r3, [sl]
 8002044:	4553      	cmp	r3, sl
 8002046:	d005      	beq.n	8002054 <main+0xa94>
 8002048:	69aa      	ldr	r2, [r5, #24]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	6892      	ldr	r2, [r2, #8]
 800204e:	429a      	cmp	r2, r3
 8002050:	f4ff ae0a 	bcc.w	8001c68 <main+0x6a8>
 8002054:	2300      	movs	r3, #0
 8002056:	f383 8811 	msr	BASEPRI, r3
	  chThdSleepMilliseconds(250);
	  palSetPad(GPIOB, 5);
 800205a:	4a15      	ldr	r2, [pc, #84]	; (80020b0 <main+0xaf0>)
 800205c:	2320      	movs	r3, #32
 800205e:	8313      	strh	r3, [r2, #24]
 8002060:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002064:	f000 fd84 	bl	8002b70 <_dbg_check_lock>
 8002068:	f640 11c4 	movw	r1, #2500	; 0x9c4
 800206c:	2008      	movs	r0, #8
 800206e:	f000 fb47 	bl	8002700 <chSchGoSleepTimeoutS>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002072:	f000 fd6d 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002076:	f8da 3000 	ldr.w	r3, [sl]
 800207a:	4553      	cmp	r3, sl
 800207c:	d005      	beq.n	800208a <main+0xaca>
 800207e:	69aa      	ldr	r2, [r5, #24]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	429a      	cmp	r2, r3
 8002086:	f4ff adef 	bcc.w	8001c68 <main+0x6a8>
 800208a:	2300      	movs	r3, #0
 800208c:	f383 8811 	msr	BASEPRI, r3
	  chThdSleepMilliseconds(250);
	  
	  palClearPad(GPIOB, 5);
 8002090:	4b07      	ldr	r3, [pc, #28]	; (80020b0 <main+0xaf0>)
 8002092:	2220      	movs	r2, #32
 8002094:	835a      	strh	r2, [r3, #26]
 8002096:	e7ba      	b.n	800200e <main+0xa4e>
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
  chDbgCheck((mp != NULL) && (objp != NULL));
 8002098:	4817      	ldr	r0, [pc, #92]	; (80020f8 <main+0xb38>)
 800209a:	f000 fa89 	bl	80025b0 <chSysHalt>
 800209e:	bf00      	nop
 80020a0:	20000990 	.word	0x20000990
 80020a4:	08003388 	.word	0x08003388
 80020a8:	08000291 	.word	0x08000291
 80020ac:	20000b48 	.word	0x20000b48
 80020b0:	48000400 	.word	0x48000400
 80020b4:	20001450 	.word	0x20001450
 80020b8:	20000814 	.word	0x20000814
 80020bc:	2000089c 	.word	0x2000089c
 80020c0:	20000804 	.word	0x20000804
 80020c4:	08003390 	.word	0x08003390
 80020c8:	080033ac 	.word	0x080033ac
 80020cc:	080033b8 	.word	0x080033b8
 80020d0:	080033c4 	.word	0x080033c4
 80020d4:	080033d0 	.word	0x080033d0
 80020d8:	080033dc 	.word	0x080033dc
 80020dc:	080033e8 	.word	0x080033e8
 80020e0:	080033f8 	.word	0x080033f8
 80020e4:	08003408 	.word	0x08003408
 80020e8:	08003404 	.word	0x08003404
 80020ec:	200008fc 	.word	0x200008fc
 80020f0:	08003414 	.word	0x08003414
 80020f4:	08003420 	.word	0x08003420
 80020f8:	08003364 	.word	0x08003364
 80020fc:	08002411 	.word	0x08002411
 8002100:	20000800 	.word	0x20000800
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8002104:	f854 3c04 	ldr.w	r3, [r4, #-4]
  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 8002108:	f854 5c08 	ldr.w	r5, [r4, #-8]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 800210c:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 800210e:	08db      	lsrs	r3, r3, #3
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 8002110:	f844 3c04 	str.w	r3, [r4, #-4]

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 8002114:	1d2b      	adds	r3, r5, #4
 8002116:	9302      	str	r3, [sp, #8]
  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 8002118:	f105 070c 	add.w	r7, r5, #12
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
 800211c:	f1a4 0908 	sub.w	r9, r4, #8
 8002120:	2320      	movs	r3, #32
 8002122:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002126:	f000 fd23 	bl	8002b70 <_dbg_check_lock>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 800212a:	f8da 6018 	ldr.w	r6, [sl, #24]

  chDbgCheckClassS();
 800212e:	f000 fa6f 	bl	8002610 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 8002132:	2f00      	cmp	r7, #0
 8002134:	d031      	beq.n	800219a <main+0xbda>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 8002136:	6968      	ldr	r0, [r5, #20]
 8002138:	2800      	cmp	r0, #0
 800213a:	d031      	beq.n	80021a0 <main+0xbe0>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 800213c:	68b2      	ldr	r2, [r6, #8]
 800213e:	6883      	ldr	r3, [r0, #8]
 8002140:	429a      	cmp	r2, r3
 8002142:	d914      	bls.n	800216e <main+0xbae>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 8002144:	f890 3020 	ldrb.w	r3, [r0, #32]

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 8002148:	6082      	str	r2, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 800214a:	2b06      	cmp	r3, #6
 800214c:	f000 8116 	beq.w	800237c <main+0xdbc>
 8002150:	2b07      	cmp	r3, #7
 8002152:	4694      	mov	ip, r2
 8002154:	f000 80fb 	beq.w	800234e <main+0xd8e>
 8002158:	b94b      	cbnz	r3, 800216e <main+0xbae>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800215a:	6842      	ldr	r2, [r0, #4]
 800215c:	6803      	ldr	r3, [r0, #0]
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
 800215e:	2101      	movs	r1, #1
 8002160:	f880 1020 	strb.w	r1, [r0, #32]
 8002164:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002166:	6803      	ldr	r3, [r0, #0]
 8002168:	605a      	str	r2, [r3, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800216a:	f000 fbe1 	bl	8002930 <chSchReadyI>
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800216e:	4639      	mov	r1, r7
 8002170:	e003      	b.n	800217a <main+0xbba>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002172:	688a      	ldr	r2, [r1, #8]
 8002174:	68b3      	ldr	r3, [r6, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	d302      	bcc.n	8002180 <main+0xbc0>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 800217a:	6809      	ldr	r1, [r1, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800217c:	428f      	cmp	r7, r1
 800217e:	d1f8      	bne.n	8002172 <main+0xbb2>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8002180:	684b      	ldr	r3, [r1, #4]
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
      chSchGoSleepS(CH_STATE_WTMTX);
 8002182:	2006      	movs	r0, #6
 8002184:	e886 000a 	stmia.w	r6, {r1, r3}
  tp->queue.prev->queue.next = tp;
 8002188:	601e      	str	r6, [r3, #0]
  cp->queue.prev             = tp;
 800218a:	604e      	str	r6, [r1, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 800218c:	6277      	str	r7, [r6, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 800218e:	f000 fa4f 	bl	8002630 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 8002192:	696b      	ldr	r3, [r5, #20]
 8002194:	429e      	cmp	r6, r3
 8002196:	f000 80cb 	beq.w	8002330 <main+0xd70>
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;

  chDbgCheckClassS();
  chDbgCheck(mp != NULL);
 800219a:	4887      	ldr	r0, [pc, #540]	; (80023b8 <main+0xdf8>)
 800219c:	f000 fa08 	bl	80025b0 <chSysHalt>

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
    mp->next = ctp->mtxlist;
 80021a0:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 80021a2:	61ab      	str	r3, [r5, #24]
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 80021a4:	616e      	str	r6, [r5, #20]
    mp->next = ctp->mtxlist;
    ctp->mtxlist = mp;
 80021a6:	63b7      	str	r7, [r6, #56]	; 0x38
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80021a8:	f000 fcd2 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80021ac:	f8da 3000 	ldr.w	r3, [sl]
 80021b0:	4553      	cmp	r3, sl
 80021b2:	d006      	beq.n	80021c2 <main+0xc02>
 80021b4:	f8db 2018 	ldr.w	r2, [fp, #24]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	6892      	ldr	r2, [r2, #8]
 80021bc:	429a      	cmp	r2, r3
 80021be:	f0c0 8096 	bcc.w	80022ee <main+0xd2e>
 80021c2:	9b01      	ldr	r3, [sp, #4]
 80021c4:	f383 8811 	msr	BASEPRI, r3
  /*lint -restore*/
  heapp = H_HEAP(hp);
  qp = &heapp->header;
 80021c8:	9b02      	ldr	r3, [sp, #8]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 80021ca:	4599      	cmp	r9, r3
 80021cc:	d306      	bcc.n	80021dc <main+0xc1c>
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	3201      	adds	r2, #1
 80021d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80021d6:	4591      	cmp	r9, r2
 80021d8:	f4ff adca 	bcc.w	8001d70 <main+0x7b0>

    if (((qp == &heapp->header) || (hp > qp)) &&
 80021dc:	9a02      	ldr	r2, [sp, #8]
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80021de:	6819      	ldr	r1, [r3, #0]
  H_LOCK(heapp);

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d001      	beq.n	80021e8 <main+0xc28>
 80021e4:	4599      	cmp	r9, r3
 80021e6:	d902      	bls.n	80021ee <main+0xc2e>
 80021e8:	b119      	cbz	r1, 80021f2 <main+0xc32>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 80021ea:	4589      	cmp	r9, r1
 80021ec:	d301      	bcc.n	80021f2 <main+0xc32>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 80021ee:	460b      	mov	r3, r1
 80021f0:	e7eb      	b.n	80021ca <main+0xc0a>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80021f2:	f854 0c04 	ldr.w	r0, [r4, #-4]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
      /* Insertion after qp.*/
      H_NEXT(hp) = H_NEXT(qp);
 80021f6:	f844 1c08 	str.w	r1, [r4, #-8]
      H_NEXT(qp) = hp;
 80021fa:	f8c3 9000 	str.w	r9, [r3]
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 80021fe:	1c41      	adds	r1, r0, #1
 8002200:	f854 2c08 	ldr.w	r2, [r4, #-8]
 8002204:	eb09 06c1 	add.w	r6, r9, r1, lsl #3
 8002208:	4296      	cmp	r6, r2
 800220a:	d108      	bne.n	800221e <main+0xc5e>
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 800220c:	6872      	ldr	r2, [r6, #4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 800220e:	f859 1031 	ldr.w	r1, [r9, r1, lsl #3]
 8002212:	f844 1c08 	str.w	r1, [r4, #-8]
      H_NEXT(hp) = H_NEXT(qp);
      H_NEXT(qp) = hp;
      /* Verifies if the newly inserted block should be merged.*/
      if (H_LIMIT(hp) == H_NEXT(hp)) {
        /* Merge with the next block.*/
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 8002216:	4402      	add	r2, r0
 8002218:	3201      	adds	r2, #1
 800221a:	f844 2c04 	str.w	r2, [r4, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
 800221e:	6858      	ldr	r0, [r3, #4]
 8002220:	1c41      	adds	r1, r0, #1
 8002222:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8002226:	4589      	cmp	r9, r1
 8002228:	d00e      	beq.n	8002248 <main+0xc88>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 800222a:	f8da 4018 	ldr.w	r4, [sl, #24]
 800222e:	2320      	movs	r3, #32
 8002230:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002234:	f000 fc9c 	bl	8002b70 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8002238:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800223a:	b113      	cbz	r3, 8002242 <main+0xc82>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	4294      	cmp	r4, r2
 8002240:	d00b      	beq.n	800225a <main+0xc9a>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8002242:	485e      	ldr	r0, [pc, #376]	; (80023bc <main+0xdfc>)
 8002244:	f000 f9b4 	bl	80025b0 <chSysHalt>
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
 8002248:	e914 0006 	ldmdb	r4, {r1, r2}
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 800224c:	4402      	add	r2, r0
 800224e:	3201      	adds	r2, #1
        H_NEXT(qp) = H_NEXT(hp);
 8002250:	6019      	str	r1, [r3, #0]
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
      }
      if ((H_LIMIT(qp) == hp)) {
        /* Merge with the previous block.*/
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 8002252:	605a      	str	r2, [r3, #4]
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8002254:	f8da 4018 	ldr.w	r4, [sl, #24]
 8002258:	e7e9      	b.n	800222e <main+0xc6e>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 800225a:	429f      	cmp	r7, r3
 800225c:	d1f1      	bne.n	8002242 <main+0xc82>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 800225e:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8002262:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 8002266:	f000 f9d3 	bl	8002610 <chDbgCheckClassS>
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 800226a:	68ee      	ldr	r6, [r5, #12]

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 800226c:	42b7      	cmp	r7, r6
 800226e:	f000 809c 	beq.w	80023aa <main+0xdea>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 8002272:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002274:	9602      	str	r6, [sp, #8]
 8002276:	462e      	mov	r6, r5
 8002278:	4625      	mov	r5, r4
 800227a:	461c      	mov	r4, r3
      lmp = ctp->mtxlist;
      while (lmp != NULL) {
 800227c:	f1b9 0f00 	cmp.w	r9, #0
 8002280:	d00c      	beq.n	800229c <main+0xcdc>
 8002282:	f000 f9c5 	bl	8002610 <chDbgCheckClassS>
 8002286:	f8d9 2000 	ldr.w	r2, [r9]
        /* If the highest priority thread waiting in the mutexes list has a
           greater priority than the current thread base priority then the
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
 800228a:	4591      	cmp	r9, r2
 800228c:	d003      	beq.n	8002296 <main+0xcd6>
            (lmp->queue.next->prio > newprio)) {
 800228e:	6893      	ldr	r3, [r2, #8]
 8002290:	429c      	cmp	r4, r3
 8002292:	bf38      	it	cc
 8002294:	461c      	movcc	r4, r3
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 8002296:	f8d9 900c 	ldr.w	r9, [r9, #12]
 800229a:	e7ef      	b.n	800227c <main+0xcbc>
 800229c:	4623      	mov	r3, r4
 800229e:	462c      	mov	r4, r5
 80022a0:	4635      	mov	r5, r6
 80022a2:	9e02      	ldr	r6, [sp, #8]
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80022a4:	6832      	ldr	r2, [r6, #0]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80022a6:	6bb1      	ldr	r1, [r6, #56]	; 0x38
        lmp = lmp->next;
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 80022a8:	60a3      	str	r3, [r4, #8]

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80022aa:	4630      	mov	r0, r6
 80022ac:	60ea      	str	r2, [r5, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 80022ae:	6057      	str	r7, [r2, #4]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
      mp->next = tp->mtxlist;
 80022b0:	61a9      	str	r1, [r5, #24]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 80022b2:	616e      	str	r6, [r5, #20]
      mp->next = tp->mtxlist;
      tp->mtxlist = mp;
 80022b4:	63b7      	str	r7, [r6, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 80022b6:	f000 fb3b 	bl	8002930 <chSchReadyI>
 *
 * @sclass
 */
void chSchRescheduleS(void) {

  chDbgCheckClassS();
 80022ba:	f000 f9a9 	bl	8002610 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 80022be:	f000 f9df 	bl	8002680 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 80022c2:	f8da 3000 	ldr.w	r3, [sl]
 80022c6:	f8da 0018 	ldr.w	r0, [sl, #24]

  if (chSchIsRescRequiredI()) {
 80022ca:	6899      	ldr	r1, [r3, #8]
 80022cc:	6882      	ldr	r2, [r0, #8]
 80022ce:	4291      	cmp	r1, r2
 80022d0:	d810      	bhi.n	80022f4 <main+0xd34>
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 80022d2:	f000 fc3d 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80022d6:	f8da 3000 	ldr.w	r3, [sl]
 80022da:	4553      	cmp	r3, sl
 80022dc:	f43f acb8 	beq.w	8001c50 <main+0x690>
 80022e0:	f8db 2018 	ldr.w	r2, [fp, #24]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	6892      	ldr	r2, [r2, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f4bf acb1 	bcs.w	8001c50 <main+0x690>
 80022ee:	4834      	ldr	r0, [pc, #208]	; (80023c0 <main+0xe00>)
 80022f0:	f000 f95e 	bl	80025b0 <chSysHalt>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	f8cb 2000 	str.w	r2, [fp]
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80022fa:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80022fc:	f8c2 b004 	str.w	fp, [r2, #4]
 8002300:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002304:	f8cb 3018 	str.w	r3, [fp, #24]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 8002308:	f000 fac2 	bl	8002890 <chSchReadyAheadI>

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800230c:	4601      	mov	r1, r0
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 800230e:	4604      	mov	r4, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002310:	f8db 0018 	ldr.w	r0, [fp, #24]
 8002314:	f000 f92c 	bl	8002570 <_trace_switch>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002318:	f3ef 8309 	mrs	r3, PSP
 800231c:	69e2      	ldr	r2, [r4, #28]
 800231e:	3b24      	subs	r3, #36	; 0x24
 8002320:	429a      	cmp	r2, r3
 8002322:	d845      	bhi.n	80023b0 <main+0xdf0>
 8002324:	4621      	mov	r1, r4
 8002326:	f8db 0018 	ldr.w	r0, [fp, #24]
 800232a:	f7fd ffa9 	bl	8000280 <_port_switch>
 800232e:	e7d0      	b.n	80022d2 <main+0xd12>
      chSchGoSleepS(CH_STATE_WTMTX);

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 8002330:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8002332:	429f      	cmp	r7, r3
 8002334:	f47f af31 	bne.w	800219a <main+0xbda>
 8002338:	e736      	b.n	80021a8 <main+0xbe8>
  /* If the waken thread has a not-greater priority than the current
     one then it is just inserted in the ready list else it made
     running immediately and the invoking thread goes in the ready
     list instead.*/
  if (ntp->prio <= otp->prio) {
    (void) chSchReadyI(ntp);
 800233a:	f101 0090 	add.w	r0, r1, #144	; 0x90
 800233e:	f000 faf7 	bl	8002930 <chSchReadyI>
 8002342:	e598      	b.n	8001e76 <main+0x8b6>
void chSchWakeupS(thread_t *ntp, msg_t msg) {
  thread_t *otp = currp;

  chDbgCheckClassS();

  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002344:	481f      	ldr	r0, [pc, #124]	; (80023c4 <main+0xe04>)
 8002346:	f000 f933 	bl	80025b0 <chSysHalt>
 800234a:	6883      	ldr	r3, [r0, #8]
 800234c:	e572      	b.n	8001e34 <main+0x874>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800234e:	e890 000a 	ldmia.w	r0, {r1, r3}
 8002352:	6019      	str	r1, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002354:	6802      	ldr	r2, [r0, #0]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002356:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8002358:	6053      	str	r3, [r2, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800235a:	460b      	mov	r3, r1
 800235c:	e002      	b.n	8002364 <main+0xda4>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	4594      	cmp	ip, r2
 8002362:	d802      	bhi.n	800236a <main+0xdaa>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8002364:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002366:	4299      	cmp	r1, r3
 8002368:	d1f9      	bne.n	800235e <main+0xd9e>
 800236a:	469e      	mov	lr, r3
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	6043      	str	r3, [r0, #4]

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
  tp->queue.next             = cp;
 8002370:	f8c0 e000 	str.w	lr, [r0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 8002374:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8002376:	f8ce 0004 	str.w	r0, [lr, #4]
 800237a:	e6f8      	b.n	800216e <main+0xbae>
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 800237c:	6841      	ldr	r1, [r0, #4]
 800237e:	6803      	ldr	r3, [r0, #0]
 8002380:	600b      	str	r3, [r1, #0]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8002382:	f8d0 e024 	ldr.w	lr, [r0, #36]	; 0x24
  tp->queue.next->queue.prev = tp->queue.prev;
 8002386:	6803      	ldr	r3, [r0, #0]
 8002388:	6059      	str	r1, [r3, #4]
  return tp;
}

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
 800238a:	4671      	mov	r1, lr
 800238c:	e002      	b.n	8002394 <main+0xdd4>
  do {
    cp = cp->queue.next;
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800238e:	688b      	ldr	r3, [r1, #8]
 8002390:	429a      	cmp	r2, r3
 8002392:	d802      	bhi.n	800239a <main+0xdda>

static inline void queue_prio_insert(thread_t *tp, threads_queue_t *tqp) {

  thread_t *cp = (thread_t *)tqp;
  do {
    cp = cp->queue.next;
 8002394:	6809      	ldr	r1, [r1, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8002396:	458e      	cmp	lr, r1
 8002398:	d1f9      	bne.n	800238e <main+0xdce>
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 800239a:	684b      	ldr	r3, [r1, #4]
 800239c:	e880 000a 	stmia.w	r0, {r1, r3}
  tp->queue.prev->queue.next = tp;
 80023a0:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 80023a2:	6048      	str	r0, [r1, #4]
          tp = tp->u.wtmtxp->owner;
 80023a4:	f8de 0008 	ldr.w	r0, [lr, #8]
 80023a8:	e6c8      	b.n	800213c <main+0xb7c>
         just changed priority.*/
      (void) chSchReadyI(tp);
      chSchRescheduleS();
    }
    else {
      mp->owner = NULL;
 80023aa:	9b01      	ldr	r3, [sp, #4]
 80023ac:	616b      	str	r3, [r5, #20]
 80023ae:	e790      	b.n	80022d2 <main+0xd12>

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80023b0:	4805      	ldr	r0, [pc, #20]	; (80023c8 <main+0xe08>)
 80023b2:	f000 f8fd 	bl	80025b0 <chSysHalt>
 80023b6:	bf00      	nop
 80023b8:	0800345c 	.word	0x0800345c
 80023bc:	08003208 	.word	0x08003208
 80023c0:	08003478 	.word	0x08003478
 80023c4:	0800323c 	.word	0x0800323c
 80023c8:	08003378 	.word	0x08003378
 80023cc:	00000000 	.word	0x00000000

080023d0 <trace_next>:
/**
 * @brief   Writes a time stamp and increases the trace buffer pointer.
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {
 80023d0:	b410      	push	{r4}

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <trace_next+0x30>)
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 80023d4:	480b      	ldr	r0, [pc, #44]	; (8002404 <trace_next+0x34>)
 80023d6:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 80023d8:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80023dc:	6819      	ldr	r1, [r3, #0]
 80023de:	6a64      	ldr	r4, [r4, #36]	; 0x24
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 80023e0:	605c      	str	r4, [r3, #4]
 80023e2:	6840      	ldr	r0, [r0, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 80023e4:	f360 211f 	bfi	r1, r0, #8, #24
 80023e8:	f843 1b10 	str.w	r1, [r3], #16
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 80023ec:	f502 6104 	add.w	r1, r2, #2112	; 0x840
 80023f0:	428b      	cmp	r3, r1
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 80023f2:	bf28      	it	cs
 80023f4:	f102 0340 	addcs.w	r3, r2, #64	; 0x40
 80023f8:	63d3      	str	r3, [r2, #60]	; 0x3c
  }
}
 80023fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	20000b48 	.word	0x20000b48
 8002404:	e0001000 	.word	0xe0001000
	...

08002410 <_idle_thread.lto_priv.27>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void _idle_thread(void *p) {
 8002410:	e7fe      	b.n	8002410 <_idle_thread.lto_priv.27>
 8002412:	bf00      	nop
	...

08002420 <_port_irq_epilogue>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002420:	2320      	movs	r3, #32
 8002422:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8002426:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <_port_irq_epilogue+0x44>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800242e:	d102      	bne.n	8002436 <_port_irq_epilogue+0x16>
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	4770      	bx	lr
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002436:	f3ef 8309 	mrs	r3, PSP
    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;

    /* Setting up a fake XPSR register value.*/
    ctxp->xpsr = (regarm_t)0x01000000;
 800243a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800243e:	f843 2c04 	str.w	r2, [r3, #-4]
    /* The port_extctx structure is pointed by the PSP register.*/
    ctxp = (struct port_extctx *)__get_PSP();

    /* Adding an artificial exception return context, there is no need to
       populate it fully.*/
    ctxp--;
 8002442:	f1a3 0220 	sub.w	r2, r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002446:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 800244a:	4a07      	ldr	r2, [pc, #28]	; (8002468 <_port_irq_epilogue+0x48>)
 800244c:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800244e:	6992      	ldr	r2, [r2, #24]
    /* Writing back the modified PSP value.*/
    __set_PSP((uint32_t)ctxp);

    /* The exit sequence is different depending on if a preemption is
       required or not.*/
    if (chSchIsPreemptionRequired()) {
 8002450:	6889      	ldr	r1, [r1, #8]
 8002452:	6892      	ldr	r2, [r2, #8]
 8002454:	4291      	cmp	r1, r2
      /* Preemption is required we need to enforce a context switch.*/
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8002456:	bf8c      	ite	hi
 8002458:	4a04      	ldrhi	r2, [pc, #16]	; (800246c <_port_irq_epilogue+0x4c>)
    }
    else {
      /* Preemption not required, we just need to exit the exception
         atomically.*/
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 800245a:	4a05      	ldrls	r2, [pc, #20]	; (8002470 <_port_irq_epilogue+0x50>)
 800245c:	f843 2c08 	str.w	r2, [r3, #-8]
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop
 8002464:	e000ed00 	.word	0xe000ed00
 8002468:	20000b48 	.word	0x20000b48
 800246c:	080002a5 	.word	0x080002a5
 8002470:	080002b0 	.word	0x080002b0
	...

08002480 <SVC_Handler>:
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002480:	f3ef 8309 	mrs	r3, PSP
  /* The port_extctx structure is pointed by the PSP register.*/
  ctxp = (struct port_extctx *)__get_PSP();

  /* Discarding the current exception context and positioning the stack to
     point to the real one.*/
  ctxp++;
 8002484:	3320      	adds	r3, #32
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8002486:	f383 8809 	msr	PSP, r3
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800248a:	2300      	movs	r3, #0
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
	...

080024a0 <chTMStopMeasurementX>:
 80024a0:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <chTMStopMeasurementX+0x40>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80024a2:	4910      	ldr	r1, [pc, #64]	; (80024e4 <chTMStopMeasurementX+0x44>)
 80024a4:	685a      	ldr	r2, [r3, #4]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80024a6:	6883      	ldr	r3, [r0, #8]
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 80024a8:	b4f0      	push	{r4, r5, r6, r7}

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 80024aa:	f8d1 7884 	ldr.w	r7, [r1, #2180]	; 0x884
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
 80024ae:	6841      	ldr	r1, [r0, #4]

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024b0:	68c6      	ldr	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80024b2:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	1bdb      	subs	r3, r3, r7
  tmp->cumulative += (rttime_t)tmp->last;
 80024ba:	18e4      	adds	r4, r4, r3
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
 80024bc:	6802      	ldr	r2, [r0, #0]
static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
  tmp->last = (now - tmp->last) - offset;
 80024be:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80024c0:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80024c4:	428b      	cmp	r3, r1

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024c6:	f106 0601 	add.w	r6, r6, #1
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
 80024ca:	bf88      	it	hi
 80024cc:	6043      	strhi	r3, [r0, #4]
  }
  if (tmp->last < tmp->best) {
 80024ce:	4293      	cmp	r3, r2

static inline void tm_stop(time_measurement_t *tmp,
                           rtcnt_t now,
                           rtcnt_t offset) {

  tmp->n++;
 80024d0:	60c6      	str	r6, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
  tmp->cumulative += (rttime_t)tmp->last;
 80024d2:	e9c0 4504 	strd	r4, r5, [r0, #16]
  if (tmp->last > tmp->worst) {
    tmp->worst = tmp->last;
  }
  if (tmp->last < tmp->best) {
    tmp->best = tmp->last;
 80024d6:	bf38      	it	cc
 80024d8:	6003      	strcc	r3, [r0, #0]
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
}
 80024da:	bcf0      	pop	{r4, r5, r6, r7}
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	e0001000 	.word	0xe0001000
 80024e4:	20000b48 	.word	0x20000b48
	...

080024f0 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <_trace_isr_leave+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {
 80024f2:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80024f4:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 80024f6:	f004 0402 	and.w	r4, r4, #2
 80024fa:	b2a4      	uxth	r4, r4
 80024fc:	b97c      	cbnz	r4, 800251e <_trace_isr_leave+0x2e>
 80024fe:	2220      	movs	r2, #32
 8002500:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8002504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002506:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8002508:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 800250a:	2103      	movs	r1, #3
 800250c:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8002510:	f364 03c7 	bfi	r3, r4, #3, #5
 8002514:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 8002516:	f7ff ff5b 	bl	80023d0 <trace_next>
 800251a:	f384 8811 	msr	BASEPRI, r4
 800251e:	bd10      	pop	{r4, pc}
 8002520:	20000b48 	.word	0x20000b48
	...

08002530 <_trace_isr_enter>:
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <_trace_isr_enter+0x30>)
 *
 * @param[in] isr       name of the isr
 *
 * @notapi
 */
void _trace_isr_enter(const char *isr) {
 8002532:	b510      	push	{r4, lr}

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8002534:	8f1c      	ldrh	r4, [r3, #56]	; 0x38
 8002536:	f004 0402 	and.w	r4, r4, #2
 800253a:	b2a4      	uxth	r4, r4
 800253c:	b97c      	cbnz	r4, 800255e <_trace_isr_enter+0x2e>
 800253e:	2220      	movs	r2, #32
 8002540:	f382 8811 	msr	BASEPRI, r2
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8002544:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002546:	7813      	ldrb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8002548:	6090      	str	r0, [r2, #8]
 */
void _trace_isr_enter(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 800254a:	2102      	movs	r1, #2
 800254c:	f361 0302 	bfi	r3, r1, #0, #3
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8002550:	f364 03c7 	bfi	r3, r4, #3, #5
 8002554:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
 8002556:	f7ff ff3b 	bl	80023d0 <trace_next>
 800255a:	f384 8811 	msr	BASEPRI, r4
 800255e:	bd10      	pop	{r4, pc}
 8002560:	20000b48 	.word	0x20000b48
	...

08002570 <_trace_switch>:
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8002570:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <_trace_switch+0x34>)
 8002572:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8002574:	07d2      	lsls	r2, r2, #31
 8002576:	d500      	bpl.n	800257a <_trace_switch+0xa>
 8002578:	4770      	bx	lr
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 800257a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 * @param[in] ntp       the thread being switched in
 * @param[in] otp       the thread being switched out
 *
 * @notapi
 */
void _trace_switch(thread_t *ntp, thread_t *otp) {
 800257c:	b410      	push	{r4}
  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800257e:	699c      	ldr	r4, [r3, #24]
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8002580:	7813      	ldrb	r3, [r2, #0]
 8002582:	2001      	movs	r0, #1
 8002584:	f360 0302 	bfi	r3, r0, #0, #3
 8002588:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 800258a:	f891 0020 	ldrb.w	r0, [r1, #32]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 800258e:	6094      	str	r4, [r2, #8]

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8002590:	f360 03c7 	bfi	r3, r0, #3, #5
 8002594:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8002596:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002598:	60d3      	str	r3, [r2, #12]
    trace_next();
  }
}
 800259a:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
    trace_next();
 800259e:	f7ff bf17 	b.w	80023d0 <trace_next>
 80025a2:	bf00      	nop
 80025a4:	20000b48 	.word	0x20000b48
	...

080025b0 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 80025b0:	b508      	push	{r3, lr}
 80025b2:	4605      	mov	r5, r0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 80025b6:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <chSysHalt+0x30>)
 80025b8:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	b29b      	uxth	r3, r3
 80025c0:	b10b      	cbz	r3, 80025c6 <chSysHalt+0x16>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 80025c2:	62e5      	str	r5, [r4, #44]	; 0x2c
 80025c4:	e7fe      	b.n	80025c4 <chSysHalt+0x14>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80025c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80025c8:	780a      	ldrb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 80025ca:	6088      	str	r0, [r1, #8]
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 80025cc:	2004      	movs	r0, #4
 80025ce:	f360 0202 	bfi	r2, r0, #0, #3
    ch.dbg.trace_buffer.ptr->state         = 0;
 80025d2:	f363 02c7 	bfi	r2, r3, #3, #5
 80025d6:	700a      	strb	r2, [r1, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
    trace_next();
 80025d8:	f7ff fefa 	bl	80023d0 <trace_next>
 80025dc:	e7f1      	b.n	80025c2 <chSysHalt+0x12>
 80025de:	bf00      	nop
 80025e0:	20000b48 	.word	0x20000b48
	...

080025f0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 80025f0:	b508      	push	{r3, lr}

  chDbgCheck(mp != NULL);
 80025f2:	b120      	cbz	r0, 80025fe <chMtxObjectInit+0xe>

  queue_init(&mp->queue);
  mp->owner = NULL;
 80025f4:	2300      	movs	r3, #0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 80025f6:	6000      	str	r0, [r0, #0]
  tqp->prev = (thread_t *)tqp;
 80025f8:	6040      	str	r0, [r0, #4]
 80025fa:	6083      	str	r3, [r0, #8]
 80025fc:	bd08      	pop	{r3, pc}
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);
 80025fe:	4801      	ldr	r0, [pc, #4]	; (8002604 <chMtxObjectInit+0x14>)
 8002600:	f7ff ffd6 	bl	80025b0 <chSysHalt>
 8002604:	08003468 	.word	0x08003468
	...

08002610 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8002610:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <chDbgCheckClassS+0x18>)
 8002614:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002616:	b91a      	cbnz	r2, 8002620 <chDbgCheckClassS+0x10>
 8002618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800261a:	2b00      	cmp	r3, #0
 800261c:	dd00      	ble.n	8002620 <chDbgCheckClassS+0x10>
 800261e:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8002620:	4802      	ldr	r0, [pc, #8]	; (800262c <chDbgCheckClassS+0x1c>)
 8002622:	f7ff ffc5 	bl	80025b0 <chSysHalt>
 8002626:	bf00      	nop
 8002628:	20000b48 	.word	0x20000b48
 800262c:	080034ec 	.word	0x080034ec

08002630 <chSchGoSleepS>:
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002630:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 8002632:	4c11      	ldr	r4, [pc, #68]	; (8002678 <chSchGoSleepS+0x48>)
 *
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
 8002634:	4606      	mov	r6, r0
  thread_t *otp = currp;

  chDbgCheckClassS();
 8002636:	f7ff ffeb 	bl	8002610 <chDbgCheckClassS>
  tp->queue.prev->queue.next = tp;
  tqp->prev                  = tp;
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 800263a:	6823      	ldr	r3, [r4, #0]
 * @param[in] newstate  the new thread state
 *
 * @sclass
 */
void chSchGoSleepS(tstate_t newstate) {
  thread_t *otp = currp;
 800263c:	69a5      	ldr	r5, [r4, #24]

  tqp->next             = tp->queue.next;
 800263e:	681a      	ldr	r2, [r3, #0]

  chDbgCheckClassS();

  /* New state.*/
  otp->state = newstate;
 8002640:	f885 6020 	strb.w	r6, [r5, #32]
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 8002644:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 8002646:	6054      	str	r4, [r2, #4]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002648:	4618      	mov	r0, r3
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 800264a:	f883 1020 	strb.w	r1, [r3, #32]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800264e:	4629      	mov	r1, r5
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002650:	6022      	str	r2, [r4, #0]
     time quantum when it will wakeup.*/
  otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
#endif

  /* Next thread in ready list becomes current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8002652:	61a3      	str	r3, [r4, #24]
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002654:	f7ff ff8c 	bl	8002570 <_trace_switch>
 */
__attribute__((always_inline)) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8002658:	f3ef 8309 	mrs	r3, PSP
 800265c:	69ea      	ldr	r2, [r5, #28]
 800265e:	3b24      	subs	r3, #36	; 0x24
 8002660:	429a      	cmp	r2, r3
 8002662:	d805      	bhi.n	8002670 <chSchGoSleepS+0x40>
 8002664:	69a0      	ldr	r0, [r4, #24]
 8002666:	4629      	mov	r1, r5
}
 8002668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (currp->prio == IDLEPRIO) {
    CH_CFG_IDLE_ENTER_HOOK();
  }

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800266c:	f7fd be08 	b.w	8000280 <_port_switch>
 8002670:	4802      	ldr	r0, [pc, #8]	; (800267c <chSchGoSleepS+0x4c>)
 8002672:	f7ff ff9d 	bl	80025b0 <chSysHalt>
 8002676:	bf00      	nop
 8002678:	20000b48 	.word	0x20000b48
 800267c:	08003378 	.word	0x08003378

08002680 <chDbgCheckClassI>:
 *          an I-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassI(void) {
 8002680:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <chDbgCheckClassI+0x18>)
 8002684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002686:	2a00      	cmp	r2, #0
 8002688:	db03      	blt.n	8002692 <chDbgCheckClassI+0x12>
 800268a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800268c:	2b00      	cmp	r3, #0
 800268e:	dd00      	ble.n	8002692 <chDbgCheckClassI+0x12>
 8002690:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8002692:	4802      	ldr	r0, [pc, #8]	; (800269c <chDbgCheckClassI+0x1c>)
 8002694:	f7ff ff8c 	bl	80025b0 <chSysHalt>
 8002698:	20000b48 	.word	0x20000b48
 800269c:	080034f4 	.word	0x080034f4

080026a0 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 80026a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026a2:	460e      	mov	r6, r1
 80026a4:	4605      	mov	r5, r0
 80026a6:	4614      	mov	r4, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 80026a8:	f7ff ffea 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 80026ac:	b1b6      	cbz	r6, 80026dc <chCoreAllocAlignedWithOffsetI+0x3c>
 80026ae:	1e70      	subs	r0, r6, #1
 80026b0:	ea10 0706 	ands.w	r7, r0, r6
 80026b4:	d112      	bne.n	80026dc <chCoreAllocAlignedWithOffsetI+0x3c>

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80026b6:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <chCoreAllocAlignedWithOffsetI+0x48>)
 80026b8:	6813      	ldr	r3, [r2, #0]
 80026ba:	441c      	add	r4, r3
 80026bc:	3d01      	subs	r5, #1
 80026be:	4434      	add	r4, r6
 80026c0:	3c01      	subs	r4, #1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80026c2:	4271      	negs	r1, r6
 80026c4:	4435      	add	r5, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 80026c6:	ea04 0001 	and.w	r0, r4, r1
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
 80026ca:	4029      	ands	r1, r5
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80026cc:	6854      	ldr	r4, [r2, #4]
  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  size = MEM_ALIGN_NEXT(size, align);
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;
 80026ce:	4401      	add	r1, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 80026d0:	42a1      	cmp	r1, r4
 80026d2:	d806      	bhi.n	80026e2 <chCoreAllocAlignedWithOffsetI+0x42>
 80026d4:	428b      	cmp	r3, r1
 80026d6:	d804      	bhi.n	80026e2 <chCoreAllocAlignedWithOffsetI+0x42>
    return NULL;
  }

  ch_memcore.nextmem = next;
 80026d8:	6011      	str	r1, [r2, #0]
 80026da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                    unsigned align,
                                    size_t offset) {
  uint8_t *p, *next;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 80026dc:	4803      	ldr	r0, [pc, #12]	; (80026ec <chCoreAllocAlignedWithOffsetI+0x4c>)
 80026de:	f7ff ff67 	bl	80025b0 <chSysHalt>
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
  next = p + size;

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
    return NULL;
 80026e2:	4638      	mov	r0, r7
  }

  ch_memcore.nextmem = next;

  return p;
}
 80026e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000900 	.word	0x20000900
 80026ec:	080034a4 	.word	0x080034a4

080026f0 <chCoreAllocAlignedI.lto_priv.24>:
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f7ff bfd5 	b.w	80026a0 <chCoreAllocAlignedWithOffsetI>
 80026f6:	bf00      	nop
	...

08002700 <chSchGoSleepTimeoutS>:
 * @return              The wakeup message.
 * @retval MSG_TIMEOUT  if a timeout occurs.
 *
 * @sclass
 */
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8002700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002704:	460d      	mov	r5, r1
 8002706:	b086      	sub	sp, #24
 8002708:	4681      	mov	r9, r0

  chDbgCheckClassS();
 800270a:	f7ff ff81 	bl	8002610 <chDbgCheckClassS>

  if (TIME_INFINITE != timeout) {
 800270e:	1c6b      	adds	r3, r5, #1
 8002710:	d055      	beq.n	80027be <chSchGoSleepTimeoutS+0xbe>
    virtual_timer_t vt;

    chVTDoSetI(&vt, timeout, wakeup, currp);
 8002712:	4f4f      	ldr	r7, [pc, #316]	; (8002850 <chSchGoSleepTimeoutS+0x150>)
 8002714:	69bc      	ldr	r4, [r7, #24]
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8002716:	f7ff ffb3 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 800271a:	2d00      	cmp	r5, #0
 800271c:	d04c      	beq.n	80027b8 <chSchGoSleepTimeoutS+0xb8>
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800271e:	46ba      	mov	sl, r7
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8002720:	2d01      	cmp	r5, #1
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002722:	f85a 6f1c 	ldr.w	r6, [sl, #28]!

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8002726:	4a4b      	ldr	r2, [pc, #300]	; (8002854 <chSchGoSleepTimeoutS+0x154>)
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
 8002728:	9405      	str	r4, [sp, #20]
 800272a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    systime_t now = chVTGetSystemTimeX();

    /* If the requested delay is lower than the minimum safe delta then it
       is raised to the minimum safe value.*/
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800272e:	bf08      	it	eq
 8002730:	2502      	moveq	r5, #2
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002732:	4556      	cmp	r6, sl
 8002734:	6a5c      	ldr	r4, [r3, #36]	; 0x24

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 8002736:	9204      	str	r2, [sp, #16]
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8002738:	d06e      	beq.n	8002818 <chSchGoSleepTimeoutS+0x118>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800273a:	6ab8      	ldr	r0, [r7, #40]	; 0x28

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 800273c:	68b3      	ldr	r3, [r6, #8]
 800273e:	1a24      	subs	r4, r4, r0

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8002740:	192c      	adds	r4, r5, r4
 8002742:	d245      	bcs.n	80027d0 <chSchGoSleepTimeoutS+0xd0>
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
    }
    else if (delta < p->delta) {
 8002744:	429c      	cmp	r4, r3
 8002746:	d347      	bcc.n	80027d8 <chSchGoSleepTimeoutS+0xd8>
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8002748:	429c      	cmp	r4, r3
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 800274a:	f10d 0804 	add.w	r8, sp, #4
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800274e:	d906      	bls.n	800275e <chSchGoSleepTimeoutS+0x5e>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8002750:	4546      	cmp	r6, r8
 8002752:	d031      	beq.n	80027b8 <chSchGoSleepTimeoutS+0xb8>

    delta -= p->delta;
    p = p->next;
 8002754:	6836      	ldr	r6, [r6, #0]
     this timer. */
  while (p->delta < delta) {
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
 8002756:	1ae4      	subs	r4, r4, r3
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 8002758:	68b3      	ldr	r3, [r6, #8]
 800275a:	429c      	cmp	r4, r3
 800275c:	d8f8      	bhi.n	8002750 <chSchGoSleepTimeoutS+0x50>
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 800275e:	6873      	ldr	r3, [r6, #4]
 8002760:	9302      	str	r3, [sp, #8]
    delta -= p->delta;
    p = p->next;
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 8002762:	9601      	str	r6, [sp, #4]
  vtp->prev = vtp->next->prev;
  vtp->prev->next = vtp;
 8002764:	f8c3 8000 	str.w	r8, [r3]
  p->prev = vtp;
 8002768:	f8c6 8004 	str.w	r8, [r6, #4]
  vtp->delta = delta;
 800276c:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 800276e:	68b1      	ldr	r1, [r6, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8002770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  vtp->prev->next = vtp;
  p->prev = vtp;
  vtp->delta = delta;

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 8002774:	1b09      	subs	r1, r1, r4
 8002776:	60b1      	str	r1, [r6, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
    chSchGoSleepS(newstate);
 800277a:	4648      	mov	r0, r9
 800277c:	f7ff ff58 	bl	8002630 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8002780:	f7ff ff7e 	bl	8002680 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 8002784:	9b04      	ldr	r3, [sp, #16]
 8002786:	b1f3      	cbz	r3, 80027c6 <chSchGoSleepTimeoutS+0xc6>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 8002788:	f7ff ff7a 	bl	8002680 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	4930      	ldr	r1, [pc, #192]	; (8002850 <chSchGoSleepTimeoutS+0x150>)
 8002790:	4543      	cmp	r3, r8
 8002792:	d026      	beq.n	80027e2 <chSchGoSleepTimeoutS+0xe2>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 8002794:	9a02      	ldr	r2, [sp, #8]
 8002796:	9b01      	ldr	r3, [sp, #4]
 8002798:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 800279a:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;
 800279c:	2100      	movs	r1, #0

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800279e:	4553      	cmp	r3, sl
  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
    vtp->next->prev = vtp->prev;
 80027a0:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 80027a2:	9104      	str	r1, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80027a4:	d00f      	beq.n	80027c6 <chSchGoSleepTimeoutS+0xc6>
      vtp->next->delta += vtp->delta;
 80027a6:	6899      	ldr	r1, [r3, #8]
 80027a8:	9a03      	ldr	r2, [sp, #12]
 80027aa:	440a      	add	r2, r1
 80027ac:	609a      	str	r2, [r3, #8]
  }
  else {
    chSchGoSleepS(newstate);
  }

  return currp->u.rdymsg;
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80027b2:	b006      	add	sp, #24
 80027b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 80027b8:	4827      	ldr	r0, [pc, #156]	; (8002858 <chSchGoSleepTimeoutS+0x158>)
 80027ba:	f7ff fef9 	bl	80025b0 <chSysHalt>
    if (chVTIsArmedI(&vt)) {
      chVTDoResetI(&vt);
    }
  }
  else {
    chSchGoSleepS(newstate);
 80027be:	4648      	mov	r0, r9
 80027c0:	f7ff ff36 	bl	8002630 <chSchGoSleepS>
 80027c4:	4f22      	ldr	r7, [pc, #136]	; (8002850 <chSchGoSleepTimeoutS+0x150>)
  }

  return currp->u.rdymsg;
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
 80027ca:	b006      	add	sp, #24
 80027cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
      p = p->next;
 80027d0:	6836      	ldr	r6, [r6, #0]

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80027d2:	1ae4      	subs	r4, r4, r3
 80027d4:	68b3      	ldr	r3, [r6, #8]
 80027d6:	e7b7      	b.n	8002748 <chSchGoSleepTimeoutS+0x48>
 80027d8:	4420      	add	r0, r4
 80027da:	f7fe fba9 	bl	8000f30 <stSetAlarm>
 80027de:	68b3      	ldr	r3, [r6, #8]
 80027e0:	e7b2      	b.n	8002748 <chSchGoSleepTimeoutS+0x48>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 80027e2:	9a01      	ldr	r2, [sp, #4]
 80027e4:	61ca      	str	r2, [r1, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 80027e6:	2300      	movs	r3, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80027e8:	4552      	cmp	r2, sl
    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 80027ea:	f8c2 a004 	str.w	sl, [r2, #4]
  vtp->func = NULL;
 80027ee:	9304      	str	r3, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80027f0:	d029      	beq.n	8002846 <chSchGoSleepTimeoutS+0x146>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80027f2:	6893      	ldr	r3, [r2, #8]
 80027f4:	9c03      	ldr	r4, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 80027f6:	6a88      	ldr	r0, [r1, #40]	; 0x28

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 80027f8:	4423      	add	r3, r4
 80027fa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80027fe:	6093      	str	r3, [r2, #8]
 8002800:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8002802:	1a12      	subs	r2, r2, r0
  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8002804:	4293      	cmp	r3, r2
 8002806:	d9de      	bls.n	80027c6 <chSchGoSleepTimeoutS+0xc6>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 8002808:	1a99      	subs	r1, r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 800280a:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 800280c:	bf98      	it	ls
 800280e:	1c93      	addls	r3, r2, #2
 8002810:	4418      	add	r0, r3
 8002812:	f7fe fb8d 	bl	8000f30 <stSetAlarm>
 8002816:	e7d6      	b.n	80027c6 <chSchGoSleepTimeoutS+0xc6>
    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
 8002818:	62bc      	str	r4, [r7, #40]	; 0x28
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
      vtp->delta = delay;
 800281a:	9503      	str	r5, [sp, #12]
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 800281c:	68da      	ldr	r2, [r3, #12]
      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 800281e:	9601      	str	r6, [sp, #4]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 8002820:	f10d 0804 	add.w	r8, sp, #4
 *
 * @api
 */
void stStartAlarm(systime_t abstime) {

  osalDbgAssert(stIsAlarmActive() == false, "already active");
 8002824:	f012 0202 	ands.w	r2, r2, #2
      ch.vtlist.prev = vtp;
      vtp->next = (virtual_timer_t *)&ch.vtlist;
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 8002828:	9602      	str	r6, [sp, #8]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {

      /* The delta list is empty, the current time becomes the new
         delta list base time, the timer is inserted.*/
      ch.vtlist.lasttime = now;
      ch.vtlist.next = vtp;
 800282a:	f8c7 801c 	str.w	r8, [r7, #28]
      ch.vtlist.prev = vtp;
 800282e:	f8c7 8020 	str.w	r8, [r7, #32]
 8002832:	d105      	bne.n	8002840 <chSchGoSleepTimeoutS+0x140>

#if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
  chDbgCheck(interval <= (sysinterval_t)((systime_t)-1));
#endif

  return systime + (systime_t)interval;
 8002834:	442c      	add	r4, r5
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
  STM32_ST_TIM->SR     = 0;
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 8002836:	2102      	movs	r1, #2
 *
 * @notapi
 */
static inline void st_lld_start_alarm(systime_t time) {

  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8002838:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800283a:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800283c:	60d9      	str	r1, [r3, #12]
 800283e:	e79c      	b.n	800277a <chSchGoSleepTimeoutS+0x7a>
 8002840:	4806      	ldr	r0, [pc, #24]	; (800285c <chSchGoSleepTimeoutS+0x15c>)
 8002842:	f7ff feb5 	bl	80025b0 <chSysHalt>
 *
 * @notapi
 */
static inline void st_lld_stop_alarm(void) {

  STM32_ST_TIM->DIER = 0;
 8002846:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800284a:	60d3      	str	r3, [r2, #12]
 800284c:	e7bb      	b.n	80027c6 <chSchGoSleepTimeoutS+0xc6>
 800284e:	bf00      	nop
 8002850:	20000b48 	.word	0x20000b48
 8002854:	08002ae1 	.word	0x08002ae1
 8002858:	08003554 	.word	0x08003554
 800285c:	0800352c 	.word	0x0800352c

08002860 <chThdEnqueueTimeoutS>:
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {

  if (TIME_IMMEDIATE == timeout) {
 8002860:	b169      	cbz	r1, 800287e <chThdEnqueueTimeoutS+0x1e>
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <chThdEnqueueTimeoutS+0x24>)
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 8002864:	b410      	push	{r4}
 8002866:	4602      	mov	r2, r0
}

static inline void queue_insert(thread_t *tp, threads_queue_t *tqp) {

  tp->queue.next             = (thread_t *)tqp;
  tp->queue.prev             = tqp->prev;
 8002868:	6844      	ldr	r4, [r0, #4]

  if (TIME_IMMEDIATE == timeout) {
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);
 800286a:	699b      	ldr	r3, [r3, #24]

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800286c:	2004      	movs	r0, #4
 800286e:	e883 0014 	stmia.w	r3, {r2, r4}
  tp->queue.prev->queue.next = tp;
 8002872:	6023      	str	r3, [r4, #0]
  tqp->prev                  = tp;
 8002874:	6053      	str	r3, [r2, #4]
}
 8002876:	f85d 4b04 	ldr.w	r4, [sp], #4
    return MSG_TIMEOUT;
  }

  queue_insert(currp, tqp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 800287a:	f7ff bf41 	b.w	8002700 <chSchGoSleepTimeoutS>
}
 800287e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002882:	4770      	bx	lr
 8002884:	20000b48 	.word	0x20000b48
	...

08002890 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8002890:	b510      	push	{r4, lr}
 8002892:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8002894:	f7ff fef4 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002898:	b1a4      	cbz	r4, 80028c4 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800289a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800289e:	b18b      	cbz	r3, 80028c4 <chSchReadyAheadI+0x34>
 80028a0:	2b0f      	cmp	r3, #15
 80028a2:	d00f      	beq.n	80028c4 <chSchReadyAheadI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80028a4:	2200      	movs	r2, #0
 80028a6:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <chSchReadyAheadI+0x3c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 80028aa:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 80028ae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	428a      	cmp	r2, r1
 80028b4:	d8fb      	bhi.n	80028ae <chSchReadyAheadI+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 80028b6:	685a      	ldr	r2, [r3, #4]
 80028b8:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 80028ba:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 80028bc:	4620      	mov	r0, r4
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 80028be:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 80028c0:	605c      	str	r4, [r3, #4]

  return tp;
}
 80028c2:	bd10      	pop	{r4, pc}
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 80028c4:	4802      	ldr	r0, [pc, #8]	; (80028d0 <chSchReadyAheadI+0x40>)
 80028c6:	f7ff fe73 	bl	80025b0 <chSysHalt>
 80028ca:	bf00      	nop
 80028cc:	20000b48 	.word	0x20000b48
 80028d0:	08003490 	.word	0x08003490
	...

080028e0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80028e0:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 80028e2:	4c10      	ldr	r4, [pc, #64]	; (8002924 <chSchDoReschedule+0x44>)
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;
 80028e4:	6823      	ldr	r3, [r4, #0]
 80028e6:	69a0      	ldr	r0, [r4, #24]

  tqp->next             = tp->queue.next;
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	6022      	str	r2, [r4, #0]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80028ec:	2101      	movs	r1, #1
  tqp->next->queue.prev = (thread_t *)tqp;
 80028ee:	6054      	str	r4, [r2, #4]
 80028f0:	f883 1020 	strb.w	r1, [r3, #32]
 */
void chSchDoReschedule(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 80028f4:	61a3      	str	r3, [r4, #24]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 80028f6:	f7ff ffcb 	bl	8002890 <chSchReadyAheadI>
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80028fa:	4601      	mov	r1, r0
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 80028fc:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 80028fe:	69a0      	ldr	r0, [r4, #24]
 8002900:	f7ff fe36 	bl	8002570 <_trace_switch>
 8002904:	f3ef 8309 	mrs	r3, PSP
 8002908:	69ea      	ldr	r2, [r5, #28]
 800290a:	3b24      	subs	r3, #36	; 0x24
 800290c:	429a      	cmp	r2, r3
 800290e:	d805      	bhi.n	800291c <chSchDoReschedule+0x3c>
 8002910:	69a0      	ldr	r0, [r4, #24]
 8002912:	4629      	mov	r1, r5
}
 8002914:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8002918:	f7fd bcb2 	b.w	8000280 <_port_switch>
 800291c:	4802      	ldr	r0, [pc, #8]	; (8002928 <chSchDoReschedule+0x48>)
 800291e:	f7ff fe47 	bl	80025b0 <chSysHalt>
 8002922:	bf00      	nop
 8002924:	20000b48 	.word	0x20000b48
 8002928:	08003378 	.word	0x08003378
 800292c:	00000000 	.word	0x00000000

08002930 <chSchReadyI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyI(thread_t *tp) {
 8002930:	b510      	push	{r4, lr}
 8002932:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8002934:	f7ff fea4 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8002938:	b1a4      	cbz	r4, 8002964 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 800293a:	f894 3020 	ldrb.w	r3, [r4, #32]
 800293e:	b18b      	cbz	r3, 8002964 <chSchReadyI+0x34>
 8002940:	2b0f      	cmp	r3, #15
 8002942:	d00f      	beq.n	8002964 <chSchReadyI+0x34>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8002944:	2200      	movs	r2, #0
 8002946:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8002948:	4b08      	ldr	r3, [pc, #32]	; (800296c <chSchReadyI+0x3c>)
  chDbgCheck(tp != NULL);
  chDbgAssert((tp->state != CH_STATE_READY) &&
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 800294a:	f884 2020 	strb.w	r2, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
 800294e:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	428a      	cmp	r2, r1
 8002954:	d2fb      	bcs.n	800294e <chSchReadyI+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
 8002956:	685a      	ldr	r2, [r3, #4]
 8002958:	6062      	str	r2, [r4, #4]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 800295a:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
  cp->queue.prev             = tp;

  return tp;
}
 800295c:	4620      	mov	r0, r4
    cp = cp->queue.next;
  } while (cp->prio >= tp->prio);
  /* Insertion on prev.*/
  tp->queue.next             = cp;
  tp->queue.prev             = cp->queue.prev;
  tp->queue.prev->queue.next = tp;
 800295e:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8002960:	605c      	str	r4, [r3, #4]

  return tp;
}
 8002962:	bd10      	pop	{r4, pc}
 */
thread_t *chSchReadyI(thread_t *tp) {
  thread_t *cp;

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 8002964:	4802      	ldr	r0, [pc, #8]	; (8002970 <chSchReadyI+0x40>)
 8002966:	f7ff fe23 	bl	80025b0 <chSysHalt>
 800296a:	bf00      	nop
 800296c:	20000b48 	.word	0x20000b48
 8002970:	08003548 	.word	0x08003548
	...

08002980 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8002980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002984:	4606      	mov	r6, r0
 8002986:	4688      	mov	r8, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8002988:	f7ff fe7a 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 800298c:	2e00      	cmp	r6, #0
 800298e:	d039      	beq.n	8002a04 <chEvtBroadcastFlagsI+0x84>

  elp = esp->next;
 8002990:	6834      	ldr	r4, [r6, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8002992:	42a6      	cmp	r6, r4
 8002994:	d029      	beq.n	80029ea <chEvtBroadcastFlagsI+0x6a>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8002996:	2700      	movs	r7, #0
 8002998:	e002      	b.n	80029a0 <chEvtBroadcastFlagsI+0x20>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 800299a:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 800299c:	42a6      	cmp	r6, r4
 800299e:	d024      	beq.n	80029ea <chEvtBroadcastFlagsI+0x6a>
  /*lint -restore*/
    elp->flags |= flags;
 80029a0:	68e3      	ldr	r3, [r4, #12]
 80029a2:	ea48 0303 	orr.w	r3, r8, r3
 80029a6:	60e3      	str	r3, [r4, #12]
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80029a8:	f1b8 0f00 	cmp.w	r8, #0
 80029ac:	d002      	beq.n	80029b4 <chEvtBroadcastFlagsI+0x34>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 80029ae:	6922      	ldr	r2, [r4, #16]
  while (elp != (event_listener_t *)esp) {
  /*lint -restore*/
    elp->flags |= flags;
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
 80029b0:	4213      	tst	r3, r2
 80029b2:	d0f2      	beq.n	800299a <chEvtBroadcastFlagsI+0x1a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
 80029b4:	6865      	ldr	r5, [r4, #4]
 80029b6:	f8d4 9008 	ldr.w	r9, [r4, #8]
 *
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
 80029ba:	f7ff fe61 	bl	8002680 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 80029be:	b1f5      	cbz	r5, 80029fe <chEvtBroadcastFlagsI+0x7e>

  tp->epending |= events;
 80029c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029c2:	f895 2020 	ldrb.w	r2, [r5, #32]
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80029c6:	ea49 0303 	orr.w	r3, r9, r3
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029ca:	2a0a      	cmp	r2, #10
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
 80029cc:	636b      	str	r3, [r5, #52]	; 0x34
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029ce:	d00e      	beq.n	80029ee <chEvtBroadcastFlagsI+0x6e>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80029d0:	2a0b      	cmp	r2, #11
 80029d2:	d1e2      	bne.n	800299a <chEvtBroadcastFlagsI+0x1a>
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 80029d4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80029d6:	4013      	ands	r3, r2

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
 80029d8:	429a      	cmp	r2, r3
 80029da:	d1de      	bne.n	800299a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80029dc:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80029de:	4628      	mov	r0, r5
 80029e0:	f7ff ffa6 	bl	8002930 <chSchReadyI>
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
 80029e4:	6824      	ldr	r4, [r4, #0]
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80029e6:	42a6      	cmp	r6, r4
 80029e8:	d1da      	bne.n	80029a0 <chEvtBroadcastFlagsI+0x20>
 80029ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80029ee:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  chDbgCheckClassI();
  chDbgCheck(tp != NULL);

  tp->epending |= events;
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
 80029f0:	4213      	tst	r3, r2
 80029f2:	d0d2      	beq.n	800299a <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80029f4:	626f      	str	r7, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 80029f6:	4628      	mov	r0, r5
 80029f8:	f7ff ff9a 	bl	8002930 <chSchReadyI>
 80029fc:	e7f2      	b.n	80029e4 <chEvtBroadcastFlagsI+0x64>
 * @iclass
 */
void chEvtSignalI(thread_t *tp, eventmask_t events) {

  chDbgCheckClassI();
  chDbgCheck(tp != NULL);
 80029fe:	4803      	ldr	r0, [pc, #12]	; (8002a0c <chEvtBroadcastFlagsI+0x8c>)
 8002a00:	f7ff fdd6 	bl	80025b0 <chSysHalt>
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);
 8002a04:	4802      	ldr	r0, [pc, #8]	; (8002a10 <chEvtBroadcastFlagsI+0x90>)
 8002a06:	f7ff fdd3 	bl	80025b0 <chSysHalt>
 8002a0a:	bf00      	nop
 8002a0c:	080034dc 	.word	0x080034dc
 8002a10:	080034c4 	.word	0x080034c4
	...

08002a20 <_dbg_check_leave_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_EPILOGUE().
 *
 * @notapi
 */
void _dbg_check_leave_isr(void) {
 8002a20:	b508      	push	{r3, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8002a22:	2320      	movs	r3, #32
 8002a24:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002a28:	4a06      	ldr	r2, [pc, #24]	; (8002a44 <_dbg_check_leave_isr+0x24>)
 8002a2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	dd01      	ble.n	8002a34 <_dbg_check_leave_isr+0x14>
 8002a30:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002a32:	b111      	cbz	r1, 8002a3a <_dbg_check_leave_isr+0x1a>
    chSysHalt("SV#9");
 8002a34:	4804      	ldr	r0, [pc, #16]	; (8002a48 <_dbg_check_leave_isr+0x28>)
 8002a36:	f7ff fdbb 	bl	80025b0 <chSysHalt>
  }
  ch.dbg.isr_cnt--;
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3e:	f381 8811 	msr	BASEPRI, r1
 8002a42:	bd08      	pop	{r3, pc}
 8002a44:	20000b48 	.word	0x20000b48
 8002a48:	080034fc 	.word	0x080034fc
 8002a4c:	00000000 	.word	0x00000000

08002a50 <_dbg_check_enter_isr>:
/**
 * @brief   Guard code for @p CH_IRQ_PROLOGUE().
 *
 * @notapi
 */
void _dbg_check_enter_isr(void) {
 8002a50:	b508      	push	{r3, lr}
 8002a52:	2320      	movs	r3, #32
 8002a54:	f383 8811 	msr	BASEPRI, r3

  port_lock_from_isr();
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002a58:	4a06      	ldr	r2, [pc, #24]	; (8002a74 <_dbg_check_enter_isr+0x24>)
 8002a5a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db01      	blt.n	8002a64 <_dbg_check_enter_isr+0x14>
 8002a60:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8002a62:	b111      	cbz	r1, 8002a6a <_dbg_check_enter_isr+0x1a>
    chSysHalt("SV#8");
 8002a64:	4804      	ldr	r0, [pc, #16]	; (8002a78 <_dbg_check_enter_isr+0x28>)
 8002a66:	f7ff fda3 	bl	80025b0 <chSysHalt>
  }
  ch.dbg.isr_cnt++;
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a6e:	f381 8811 	msr	BASEPRI, r1
 8002a72:	bd08      	pop	{r3, pc}
 8002a74:	20000b48 	.word	0x20000b48
 8002a78:	08003504 	.word	0x08003504
 8002a7c:	00000000 	.word	0x00000000

08002a80 <_dbg_check_unlock_from_isr>:
/**
 * @brief   Guard code for @p chSysUnlockFromIsr().
 *
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {
 8002a80:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <_dbg_check_unlock_from_isr+0x1c>)
 8002a84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a86:	2a00      	cmp	r2, #0
 8002a88:	dd05      	ble.n	8002a96 <_dbg_check_unlock_from_isr+0x16>
 8002a8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a8c:	2a00      	cmp	r2, #0
 8002a8e:	dd02      	ble.n	8002a96 <_dbg_check_unlock_from_isr+0x16>
    chSysHalt("SV#7");
  }
  _dbg_leave_lock();
 8002a90:	2200      	movs	r2, #0
 8002a92:	635a      	str	r2, [r3, #52]	; 0x34
 8002a94:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock_from_isr(void) {

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#7");
 8002a96:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <_dbg_check_unlock_from_isr+0x20>)
 8002a98:	f7ff fd8a 	bl	80025b0 <chSysHalt>
 8002a9c:	20000b48 	.word	0x20000b48
 8002aa0:	0800350c 	.word	0x0800350c
	...

08002ab0 <_dbg_check_lock_from_isr>:
/**
 * @brief   Guard code for @p chSysLockFromIsr().
 *
 * @notapi
 */
void _dbg_check_lock_from_isr(void) {
 8002ab0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <_dbg_check_lock_from_isr+0x1c>)
 8002ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ab6:	2a00      	cmp	r2, #0
 8002ab8:	dd01      	ble.n	8002abe <_dbg_check_lock_from_isr+0xe>
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	b112      	cbz	r2, 8002ac4 <_dbg_check_lock_from_isr+0x14>
    chSysHalt("SV#6");
 8002abe:	4804      	ldr	r0, [pc, #16]	; (8002ad0 <_dbg_check_lock_from_isr+0x20>)
 8002ac0:	f7ff fd76 	bl	80025b0 <chSysHalt>
  }
  _dbg_enter_lock();
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac8:	bd08      	pop	{r3, pc}
 8002aca:	bf00      	nop
 8002acc:	20000b48 	.word	0x20000b48
 8002ad0:	08003514 	.word	0x08003514
	...

08002ae0 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8002ae0:	b538      	push	{r3, r4, r5, lr}
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	2320      	movs	r3, #32
 8002ae6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 8002aea:	f7ff ffe1 	bl	8002ab0 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 8002aee:	f894 3020 	ldrb.w	r3, [r4, #32]
 8002af2:	2b07      	cmp	r3, #7
 8002af4:	d810      	bhi.n	8002b18 <wakeup+0x38>
 8002af6:	e8df f003 	tbb	[pc, r3]
 8002afa:	0f15      	.short	0x0f15
 8002afc:	040a1b0f 	.word	0x040a1b0f
 8002b00:	0a0f      	.short	0x0a0f
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8002b02:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8002b04:	f7ff fdbc 	bl	8002680 <chDbgCheckClassI>

  sp->cnt++;
 8002b08:	68ab      	ldr	r3, [r5, #8]
 8002b0a:	3301      	adds	r3, #1
 8002b0c:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8002b0e:	e894 000c 	ldmia.w	r4, {r2, r3}
 8002b12:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8002b14:	6822      	ldr	r2, [r4, #0]
 8002b16:	6053      	str	r3, [r2, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8002b18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b1c:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f7ff ff06 	bl	8002930 <chSchReadyI>
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8002b24:	f7ff ffac 	bl	8002a80 <_dbg_check_unlock_from_isr>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	f383 8811 	msr	BASEPRI, r3
 8002b2e:	bd38      	pop	{r3, r4, r5, pc}
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 8002b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b32:	2200      	movs	r2, #0
 8002b34:	601a      	str	r2, [r3, #0]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 8002b36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b3a:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	f7ff fef7 	bl	8002930 <chSchReadyI>
 8002b42:	e7ef      	b.n	8002b24 <wakeup+0x44>
	...

08002b50 <_dbg_check_unlock>:
/**
 * @brief   Guard code for @p chSysUnlock().
 *
 * @notapi
 */
void _dbg_check_unlock(void) {
 8002b50:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8002b52:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <_dbg_check_unlock+0x18>)
 8002b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b56:	b922      	cbnz	r2, 8002b62 <_dbg_check_unlock+0x12>
 8002b58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b5a:	2900      	cmp	r1, #0
 8002b5c:	dd01      	ble.n	8002b62 <_dbg_check_unlock+0x12>
    chSysHalt("SV#5");
  }
  _dbg_leave_lock();
 8002b5e:	635a      	str	r2, [r3, #52]	; 0x34
 8002b60:	bd08      	pop	{r3, pc}
 * @notapi
 */
void _dbg_check_unlock(void) {

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
    chSysHalt("SV#5");
 8002b62:	4802      	ldr	r0, [pc, #8]	; (8002b6c <_dbg_check_unlock+0x1c>)
 8002b64:	f7ff fd24 	bl	80025b0 <chSysHalt>
 8002b68:	20000b48 	.word	0x20000b48
 8002b6c:	0800351c 	.word	0x0800351c

08002b70 <_dbg_check_lock>:
/**
 * @brief   Guard code for @p chSysLock().
 *
 * @notapi
 */
void _dbg_check_lock(void) {
 8002b70:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <_dbg_check_lock+0x18>)
 8002b74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b76:	b90a      	cbnz	r2, 8002b7c <_dbg_check_lock+0xc>
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	b112      	cbz	r2, 8002b82 <_dbg_check_lock+0x12>
    chSysHalt("SV#4");
 8002b7c:	4803      	ldr	r0, [pc, #12]	; (8002b8c <_dbg_check_lock+0x1c>)
 8002b7e:	f7ff fd17 	bl	80025b0 <chSysHalt>
  }
  _dbg_enter_lock();
 8002b82:	2201      	movs	r2, #1
 8002b84:	635a      	str	r2, [r3, #52]	; 0x34
 8002b86:	bd08      	pop	{r3, pc}
 8002b88:	20000b48 	.word	0x20000b48
 8002b8c:	08003524 	.word	0x08003524

08002b90 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	2320      	movs	r3, #32
 8002b94:	4606      	mov	r6, r0
 8002b96:	460d      	mov	r5, r1
 8002b98:	4614      	mov	r4, r2
 8002b9a:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002b9e:	f7ff ffe7 	bl	8002b70 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	4630      	mov	r0, r6
 8002ba8:	f7ff fd7a 	bl	80026a0 <chCoreAllocAlignedWithOffsetI>
 8002bac:	4604      	mov	r4, r0
 *
 * @special
 */
static inline void chSysUnlock(void) {

  _dbg_check_unlock();
 8002bae:	f7ff ffcf 	bl	8002b50 <_dbg_check_unlock>

  /* The following condition can be triggered by the use of i-class functions
     in a critical section not followed by a chSchResceduleS(), this means
     that the current thread has a lower priority than the next thread in
     the ready list.*/
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8002bb2:	4b08      	ldr	r3, [pc, #32]	; (8002bd4 <chCoreAllocAlignedWithOffset+0x44>)
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d004      	beq.n	8002bc4 <chCoreAllocAlignedWithOffset+0x34>
 8002bba:	6999      	ldr	r1, [r3, #24]
 8002bbc:	6893      	ldr	r3, [r2, #8]
 8002bbe:	688a      	ldr	r2, [r1, #8]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d304      	bcc.n	8002bce <chCoreAllocAlignedWithOffset+0x3e>
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 8002bca:	4620      	mov	r0, r4
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	4802      	ldr	r0, [pc, #8]	; (8002bd8 <chCoreAllocAlignedWithOffset+0x48>)
 8002bd0:	f7ff fcee 	bl	80025b0 <chSysHalt>
 8002bd4:	20000b48 	.word	0x20000b48
 8002bd8:	0800353c 	.word	0x0800353c
 8002bdc:	00000000 	.word	0x00000000

08002be0 <chThdExit>:
 *
 * @param[in] msg       thread exit code
 *
 * @api
 */
void chThdExit(msg_t msg) {
 8002be0:	b508      	push	{r3, lr}
 8002be2:	4605      	mov	r5, r0
 8002be4:	2320      	movs	r3, #32
 8002be6:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 8002bea:	f7ff ffc1 	bl	8002b70 <_dbg_check_lock>
 * @param[in] msg       thread exit code
 *
 * @sclass
 */
void chThdExitS(msg_t msg) {
  thread_t *tp = currp;
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <chThdExit+0x50>)
 8002bf0:	699c      	ldr	r4, [r3, #24]
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8002bf2:	6aa0      	ldr	r0, [r4, #40]	; 0x28

  /* Storing exit message.*/
  tp->u.exitcode = msg;
 8002bf4:	6265      	str	r5, [r4, #36]	; 0x24
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8002bf6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8002bfa:	42a8      	cmp	r0, r5
 8002bfc:	d006      	beq.n	8002c0c <chThdExit+0x2c>
}

static inline thread_t *list_remove(threads_list_t *tlp) {

  thread_t *tp = tlp->next;
  tlp->next = tp->queue.next;
 8002bfe:	6803      	ldr	r3, [r0, #0]
 8002c00:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8002c02:	f7ff fe95 	bl	8002930 <chSchReadyI>
 *
 * @notapi
 */
static inline bool list_notempty(threads_list_t *tlp) {

  return (bool)(tlp->next != (thread_t *)tlp);
 8002c06:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  /* Exit handler hook.*/
  CH_CFG_THREAD_EXIT_HOOK(tp);

#if CH_CFG_USE_WAITEXIT == TRUE
  /* Waking up any waiting thread.*/
  while (list_notempty(&tp->waiting)) {
 8002c08:	42a8      	cmp	r0, r5
 8002c0a:	d1f8      	bne.n	8002bfe <chThdExit+0x1e>

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002c0c:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002c10:	b943      	cbnz	r3, 8002c24 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
 8002c12:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21

#if CH_CFG_USE_REGISTRY == TRUE
  /* Static threads with no references are immediately removed from the
     registry because there is no memory to recover.*/
#if CH_CFG_USE_DYNAMIC == TRUE
  if ((tp->refs == (trefs_t)0) &&
 8002c16:	079b      	lsls	r3, r3, #30
 8002c18:	d104      	bne.n	8002c24 <chThdExit+0x44>
      ((tp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC)) {
    REG_REMOVE(tp);
 8002c1a:	6963      	ldr	r3, [r4, #20]
 8002c1c:	6922      	ldr	r2, [r4, #16]
 8002c1e:	611a      	str	r2, [r3, #16]
 8002c20:	6922      	ldr	r2, [r4, #16]
 8002c22:	6153      	str	r3, [r2, #20]
  }
#endif
#endif

  /* Going into final state.*/
  chSchGoSleepS(CH_STATE_FINAL);
 8002c24:	200f      	movs	r0, #15
 8002c26:	f7ff fd03 	bl	8002630 <chSchGoSleepS>

  /* The thread never returns here.*/
  chDbgAssert(false, "zombies apocalypse");
 8002c2a:	4802      	ldr	r0, [pc, #8]	; (8002c34 <chThdExit+0x54>)
 8002c2c:	f7ff fcc0 	bl	80025b0 <chSysHalt>
 8002c30:	20000b48 	.word	0x20000b48
 8002c34:	08003560 	.word	0x08003560
	...

08002c40 <long_to_string_with_divisor.constprop.2>:
#include "memstreams.h"

#define MAX_FILLER 11
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
 8002c40:	b4f0      	push	{r4, r5, r6, r7}
    ll = num;
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8002c42:	f100 070b 	add.w	r7, r0, #11
 8002c46:	463c      	mov	r4, r7
 8002c48:	460d      	mov	r5, r1
  do {
    i = (int)(l % radix);
 8002c4a:	fbb1 f6f2 	udiv	r6, r1, r2
 8002c4e:	fb02 1116 	mls	r1, r2, r6, r1
    i += '0';
 8002c52:	f101 0330 	add.w	r3, r1, #48	; 0x30
    if (i > '9')
 8002c56:	2b39      	cmp	r3, #57	; 0x39
      i += 'A' - '0' - 10;
 8002c58:	bfc8      	it	gt
 8002c5a:	f101 0337 	addgt.w	r3, r1, #55	; 0x37
    *--q = i;
 8002c5e:	b2db      	uxtb	r3, r3
 8002c60:	f804 3d01 	strb.w	r3, [r4, #-1]!
    l /= radix;
  } while ((ll /= radix) != 0);
 8002c64:	fbb5 f5f2 	udiv	r5, r5, r2
    i = (int)(l % radix);
    i += '0';
    if (i > '9')
      i += 'A' - '0' - 10;
    *--q = i;
    l /= radix;
 8002c68:	4631      	mov	r1, r6
  } while ((ll /= radix) != 0);
 8002c6a:	2d00      	cmp	r5, #0
 8002c6c:	d1ed      	bne.n	8002c4a <long_to_string_with_divisor.constprop.2+0xa>

  i = (int)(p + MAX_FILLER - q);
 8002c6e:	1b3a      	subs	r2, r7, r4
 8002c70:	4402      	add	r2, r0
 8002c72:	e001      	b.n	8002c78 <long_to_string_with_divisor.constprop.2+0x38>
 8002c74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
  do
    *p++ = *q++;
 8002c78:	f800 3b01 	strb.w	r3, [r0], #1
  while (--i);
 8002c7c:	4290      	cmp	r0, r2
 8002c7e:	d1f9      	bne.n	8002c74 <long_to_string_with_divisor.constprop.2+0x34>

  return p;
}
 8002c80:	bcf0      	pop	{r4, r5, r6, r7}
 8002c82:	4770      	bx	lr
	...

08002c90 <chThdDequeueNextI.constprop.10>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8002c90:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8002c92:	6803      	ldr	r3, [r0, #0]

  if (queue_notempty(tqp)) {
 8002c94:	4298      	cmp	r0, r3
 8002c96:	d009      	beq.n	8002cac <chThdDequeueNextI.constprop.10+0x1c>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	6002      	str	r2, [r0, #0]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8002c9c:	f893 1020 	ldrb.w	r1, [r3, #32]
  tqp->next->queue.prev = (thread_t *)tqp;
 8002ca0:	6050      	str	r0, [r2, #4]
 8002ca2:	2904      	cmp	r1, #4
 8002ca4:	d003      	beq.n	8002cae <chThdDequeueNextI.constprop.10+0x1e>
 8002ca6:	4805      	ldr	r0, [pc, #20]	; (8002cbc <chThdDequeueNextI.constprop.10+0x2c>)
 8002ca8:	f7ff fc82 	bl	80025b0 <chSysHalt>
 8002cac:	bd08      	pop	{r3, pc}

  tp->u.rdymsg = msg;
 8002cae:	2200      	movs	r2, #0
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8002cb2:	4618      	mov	r0, r3
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8002cb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cb8:	f7ff be3a 	b.w	8002930 <chSchReadyI>
 8002cbc:	0800356c 	.word	0x0800356c

08002cc0 <chThdResumeI.constprop.9>:
 * @param[in] trp       a pointer to a thread reference object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8002cc0:	b508      	push	{r3, lr}

  if (*trp != NULL) {
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	b183      	cbz	r3, 8002ce8 <chThdResumeI.constprop.9+0x28>
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8002cc6:	f893 2020 	ldrb.w	r2, [r3, #32]
 8002cca:	2a03      	cmp	r2, #3
 8002ccc:	d002      	beq.n	8002cd4 <chThdResumeI.constprop.9+0x14>
 8002cce:	4807      	ldr	r0, [pc, #28]	; (8002cec <chThdResumeI.constprop.9+0x2c>)
 8002cd0:	f7ff fc6e 	bl	80025b0 <chSysHalt>

    *trp = NULL;
 8002cd4:	2100      	movs	r1, #0
    tp->u.rdymsg = msg;
 8002cd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
  if (*trp != NULL) {
    thread_t *tp = *trp;

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
 8002cda:	6001      	str	r1, [r0, #0]
    tp->u.rdymsg = msg;
 8002cdc:	625a      	str	r2, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8002cde:	4618      	mov	r0, r3
  }
}
 8002ce0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");

    *trp = NULL;
    tp->u.rdymsg = msg;
    (void) chSchReadyI(tp);
 8002ce4:	f7ff be24 	b.w	8002930 <chSchReadyI>
 8002ce8:	bd08      	pop	{r3, pc}
 8002cea:	bf00      	nop
 8002cec:	08003588 	.word	0x08003588

08002cf0 <chTMStartMeasurementX.constprop.3>:
 8002cf0:	4b01      	ldr	r3, [pc, #4]	; (8002cf8 <chTMStartMeasurementX.constprop.3+0x8>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 *
 * @xclass
 */
NOINLINE void chTMStartMeasurementX(time_measurement_t *tmp) {

  tmp->last = chSysGetRealtimeCounterX();
 8002cf4:	6083      	str	r3, [r0, #8]
 8002cf6:	4770      	bx	lr
 8002cf8:	e0001000 	.word	0xe0001000
 8002cfc:	00000000 	.word	0x00000000

08002d00 <chprintf.constprop.0>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8002d00:	b40e      	push	{r1, r2, r3}
 8002d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	ad0f      	add	r5, sp, #60	; 0x3c
 8002d0a:	f10d 030d 	add.w	r3, sp, #13
 8002d0e:	aa03      	add	r2, sp, #12
 8002d10:	f855 ab04 	ldr.w	sl, [r5], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8002d14:	9502      	str	r5, [sp, #8]
 8002d16:	1a9b      	subs	r3, r3, r2
 * @api
 */
int chvprintf(BaseSequentialStream *chp, const char *fmt, va_list ap) {
  char *p, *s, c, filler;
  int i, precision, width;
  int n = 0;
 8002d18:	f04f 0800 	mov.w	r8, #0
 8002d1c:	9301      	str	r3, [sp, #4]
 8002d1e:	f8cd 8000 	str.w	r8, [sp]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002d22:	f89a 1000 	ldrb.w	r1, [sl]
 8002d26:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 8002d2a:	b191      	cbz	r1, 8002d52 <chprintf.constprop.0+0x52>
      return n;
    if (c != '%') {
 8002d2c:	2925      	cmp	r1, #37	; 0x25
 8002d2e:	d018      	beq.n	8002d62 <chprintf.constprop.0+0x62>
      streamPut(chp, (uint8_t)c);
 8002d30:	f8df 82fc 	ldr.w	r8, [pc, #764]	; 8003030 <chprintf.constprop.0+0x330>
      n++;
 8002d34:	9a00      	ldr	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002d36:	f8d8 0000 	ldr.w	r0, [r8]
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002d3a:	469a      	mov	sl, r3
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002d3c:	68c4      	ldr	r4, [r0, #12]
      n++;
 8002d3e:	3201      	adds	r2, #1
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002d40:	4640      	mov	r0, r8
      n++;
 8002d42:	9200      	str	r2, [sp, #0]
  while (true) {
    c = *fmt++;
    if (c == 0)
      return n;
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
 8002d44:	47a0      	blx	r4
#else
  char tmpbuf[MAX_FILLER + 1];
#endif

  while (true) {
    c = *fmt++;
 8002d46:	f89a 1000 	ldrb.w	r1, [sl]
 8002d4a:	f10a 0301 	add.w	r3, sl, #1
    if (c == 0)
 8002d4e:	2900      	cmp	r1, #0
 8002d50:	d1ec      	bne.n	8002d2c <chprintf.constprop.0+0x2c>
 8002d52:	f8dd 8000 	ldr.w	r8, [sp]
  va_start(ap, fmt);
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8002d56:	4640      	mov	r0, r8
 8002d58:	b006      	add	sp, #24
 8002d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d5e:	b003      	add	sp, #12
 8002d60:	4770      	bx	lr
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
    if (*fmt == '-') {
 8002d62:	f89a 2001 	ldrb.w	r2, [sl, #1]
 8002d66:	2a2d      	cmp	r2, #45	; 0x2d
 8002d68:	bf03      	ittte	eq
 8002d6a:	f89a 2002 	ldrbeq.w	r2, [sl, #2]
      fmt++;
 8002d6e:	f10a 0302 	addeq.w	r3, sl, #2
      left_align = TRUE;
 8002d72:	2701      	moveq	r7, #1
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
    left_align = FALSE;
 8002d74:	2700      	movne	r7, #0
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
    if (*fmt == '0') {
 8002d76:	2a30      	cmp	r2, #48	; 0x30
 8002d78:	bf03      	ittte	eq
 8002d7a:	785a      	ldrbeq	r2, [r3, #1]
      fmt++;
 8002d7c:	3301      	addeq	r3, #1
      filler = '0';
 8002d7e:	2430      	moveq	r4, #48	; 0x30
    left_align = FALSE;
    if (*fmt == '-') {
      fmt++;
      left_align = TRUE;
    }
    filler = ' ';
 8002d80:	2420      	movne	r4, #32
 8002d82:	1c59      	adds	r1, r3, #1
    if (*fmt == '0') {
      fmt++;
      filler = '0';
    }
    width = 0;
 8002d84:	2600      	movs	r6, #0
 8002d86:	e006      	b.n	8002d96 <chprintf.constprop.0+0x96>
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
 8002d88:	782b      	ldrb	r3, [r5, #0]
 8002d8a:	3504      	adds	r5, #4
 8002d8c:	f89a 2000 	ldrb.w	r2, [sl]
      else
        break;
      width = width * 10 + c;
 8002d90:	eb03 0640 	add.w	r6, r3, r0, lsl #1
 8002d94:	3101      	adds	r1, #1
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002d96:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b09      	cmp	r3, #9
      fmt++;
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
 8002d9e:	468a      	mov	sl, r1
        c -= '0';
      else if (c == '*')
        c = va_arg(ap, int);
      else
        break;
      width = width * 10 + c;
 8002da0:	eb06 0086 	add.w	r0, r6, r6, lsl #2
      filler = '0';
    }
    width = 0;
    while (TRUE) {
      c = *fmt++;
      if (c >= '0' && c <= '9')
 8002da4:	d9f2      	bls.n	8002d8c <chprintf.constprop.0+0x8c>
        c -= '0';
      else if (c == '*')
 8002da6:	2a2a      	cmp	r2, #42	; 0x2a
 8002da8:	d0ee      	beq.n	8002d88 <chprintf.constprop.0+0x88>
      else
        break;
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
 8002daa:	2a2e      	cmp	r2, #46	; 0x2e
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	d043      	beq.n	8002e3a <chprintf.constprop.0+0x13a>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002db2:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002db6:	2b4c      	cmp	r3, #76	; 0x4c
 8002db8:	d04e      	beq.n	8002e58 <chprintf.constprop.0+0x158>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002dba:	f1a2 0044 	sub.w	r0, r2, #68	; 0x44
 8002dbe:	2834      	cmp	r0, #52	; 0x34
 8002dc0:	f200 8104 	bhi.w	8002fcc <chprintf.constprop.0+0x2cc>
 8002dc4:	e8df f010 	tbh	[pc, r0, lsl #1]
 8002dc8:	010200f7 	.word	0x010200f7
 8002dcc:	01020102 	.word	0x01020102
 8002dd0:	00f70102 	.word	0x00f70102
 8002dd4:	01020102 	.word	0x01020102
 8002dd8:	01020102 	.word	0x01020102
 8002ddc:	00f50102 	.word	0x00f50102
 8002de0:	01020102 	.word	0x01020102
 8002de4:	01020102 	.word	0x01020102
 8002de8:	00e90102 	.word	0x00e90102
 8002dec:	01020102 	.word	0x01020102
 8002df0:	010200ff 	.word	0x010200ff
 8002df4:	01020102 	.word	0x01020102
 8002df8:	01020102 	.word	0x01020102
 8002dfc:	01020102 	.word	0x01020102
 8002e00:	01020102 	.word	0x01020102
 8002e04:	00be0102 	.word	0x00be0102
 8002e08:	010200f7 	.word	0x010200f7
 8002e0c:	01020102 	.word	0x01020102
 8002e10:	00f70102 	.word	0x00f70102
 8002e14:	01020102 	.word	0x01020102
 8002e18:	01020102 	.word	0x01020102
 8002e1c:	00f50102 	.word	0x00f50102
 8002e20:	01020102 	.word	0x01020102
 8002e24:	00710102 	.word	0x00710102
 8002e28:	00e90102 	.word	0x00e90102
 8002e2c:	01020102 	.word	0x01020102
 8002e30:	00ff      	.short	0x00ff
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
 8002e32:	782b      	ldrb	r3, [r5, #0]
 8002e34:	3504      	adds	r5, #4
        else
          break;
        precision *= 10;
        precision += c;
 8002e36:	eb03 0140 	add.w	r1, r3, r0, lsl #1
      width = width * 10 + c;
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
 8002e3a:	f81a 2b01 	ldrb.w	r2, [sl], #1
        if (c >= '0' && c <= '9')
 8002e3e:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	2b09      	cmp	r3, #9
          c -= '0';
        else if (c == '*')
          c = va_arg(ap, int);
        else
          break;
        precision *= 10;
 8002e46:	eb01 0081 	add.w	r0, r1, r1, lsl #2
    }
    precision = 0;
    if (c == '.') {
      while (TRUE) {
        c = *fmt++;
        if (c >= '0' && c <= '9')
 8002e4a:	d9f4      	bls.n	8002e36 <chprintf.constprop.0+0x136>
          c -= '0';
        else if (c == '*')
 8002e4c:	2a2a      	cmp	r2, #42	; 0x2a
 8002e4e:	d0f0      	beq.n	8002e32 <chprintf.constprop.0+0x132>
        precision *= 10;
        precision += c;
      }
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
 8002e50:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8002e54:	2b4c      	cmp	r3, #76	; 0x4c
 8002e56:	d1b0      	bne.n	8002dba <chprintf.constprop.0+0xba>
      is_long = TRUE;
      if (*fmt)
 8002e58:	f89a 3000 	ldrb.w	r3, [sl]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80b5 	beq.w	8002fcc <chprintf.constprop.0+0x2cc>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002e62:	f1a3 0244 	sub.w	r2, r3, #68	; 0x44
    }
    /* Long modifier.*/
    if (c == 'l' || c == 'L') {
      is_long = TRUE;
      if (*fmt)
        c = *fmt++;
 8002e66:	f10a 0a01 	add.w	sl, sl, #1
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002e6a:	2a34      	cmp	r2, #52	; 0x34
 8002e6c:	f200 80ad 	bhi.w	8002fca <chprintf.constprop.0+0x2ca>
 8002e70:	e8df f002 	tbb	[pc, r2]
 8002e74:	abababa1 	.word	0xabababa1
 8002e78:	ababa1ab 	.word	0xababa1ab
 8002e7c:	9fababab 	.word	0x9fababab
 8002e80:	abababab 	.word	0xabababab
 8002e84:	abab93ab 	.word	0xabab93ab
 8002e88:	abababa9 	.word	0xabababa9
 8002e8c:	abababab 	.word	0xabababab
 8002e90:	68ababab 	.word	0x68ababab
 8002e94:	abababa1 	.word	0xabababa1
 8002e98:	ababa1ab 	.word	0xababa1ab
 8002e9c:	9fababab 	.word	0x9fababab
 8002ea0:	1bababab 	.word	0x1bababab
 8002ea4:	abab93ab 	.word	0xabab93ab
 8002ea8:	a9          	.byte	0xa9
 8002ea9:	00          	.byte	0x00
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002eaa:	f8d5 9000 	ldr.w	r9, [r5]
        s = "(null)";
 8002eae:	4b5f      	ldr	r3, [pc, #380]	; (800302c <chprintf.constprop.0+0x32c>)
 8002eb0:	f1b9 0f00 	cmp.w	r9, #0
 8002eb4:	bf08      	it	eq
 8002eb6:	4699      	moveq	r9, r3
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
 8002eb8:	3504      	adds	r5, #4
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002eba:	f899 3000 	ldrb.w	r3, [r9]
      break;
    case 's':
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
 8002ebe:	2900      	cmp	r1, #0
 8002ec0:	f000 809e 	beq.w	8003000 <chprintf.constprop.0+0x300>
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80a0 	beq.w	800300a <chprintf.constprop.0+0x30a>
 8002eca:	3901      	subs	r1, #1
 8002ecc:	4648      	mov	r0, r9
 8002ece:	e001      	b.n	8002ed4 <chprintf.constprop.0+0x1d4>
 8002ed0:	3901      	subs	r1, #1
 8002ed2:	d403      	bmi.n	8002edc <chprintf.constprop.0+0x1dc>
 8002ed4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f9      	bne.n	8002ed0 <chprintf.constprop.0+0x1d0>
 8002edc:	ebc9 0000 	rsb	r0, r9, r0
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002ee0:	1a36      	subs	r6, r6, r0
 8002ee2:	1e43      	subs	r3, r0, #1
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
      break;
    case 's':
      filler = ' ';
 8002ee4:	2420      	movs	r4, #32
 8002ee6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002eea:	2f00      	cmp	r7, #0
 8002eec:	d039      	beq.n	8002f62 <chprintf.constprop.0+0x262>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002eee:	1e1f      	subs	r7, r3, #0
 8002ef0:	db16      	blt.n	8002f20 <chprintf.constprop.0+0x220>
 8002ef2:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8003030 <chprintf.constprop.0+0x330>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8002ef6:	46bb      	mov	fp, r7
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
 8002ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8002efc:	484c      	ldr	r0, [pc, #304]	; (8003030 <chprintf.constprop.0+0x330>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f819 1b01 	ldrb.w	r1, [r9], #1
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002f04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
      streamPut(chp, (uint8_t)*s++);
 8002f08:	4798      	blx	r3
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002f0a:	f1bb 3fff 	cmp.w	fp, #4294967295	; 0xffffffff
 8002f0e:	d1f3      	bne.n	8002ef8 <chprintf.constprop.0+0x1f8>
 8002f10:	9b00      	ldr	r3, [sp, #0]
 8002f12:	f103 0801 	add.w	r8, r3, #1
 8002f16:	4643      	mov	r3, r8
 8002f18:	2f00      	cmp	r7, #0
 8002f1a:	bfa8      	it	ge
 8002f1c:	19db      	addge	r3, r3, r7
 8002f1e:	9300      	str	r3, [sp, #0]
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002f20:	2e00      	cmp	r6, #0
 8002f22:	f43f aefe 	beq.w	8002d22 <chprintf.constprop.0+0x22>
 8002f26:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8003030 <chprintf.constprop.0+0x330>
 8002f2a:	4637      	mov	r7, r6
      streamPut(chp, (uint8_t)filler);
 8002f2c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f30:	483f      	ldr	r0, [pc, #252]	; (8003030 <chprintf.constprop.0+0x330>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	4621      	mov	r1, r4
 8002f36:	4798      	blx	r3
    while (--i >= 0) {
      streamPut(chp, (uint8_t)*s++);
      n++;
    }

    while (width) {
 8002f38:	3f01      	subs	r7, #1
 8002f3a:	d1f7      	bne.n	8002f2c <chprintf.constprop.0+0x22c>
 8002f3c:	9b00      	ldr	r3, [sp, #0]
 8002f3e:	4433      	add	r3, r6
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	e6ee      	b.n	8002d22 <chprintf.constprop.0+0x22>

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
      *p++ = va_arg(ap, int);
 8002f44:	682b      	ldr	r3, [r5, #0]
 8002f46:	f88d 300c 	strb.w	r3, [sp, #12]
 8002f4a:	9b01      	ldr	r3, [sp, #4]
 8002f4c:	3504      	adds	r5, #4
 8002f4e:	4618      	mov	r0, r3
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
    case 'c':
      filler = ' ';
 8002f50:	2420      	movs	r4, #32
 8002f52:	3b01      	subs	r3, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002f54:	f10d 090c 	add.w	r9, sp, #12
    default:
      *p++ = c;
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
 8002f58:	1a36      	subs	r6, r6, r0
 8002f5a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      width = 0;
    if (left_align == FALSE)
 8002f5e:	2f00      	cmp	r7, #0
 8002f60:	d1c5      	bne.n	8002eee <chprintf.constprop.0+0x1ee>
 8002f62:	461f      	mov	r7, r3
      width = -width;
 8002f64:	f1c6 0b00 	rsb	fp, r6, #0
    if (width < 0) {
 8002f68:	f1bb 0f00 	cmp.w	fp, #0
 8002f6c:	d036      	beq.n	8002fdc <chprintf.constprop.0+0x2dc>
      if (*s == '-' && filler == '0') {
 8002f6e:	f899 1000 	ldrb.w	r1, [r9]
        streamPut(chp, (uint8_t)*s++);
 8002f72:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8003030 <chprintf.constprop.0+0x330>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002f76:	292d      	cmp	r1, #45	; 0x2d
 8002f78:	d034      	beq.n	8002fe4 <chprintf.constprop.0+0x2e4>
        streamPut(chp, (uint8_t)*s++);
        n++;
 8002f7a:	465e      	mov	r6, fp
        i--;
      }
      do {
        streamPut(chp, (uint8_t)filler);
 8002f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8002f80:	482b      	ldr	r0, [pc, #172]	; (8003030 <chprintf.constprop.0+0x330>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4621      	mov	r1, r4
 8002f86:	4798      	blx	r3
        n++;
      } while (++width != 0);
 8002f88:	3601      	adds	r6, #1
 8002f8a:	d1f7      	bne.n	8002f7c <chprintf.constprop.0+0x27c>
 8002f8c:	9b00      	ldr	r3, [sp, #0]
    }
    while (--i >= 0) {
 8002f8e:	2f00      	cmp	r7, #0
 8002f90:	ebcb 0303 	rsb	r3, fp, r3
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	daae      	bge.n	8002ef6 <chprintf.constprop.0+0x1f6>
 8002f98:	e6c3      	b.n	8002d22 <chprintf.constprop.0+0x22>
 8002f9a:	220a      	movs	r2, #10
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002f9c:	6829      	ldr	r1, [r5, #0]
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002f9e:	a803      	add	r0, sp, #12
      c = 8;
unsigned_common:
      if (is_long)
        l = va_arg(ap, unsigned long);
      else
        l = va_arg(ap, unsigned int);
 8002fa0:	3504      	adds	r5, #4
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002fa2:	f7ff fe4d 	bl	8002c40 <long_to_string_with_divisor.constprop.2>
 8002fa6:	ab03      	add	r3, sp, #12
 8002fa8:	1ac0      	subs	r0, r0, r3
 8002faa:	1e43      	subs	r3, r0, #1
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002fac:	f10d 090c 	add.w	r9, sp, #12
 8002fb0:	e7d2      	b.n	8002f58 <chprintf.constprop.0+0x258>
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	e7f2      	b.n	8002f9c <chprintf.constprop.0+0x29c>
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002fb6:	6829      	ldr	r1, [r5, #0]
      if (l < 0) {
 8002fb8:	2900      	cmp	r1, #0
    case 'I':
    case 'i':
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
 8002fba:	f105 0504 	add.w	r5, r5, #4
      if (l < 0) {
 8002fbe:	db2b      	blt.n	8003018 <chprintf.constprop.0+0x318>
    if (c != '%') {
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
 8002fc0:	a803      	add	r0, sp, #12
  return p;
}

static char *ch_ltoa(char *p, long num, unsigned radix) {

  return long_to_string_with_divisor(p, num, radix, 0);
 8002fc2:	220a      	movs	r2, #10
 8002fc4:	e7ed      	b.n	8002fa2 <chprintf.constprop.0+0x2a2>
    }
    else
      is_long = (c >= 'A') && (c <= 'Z');

    /* Command decoding.*/
    switch (c) {
 8002fc6:	2210      	movs	r2, #16
 8002fc8:	e7e8      	b.n	8002f9c <chprintf.constprop.0+0x29c>
 8002fca:	461a      	mov	r2, r3
 8002fcc:	9b01      	ldr	r3, [sp, #4]
      else
        l = va_arg(ap, unsigned int);
      p = ch_ltoa(p, l, c);
      break;
    default:
      *p++ = c;
 8002fce:	f88d 200c 	strb.w	r2, [sp, #12]
 8002fd2:	4618      	mov	r0, r3
      streamPut(chp, (uint8_t)c);
      n++;
      continue;
    }
    p = tmpbuf;
    s = tmpbuf;
 8002fd4:	f10d 090c 	add.w	r9, sp, #12
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	e7bd      	b.n	8002f58 <chprintf.constprop.0+0x258>
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002fdc:	2f00      	cmp	r7, #0
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
 8002fde:	465e      	mov	r6, fp
      do {
        streamPut(chp, (uint8_t)filler);
        n++;
      } while (++width != 0);
    }
    while (--i >= 0) {
 8002fe0:	da87      	bge.n	8002ef2 <chprintf.constprop.0+0x1f2>
 8002fe2:	e69e      	b.n	8002d22 <chprintf.constprop.0+0x22>
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
 8002fe4:	2c30      	cmp	r4, #48	; 0x30
 8002fe6:	d1c8      	bne.n	8002f7a <chprintf.constprop.0+0x27a>
        streamPut(chp, (uint8_t)*s++);
 8002fe8:	f8d8 3000 	ldr.w	r3, [r8]
 8002fec:	4640      	mov	r0, r8
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4798      	blx	r3
        n++;
 8002ff2:	9b00      	ldr	r3, [sp, #0]
 8002ff4:	3301      	adds	r3, #1
      width = 0;
    if (left_align == FALSE)
      width = -width;
    if (width < 0) {
      if (*s == '-' && filler == '0') {
        streamPut(chp, (uint8_t)*s++);
 8002ff6:	f109 0901 	add.w	r9, r9, #1
        n++;
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	3f01      	subs	r7, #1
 8002ffe:	e7bc      	b.n	8002f7a <chprintf.constprop.0+0x27a>
      filler = ' ';
      if ((s = va_arg(ap, char *)) == 0)
        s = "(null)";
      if (precision == 0)
        precision = 32767;
      for (p = s; *p && (--precision >= 0); p++)
 8003000:	f647 71fe 	movw	r1, #32766	; 0x7ffe
 8003004:	2b00      	cmp	r3, #0
 8003006:	f47f af61 	bne.w	8002ecc <chprintf.constprop.0+0x1cc>
 800300a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 800300e:	b957      	cbnz	r7, 8003026 <chprintf.constprop.0+0x326>
 8003010:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003014:	2420      	movs	r4, #32
 8003016:	e7a5      	b.n	8002f64 <chprintf.constprop.0+0x264>
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 8003018:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 800301a:	4249      	negs	r1, r1
      if (is_long)
        l = va_arg(ap, long);
      else
        l = va_arg(ap, int);
      if (l < 0) {
        *p++ = '-';
 800301c:	f88d 300c 	strb.w	r3, [sp, #12]
 8003020:	f10d 000d 	add.w	r0, sp, #13
 8003024:	e7cd      	b.n	8002fc2 <chprintf.constprop.0+0x2c2>
      break;
    }
    i = (int)(p - s);
    if ((width -= i) < 0)
      width = 0;
    if (left_align == FALSE)
 8003026:	2420      	movs	r4, #32
 8003028:	e77a      	b.n	8002f20 <chprintf.constprop.0+0x220>
 800302a:	bf00      	nop
 800302c:	08003580 	.word	0x08003580
 8003030:	20001450 	.word	0x20001450
