
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	080002c1 	.word	0x080002c1
 8000008:	080002c3 	.word	0x080002c3
 800000c:	080002c2 	.word	0x080002c2
 8000010:	080002c2 	.word	0x080002c2
 8000014:	080002c2 	.word	0x080002c2
 8000018:	080002c2 	.word	0x080002c2
 800001c:	080002c2 	.word	0x080002c2
 8000020:	080002c2 	.word	0x080002c2
 8000024:	080002c2 	.word	0x080002c2
 8000028:	080002c2 	.word	0x080002c2
 800002c:	08007301 	.word	0x08007301
 8000030:	080002c2 	.word	0x080002c2
 8000034:	080002c2 	.word	0x080002c2
 8000038:	080002c2 	.word	0x080002c2
 800003c:	080002c2 	.word	0x080002c2
 8000040:	080002c2 	.word	0x080002c2
 8000044:	080002c2 	.word	0x080002c2
 8000048:	080002c2 	.word	0x080002c2
 800004c:	080002c2 	.word	0x080002c2
 8000050:	080002c2 	.word	0x080002c2
 8000054:	080002c2 	.word	0x080002c2
 8000058:	080002c2 	.word	0x080002c2
 800005c:	080002c2 	.word	0x080002c2
 8000060:	080002c2 	.word	0x080002c2
 8000064:	080002c2 	.word	0x080002c2
 8000068:	080002c2 	.word	0x080002c2
 800006c:	0800abd1 	.word	0x0800abd1
 8000070:	0800ab81 	.word	0x0800ab81
 8000074:	0800ab31 	.word	0x0800ab31
 8000078:	0800aae1 	.word	0x0800aae1
 800007c:	0800aa91 	.word	0x0800aa91
 8000080:	0800aa41 	.word	0x0800aa41
 8000084:	0800a9f1 	.word	0x0800a9f1
 8000088:	0800aca1 	.word	0x0800aca1
 800008c:	080002c2 	.word	0x080002c2
 8000090:	080002c2 	.word	0x080002c2
 8000094:	080002c2 	.word	0x080002c2
 8000098:	080002c2 	.word	0x080002c2
 800009c:	080002c2 	.word	0x080002c2
 80000a0:	080002c2 	.word	0x080002c2
 80000a4:	080002c2 	.word	0x080002c2
 80000a8:	080002c2 	.word	0x080002c2
 80000ac:	080002c2 	.word	0x080002c2
 80000b0:	0800a751 	.word	0x0800a751
 80000b4:	080002c2 	.word	0x080002c2
 80000b8:	080002c2 	.word	0x080002c2
 80000bc:	080002c2 	.word	0x080002c2
 80000c0:	080002c2 	.word	0x080002c2
 80000c4:	080002c2 	.word	0x080002c2
 80000c8:	080002c2 	.word	0x080002c2
 80000cc:	080002c2 	.word	0x080002c2
 80000d0:	080002c2 	.word	0x080002c2
 80000d4:	0800a721 	.word	0x0800a721
 80000d8:	0800a6f1 	.word	0x0800a6f1
 80000dc:	080002c2 	.word	0x080002c2
 80000e0:	080002c2 	.word	0x080002c2
 80000e4:	080002c2 	.word	0x080002c2
 80000e8:	080002c2 	.word	0x080002c2
 80000ec:	080002c2 	.word	0x080002c2
 80000f0:	080002c2 	.word	0x080002c2
 80000f4:	080002c2 	.word	0x080002c2
 80000f8:	080002c2 	.word	0x080002c2
 80000fc:	0800ac61 	.word	0x0800ac61
 8000100:	080002c2 	.word	0x080002c2
 8000104:	080002c2 	.word	0x080002c2
 8000108:	080002c2 	.word	0x080002c2
 800010c:	080002c2 	.word	0x080002c2
 8000110:	080002c2 	.word	0x080002c2
 8000114:	080002c2 	.word	0x080002c2
 8000118:	080002c2 	.word	0x080002c2
 800011c:	080002c2 	.word	0x080002c2
 8000120:	0800a9a1 	.word	0x0800a9a1
 8000124:	0800a951 	.word	0x0800a951
 8000128:	0800a901 	.word	0x0800a901
 800012c:	0800a8b1 	.word	0x0800a8b1
 8000130:	0800a861 	.word	0x0800a861
 8000134:	0800ac21 	.word	0x0800ac21
 8000138:	080002c2 	.word	0x080002c2
 800013c:	080002c2 	.word	0x080002c2
 8000140:	080002c2 	.word	0x080002c2
 8000144:	080002c2 	.word	0x080002c2
 8000148:	080002c2 	.word	0x080002c2
 800014c:	080002c2 	.word	0x080002c2
 8000150:	080002c2 	.word	0x080002c2
 8000154:	080002c2 	.word	0x080002c2
 8000158:	080002c2 	.word	0x080002c2
 800015c:	080002c2 	.word	0x080002c2
 8000160:	080002c2 	.word	0x080002c2
 8000164:	080002c2 	.word	0x080002c2
 8000168:	080002c2 	.word	0x080002c2
 800016c:	080002c2 	.word	0x080002c2
 8000170:	080002c2 	.word	0x080002c2
 8000174:	080002c2 	.word	0x080002c2
 8000178:	080002c2 	.word	0x080002c2
 800017c:	080002c2 	.word	0x080002c2
 8000180:	080002c2 	.word	0x080002c2
 8000184:	080002c2 	.word	0x080002c2
 8000188:	080002c2 	.word	0x080002c2
 800018c:	080002c2 	.word	0x080002c2
 8000190:	080002c2 	.word	0x080002c2
 8000194:	080002c2 	.word	0x080002c2
 8000198:	080002c2 	.word	0x080002c2
 800019c:	080002c2 	.word	0x080002c2

Disassembly of section .text:

080001a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80001a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80001a2:	4839      	ldr	r0, [pc, #228]	; (8000288 <endfiniloop+0x6>)
                msr     MSP, r0
 80001a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80001a8:	4838      	ldr	r0, [pc, #224]	; (800028c <endfiniloop+0xa>)
                msr     PSP, r0
 80001aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80001ae:	4838      	ldr	r0, [pc, #224]	; (8000290 <endfiniloop+0xe>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80001b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80001b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001b8:	6008      	str	r0, [r1, #0]
#endif

#if CRT0_INIT_FPU == TRUE
                /* FPU FPCCR initialization.*/
                movw    r0, #CRT0_FPCCR_INIT & 0xFFFF
 80001ba:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_FPCCR_INIT >> 16
 80001be:	f2cc 0000 	movt	r0, #49152	; 0xc000
                movw    r1, #SCB_FPCCR & 0xFFFF
 80001c2:	f64e 7134 	movw	r1, #61236	; 0xef34
                movt    r1, #SCB_FPCCR >> 16
 80001c6:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001ca:	6008      	str	r0, [r1, #0]
                dsb
 80001cc:	f3bf 8f4f 	dsb	sy
                isb
 80001d0:	f3bf 8f6f 	isb	sy

                /* CPACR initialization.*/
                movw    r0, #CRT0_CPACR_INIT & 0xFFFF
 80001d4:	f240 0000 	movw	r0, #0
                movt    r0, #CRT0_CPACR_INIT >> 16
 80001d8:	f2c0 00f0 	movt	r0, #240	; 0xf0
                movw    r1, #SCB_CPACR & 0xFFFF
 80001dc:	f64e 5188 	movw	r1, #60808	; 0xed88
                movt    r1, #SCB_CPACR >> 16
 80001e0:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001e4:	6008      	str	r0, [r1, #0]
                dsb
 80001e6:	f3bf 8f4f 	dsb	sy
                isb
 80001ea:	f3bf 8f6f 	isb	sy

                /* FPU FPSCR initially cleared.*/
                mov     r0, #0
 80001ee:	f04f 0000 	mov.w	r0, #0
                vmsr    FPSCR, r0
 80001f2:	eee1 0a10 	vmsr	fpscr, r0

                /* FPU FPDSCR initially cleared.*/
                movw    r1, #SCB_FPDSCR & 0xFFFF
 80001f6:	f64e 713c 	movw	r1, #61244	; 0xef3c
                movt    r1, #SCB_FPDSCR >> 16
 80001fa:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80001fe:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA
 8000200:	2006      	movs	r0, #6
#else
                movs    r0, #CRT0_CONTROL_INIT
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 8000202:	f380 8814 	msr	CONTROL, r0
                isb
 8000206:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 800020a:	f00a fdb1 	bl	800ad70 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 800020e:	f00a f9e7 	bl	800a5e0 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 8000212:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 8000216:	491f      	ldr	r1, [pc, #124]	; (8000294 <endfiniloop+0x12>)
                ldr     r2, =__main_stack_end__
 8000218:	4a1b      	ldr	r2, [pc, #108]	; (8000288 <endfiniloop+0x6>)

0800021a <msloop>:
msloop:
                cmp     r1, r2
 800021a:	4291      	cmp	r1, r2
                itt     lo
 800021c:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800021e:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 8000222:	e7fa      	bcc.n	800021a <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 8000224:	491c      	ldr	r1, [pc, #112]	; (8000298 <endfiniloop+0x16>)
                ldr     r2, =__process_stack_end__
 8000226:	4a19      	ldr	r2, [pc, #100]	; (800028c <endfiniloop+0xa>)

08000228 <psloop>:
psloop:
                cmp     r1, r2
 8000228:	4291      	cmp	r1, r2
                itt     lo
 800022a:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800022c:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 8000230:	e7fa      	bcc.n	8000228 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =_textdata_start
 8000232:	491a      	ldr	r1, [pc, #104]	; (800029c <endfiniloop+0x1a>)
                ldr     r2, =_data_start
 8000234:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <endfiniloop+0x1e>)
                ldr     r3, =_data_end
 8000236:	4b1b      	ldr	r3, [pc, #108]	; (80002a4 <endfiniloop+0x22>)

08000238 <dloop>:
dloop:
                cmp     r2, r3
 8000238:	429a      	cmp	r2, r3
                ittt    lo
 800023a:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 800023c:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 8000240:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 8000244:	e7f8      	bcc.n	8000238 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000246:	2000      	movs	r0, #0
                ldr     r1, =_bss_start
 8000248:	4917      	ldr	r1, [pc, #92]	; (80002a8 <endfiniloop+0x26>)
                ldr     r2, =_bss_end
 800024a:	4a18      	ldr	r2, [pc, #96]	; (80002ac <endfiniloop+0x2a>)

0800024c <bloop>:
bloop:
                cmp     r1, r2
 800024c:	4291      	cmp	r1, r2
                itt     lo
 800024e:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 8000250:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 8000254:	e7fa      	bcc.n	800024c <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000256:	f00a fd4b 	bl	800acf0 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 800025a:	f00a fd81 	bl	800ad60 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_start
 800025e:	4c14      	ldr	r4, [pc, #80]	; (80002b0 <endfiniloop+0x2e>)
                ldr     r5, =__init_array_end
 8000260:	4d14      	ldr	r5, [pc, #80]	; (80002b4 <endfiniloop+0x32>)

08000262 <initloop>:
initloop:
                cmp     r4, r5
 8000262:	42ac      	cmp	r4, r5
                bge     endinitloop
 8000264:	da03      	bge.n	800026e <endinitloop>
                ldr     r1, [r4], #4
 8000266:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800026a:	4788      	blx	r1
                b       initloop
 800026c:	e7f9      	b.n	8000262 <initloop>

0800026e <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 800026e:	f008 fb9f 	bl	80089b0 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_start
 8000272:	4c11      	ldr	r4, [pc, #68]	; (80002b8 <endfiniloop+0x36>)
                ldr     r5, =__fini_array_end
 8000274:	4d11      	ldr	r5, [pc, #68]	; (80002bc <endfiniloop+0x3a>)

08000276 <finiloop>:
finiloop:
                cmp     r4, r5
 8000276:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000278:	da03      	bge.n	8000282 <endfiniloop>
                ldr     r1, [r4], #4
 800027a:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 800027e:	4788      	blx	r1
                b       finiloop
 8000280:	e7f9      	b.n	8000276 <finiloop>

08000282 <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 8000282:	f00a bd65 	b.w	800ad50 <__default_exit>
 8000286:	0000      	.short	0x0000
                ldr     r0, =__main_stack_end__
 8000288:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 800028c:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000290:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 8000294:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000298:	20000400 	.word	0x20000400
                ldr     r1, =_textdata_start
 800029c:	0800d748 	.word	0x0800d748
                ldr     r2, =_data_start
 80002a0:	20000800 	.word	0x20000800
                ldr     r3, =_data_end
 80002a4:	200011e4 	.word	0x200011e4
                ldr     r1, =_bss_start
 80002a8:	200011e8 	.word	0x200011e8
                ldr     r2, =_bss_end
 80002ac:	2000419c 	.word	0x2000419c
                ldr     r4, =__init_array_start
 80002b0:	080001a0 	.word	0x080001a0
                ldr     r5, =__init_array_end
 80002b4:	080001a0 	.word	0x080001a0
                ldr     r4, =__fini_array_start
 80002b8:	080001a0 	.word	0x080001a0
                ldr     r5, =__fini_array_end
 80002bc:	080001a0 	.word	0x080001a0

080002c0 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 80002c0:	e76e      	b.n	80001a0 <_crt0_entry>

080002c2 <NMI_Handler>:
Vector3F0:
Vector3F4:
Vector3F8:
Vector3FC:
#endif
        bl          _unhandled_exception
 80002c2:	f000 f800 	bl	80002c6 <_unhandled_exception>

080002c6 <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 80002c6:	e7fe      	b.n	80002c6 <_unhandled_exception>

080002c8 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 80002c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if CORTEX_USE_FPU
                vpush   {s16-s31}
 80002cc:	ed2d 8a10 	vpush	{s16-s31}
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 80002d0:	f8c1 d00c 	str.w	sp, [r1, #12]
#if (CORTEX_SIMPLIFIED_PRIORITY == FALSE) &&                                \
    ((CORTEX_MODEL == 3) || (CORTEX_MODEL == 4))
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
 80002d4:	68c3      	ldr	r3, [r0, #12]
                mov     sp, r3
 80002d6:	469d      	mov	sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
#endif

#if CORTEX_USE_FPU
                vpop    {s16-s31}
 80002d8:	ecbd 8a10 	vpop	{s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 80002dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080002e0 <_port_thread_start>:
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_thread_start
_port_thread_start:
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002e0:	f007 f846 	bl	8007370 <_dbg_check_unlock>
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 80002e4:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 80002e6:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 80002ea:	4628      	mov	r0, r5
                blx     r4
 80002ec:	47a0      	blx	r4
#if defined(_CHIBIOS_RT_CONF_)
                movs    r0, #0              /* MSG_OK */
 80002ee:	2000      	movs	r0, #0
                bl      chThdExit
 80002f0:	f007 fcde 	bl	8007cb0 <chThdExit>

080002f4 <_port_switch_from_isr>:
_port_switch_from_isr:
#if CH_DBG_STATISTICS
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
 80002f4:	f007 f884 	bl	8007400 <_dbg_check_lock>
#endif
                bl      chSchDoReschedule
 80002f8:	f007 f812 	bl	8007320 <chSchDoReschedule>
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_unlock
 80002fc:	f007 f838 	bl	8007370 <_dbg_check_unlock>

08000300 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 8000300:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 8000302:	e7fe      	b.n	8000302 <_port_exit_from_isr+0x2>

08000304 <sqrt>:
 8000304:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000308:	ed2d 8b02 	vpush	{d8}
 800030c:	b08b      	sub	sp, #44	; 0x2c
 800030e:	ec55 4b10 	vmov	r4, r5, d0
 8000312:	f000 f853 	bl	80003bc <__ieee754_sqrt>
 8000316:	4b27      	ldr	r3, [pc, #156]	; (80003b4 <sqrt+0xb0>)
 8000318:	eeb0 8a40 	vmov.f32	s16, s0
 800031c:	eef0 8a60 	vmov.f32	s17, s1
 8000320:	f993 6000 	ldrsb.w	r6, [r3]
 8000324:	1c73      	adds	r3, r6, #1
 8000326:	d012      	beq.n	800034e <sqrt+0x4a>
 8000328:	4622      	mov	r2, r4
 800032a:	462b      	mov	r3, r5
 800032c:	4620      	mov	r0, r4
 800032e:	4629      	mov	r1, r5
 8000330:	f000 fd66 	bl	8000e00 <__aeabi_dcmpun>
 8000334:	4607      	mov	r7, r0
 8000336:	b950      	cbnz	r0, 800034e <sqrt+0x4a>
 8000338:	f04f 0800 	mov.w	r8, #0
 800033c:	f04f 0900 	mov.w	r9, #0
 8000340:	4620      	mov	r0, r4
 8000342:	4629      	mov	r1, r5
 8000344:	4642      	mov	r2, r8
 8000346:	464b      	mov	r3, r9
 8000348:	f000 fd32 	bl	8000db0 <__aeabi_dcmplt>
 800034c:	b940      	cbnz	r0, 8000360 <sqrt+0x5c>
 800034e:	eeb0 0a48 	vmov.f32	s0, s16
 8000352:	eef0 0a68 	vmov.f32	s1, s17
 8000356:	b00b      	add	sp, #44	; 0x2c
 8000358:	ecbd 8b02 	vpop	{d8}
 800035c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000360:	2201      	movs	r2, #1
 8000362:	4b15      	ldr	r3, [pc, #84]	; (80003b8 <sqrt+0xb4>)
 8000364:	9708      	str	r7, [sp, #32]
 8000366:	9200      	str	r2, [sp, #0]
 8000368:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800036c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8000370:	9301      	str	r3, [sp, #4]
 8000372:	b196      	cbz	r6, 800039a <sqrt+0x96>
 8000374:	4642      	mov	r2, r8
 8000376:	464b      	mov	r3, r9
 8000378:	4640      	mov	r0, r8
 800037a:	4649      	mov	r1, r9
 800037c:	f000 fbd0 	bl	8000b20 <__aeabi_ddiv>
 8000380:	2e02      	cmp	r6, #2
 8000382:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8000386:	d10a      	bne.n	800039e <sqrt+0x9a>
 8000388:	f000 ff48 	bl	800121c <__errno>
 800038c:	2321      	movs	r3, #33	; 0x21
 800038e:	6003      	str	r3, [r0, #0]
 8000390:	9b08      	ldr	r3, [sp, #32]
 8000392:	b953      	cbnz	r3, 80003aa <sqrt+0xa6>
 8000394:	ed9d 8b06 	vldr	d8, [sp, #24]
 8000398:	e7d9      	b.n	800034e <sqrt+0x4a>
 800039a:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800039e:	4668      	mov	r0, sp
 80003a0:	f000 f8d6 	bl	8000550 <matherr>
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d1f3      	bne.n	8000390 <sqrt+0x8c>
 80003a8:	e7ee      	b.n	8000388 <sqrt+0x84>
 80003aa:	f000 ff37 	bl	800121c <__errno>
 80003ae:	9b08      	ldr	r3, [sp, #32]
 80003b0:	6003      	str	r3, [r0, #0]
 80003b2:	e7ef      	b.n	8000394 <sqrt+0x90>
 80003b4:	20000800 	.word	0x20000800
 80003b8:	0800d6e0 	.word	0x0800d6e0

080003bc <__ieee754_sqrt>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	4a62      	ldr	r2, [pc, #392]	; (800054c <__ieee754_sqrt+0x190>)
 80003c2:	ec57 6b10 	vmov	r6, r7, d0
 80003c6:	43ba      	bics	r2, r7
 80003c8:	f000 8095 	beq.w	80004f6 <__ieee754_sqrt+0x13a>
 80003cc:	2f00      	cmp	r7, #0
 80003ce:	463b      	mov	r3, r7
 80003d0:	ee10 1a10 	vmov	r1, s0
 80003d4:	4634      	mov	r4, r6
 80003d6:	dd54      	ble.n	8000482 <__ieee754_sqrt+0xc6>
 80003d8:	153f      	asrs	r7, r7, #20
 80003da:	f000 80af 	beq.w	800053c <__ieee754_sqrt+0x180>
 80003de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80003e2:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
 80003e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80003ea:	0fe2      	lsrs	r2, r4, #31
 80003ec:	07f9      	lsls	r1, r7, #31
 80003ee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80003f2:	ea4f 0544 	mov.w	r5, r4, lsl #1
 80003f6:	d503      	bpl.n	8000400 <__ieee754_sqrt+0x44>
 80003f8:	0fed      	lsrs	r5, r5, #31
 80003fa:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80003fe:	00a5      	lsls	r5, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	107f      	asrs	r7, r7, #1
 8000404:	46b4      	mov	ip, r6
 8000406:	2216      	movs	r2, #22
 8000408:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800040c:	eb0c 0001 	add.w	r0, ip, r1
 8000410:	4298      	cmp	r0, r3
 8000412:	ea4f 74d5 	mov.w	r4, r5, lsr #31
 8000416:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800041a:	dc03      	bgt.n	8000424 <__ieee754_sqrt+0x68>
 800041c:	1a1b      	subs	r3, r3, r0
 800041e:	eb00 0c01 	add.w	ip, r0, r1
 8000422:	440e      	add	r6, r1
 8000424:	3a01      	subs	r2, #1
 8000426:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800042a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800042e:	d1ed      	bne.n	800040c <__ieee754_sqrt+0x50>
 8000430:	4610      	mov	r0, r2
 8000432:	4696      	mov	lr, r2
 8000434:	2420      	movs	r4, #32
 8000436:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800043a:	e009      	b.n	8000450 <__ieee754_sqrt+0x94>
 800043c:	d052      	beq.n	80004e4 <__ieee754_sqrt+0x128>
 800043e:	005b      	lsls	r3, r3, #1
 8000440:	3c01      	subs	r4, #1
 8000442:	eb03 73d5 	add.w	r3, r3, r5, lsr #31
 8000446:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800044a:	ea4f 0545 	mov.w	r5, r5, lsl #1
 800044e:	d036      	beq.n	80004be <__ieee754_sqrt+0x102>
 8000450:	4563      	cmp	r3, ip
 8000452:	eb02 010e 	add.w	r1, r2, lr
 8000456:	ddf1      	ble.n	800043c <__ieee754_sqrt+0x80>
 8000458:	2900      	cmp	r1, #0
 800045a:	eb01 0e02 	add.w	lr, r1, r2
 800045e:	db0a      	blt.n	8000476 <__ieee754_sqrt+0xba>
 8000460:	46e0      	mov	r8, ip
 8000462:	eba3 030c 	sub.w	r3, r3, ip
 8000466:	42a9      	cmp	r1, r5
 8000468:	bf88      	it	hi
 800046a:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800046e:	1a6d      	subs	r5, r5, r1
 8000470:	4410      	add	r0, r2
 8000472:	46c4      	mov	ip, r8
 8000474:	e7e3      	b.n	800043e <__ieee754_sqrt+0x82>
 8000476:	f1be 0f00 	cmp.w	lr, #0
 800047a:	dbf1      	blt.n	8000460 <__ieee754_sqrt+0xa4>
 800047c:	f10c 0801 	add.w	r8, ip, #1
 8000480:	e7ef      	b.n	8000462 <__ieee754_sqrt+0xa6>
 8000482:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8000486:	4332      	orrs	r2, r6
 8000488:	d02a      	beq.n	80004e0 <__ieee754_sqrt+0x124>
 800048a:	2f00      	cmp	r7, #0
 800048c:	d149      	bne.n	8000522 <__ieee754_sqrt+0x166>
 800048e:	0aca      	lsrs	r2, r1, #11
 8000490:	3b15      	subs	r3, #21
 8000492:	0549      	lsls	r1, r1, #21
 8000494:	2a00      	cmp	r2, #0
 8000496:	d0fa      	beq.n	800048e <__ieee754_sqrt+0xd2>
 8000498:	f412 1080 	ands.w	r0, r2, #1048576	; 0x100000
 800049c:	d001      	beq.n	80004a2 <__ieee754_sqrt+0xe6>
 800049e:	e050      	b.n	8000542 <__ieee754_sqrt+0x186>
 80004a0:	4620      	mov	r0, r4
 80004a2:	0052      	lsls	r2, r2, #1
 80004a4:	02d5      	lsls	r5, r2, #11
 80004a6:	f100 0401 	add.w	r4, r0, #1
 80004aa:	d5f9      	bpl.n	80004a0 <__ieee754_sqrt+0xe4>
 80004ac:	f1c4 0520 	rsb	r5, r4, #32
 80004b0:	fa01 f404 	lsl.w	r4, r1, r4
 80004b4:	40e9      	lsrs	r1, r5
 80004b6:	1a1f      	subs	r7, r3, r0
 80004b8:	ea41 0302 	orr.w	r3, r1, r2
 80004bc:	e78f      	b.n	80003de <__ieee754_sqrt+0x22>
 80004be:	432b      	orrs	r3, r5
 80004c0:	d129      	bne.n	8000516 <__ieee754_sqrt+0x15a>
 80004c2:	0844      	lsrs	r4, r0, #1
 80004c4:	1071      	asrs	r1, r6, #1
 80004c6:	07f3      	lsls	r3, r6, #31
 80004c8:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80004cc:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80004d0:	bf48      	it	mi
 80004d2:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80004d6:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 80004da:	4622      	mov	r2, r4
 80004dc:	ec43 2b10 	vmov	d0, r2, r3
 80004e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80004e4:	42a9      	cmp	r1, r5
 80004e6:	d8aa      	bhi.n	800043e <__ieee754_sqrt+0x82>
 80004e8:	2900      	cmp	r1, #0
 80004ea:	eb01 0e02 	add.w	lr, r1, r2
 80004ee:	dbc2      	blt.n	8000476 <__ieee754_sqrt+0xba>
 80004f0:	4698      	mov	r8, r3
 80004f2:	2300      	movs	r3, #0
 80004f4:	e7bb      	b.n	800046e <__ieee754_sqrt+0xb2>
 80004f6:	ee10 2a10 	vmov	r2, s0
 80004fa:	463b      	mov	r3, r7
 80004fc:	ee10 0a10 	vmov	r0, s0
 8000500:	4639      	mov	r1, r7
 8000502:	f000 f9e3 	bl	80008cc <__aeabi_dmul>
 8000506:	4632      	mov	r2, r6
 8000508:	463b      	mov	r3, r7
 800050a:	f000 f829 	bl	8000560 <__adddf3>
 800050e:	ec41 0b10 	vmov	d0, r0, r1
 8000512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000516:	1c42      	adds	r2, r0, #1
 8000518:	bf16      	itet	ne
 800051a:	1c42      	addne	r2, r0, #1
 800051c:	3601      	addeq	r6, #1
 800051e:	0854      	lsrne	r4, r2, #1
 8000520:	e7d0      	b.n	80004c4 <__ieee754_sqrt+0x108>
 8000522:	ee10 2a10 	vmov	r2, s0
 8000526:	4630      	mov	r0, r6
 8000528:	4639      	mov	r1, r7
 800052a:	f000 f817 	bl	800055c <__aeabi_dsub>
 800052e:	4602      	mov	r2, r0
 8000530:	460b      	mov	r3, r1
 8000532:	f000 faf5 	bl	8000b20 <__aeabi_ddiv>
 8000536:	ec41 0b10 	vmov	d0, r0, r1
 800053a:	e7d1      	b.n	80004e0 <__ieee754_sqrt+0x124>
 800053c:	461a      	mov	r2, r3
 800053e:	463b      	mov	r3, r7
 8000540:	e7aa      	b.n	8000498 <__ieee754_sqrt+0xdc>
 8000542:	460c      	mov	r4, r1
 8000544:	2520      	movs	r5, #32
 8000546:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800054a:	e7b3      	b.n	80004b4 <__ieee754_sqrt+0xf8>
 800054c:	7ff00000 	.word	0x7ff00000

08000550 <matherr>:
 8000550:	2000      	movs	r0, #0
 8000552:	4770      	bx	lr

08000554 <__aeabi_drsub>:
 8000554:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e002      	b.n	8000560 <__adddf3>
 800055a:	bf00      	nop

0800055c <__aeabi_dsub>:
 800055c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000560 <__adddf3>:
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000566:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800056a:	ea94 0f05 	teq	r4, r5
 800056e:	bf08      	it	eq
 8000570:	ea90 0f02 	teqeq	r0, r2
 8000574:	bf1f      	itttt	ne
 8000576:	ea54 0c00 	orrsne.w	ip, r4, r0
 800057a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800057e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000582:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000586:	f000 80e2 	beq.w	800074e <__adddf3+0x1ee>
 800058a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800058e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000592:	bfb8      	it	lt
 8000594:	426d      	neglt	r5, r5
 8000596:	dd0c      	ble.n	80005b2 <__adddf3+0x52>
 8000598:	442c      	add	r4, r5
 800059a:	ea80 0202 	eor.w	r2, r0, r2
 800059e:	ea81 0303 	eor.w	r3, r1, r3
 80005a2:	ea82 0000 	eor.w	r0, r2, r0
 80005a6:	ea83 0101 	eor.w	r1, r3, r1
 80005aa:	ea80 0202 	eor.w	r2, r0, r2
 80005ae:	ea81 0303 	eor.w	r3, r1, r3
 80005b2:	2d36      	cmp	r5, #54	; 0x36
 80005b4:	bf88      	it	hi
 80005b6:	bd30      	pophi	{r4, r5, pc}
 80005b8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80005bc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80005c0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80005c4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80005c8:	d002      	beq.n	80005d0 <__adddf3+0x70>
 80005ca:	4240      	negs	r0, r0
 80005cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80005d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005d8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005dc:	d002      	beq.n	80005e4 <__adddf3+0x84>
 80005de:	4252      	negs	r2, r2
 80005e0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005e4:	ea94 0f05 	teq	r4, r5
 80005e8:	f000 80a7 	beq.w	800073a <__adddf3+0x1da>
 80005ec:	f1a4 0401 	sub.w	r4, r4, #1
 80005f0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005f4:	db0d      	blt.n	8000612 <__adddf3+0xb2>
 80005f6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005fa:	fa22 f205 	lsr.w	r2, r2, r5
 80005fe:	1880      	adds	r0, r0, r2
 8000600:	f141 0100 	adc.w	r1, r1, #0
 8000604:	fa03 f20e 	lsl.w	r2, r3, lr
 8000608:	1880      	adds	r0, r0, r2
 800060a:	fa43 f305 	asr.w	r3, r3, r5
 800060e:	4159      	adcs	r1, r3
 8000610:	e00e      	b.n	8000630 <__adddf3+0xd0>
 8000612:	f1a5 0520 	sub.w	r5, r5, #32
 8000616:	f10e 0e20 	add.w	lr, lr, #32
 800061a:	2a01      	cmp	r2, #1
 800061c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000620:	bf28      	it	cs
 8000622:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000626:	fa43 f305 	asr.w	r3, r3, r5
 800062a:	18c0      	adds	r0, r0, r3
 800062c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000634:	d507      	bpl.n	8000646 <__adddf3+0xe6>
 8000636:	f04f 0e00 	mov.w	lr, #0
 800063a:	f1dc 0c00 	rsbs	ip, ip, #0
 800063e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000642:	eb6e 0101 	sbc.w	r1, lr, r1
 8000646:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800064a:	d31b      	bcc.n	8000684 <__adddf3+0x124>
 800064c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000650:	d30c      	bcc.n	800066c <__adddf3+0x10c>
 8000652:	0849      	lsrs	r1, r1, #1
 8000654:	ea5f 0030 	movs.w	r0, r0, rrx
 8000658:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800065c:	f104 0401 	add.w	r4, r4, #1
 8000660:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000664:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000668:	f080 809a 	bcs.w	80007a0 <__adddf3+0x240>
 800066c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000670:	bf08      	it	eq
 8000672:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000676:	f150 0000 	adcs.w	r0, r0, #0
 800067a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067e:	ea41 0105 	orr.w	r1, r1, r5
 8000682:	bd30      	pop	{r4, r5, pc}
 8000684:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000688:	4140      	adcs	r0, r0
 800068a:	eb41 0101 	adc.w	r1, r1, r1
 800068e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000692:	f1a4 0401 	sub.w	r4, r4, #1
 8000696:	d1e9      	bne.n	800066c <__adddf3+0x10c>
 8000698:	f091 0f00 	teq	r1, #0
 800069c:	bf04      	itt	eq
 800069e:	4601      	moveq	r1, r0
 80006a0:	2000      	moveq	r0, #0
 80006a2:	fab1 f381 	clz	r3, r1
 80006a6:	bf08      	it	eq
 80006a8:	3320      	addeq	r3, #32
 80006aa:	f1a3 030b 	sub.w	r3, r3, #11
 80006ae:	f1b3 0220 	subs.w	r2, r3, #32
 80006b2:	da0c      	bge.n	80006ce <__adddf3+0x16e>
 80006b4:	320c      	adds	r2, #12
 80006b6:	dd08      	ble.n	80006ca <__adddf3+0x16a>
 80006b8:	f102 0c14 	add.w	ip, r2, #20
 80006bc:	f1c2 020c 	rsb	r2, r2, #12
 80006c0:	fa01 f00c 	lsl.w	r0, r1, ip
 80006c4:	fa21 f102 	lsr.w	r1, r1, r2
 80006c8:	e00c      	b.n	80006e4 <__adddf3+0x184>
 80006ca:	f102 0214 	add.w	r2, r2, #20
 80006ce:	bfd8      	it	le
 80006d0:	f1c2 0c20 	rsble	ip, r2, #32
 80006d4:	fa01 f102 	lsl.w	r1, r1, r2
 80006d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006dc:	bfdc      	itt	le
 80006de:	ea41 010c 	orrle.w	r1, r1, ip
 80006e2:	4090      	lslle	r0, r2
 80006e4:	1ae4      	subs	r4, r4, r3
 80006e6:	bfa2      	ittt	ge
 80006e8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ec:	4329      	orrge	r1, r5
 80006ee:	bd30      	popge	{r4, r5, pc}
 80006f0:	ea6f 0404 	mvn.w	r4, r4
 80006f4:	3c1f      	subs	r4, #31
 80006f6:	da1c      	bge.n	8000732 <__adddf3+0x1d2>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc0e      	bgt.n	800071a <__adddf3+0x1ba>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0220 	rsb	r2, r4, #32
 8000704:	fa20 f004 	lsr.w	r0, r0, r4
 8000708:	fa01 f302 	lsl.w	r3, r1, r2
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	fa21 f304 	lsr.w	r3, r1, r4
 8000714:	ea45 0103 	orr.w	r1, r5, r3
 8000718:	bd30      	pop	{r4, r5, pc}
 800071a:	f1c4 040c 	rsb	r4, r4, #12
 800071e:	f1c4 0220 	rsb	r2, r4, #32
 8000722:	fa20 f002 	lsr.w	r0, r0, r2
 8000726:	fa01 f304 	lsl.w	r3, r1, r4
 800072a:	ea40 0003 	orr.w	r0, r0, r3
 800072e:	4629      	mov	r1, r5
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	fa21 f004 	lsr.w	r0, r1, r4
 8000736:	4629      	mov	r1, r5
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	f094 0f00 	teq	r4, #0
 800073e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000742:	bf06      	itte	eq
 8000744:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000748:	3401      	addeq	r4, #1
 800074a:	3d01      	subne	r5, #1
 800074c:	e74e      	b.n	80005ec <__adddf3+0x8c>
 800074e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000752:	bf18      	it	ne
 8000754:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000758:	d029      	beq.n	80007ae <__adddf3+0x24e>
 800075a:	ea94 0f05 	teq	r4, r5
 800075e:	bf08      	it	eq
 8000760:	ea90 0f02 	teqeq	r0, r2
 8000764:	d005      	beq.n	8000772 <__adddf3+0x212>
 8000766:	ea54 0c00 	orrs.w	ip, r4, r0
 800076a:	bf04      	itt	eq
 800076c:	4619      	moveq	r1, r3
 800076e:	4610      	moveq	r0, r2
 8000770:	bd30      	pop	{r4, r5, pc}
 8000772:	ea91 0f03 	teq	r1, r3
 8000776:	bf1e      	ittt	ne
 8000778:	2100      	movne	r1, #0
 800077a:	2000      	movne	r0, #0
 800077c:	bd30      	popne	{r4, r5, pc}
 800077e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000782:	d105      	bne.n	8000790 <__adddf3+0x230>
 8000784:	0040      	lsls	r0, r0, #1
 8000786:	4149      	adcs	r1, r1
 8000788:	bf28      	it	cs
 800078a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800078e:	bd30      	pop	{r4, r5, pc}
 8000790:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000794:	bf3c      	itt	cc
 8000796:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800079a:	bd30      	popcc	{r4, r5, pc}
 800079c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd30      	pop	{r4, r5, pc}
 80007ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80007b2:	bf1a      	itte	ne
 80007b4:	4619      	movne	r1, r3
 80007b6:	4610      	movne	r0, r2
 80007b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80007bc:	bf1c      	itt	ne
 80007be:	460b      	movne	r3, r1
 80007c0:	4602      	movne	r2, r0
 80007c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80007c6:	bf06      	itte	eq
 80007c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80007cc:	ea91 0f03 	teqeq	r1, r3
 80007d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80007d4:	bd30      	pop	{r4, r5, pc}
 80007d6:	bf00      	nop

080007d8 <__aeabi_ui2d>:
 80007d8:	f090 0f00 	teq	r0, #0
 80007dc:	bf04      	itt	eq
 80007de:	2100      	moveq	r1, #0
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ec:	f04f 0500 	mov.w	r5, #0
 80007f0:	f04f 0100 	mov.w	r1, #0
 80007f4:	e750      	b.n	8000698 <__adddf3+0x138>
 80007f6:	bf00      	nop

080007f8 <__aeabi_i2d>:
 80007f8:	f090 0f00 	teq	r0, #0
 80007fc:	bf04      	itt	eq
 80007fe:	2100      	moveq	r1, #0
 8000800:	4770      	bxeq	lr
 8000802:	b530      	push	{r4, r5, lr}
 8000804:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000808:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000810:	bf48      	it	mi
 8000812:	4240      	negmi	r0, r0
 8000814:	f04f 0100 	mov.w	r1, #0
 8000818:	e73e      	b.n	8000698 <__adddf3+0x138>
 800081a:	bf00      	nop

0800081c <__aeabi_f2d>:
 800081c:	0042      	lsls	r2, r0, #1
 800081e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000822:	ea4f 0131 	mov.w	r1, r1, rrx
 8000826:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800082a:	bf1f      	itttt	ne
 800082c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000830:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000834:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000838:	4770      	bxne	lr
 800083a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800083e:	bf08      	it	eq
 8000840:	4770      	bxeq	lr
 8000842:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000846:	bf04      	itt	eq
 8000848:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800084c:	4770      	bxeq	lr
 800084e:	b530      	push	{r4, r5, lr}
 8000850:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000854:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000858:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800085c:	e71c      	b.n	8000698 <__adddf3+0x138>
 800085e:	bf00      	nop

08000860 <__aeabi_ul2d>:
 8000860:	ea50 0201 	orrs.w	r2, r0, r1
 8000864:	bf08      	it	eq
 8000866:	4770      	bxeq	lr
 8000868:	b530      	push	{r4, r5, lr}
 800086a:	f04f 0500 	mov.w	r5, #0
 800086e:	e00a      	b.n	8000886 <__aeabi_l2d+0x16>

08000870 <__aeabi_l2d>:
 8000870:	ea50 0201 	orrs.w	r2, r0, r1
 8000874:	bf08      	it	eq
 8000876:	4770      	bxeq	lr
 8000878:	b530      	push	{r4, r5, lr}
 800087a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800087e:	d502      	bpl.n	8000886 <__aeabi_l2d+0x16>
 8000880:	4240      	negs	r0, r0
 8000882:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000886:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800088a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800088e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000892:	f43f aed8 	beq.w	8000646 <__adddf3+0xe6>
 8000896:	f04f 0203 	mov.w	r2, #3
 800089a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800089e:	bf18      	it	ne
 80008a0:	3203      	addne	r2, #3
 80008a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80008a6:	bf18      	it	ne
 80008a8:	3203      	addne	r2, #3
 80008aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80008ae:	f1c2 0320 	rsb	r3, r2, #32
 80008b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80008b6:	fa20 f002 	lsr.w	r0, r0, r2
 80008ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80008be:	ea40 000e 	orr.w	r0, r0, lr
 80008c2:	fa21 f102 	lsr.w	r1, r1, r2
 80008c6:	4414      	add	r4, r2
 80008c8:	e6bd      	b.n	8000646 <__adddf3+0xe6>
 80008ca:	bf00      	nop

080008cc <__aeabi_dmul>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8de 	bleq	8000aa8 <__aeabi_dmul+0x1dc>
 80008ec:	442c      	add	r4, r5
 80008ee:	ea81 0603 	eor.w	r6, r1, r3
 80008f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008fe:	bf18      	it	ne
 8000900:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000904:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800090c:	d038      	beq.n	8000980 <__aeabi_dmul+0xb4>
 800090e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000912:	f04f 0500 	mov.w	r5, #0
 8000916:	fbe1 e502 	umlal	lr, r5, r1, r2
 800091a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800091e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000922:	f04f 0600 	mov.w	r6, #0
 8000926:	fbe1 5603 	umlal	r5, r6, r1, r3
 800092a:	f09c 0f00 	teq	ip, #0
 800092e:	bf18      	it	ne
 8000930:	f04e 0e01 	orrne.w	lr, lr, #1
 8000934:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000938:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800093c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000940:	d204      	bcs.n	800094c <__aeabi_dmul+0x80>
 8000942:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000946:	416d      	adcs	r5, r5
 8000948:	eb46 0606 	adc.w	r6, r6, r6
 800094c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000950:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000954:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000958:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800095c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000960:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000964:	bf88      	it	hi
 8000966:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096a:	d81e      	bhi.n	80009aa <__aeabi_dmul+0xde>
 800096c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000970:	bf08      	it	eq
 8000972:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000984:	ea46 0101 	orr.w	r1, r6, r1
 8000988:	ea40 0002 	orr.w	r0, r0, r2
 800098c:	ea81 0103 	eor.w	r1, r1, r3
 8000990:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	f300 80ab 	bgt.w	8000b04 <__aeabi_dmul+0x238>
 80009ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80009b2:	bfde      	ittt	le
 80009b4:	2000      	movle	r0, #0
 80009b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80009ba:	bd70      	pople	{r4, r5, r6, pc}
 80009bc:	f1c4 0400 	rsb	r4, r4, #0
 80009c0:	3c20      	subs	r4, #32
 80009c2:	da35      	bge.n	8000a30 <__aeabi_dmul+0x164>
 80009c4:	340c      	adds	r4, #12
 80009c6:	dc1b      	bgt.n	8000a00 <__aeabi_dmul+0x134>
 80009c8:	f104 0414 	add.w	r4, r4, #20
 80009cc:	f1c4 0520 	rsb	r5, r4, #32
 80009d0:	fa00 f305 	lsl.w	r3, r0, r5
 80009d4:	fa20 f004 	lsr.w	r0, r0, r4
 80009d8:	fa01 f205 	lsl.w	r2, r1, r5
 80009dc:	ea40 0002 	orr.w	r0, r0, r2
 80009e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80009e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80009e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009ec:	fa21 f604 	lsr.w	r6, r1, r4
 80009f0:	eb42 0106 	adc.w	r1, r2, r6
 80009f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f8:	bf08      	it	eq
 80009fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f1c4 040c 	rsb	r4, r4, #12
 8000a04:	f1c4 0520 	rsb	r5, r4, #32
 8000a08:	fa00 f304 	lsl.w	r3, r0, r4
 8000a0c:	fa20 f005 	lsr.w	r0, r0, r5
 8000a10:	fa01 f204 	lsl.w	r2, r1, r4
 8000a14:	ea40 0002 	orr.w	r0, r0, r2
 8000a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a1c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000a20:	f141 0100 	adc.w	r1, r1, #0
 8000a24:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a28:	bf08      	it	eq
 8000a2a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f1c4 0520 	rsb	r5, r4, #32
 8000a34:	fa00 f205 	lsl.w	r2, r0, r5
 8000a38:	ea4e 0e02 	orr.w	lr, lr, r2
 8000a3c:	fa20 f304 	lsr.w	r3, r0, r4
 8000a40:	fa01 f205 	lsl.w	r2, r1, r5
 8000a44:	ea43 0302 	orr.w	r3, r3, r2
 8000a48:	fa21 f004 	lsr.w	r0, r1, r4
 8000a4c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a50:	fa21 f204 	lsr.w	r2, r1, r4
 8000a54:	ea20 0002 	bic.w	r0, r0, r2
 8000a58:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a5c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a60:	bf08      	it	eq
 8000a62:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a66:	bd70      	pop	{r4, r5, r6, pc}
 8000a68:	f094 0f00 	teq	r4, #0
 8000a6c:	d10f      	bne.n	8000a8e <__aeabi_dmul+0x1c2>
 8000a6e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a72:	0040      	lsls	r0, r0, #1
 8000a74:	eb41 0101 	adc.w	r1, r1, r1
 8000a78:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a7c:	bf08      	it	eq
 8000a7e:	3c01      	subeq	r4, #1
 8000a80:	d0f7      	beq.n	8000a72 <__aeabi_dmul+0x1a6>
 8000a82:	ea41 0106 	orr.w	r1, r1, r6
 8000a86:	f095 0f00 	teq	r5, #0
 8000a8a:	bf18      	it	ne
 8000a8c:	4770      	bxne	lr
 8000a8e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a92:	0052      	lsls	r2, r2, #1
 8000a94:	eb43 0303 	adc.w	r3, r3, r3
 8000a98:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a9c:	bf08      	it	eq
 8000a9e:	3d01      	subeq	r5, #1
 8000aa0:	d0f7      	beq.n	8000a92 <__aeabi_dmul+0x1c6>
 8000aa2:	ea43 0306 	orr.w	r3, r3, r6
 8000aa6:	4770      	bx	lr
 8000aa8:	ea94 0f0c 	teq	r4, ip
 8000aac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000ab0:	bf18      	it	ne
 8000ab2:	ea95 0f0c 	teqne	r5, ip
 8000ab6:	d00c      	beq.n	8000ad2 <__aeabi_dmul+0x206>
 8000ab8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000abc:	bf18      	it	ne
 8000abe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ac2:	d1d1      	bne.n	8000a68 <__aeabi_dmul+0x19c>
 8000ac4:	ea81 0103 	eor.w	r1, r1, r3
 8000ac8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ad6:	bf06      	itte	eq
 8000ad8:	4610      	moveq	r0, r2
 8000ada:	4619      	moveq	r1, r3
 8000adc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ae0:	d019      	beq.n	8000b16 <__aeabi_dmul+0x24a>
 8000ae2:	ea94 0f0c 	teq	r4, ip
 8000ae6:	d102      	bne.n	8000aee <__aeabi_dmul+0x222>
 8000ae8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000aec:	d113      	bne.n	8000b16 <__aeabi_dmul+0x24a>
 8000aee:	ea95 0f0c 	teq	r5, ip
 8000af2:	d105      	bne.n	8000b00 <__aeabi_dmul+0x234>
 8000af4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000af8:	bf1c      	itt	ne
 8000afa:	4610      	movne	r0, r2
 8000afc:	4619      	movne	r1, r3
 8000afe:	d10a      	bne.n	8000b16 <__aeabi_dmul+0x24a>
 8000b00:	ea81 0103 	eor.w	r1, r1, r3
 8000b04:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000b08:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000b10:	f04f 0000 	mov.w	r0, #0
 8000b14:	bd70      	pop	{r4, r5, r6, pc}
 8000b16:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000b1a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000b1e:	bd70      	pop	{r4, r5, r6, pc}

08000b20 <__aeabi_ddiv>:
 8000b20:	b570      	push	{r4, r5, r6, lr}
 8000b22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000b2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000b2e:	bf1d      	ittte	ne
 8000b30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000b34:	ea94 0f0c 	teqne	r4, ip
 8000b38:	ea95 0f0c 	teqne	r5, ip
 8000b3c:	f000 f8a7 	bleq	8000c8e <__aeabi_ddiv+0x16e>
 8000b40:	eba4 0405 	sub.w	r4, r4, r5
 8000b44:	ea81 0e03 	eor.w	lr, r1, r3
 8000b48:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b4c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b50:	f000 8088 	beq.w	8000c64 <__aeabi_ddiv+0x144>
 8000b54:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b58:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000b5c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b60:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b64:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b68:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b6c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b70:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b74:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b78:	429d      	cmp	r5, r3
 8000b7a:	bf08      	it	eq
 8000b7c:	4296      	cmpeq	r6, r2
 8000b7e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b82:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b86:	d202      	bcs.n	8000b8e <__aeabi_ddiv+0x6e>
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8e:	1ab6      	subs	r6, r6, r2
 8000b90:	eb65 0503 	sbc.w	r5, r5, r3
 8000b94:	085b      	lsrs	r3, r3, #1
 8000b96:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b9a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b9e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000ba2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ba6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000baa:	bf22      	ittt	cs
 8000bac:	1ab6      	subcs	r6, r6, r2
 8000bae:	4675      	movcs	r5, lr
 8000bb0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000bb4:	085b      	lsrs	r3, r3, #1
 8000bb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bba:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bbe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bc2:	bf22      	ittt	cs
 8000bc4:	1ab6      	subcs	r6, r6, r2
 8000bc6:	4675      	movcs	r5, lr
 8000bc8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bd2:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bd6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bda:	bf22      	ittt	cs
 8000bdc:	1ab6      	subcs	r6, r6, r2
 8000bde:	4675      	movcs	r5, lr
 8000be0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000be4:	085b      	lsrs	r3, r3, #1
 8000be6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000bea:	ebb6 0e02 	subs.w	lr, r6, r2
 8000bee:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bf2:	bf22      	ittt	cs
 8000bf4:	1ab6      	subcs	r6, r6, r2
 8000bf6:	4675      	movcs	r5, lr
 8000bf8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bfc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000c00:	d018      	beq.n	8000c34 <__aeabi_ddiv+0x114>
 8000c02:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000c06:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000c0a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000c0e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000c12:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000c16:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000c1a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000c1e:	d1c0      	bne.n	8000ba2 <__aeabi_ddiv+0x82>
 8000c20:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c24:	d10b      	bne.n	8000c3e <__aeabi_ddiv+0x11e>
 8000c26:	ea41 0100 	orr.w	r1, r1, r0
 8000c2a:	f04f 0000 	mov.w	r0, #0
 8000c2e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000c32:	e7b6      	b.n	8000ba2 <__aeabi_ddiv+0x82>
 8000c34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000c38:	bf04      	itt	eq
 8000c3a:	4301      	orreq	r1, r0
 8000c3c:	2000      	moveq	r0, #0
 8000c3e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000c42:	bf88      	it	hi
 8000c44:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000c48:	f63f aeaf 	bhi.w	80009aa <__aeabi_dmul+0xde>
 8000c4c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c50:	bf04      	itt	eq
 8000c52:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c56:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c5a:	f150 0000 	adcs.w	r0, r0, #0
 8000c5e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c62:	bd70      	pop	{r4, r5, r6, pc}
 8000c64:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000c68:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c6c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c70:	bfc2      	ittt	gt
 8000c72:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c76:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c7a:	bd70      	popgt	{r4, r5, r6, pc}
 8000c7c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c80:	f04f 0e00 	mov.w	lr, #0
 8000c84:	3c01      	subs	r4, #1
 8000c86:	e690      	b.n	80009aa <__aeabi_dmul+0xde>
 8000c88:	ea45 0e06 	orr.w	lr, r5, r6
 8000c8c:	e68d      	b.n	80009aa <__aeabi_dmul+0xde>
 8000c8e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c92:	ea94 0f0c 	teq	r4, ip
 8000c96:	bf08      	it	eq
 8000c98:	ea95 0f0c 	teqeq	r5, ip
 8000c9c:	f43f af3b 	beq.w	8000b16 <__aeabi_dmul+0x24a>
 8000ca0:	ea94 0f0c 	teq	r4, ip
 8000ca4:	d10a      	bne.n	8000cbc <__aeabi_ddiv+0x19c>
 8000ca6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000caa:	f47f af34 	bne.w	8000b16 <__aeabi_dmul+0x24a>
 8000cae:	ea95 0f0c 	teq	r5, ip
 8000cb2:	f47f af25 	bne.w	8000b00 <__aeabi_dmul+0x234>
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	e72c      	b.n	8000b16 <__aeabi_dmul+0x24a>
 8000cbc:	ea95 0f0c 	teq	r5, ip
 8000cc0:	d106      	bne.n	8000cd0 <__aeabi_ddiv+0x1b0>
 8000cc2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000cc6:	f43f aefd 	beq.w	8000ac4 <__aeabi_dmul+0x1f8>
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	e722      	b.n	8000b16 <__aeabi_dmul+0x24a>
 8000cd0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000cd4:	bf18      	it	ne
 8000cd6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000cda:	f47f aec5 	bne.w	8000a68 <__aeabi_dmul+0x19c>
 8000cde:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ce2:	f47f af0d 	bne.w	8000b00 <__aeabi_dmul+0x234>
 8000ce6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000cea:	f47f aeeb 	bne.w	8000ac4 <__aeabi_dmul+0x1f8>
 8000cee:	e712      	b.n	8000b16 <__aeabi_dmul+0x24a>

08000cf0 <__gedf2>:
 8000cf0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000cf4:	e006      	b.n	8000d04 <__cmpdf2+0x4>
 8000cf6:	bf00      	nop

08000cf8 <__ledf2>:
 8000cf8:	f04f 0c01 	mov.w	ip, #1
 8000cfc:	e002      	b.n	8000d04 <__cmpdf2+0x4>
 8000cfe:	bf00      	nop

08000d00 <__cmpdf2>:
 8000d00:	f04f 0c01 	mov.w	ip, #1
 8000d04:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d14:	bf18      	it	ne
 8000d16:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000d1a:	d01b      	beq.n	8000d54 <__cmpdf2+0x54>
 8000d1c:	b001      	add	sp, #4
 8000d1e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000d22:	bf0c      	ite	eq
 8000d24:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000d28:	ea91 0f03 	teqne	r1, r3
 8000d2c:	bf02      	ittt	eq
 8000d2e:	ea90 0f02 	teqeq	r0, r2
 8000d32:	2000      	moveq	r0, #0
 8000d34:	4770      	bxeq	lr
 8000d36:	f110 0f00 	cmn.w	r0, #0
 8000d3a:	ea91 0f03 	teq	r1, r3
 8000d3e:	bf58      	it	pl
 8000d40:	4299      	cmppl	r1, r3
 8000d42:	bf08      	it	eq
 8000d44:	4290      	cmpeq	r0, r2
 8000d46:	bf2c      	ite	cs
 8000d48:	17d8      	asrcs	r0, r3, #31
 8000d4a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d4e:	f040 0001 	orr.w	r0, r0, #1
 8000d52:	4770      	bx	lr
 8000d54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d5c:	d102      	bne.n	8000d64 <__cmpdf2+0x64>
 8000d5e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d62:	d107      	bne.n	8000d74 <__cmpdf2+0x74>
 8000d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d6c:	d1d6      	bne.n	8000d1c <__cmpdf2+0x1c>
 8000d6e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d72:	d0d3      	beq.n	8000d1c <__cmpdf2+0x1c>
 8000d74:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <__aeabi_cdrcmple>:
 8000d7c:	4684      	mov	ip, r0
 8000d7e:	4610      	mov	r0, r2
 8000d80:	4662      	mov	r2, ip
 8000d82:	468c      	mov	ip, r1
 8000d84:	4619      	mov	r1, r3
 8000d86:	4663      	mov	r3, ip
 8000d88:	e000      	b.n	8000d8c <__aeabi_cdcmpeq>
 8000d8a:	bf00      	nop

08000d8c <__aeabi_cdcmpeq>:
 8000d8c:	b501      	push	{r0, lr}
 8000d8e:	f7ff ffb7 	bl	8000d00 <__cmpdf2>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	bf48      	it	mi
 8000d96:	f110 0f00 	cmnmi.w	r0, #0
 8000d9a:	bd01      	pop	{r0, pc}

08000d9c <__aeabi_dcmpeq>:
 8000d9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000da0:	f7ff fff4 	bl	8000d8c <__aeabi_cdcmpeq>
 8000da4:	bf0c      	ite	eq
 8000da6:	2001      	moveq	r0, #1
 8000da8:	2000      	movne	r0, #0
 8000daa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dae:	bf00      	nop

08000db0 <__aeabi_dcmplt>:
 8000db0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000db4:	f7ff ffea 	bl	8000d8c <__aeabi_cdcmpeq>
 8000db8:	bf34      	ite	cc
 8000dba:	2001      	movcc	r0, #1
 8000dbc:	2000      	movcs	r0, #0
 8000dbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dc2:	bf00      	nop

08000dc4 <__aeabi_dcmple>:
 8000dc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dc8:	f7ff ffe0 	bl	8000d8c <__aeabi_cdcmpeq>
 8000dcc:	bf94      	ite	ls
 8000dce:	2001      	movls	r0, #1
 8000dd0:	2000      	movhi	r0, #0
 8000dd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dd6:	bf00      	nop

08000dd8 <__aeabi_dcmpge>:
 8000dd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ddc:	f7ff ffce 	bl	8000d7c <__aeabi_cdrcmple>
 8000de0:	bf94      	ite	ls
 8000de2:	2001      	movls	r0, #1
 8000de4:	2000      	movhi	r0, #0
 8000de6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dea:	bf00      	nop

08000dec <__aeabi_dcmpgt>:
 8000dec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000df0:	f7ff ffc4 	bl	8000d7c <__aeabi_cdrcmple>
 8000df4:	bf34      	ite	cc
 8000df6:	2001      	movcc	r0, #1
 8000df8:	2000      	movcs	r0, #0
 8000dfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dfe:	bf00      	nop

08000e00 <__aeabi_dcmpun>:
 8000e00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000e04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e08:	d102      	bne.n	8000e10 <__aeabi_dcmpun+0x10>
 8000e0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000e0e:	d10a      	bne.n	8000e26 <__aeabi_dcmpun+0x26>
 8000e10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000e14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000e18:	d102      	bne.n	8000e20 <__aeabi_dcmpun+0x20>
 8000e1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000e1e:	d102      	bne.n	8000e26 <__aeabi_dcmpun+0x26>
 8000e20:	f04f 0000 	mov.w	r0, #0
 8000e24:	4770      	bx	lr
 8000e26:	f04f 0001 	mov.w	r0, #1
 8000e2a:	4770      	bx	lr

08000e2c <__aeabi_d2iz>:
 8000e2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000e34:	d215      	bcs.n	8000e62 <__aeabi_d2iz+0x36>
 8000e36:	d511      	bpl.n	8000e5c <__aeabi_d2iz+0x30>
 8000e38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000e3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e40:	d912      	bls.n	8000e68 <__aeabi_d2iz+0x3c>
 8000e42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000e52:	fa23 f002 	lsr.w	r0, r3, r2
 8000e56:	bf18      	it	ne
 8000e58:	4240      	negne	r0, r0
 8000e5a:	4770      	bx	lr
 8000e5c:	f04f 0000 	mov.w	r0, #0
 8000e60:	4770      	bx	lr
 8000e62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e66:	d105      	bne.n	8000e74 <__aeabi_d2iz+0x48>
 8000e68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000e6c:	bf08      	it	eq
 8000e6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e72:	4770      	bx	lr
 8000e74:	f04f 0000 	mov.w	r0, #0
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop

08000e7c <__aeabi_d2f>:
 8000e7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000e84:	bf24      	itt	cs
 8000e86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000e8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000e8e:	d90d      	bls.n	8000eac <__aeabi_d2f+0x30>
 8000e90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ea0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ea4:	bf08      	it	eq
 8000ea6:	f020 0001 	biceq.w	r0, r0, #1
 8000eaa:	4770      	bx	lr
 8000eac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000eb0:	d121      	bne.n	8000ef6 <__aeabi_d2f+0x7a>
 8000eb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000eb6:	bfbc      	itt	lt
 8000eb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ebc:	4770      	bxlt	lr
 8000ebe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ec2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ec6:	f1c2 0218 	rsb	r2, r2, #24
 8000eca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ece:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ed2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ed6:	bf18      	it	ne
 8000ed8:	f040 0001 	orrne.w	r0, r0, #1
 8000edc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ee0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ee4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ee8:	ea40 000c 	orr.w	r0, r0, ip
 8000eec:	fa23 f302 	lsr.w	r3, r3, r2
 8000ef0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ef4:	e7cc      	b.n	8000e90 <__aeabi_d2f+0x14>
 8000ef6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000efa:	d107      	bne.n	8000f0c <__aeabi_d2f+0x90>
 8000efc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000f00:	bf1e      	ittt	ne
 8000f02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000f06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000f0a:	4770      	bxne	lr
 8000f0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000f10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__aeabi_uldivmod>:
 8000f1c:	b953      	cbnz	r3, 8000f34 <__aeabi_uldivmod+0x18>
 8000f1e:	b94a      	cbnz	r2, 8000f34 <__aeabi_uldivmod+0x18>
 8000f20:	2900      	cmp	r1, #0
 8000f22:	bf08      	it	eq
 8000f24:	2800      	cmpeq	r0, #0
 8000f26:	bf1c      	itt	ne
 8000f28:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000f2c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000f30:	f000 b972 	b.w	8001218 <__aeabi_idiv0>
 8000f34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f3c:	f000 f806 	bl	8000f4c <__udivmoddi4>
 8000f40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f48:	b004      	add	sp, #16
 8000f4a:	4770      	bx	lr

08000f4c <__udivmoddi4>:
 8000f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f50:	9e08      	ldr	r6, [sp, #32]
 8000f52:	4604      	mov	r4, r0
 8000f54:	4688      	mov	r8, r1
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d14b      	bne.n	8000ff2 <__udivmoddi4+0xa6>
 8000f5a:	428a      	cmp	r2, r1
 8000f5c:	4615      	mov	r5, r2
 8000f5e:	d967      	bls.n	8001030 <__udivmoddi4+0xe4>
 8000f60:	fab2 f282 	clz	r2, r2
 8000f64:	b14a      	cbz	r2, 8000f7a <__udivmoddi4+0x2e>
 8000f66:	f1c2 0720 	rsb	r7, r2, #32
 8000f6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000f6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000f72:	4095      	lsls	r5, r2
 8000f74:	ea47 0803 	orr.w	r8, r7, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f7e:	0c23      	lsrs	r3, r4, #16
 8000f80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000f84:	fa1f fc85 	uxth.w	ip, r5
 8000f88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000f8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f90:	fb07 f10c 	mul.w	r1, r7, ip
 8000f94:	4299      	cmp	r1, r3
 8000f96:	d909      	bls.n	8000fac <__udivmoddi4+0x60>
 8000f98:	18eb      	adds	r3, r5, r3
 8000f9a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000f9e:	f080 811b 	bcs.w	80011d8 <__udivmoddi4+0x28c>
 8000fa2:	4299      	cmp	r1, r3
 8000fa4:	f240 8118 	bls.w	80011d8 <__udivmoddi4+0x28c>
 8000fa8:	3f02      	subs	r7, #2
 8000faa:	442b      	add	r3, r5
 8000fac:	1a5b      	subs	r3, r3, r1
 8000fae:	b2a4      	uxth	r4, r4
 8000fb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fc0:	45a4      	cmp	ip, r4
 8000fc2:	d909      	bls.n	8000fd8 <__udivmoddi4+0x8c>
 8000fc4:	192c      	adds	r4, r5, r4
 8000fc6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fca:	f080 8107 	bcs.w	80011dc <__udivmoddi4+0x290>
 8000fce:	45a4      	cmp	ip, r4
 8000fd0:	f240 8104 	bls.w	80011dc <__udivmoddi4+0x290>
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	442c      	add	r4, r5
 8000fd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000fdc:	eba4 040c 	sub.w	r4, r4, ip
 8000fe0:	2700      	movs	r7, #0
 8000fe2:	b11e      	cbz	r6, 8000fec <__udivmoddi4+0xa0>
 8000fe4:	40d4      	lsrs	r4, r2
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e9c6 4300 	strd	r4, r3, [r6]
 8000fec:	4639      	mov	r1, r7
 8000fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff2:	428b      	cmp	r3, r1
 8000ff4:	d909      	bls.n	800100a <__udivmoddi4+0xbe>
 8000ff6:	2e00      	cmp	r6, #0
 8000ff8:	f000 80eb 	beq.w	80011d2 <__udivmoddi4+0x286>
 8000ffc:	2700      	movs	r7, #0
 8000ffe:	e9c6 0100 	strd	r0, r1, [r6]
 8001002:	4638      	mov	r0, r7
 8001004:	4639      	mov	r1, r7
 8001006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100a:	fab3 f783 	clz	r7, r3
 800100e:	2f00      	cmp	r7, #0
 8001010:	d147      	bne.n	80010a2 <__udivmoddi4+0x156>
 8001012:	428b      	cmp	r3, r1
 8001014:	d302      	bcc.n	800101c <__udivmoddi4+0xd0>
 8001016:	4282      	cmp	r2, r0
 8001018:	f200 80fa 	bhi.w	8001210 <__udivmoddi4+0x2c4>
 800101c:	1a84      	subs	r4, r0, r2
 800101e:	eb61 0303 	sbc.w	r3, r1, r3
 8001022:	2001      	movs	r0, #1
 8001024:	4698      	mov	r8, r3
 8001026:	2e00      	cmp	r6, #0
 8001028:	d0e0      	beq.n	8000fec <__udivmoddi4+0xa0>
 800102a:	e9c6 4800 	strd	r4, r8, [r6]
 800102e:	e7dd      	b.n	8000fec <__udivmoddi4+0xa0>
 8001030:	b902      	cbnz	r2, 8001034 <__udivmoddi4+0xe8>
 8001032:	deff      	udf	#255	; 0xff
 8001034:	fab2 f282 	clz	r2, r2
 8001038:	2a00      	cmp	r2, #0
 800103a:	f040 808f 	bne.w	800115c <__udivmoddi4+0x210>
 800103e:	1b49      	subs	r1, r1, r5
 8001040:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001044:	fa1f f885 	uxth.w	r8, r5
 8001048:	2701      	movs	r7, #1
 800104a:	fbb1 fcfe 	udiv	ip, r1, lr
 800104e:	0c23      	lsrs	r3, r4, #16
 8001050:	fb0e 111c 	mls	r1, lr, ip, r1
 8001054:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001058:	fb08 f10c 	mul.w	r1, r8, ip
 800105c:	4299      	cmp	r1, r3
 800105e:	d907      	bls.n	8001070 <__udivmoddi4+0x124>
 8001060:	18eb      	adds	r3, r5, r3
 8001062:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8001066:	d202      	bcs.n	800106e <__udivmoddi4+0x122>
 8001068:	4299      	cmp	r1, r3
 800106a:	f200 80cd 	bhi.w	8001208 <__udivmoddi4+0x2bc>
 800106e:	4684      	mov	ip, r0
 8001070:	1a59      	subs	r1, r3, r1
 8001072:	b2a3      	uxth	r3, r4
 8001074:	fbb1 f0fe 	udiv	r0, r1, lr
 8001078:	fb0e 1410 	mls	r4, lr, r0, r1
 800107c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8001080:	fb08 f800 	mul.w	r8, r8, r0
 8001084:	45a0      	cmp	r8, r4
 8001086:	d907      	bls.n	8001098 <__udivmoddi4+0x14c>
 8001088:	192c      	adds	r4, r5, r4
 800108a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800108e:	d202      	bcs.n	8001096 <__udivmoddi4+0x14a>
 8001090:	45a0      	cmp	r8, r4
 8001092:	f200 80b6 	bhi.w	8001202 <__udivmoddi4+0x2b6>
 8001096:	4618      	mov	r0, r3
 8001098:	eba4 0408 	sub.w	r4, r4, r8
 800109c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80010a0:	e79f      	b.n	8000fe2 <__udivmoddi4+0x96>
 80010a2:	f1c7 0c20 	rsb	ip, r7, #32
 80010a6:	40bb      	lsls	r3, r7
 80010a8:	fa22 fe0c 	lsr.w	lr, r2, ip
 80010ac:	ea4e 0e03 	orr.w	lr, lr, r3
 80010b0:	fa01 f407 	lsl.w	r4, r1, r7
 80010b4:	fa20 f50c 	lsr.w	r5, r0, ip
 80010b8:	fa21 f30c 	lsr.w	r3, r1, ip
 80010bc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80010c0:	4325      	orrs	r5, r4
 80010c2:	fbb3 f9f8 	udiv	r9, r3, r8
 80010c6:	0c2c      	lsrs	r4, r5, #16
 80010c8:	fb08 3319 	mls	r3, r8, r9, r3
 80010cc:	fa1f fa8e 	uxth.w	sl, lr
 80010d0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80010d4:	fb09 f40a 	mul.w	r4, r9, sl
 80010d8:	429c      	cmp	r4, r3
 80010da:	fa02 f207 	lsl.w	r2, r2, r7
 80010de:	fa00 f107 	lsl.w	r1, r0, r7
 80010e2:	d90b      	bls.n	80010fc <__udivmoddi4+0x1b0>
 80010e4:	eb1e 0303 	adds.w	r3, lr, r3
 80010e8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80010ec:	f080 8087 	bcs.w	80011fe <__udivmoddi4+0x2b2>
 80010f0:	429c      	cmp	r4, r3
 80010f2:	f240 8084 	bls.w	80011fe <__udivmoddi4+0x2b2>
 80010f6:	f1a9 0902 	sub.w	r9, r9, #2
 80010fa:	4473      	add	r3, lr
 80010fc:	1b1b      	subs	r3, r3, r4
 80010fe:	b2ad      	uxth	r5, r5
 8001100:	fbb3 f0f8 	udiv	r0, r3, r8
 8001104:	fb08 3310 	mls	r3, r8, r0, r3
 8001108:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 800110c:	fb00 fa0a 	mul.w	sl, r0, sl
 8001110:	45a2      	cmp	sl, r4
 8001112:	d908      	bls.n	8001126 <__udivmoddi4+0x1da>
 8001114:	eb1e 0404 	adds.w	r4, lr, r4
 8001118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800111c:	d26b      	bcs.n	80011f6 <__udivmoddi4+0x2aa>
 800111e:	45a2      	cmp	sl, r4
 8001120:	d969      	bls.n	80011f6 <__udivmoddi4+0x2aa>
 8001122:	3802      	subs	r0, #2
 8001124:	4474      	add	r4, lr
 8001126:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800112a:	fba0 8902 	umull	r8, r9, r0, r2
 800112e:	eba4 040a 	sub.w	r4, r4, sl
 8001132:	454c      	cmp	r4, r9
 8001134:	46c2      	mov	sl, r8
 8001136:	464b      	mov	r3, r9
 8001138:	d354      	bcc.n	80011e4 <__udivmoddi4+0x298>
 800113a:	d051      	beq.n	80011e0 <__udivmoddi4+0x294>
 800113c:	2e00      	cmp	r6, #0
 800113e:	d069      	beq.n	8001214 <__udivmoddi4+0x2c8>
 8001140:	ebb1 050a 	subs.w	r5, r1, sl
 8001144:	eb64 0403 	sbc.w	r4, r4, r3
 8001148:	fa04 fc0c 	lsl.w	ip, r4, ip
 800114c:	40fd      	lsrs	r5, r7
 800114e:	40fc      	lsrs	r4, r7
 8001150:	ea4c 0505 	orr.w	r5, ip, r5
 8001154:	e9c6 5400 	strd	r5, r4, [r6]
 8001158:	2700      	movs	r7, #0
 800115a:	e747      	b.n	8000fec <__udivmoddi4+0xa0>
 800115c:	f1c2 0320 	rsb	r3, r2, #32
 8001160:	fa20 f703 	lsr.w	r7, r0, r3
 8001164:	4095      	lsls	r5, r2
 8001166:	fa01 f002 	lsl.w	r0, r1, r2
 800116a:	fa21 f303 	lsr.w	r3, r1, r3
 800116e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8001172:	4338      	orrs	r0, r7
 8001174:	0c01      	lsrs	r1, r0, #16
 8001176:	fbb3 f7fe 	udiv	r7, r3, lr
 800117a:	fa1f f885 	uxth.w	r8, r5
 800117e:	fb0e 3317 	mls	r3, lr, r7, r3
 8001182:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001186:	fb07 f308 	mul.w	r3, r7, r8
 800118a:	428b      	cmp	r3, r1
 800118c:	fa04 f402 	lsl.w	r4, r4, r2
 8001190:	d907      	bls.n	80011a2 <__udivmoddi4+0x256>
 8001192:	1869      	adds	r1, r5, r1
 8001194:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8001198:	d22f      	bcs.n	80011fa <__udivmoddi4+0x2ae>
 800119a:	428b      	cmp	r3, r1
 800119c:	d92d      	bls.n	80011fa <__udivmoddi4+0x2ae>
 800119e:	3f02      	subs	r7, #2
 80011a0:	4429      	add	r1, r5
 80011a2:	1acb      	subs	r3, r1, r3
 80011a4:	b281      	uxth	r1, r0
 80011a6:	fbb3 f0fe 	udiv	r0, r3, lr
 80011aa:	fb0e 3310 	mls	r3, lr, r0, r3
 80011ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80011b2:	fb00 f308 	mul.w	r3, r0, r8
 80011b6:	428b      	cmp	r3, r1
 80011b8:	d907      	bls.n	80011ca <__udivmoddi4+0x27e>
 80011ba:	1869      	adds	r1, r5, r1
 80011bc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80011c0:	d217      	bcs.n	80011f2 <__udivmoddi4+0x2a6>
 80011c2:	428b      	cmp	r3, r1
 80011c4:	d915      	bls.n	80011f2 <__udivmoddi4+0x2a6>
 80011c6:	3802      	subs	r0, #2
 80011c8:	4429      	add	r1, r5
 80011ca:	1ac9      	subs	r1, r1, r3
 80011cc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80011d0:	e73b      	b.n	800104a <__udivmoddi4+0xfe>
 80011d2:	4637      	mov	r7, r6
 80011d4:	4630      	mov	r0, r6
 80011d6:	e709      	b.n	8000fec <__udivmoddi4+0xa0>
 80011d8:	4607      	mov	r7, r0
 80011da:	e6e7      	b.n	8000fac <__udivmoddi4+0x60>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6fb      	b.n	8000fd8 <__udivmoddi4+0x8c>
 80011e0:	4541      	cmp	r1, r8
 80011e2:	d2ab      	bcs.n	800113c <__udivmoddi4+0x1f0>
 80011e4:	ebb8 0a02 	subs.w	sl, r8, r2
 80011e8:	eb69 020e 	sbc.w	r2, r9, lr
 80011ec:	3801      	subs	r0, #1
 80011ee:	4613      	mov	r3, r2
 80011f0:	e7a4      	b.n	800113c <__udivmoddi4+0x1f0>
 80011f2:	4660      	mov	r0, ip
 80011f4:	e7e9      	b.n	80011ca <__udivmoddi4+0x27e>
 80011f6:	4618      	mov	r0, r3
 80011f8:	e795      	b.n	8001126 <__udivmoddi4+0x1da>
 80011fa:	4667      	mov	r7, ip
 80011fc:	e7d1      	b.n	80011a2 <__udivmoddi4+0x256>
 80011fe:	4681      	mov	r9, r0
 8001200:	e77c      	b.n	80010fc <__udivmoddi4+0x1b0>
 8001202:	3802      	subs	r0, #2
 8001204:	442c      	add	r4, r5
 8001206:	e747      	b.n	8001098 <__udivmoddi4+0x14c>
 8001208:	f1ac 0c02 	sub.w	ip, ip, #2
 800120c:	442b      	add	r3, r5
 800120e:	e72f      	b.n	8001070 <__udivmoddi4+0x124>
 8001210:	4638      	mov	r0, r7
 8001212:	e708      	b.n	8001026 <__udivmoddi4+0xda>
 8001214:	4637      	mov	r7, r6
 8001216:	e6e9      	b.n	8000fec <__udivmoddi4+0xa0>

08001218 <__aeabi_idiv0>:
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop

0800121c <__errno>:
 800121c:	4b01      	ldr	r3, [pc, #4]	; (8001224 <__errno+0x8>)
 800121e:	6818      	ldr	r0, [r3, #0]
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000808 	.word	0x20000808

08001228 <memcpy>:
 8001228:	4684      	mov	ip, r0
 800122a:	ea41 0300 	orr.w	r3, r1, r0
 800122e:	f013 0303 	ands.w	r3, r3, #3
 8001232:	d16d      	bne.n	8001310 <memcpy+0xe8>
 8001234:	3a40      	subs	r2, #64	; 0x40
 8001236:	d341      	bcc.n	80012bc <memcpy+0x94>
 8001238:	f851 3b04 	ldr.w	r3, [r1], #4
 800123c:	f840 3b04 	str.w	r3, [r0], #4
 8001240:	f851 3b04 	ldr.w	r3, [r1], #4
 8001244:	f840 3b04 	str.w	r3, [r0], #4
 8001248:	f851 3b04 	ldr.w	r3, [r1], #4
 800124c:	f840 3b04 	str.w	r3, [r0], #4
 8001250:	f851 3b04 	ldr.w	r3, [r1], #4
 8001254:	f840 3b04 	str.w	r3, [r0], #4
 8001258:	f851 3b04 	ldr.w	r3, [r1], #4
 800125c:	f840 3b04 	str.w	r3, [r0], #4
 8001260:	f851 3b04 	ldr.w	r3, [r1], #4
 8001264:	f840 3b04 	str.w	r3, [r0], #4
 8001268:	f851 3b04 	ldr.w	r3, [r1], #4
 800126c:	f840 3b04 	str.w	r3, [r0], #4
 8001270:	f851 3b04 	ldr.w	r3, [r1], #4
 8001274:	f840 3b04 	str.w	r3, [r0], #4
 8001278:	f851 3b04 	ldr.w	r3, [r1], #4
 800127c:	f840 3b04 	str.w	r3, [r0], #4
 8001280:	f851 3b04 	ldr.w	r3, [r1], #4
 8001284:	f840 3b04 	str.w	r3, [r0], #4
 8001288:	f851 3b04 	ldr.w	r3, [r1], #4
 800128c:	f840 3b04 	str.w	r3, [r0], #4
 8001290:	f851 3b04 	ldr.w	r3, [r1], #4
 8001294:	f840 3b04 	str.w	r3, [r0], #4
 8001298:	f851 3b04 	ldr.w	r3, [r1], #4
 800129c:	f840 3b04 	str.w	r3, [r0], #4
 80012a0:	f851 3b04 	ldr.w	r3, [r1], #4
 80012a4:	f840 3b04 	str.w	r3, [r0], #4
 80012a8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012ac:	f840 3b04 	str.w	r3, [r0], #4
 80012b0:	f851 3b04 	ldr.w	r3, [r1], #4
 80012b4:	f840 3b04 	str.w	r3, [r0], #4
 80012b8:	3a40      	subs	r2, #64	; 0x40
 80012ba:	d2bd      	bcs.n	8001238 <memcpy+0x10>
 80012bc:	3230      	adds	r2, #48	; 0x30
 80012be:	d311      	bcc.n	80012e4 <memcpy+0xbc>
 80012c0:	f851 3b04 	ldr.w	r3, [r1], #4
 80012c4:	f840 3b04 	str.w	r3, [r0], #4
 80012c8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012cc:	f840 3b04 	str.w	r3, [r0], #4
 80012d0:	f851 3b04 	ldr.w	r3, [r1], #4
 80012d4:	f840 3b04 	str.w	r3, [r0], #4
 80012d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012dc:	f840 3b04 	str.w	r3, [r0], #4
 80012e0:	3a10      	subs	r2, #16
 80012e2:	d2ed      	bcs.n	80012c0 <memcpy+0x98>
 80012e4:	320c      	adds	r2, #12
 80012e6:	d305      	bcc.n	80012f4 <memcpy+0xcc>
 80012e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80012ec:	f840 3b04 	str.w	r3, [r0], #4
 80012f0:	3a04      	subs	r2, #4
 80012f2:	d2f9      	bcs.n	80012e8 <memcpy+0xc0>
 80012f4:	3204      	adds	r2, #4
 80012f6:	d008      	beq.n	800130a <memcpy+0xe2>
 80012f8:	07d2      	lsls	r2, r2, #31
 80012fa:	bf1c      	itt	ne
 80012fc:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8001300:	f800 3b01 	strbne.w	r3, [r0], #1
 8001304:	d301      	bcc.n	800130a <memcpy+0xe2>
 8001306:	880b      	ldrh	r3, [r1, #0]
 8001308:	8003      	strh	r3, [r0, #0]
 800130a:	4660      	mov	r0, ip
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	2a08      	cmp	r2, #8
 8001312:	d313      	bcc.n	800133c <memcpy+0x114>
 8001314:	078b      	lsls	r3, r1, #30
 8001316:	d08d      	beq.n	8001234 <memcpy+0xc>
 8001318:	f010 0303 	ands.w	r3, r0, #3
 800131c:	d08a      	beq.n	8001234 <memcpy+0xc>
 800131e:	f1c3 0304 	rsb	r3, r3, #4
 8001322:	1ad2      	subs	r2, r2, r3
 8001324:	07db      	lsls	r3, r3, #31
 8001326:	bf1c      	itt	ne
 8001328:	f811 3b01 	ldrbne.w	r3, [r1], #1
 800132c:	f800 3b01 	strbne.w	r3, [r0], #1
 8001330:	d380      	bcc.n	8001234 <memcpy+0xc>
 8001332:	f831 3b02 	ldrh.w	r3, [r1], #2
 8001336:	f820 3b02 	strh.w	r3, [r0], #2
 800133a:	e77b      	b.n	8001234 <memcpy+0xc>
 800133c:	3a04      	subs	r2, #4
 800133e:	d3d9      	bcc.n	80012f4 <memcpy+0xcc>
 8001340:	3a01      	subs	r2, #1
 8001342:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001346:	f800 3b01 	strb.w	r3, [r0], #1
 800134a:	d2f9      	bcs.n	8001340 <memcpy+0x118>
 800134c:	780b      	ldrb	r3, [r1, #0]
 800134e:	7003      	strb	r3, [r0, #0]
 8001350:	784b      	ldrb	r3, [r1, #1]
 8001352:	7043      	strb	r3, [r0, #1]
 8001354:	788b      	ldrb	r3, [r1, #2]
 8001356:	7083      	strb	r3, [r0, #2]
 8001358:	4660      	mov	r0, ip
 800135a:	4770      	bx	lr

0800135c <memset>:
 800135c:	b4f0      	push	{r4, r5, r6, r7}
 800135e:	0786      	lsls	r6, r0, #30
 8001360:	d043      	beq.n	80013ea <memset+0x8e>
 8001362:	1e54      	subs	r4, r2, #1
 8001364:	2a00      	cmp	r2, #0
 8001366:	d03e      	beq.n	80013e6 <memset+0x8a>
 8001368:	b2ca      	uxtb	r2, r1
 800136a:	4603      	mov	r3, r0
 800136c:	e002      	b.n	8001374 <memset+0x18>
 800136e:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
 8001372:	d338      	bcc.n	80013e6 <memset+0x8a>
 8001374:	f803 2b01 	strb.w	r2, [r3], #1
 8001378:	079d      	lsls	r5, r3, #30
 800137a:	d1f8      	bne.n	800136e <memset+0x12>
 800137c:	2c03      	cmp	r4, #3
 800137e:	d92b      	bls.n	80013d8 <memset+0x7c>
 8001380:	b2cd      	uxtb	r5, r1
 8001382:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8001386:	2c0f      	cmp	r4, #15
 8001388:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800138c:	d916      	bls.n	80013bc <memset+0x60>
 800138e:	f1a4 0710 	sub.w	r7, r4, #16
 8001392:	093f      	lsrs	r7, r7, #4
 8001394:	f103 0620 	add.w	r6, r3, #32
 8001398:	eb06 1607 	add.w	r6, r6, r7, lsl #4
 800139c:	f103 0210 	add.w	r2, r3, #16
 80013a0:	e942 5504 	strd	r5, r5, [r2, #-16]
 80013a4:	e942 5502 	strd	r5, r5, [r2, #-8]
 80013a8:	3210      	adds	r2, #16
 80013aa:	42b2      	cmp	r2, r6
 80013ac:	d1f8      	bne.n	80013a0 <memset+0x44>
 80013ae:	f004 040f 	and.w	r4, r4, #15
 80013b2:	3701      	adds	r7, #1
 80013b4:	2c03      	cmp	r4, #3
 80013b6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
 80013ba:	d90d      	bls.n	80013d8 <memset+0x7c>
 80013bc:	461e      	mov	r6, r3
 80013be:	4622      	mov	r2, r4
 80013c0:	3a04      	subs	r2, #4
 80013c2:	2a03      	cmp	r2, #3
 80013c4:	f846 5b04 	str.w	r5, [r6], #4
 80013c8:	d8fa      	bhi.n	80013c0 <memset+0x64>
 80013ca:	1f22      	subs	r2, r4, #4
 80013cc:	f022 0203 	bic.w	r2, r2, #3
 80013d0:	3204      	adds	r2, #4
 80013d2:	4413      	add	r3, r2
 80013d4:	f004 0403 	and.w	r4, r4, #3
 80013d8:	b12c      	cbz	r4, 80013e6 <memset+0x8a>
 80013da:	b2c9      	uxtb	r1, r1
 80013dc:	441c      	add	r4, r3
 80013de:	f803 1b01 	strb.w	r1, [r3], #1
 80013e2:	429c      	cmp	r4, r3
 80013e4:	d1fb      	bne.n	80013de <memset+0x82>
 80013e6:	bcf0      	pop	{r4, r5, r6, r7}
 80013e8:	4770      	bx	lr
 80013ea:	4614      	mov	r4, r2
 80013ec:	4603      	mov	r3, r0
 80013ee:	e7c5      	b.n	800137c <memset+0x20>

080013f0 <_sprintf_r>:
 80013f0:	b40c      	push	{r2, r3}
 80013f2:	b570      	push	{r4, r5, r6, lr}
 80013f4:	b09c      	sub	sp, #112	; 0x70
 80013f6:	ac20      	add	r4, sp, #128	; 0x80
 80013f8:	4e0b      	ldr	r6, [pc, #44]	; (8001428 <_sprintf_r+0x38>)
 80013fa:	f854 2b04 	ldr.w	r2, [r4], #4
 80013fe:	9102      	str	r1, [sp, #8]
 8001400:	4623      	mov	r3, r4
 8001402:	9106      	str	r1, [sp, #24]
 8001404:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
 8001408:	a902      	add	r1, sp, #8
 800140a:	9401      	str	r4, [sp, #4]
 800140c:	9507      	str	r5, [sp, #28]
 800140e:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001412:	f000 f8a5 	bl	8001560 <_svfprintf_r>
 8001416:	9b02      	ldr	r3, [sp, #8]
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
 800141c:	b01c      	add	sp, #112	; 0x70
 800141e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001422:	b002      	add	sp, #8
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	ffff0208 	.word	0xffff0208

0800142c <sprintf>:
 800142c:	b40e      	push	{r1, r2, r3}
 800142e:	b530      	push	{r4, r5, lr}
 8001430:	b09c      	sub	sp, #112	; 0x70
 8001432:	ab1f      	add	r3, sp, #124	; 0x7c
 8001434:	4c0c      	ldr	r4, [pc, #48]	; (8001468 <sprintf+0x3c>)
 8001436:	4d0d      	ldr	r5, [pc, #52]	; (800146c <sprintf+0x40>)
 8001438:	f853 2b04 	ldr.w	r2, [r3], #4
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	4601      	mov	r1, r0
 8001440:	9102      	str	r1, [sp, #8]
 8001442:	9106      	str	r1, [sp, #24]
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	a902      	add	r1, sp, #8
 8001448:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800144c:	9407      	str	r4, [sp, #28]
 800144e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001452:	f000 f885 	bl	8001560 <_svfprintf_r>
 8001456:	9b02      	ldr	r3, [sp, #8]
 8001458:	2200      	movs	r2, #0
 800145a:	701a      	strb	r2, [r3, #0]
 800145c:	b01c      	add	sp, #112	; 0x70
 800145e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001462:	b003      	add	sp, #12
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000808 	.word	0x20000808
 800146c:	ffff0208 	.word	0xffff0208
	...

08001480 <strlen>:
 8001480:	f890 f000 	pld	[r0]
 8001484:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8001488:	f020 0107 	bic.w	r1, r0, #7
 800148c:	f06f 0c00 	mvn.w	ip, #0
 8001490:	f010 0407 	ands.w	r4, r0, #7
 8001494:	f891 f020 	pld	[r1, #32]
 8001498:	f040 8049 	bne.w	800152e <strlen+0xae>
 800149c:	f04f 0400 	mov.w	r4, #0
 80014a0:	f06f 0007 	mvn.w	r0, #7
 80014a4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80014a8:	f891 f040 	pld	[r1, #64]	; 0x40
 80014ac:	f100 0008 	add.w	r0, r0, #8
 80014b0:	fa82 f24c 	uadd8	r2, r2, ip
 80014b4:	faa4 f28c 	sel	r2, r4, ip
 80014b8:	fa83 f34c 	uadd8	r3, r3, ip
 80014bc:	faa2 f38c 	sel	r3, r2, ip
 80014c0:	bb4b      	cbnz	r3, 8001516 <strlen+0x96>
 80014c2:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 80014c6:	fa82 f24c 	uadd8	r2, r2, ip
 80014ca:	f100 0008 	add.w	r0, r0, #8
 80014ce:	faa4 f28c 	sel	r2, r4, ip
 80014d2:	fa83 f34c 	uadd8	r3, r3, ip
 80014d6:	faa2 f38c 	sel	r3, r2, ip
 80014da:	b9e3      	cbnz	r3, 8001516 <strlen+0x96>
 80014dc:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 80014e0:	fa82 f24c 	uadd8	r2, r2, ip
 80014e4:	f100 0008 	add.w	r0, r0, #8
 80014e8:	faa4 f28c 	sel	r2, r4, ip
 80014ec:	fa83 f34c 	uadd8	r3, r3, ip
 80014f0:	faa2 f38c 	sel	r3, r2, ip
 80014f4:	b97b      	cbnz	r3, 8001516 <strlen+0x96>
 80014f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 80014fa:	f101 0120 	add.w	r1, r1, #32
 80014fe:	fa82 f24c 	uadd8	r2, r2, ip
 8001502:	f100 0008 	add.w	r0, r0, #8
 8001506:	faa4 f28c 	sel	r2, r4, ip
 800150a:	fa83 f34c 	uadd8	r3, r3, ip
 800150e:	faa2 f38c 	sel	r3, r2, ip
 8001512:	2b00      	cmp	r3, #0
 8001514:	d0c6      	beq.n	80014a4 <strlen+0x24>
 8001516:	2a00      	cmp	r2, #0
 8001518:	bf04      	itt	eq
 800151a:	3004      	addeq	r0, #4
 800151c:	461a      	moveq	r2, r3
 800151e:	ba12      	rev	r2, r2
 8001520:	fab2 f282 	clz	r2, r2
 8001524:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8001528:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800152c:	4770      	bx	lr
 800152e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8001532:	f004 0503 	and.w	r5, r4, #3
 8001536:	f1c4 0000 	rsb	r0, r4, #0
 800153a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800153e:	f014 0f04 	tst.w	r4, #4
 8001542:	f891 f040 	pld	[r1, #64]	; 0x40
 8001546:	fa0c f505 	lsl.w	r5, ip, r5
 800154a:	ea62 0205 	orn	r2, r2, r5
 800154e:	bf1c      	itt	ne
 8001550:	ea63 0305 	ornne	r3, r3, r5
 8001554:	4662      	movne	r2, ip
 8001556:	f04f 0400 	mov.w	r4, #0
 800155a:	e7a9      	b.n	80014b0 <strlen+0x30>
 800155c:	0000      	movs	r0, r0
	...

08001560 <_svfprintf_r>:
 8001560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001564:	b0c1      	sub	sp, #260	; 0x104
 8001566:	460c      	mov	r4, r1
 8001568:	9108      	str	r1, [sp, #32]
 800156a:	4691      	mov	r9, r2
 800156c:	930b      	str	r3, [sp, #44]	; 0x2c
 800156e:	9009      	str	r0, [sp, #36]	; 0x24
 8001570:	f002 f9c4 	bl	80038fc <_localeconv_r>
 8001574:	6803      	ldr	r3, [r0, #0]
 8001576:	9314      	str	r3, [sp, #80]	; 0x50
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ff81 	bl	8001480 <strlen>
 800157e:	89a3      	ldrh	r3, [r4, #12]
 8001580:	9013      	str	r0, [sp, #76]	; 0x4c
 8001582:	061d      	lsls	r5, r3, #24
 8001584:	d503      	bpl.n	800158e <_svfprintf_r+0x2e>
 8001586:	6923      	ldr	r3, [r4, #16]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f000 8718 	beq.w	80023be <_svfprintf_r+0xe5e>
 800158e:	ed9f 7b94 	vldr	d7, [pc, #592]	; 80017e0 <_svfprintf_r+0x280>
 8001592:	2300      	movs	r3, #0
 8001594:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001598:	e9cd 3324 	strd	r3, r3, [sp, #144]	; 0x90
 800159c:	f10d 08c0 	add.w	r8, sp, #192	; 0xc0
 80015a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80015a2:	9312      	str	r3, [sp, #72]	; 0x48
 80015a4:	9315      	str	r3, [sp, #84]	; 0x54
 80015a6:	9306      	str	r3, [sp, #24]
 80015a8:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 80015ac:	46c2      	mov	sl, r8
 80015ae:	46cb      	mov	fp, r9
 80015b0:	f89b 3000 	ldrb.w	r3, [fp]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8099 	beq.w	80016ec <_svfprintf_r+0x18c>
 80015ba:	2b25      	cmp	r3, #37	; 0x25
 80015bc:	465c      	mov	r4, fp
 80015be:	d102      	bne.n	80015c6 <_svfprintf_r+0x66>
 80015c0:	e01c      	b.n	80015fc <_svfprintf_r+0x9c>
 80015c2:	2b25      	cmp	r3, #37	; 0x25
 80015c4:	d003      	beq.n	80015ce <_svfprintf_r+0x6e>
 80015c6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1f9      	bne.n	80015c2 <_svfprintf_r+0x62>
 80015ce:	eba4 050b 	sub.w	r5, r4, fp
 80015d2:	b185      	cbz	r5, 80015f6 <_svfprintf_r+0x96>
 80015d4:	e9dd 3224 	ldrd	r3, r2, [sp, #144]	; 0x90
 80015d8:	3301      	adds	r3, #1
 80015da:	442a      	add	r2, r5
 80015dc:	2b07      	cmp	r3, #7
 80015de:	f8ca b000 	str.w	fp, [sl]
 80015e2:	f8ca 5004 	str.w	r5, [sl, #4]
 80015e6:	e9cd 3224 	strd	r3, r2, [sp, #144]	; 0x90
 80015ea:	dc77      	bgt.n	80016dc <_svfprintf_r+0x17c>
 80015ec:	f10a 0a08 	add.w	sl, sl, #8
 80015f0:	9b06      	ldr	r3, [sp, #24]
 80015f2:	442b      	add	r3, r5
 80015f4:	9306      	str	r3, [sp, #24]
 80015f6:	7823      	ldrb	r3, [r4, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d077      	beq.n	80016ec <_svfprintf_r+0x18c>
 80015fc:	2300      	movs	r3, #0
 80015fe:	461a      	mov	r2, r3
 8001600:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001604:	4619      	mov	r1, r3
 8001606:	9307      	str	r3, [sp, #28]
 8001608:	461f      	mov	r7, r3
 800160a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800160e:	7863      	ldrb	r3, [r4, #1]
 8001610:	9005      	str	r0, [sp, #20]
 8001612:	f104 0b01 	add.w	fp, r4, #1
 8001616:	f10b 0b01 	add.w	fp, fp, #1
 800161a:	4699      	mov	r9, r3
 800161c:	f1a9 0320 	sub.w	r3, r9, #32
 8001620:	2b58      	cmp	r3, #88	; 0x58
 8001622:	f200 8375 	bhi.w	8001d10 <_svfprintf_r+0x7b0>
 8001626:	e8df f013 	tbh	[pc, r3, lsl #1]
 800162a:	02c2      	.short	0x02c2
 800162c:	03730373 	.word	0x03730373
 8001630:	037302bd 	.word	0x037302bd
 8001634:	03730373 	.word	0x03730373
 8001638:	03730373 	.word	0x03730373
 800163c:	02b10373 	.word	0x02b10373
 8001640:	037302ac 	.word	0x037302ac
 8001644:	034c0367 	.word	0x034c0367
 8001648:	036c0373 	.word	0x036c0373
 800164c:	00b600b6 	.word	0x00b600b6
 8001650:	00b600b6 	.word	0x00b600b6
 8001654:	00b600b6 	.word	0x00b600b6
 8001658:	00b600b6 	.word	0x00b600b6
 800165c:	037300b6 	.word	0x037300b6
 8001660:	03730373 	.word	0x03730373
 8001664:	03730373 	.word	0x03730373
 8001668:	03730373 	.word	0x03730373
 800166c:	03730373 	.word	0x03730373
 8001670:	03370373 	.word	0x03370373
 8001674:	037302e3 	.word	0x037302e3
 8001678:	037302e3 	.word	0x037302e3
 800167c:	03730373 	.word	0x03730373
 8001680:	02de0373 	.word	0x02de0373
 8001684:	03730373 	.word	0x03730373
 8001688:	037300a5 	.word	0x037300a5
 800168c:	03730373 	.word	0x03730373
 8001690:	03730373 	.word	0x03730373
 8001694:	03730075 	.word	0x03730075
 8001698:	028c0373 	.word	0x028c0373
 800169c:	03730373 	.word	0x03730373
 80016a0:	03730373 	.word	0x03730373
 80016a4:	03730373 	.word	0x03730373
 80016a8:	03730373 	.word	0x03730373
 80016ac:	03730373 	.word	0x03730373
 80016b0:	012e017b 	.word	0x012e017b
 80016b4:	02e302e3 	.word	0x02e302e3
 80016b8:	012902e3 	.word	0x012902e3
 80016bc:	0373012e 	.word	0x0373012e
 80016c0:	011c0373 	.word	0x011c0373
 80016c4:	01090373 	.word	0x01090373
 80016c8:	00ca00a7 	.word	0x00ca00a7
 80016cc:	037300c5 	.word	0x037300c5
 80016d0:	037300e1 	.word	0x037300e1
 80016d4:	03730077 	.word	0x03730077
 80016d8:	02ca0373 	.word	0x02ca0373
 80016dc:	aa23      	add	r2, sp, #140	; 0x8c
 80016de:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80016e2:	f003 f89f 	bl	8004824 <__ssprint_r>
 80016e6:	b940      	cbnz	r0, 80016fa <_svfprintf_r+0x19a>
 80016e8:	46c2      	mov	sl, r8
 80016ea:	e781      	b.n	80015f0 <_svfprintf_r+0x90>
 80016ec:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80016ee:	b123      	cbz	r3, 80016fa <_svfprintf_r+0x19a>
 80016f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80016f2:	9908      	ldr	r1, [sp, #32]
 80016f4:	aa23      	add	r2, sp, #140	; 0x8c
 80016f6:	f003 f895 	bl	8004824 <__ssprint_r>
 80016fa:	9b08      	ldr	r3, [sp, #32]
 80016fc:	899b      	ldrh	r3, [r3, #12]
 80016fe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001702:	9b06      	ldr	r3, [sp, #24]
 8001704:	bf18      	it	ne
 8001706:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800170a:	9306      	str	r3, [sp, #24]
 800170c:	9806      	ldr	r0, [sp, #24]
 800170e:	b041      	add	sp, #260	; 0x104
 8001710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001714:	f047 0710 	orr.w	r7, r7, #16
 8001718:	06be      	lsls	r6, r7, #26
 800171a:	f140 8527 	bpl.w	800216c <_svfprintf_r+0xc0c>
 800171e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001720:	3507      	adds	r5, #7
 8001722:	f025 0307 	bic.w	r3, r5, #7
 8001726:	f103 0208 	add.w	r2, r3, #8
 800172a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800172e:	920b      	str	r2, [sp, #44]	; 0x2c
 8001730:	2301      	movs	r3, #1
 8001732:	9a05      	ldr	r2, [sp, #20]
 8001734:	2600      	movs	r6, #0
 8001736:	3201      	adds	r2, #1
 8001738:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
 800173c:	f000 8428 	beq.w	8001f90 <_svfprintf_r+0xa30>
 8001740:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 8001744:	9203      	str	r2, [sp, #12]
 8001746:	ea54 0205 	orrs.w	r2, r4, r5
 800174a:	f040 80bf 	bne.w	80018cc <_svfprintf_r+0x36c>
 800174e:	9a05      	ldr	r2, [sp, #20]
 8001750:	2a00      	cmp	r2, #0
 8001752:	f040 86b0 	bne.w	80024b6 <_svfprintf_r+0xf56>
 8001756:	2b00      	cmp	r3, #0
 8001758:	f040 84d6 	bne.w	8002108 <_svfprintf_r+0xba8>
 800175c:	f017 0301 	ands.w	r3, r7, #1
 8001760:	930a      	str	r3, [sp, #40]	; 0x28
 8001762:	f000 8548 	beq.w	80021f6 <_svfprintf_r+0xc96>
 8001766:	ab40      	add	r3, sp, #256	; 0x100
 8001768:	461a      	mov	r2, r3
 800176a:	2330      	movs	r3, #48	; 0x30
 800176c:	f802 3d41 	strb.w	r3, [r2, #-65]!
 8001770:	920d      	str	r2, [sp, #52]	; 0x34
 8001772:	e0cc      	b.n	800190e <_svfprintf_r+0x3ae>
 8001774:	f047 0710 	orr.w	r7, r7, #16
 8001778:	f017 0320 	ands.w	r3, r7, #32
 800177c:	f000 8500 	beq.w	8002180 <_svfprintf_r+0xc20>
 8001780:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001782:	3507      	adds	r5, #7
 8001784:	f025 0307 	bic.w	r3, r5, #7
 8001788:	f103 0208 	add.w	r2, r3, #8
 800178c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001790:	920b      	str	r2, [sp, #44]	; 0x2c
 8001792:	2300      	movs	r3, #0
 8001794:	e7cd      	b.n	8001732 <_svfprintf_r+0x1d2>
 8001796:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
 800179a:	2000      	movs	r0, #0
 800179c:	f81b 9b01 	ldrb.w	r9, [fp], #1
 80017a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80017a4:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80017a8:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
 80017ac:	2b09      	cmp	r3, #9
 80017ae:	d9f5      	bls.n	800179c <_svfprintf_r+0x23c>
 80017b0:	9007      	str	r0, [sp, #28]
 80017b2:	e733      	b.n	800161c <_svfprintf_r+0xbc>
 80017b4:	f047 0720 	orr.w	r7, r7, #32
 80017b8:	f89b 3000 	ldrb.w	r3, [fp]
 80017bc:	e72b      	b.n	8001616 <_svfprintf_r+0xb6>
 80017be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80017c0:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <_svfprintf_r+0x288>)
 80017c2:	6814      	ldr	r4, [r2, #0]
 80017c4:	9312      	str	r3, [sp, #72]	; 0x48
 80017c6:	3204      	adds	r2, #4
 80017c8:	f647 0330 	movw	r3, #30768	; 0x7830
 80017cc:	f8ad 3070 	strh.w	r3, [sp, #112]	; 0x70
 80017d0:	f047 0702 	orr.w	r7, r7, #2
 80017d4:	920b      	str	r2, [sp, #44]	; 0x2c
 80017d6:	2500      	movs	r5, #0
 80017d8:	2302      	movs	r3, #2
 80017da:	f04f 0978 	mov.w	r9, #120	; 0x78
 80017de:	e7a8      	b.n	8001732 <_svfprintf_r+0x1d2>
	...
 80017e8:	0800d70c 	.word	0x0800d70c
 80017ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80017ee:	6813      	ldr	r3, [r2, #0]
 80017f0:	930d      	str	r3, [sp, #52]	; 0x34
 80017f2:	2400      	movs	r4, #0
 80017f4:	f88d 406f 	strb.w	r4, [sp, #111]	; 0x6f
 80017f8:	1d15      	adds	r5, r2, #4
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f000 860b 	beq.w	8002416 <_svfprintf_r+0xeb6>
 8001800:	9a05      	ldr	r2, [sp, #20]
 8001802:	1c53      	adds	r3, r2, #1
 8001804:	f000 86b3 	beq.w	800256e <_svfprintf_r+0x100e>
 8001808:	4621      	mov	r1, r4
 800180a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800180c:	f002 fb38 	bl	8003e80 <memchr>
 8001810:	2800      	cmp	r0, #0
 8001812:	f000 8794 	beq.w	800273e <_svfprintf_r+0x11de>
 8001816:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001818:	9405      	str	r4, [sp, #20]
 800181a:	1ac3      	subs	r3, r0, r3
 800181c:	930a      	str	r3, [sp, #40]	; 0x28
 800181e:	950b      	str	r5, [sp, #44]	; 0x2c
 8001820:	9703      	str	r7, [sp, #12]
 8001822:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001826:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 800182a:	9304      	str	r3, [sp, #16]
 800182c:	940e      	str	r4, [sp, #56]	; 0x38
 800182e:	2e00      	cmp	r6, #0
 8001830:	f000 8088 	beq.w	8001944 <_svfprintf_r+0x3e4>
 8001834:	9b04      	ldr	r3, [sp, #16]
 8001836:	3301      	adds	r3, #1
 8001838:	9304      	str	r3, [sp, #16]
 800183a:	e083      	b.n	8001944 <_svfprintf_r+0x3e4>
 800183c:	2a00      	cmp	r2, #0
 800183e:	f041 80a4 	bne.w	800298a <_svfprintf_r+0x142a>
 8001842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001844:	06b9      	lsls	r1, r7, #26
 8001846:	f852 3b04 	ldr.w	r3, [r2], #4
 800184a:	920b      	str	r2, [sp, #44]	; 0x2c
 800184c:	f100 8512 	bmi.w	8002274 <_svfprintf_r+0xd14>
 8001850:	06fa      	lsls	r2, r7, #27
 8001852:	f100 8606 	bmi.w	8002462 <_svfprintf_r+0xf02>
 8001856:	067f      	lsls	r7, r7, #25
 8001858:	f140 8603 	bpl.w	8002462 <_svfprintf_r+0xf02>
 800185c:	9a06      	ldr	r2, [sp, #24]
 800185e:	801a      	strh	r2, [r3, #0]
 8001860:	e6a6      	b.n	80015b0 <_svfprintf_r+0x50>
 8001862:	f89b 3000 	ldrb.w	r3, [fp]
 8001866:	2b6c      	cmp	r3, #108	; 0x6c
 8001868:	bf03      	ittte	eq
 800186a:	f89b 3001 	ldrbeq.w	r3, [fp, #1]
 800186e:	f047 0720 	orreq.w	r7, r7, #32
 8001872:	f10b 0b01 	addeq.w	fp, fp, #1
 8001876:	f047 0710 	orrne.w	r7, r7, #16
 800187a:	e6cc      	b.n	8001616 <_svfprintf_r+0xb6>
 800187c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
 8001880:	f89b 3000 	ldrb.w	r3, [fp]
 8001884:	e6c7      	b.n	8001616 <_svfprintf_r+0xb6>
 8001886:	2a00      	cmp	r2, #0
 8001888:	f041 8061 	bne.w	800294e <_svfprintf_r+0x13ee>
 800188c:	06bc      	lsls	r4, r7, #26
 800188e:	f140 820b 	bpl.w	8001ca8 <_svfprintf_r+0x748>
 8001892:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001894:	3507      	adds	r5, #7
 8001896:	f025 0307 	bic.w	r3, r5, #7
 800189a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800189e:	f103 0208 	add.w	r2, r3, #8
 80018a2:	920b      	str	r2, [sp, #44]	; 0x2c
 80018a4:	2c00      	cmp	r4, #0
 80018a6:	f175 0300 	sbcs.w	r3, r5, #0
 80018aa:	f2c0 84b0 	blt.w	800220e <_svfprintf_r+0xcae>
 80018ae:	9b05      	ldr	r3, [sp, #20]
 80018b0:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 80018b4:	3301      	adds	r3, #1
 80018b6:	f000 84b5 	beq.w	8002224 <_svfprintf_r+0xcc4>
 80018ba:	f027 0280 	bic.w	r2, r7, #128	; 0x80
 80018be:	9203      	str	r2, [sp, #12]
 80018c0:	ea54 0205 	orrs.w	r2, r4, r5
 80018c4:	f04f 0301 	mov.w	r3, #1
 80018c8:	f43f af41 	beq.w	800174e <_svfprintf_r+0x1ee>
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	f000 8363 	beq.w	8001f98 <_svfprintf_r+0xa38>
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	f000 8383 	beq.w	8001fde <_svfprintf_r+0xa7e>
 80018d8:	4641      	mov	r1, r8
 80018da:	e000      	b.n	80018de <_svfprintf_r+0x37e>
 80018dc:	4611      	mov	r1, r2
 80018de:	08e2      	lsrs	r2, r4, #3
 80018e0:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 80018e4:	08e8      	lsrs	r0, r5, #3
 80018e6:	f004 0307 	and.w	r3, r4, #7
 80018ea:	4605      	mov	r5, r0
 80018ec:	4614      	mov	r4, r2
 80018ee:	3330      	adds	r3, #48	; 0x30
 80018f0:	ea54 0005 	orrs.w	r0, r4, r5
 80018f4:	f801 3c01 	strb.w	r3, [r1, #-1]
 80018f8:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
 80018fc:	d1ee      	bne.n	80018dc <_svfprintf_r+0x37c>
 80018fe:	9803      	ldr	r0, [sp, #12]
 8001900:	920d      	str	r2, [sp, #52]	; 0x34
 8001902:	07c0      	lsls	r0, r0, #31
 8001904:	f100 845a 	bmi.w	80021bc <_svfprintf_r+0xc5c>
 8001908:	eba8 0302 	sub.w	r3, r8, r2
 800190c:	930a      	str	r3, [sp, #40]	; 0x28
 800190e:	9b05      	ldr	r3, [sp, #20]
 8001910:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001912:	4293      	cmp	r3, r2
 8001914:	bfb8      	it	lt
 8001916:	4613      	movlt	r3, r2
 8001918:	9304      	str	r3, [sp, #16]
 800191a:	2300      	movs	r3, #0
 800191c:	930e      	str	r3, [sp, #56]	; 0x38
 800191e:	e786      	b.n	800182e <_svfprintf_r+0x2ce>
 8001920:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8001922:	2300      	movs	r3, #0
 8001924:	680a      	ldr	r2, [r1, #0]
 8001926:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800192a:	461e      	mov	r6, r3
 800192c:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
 8001930:	2301      	movs	r3, #1
 8001932:	1d0a      	adds	r2, r1, #4
 8001934:	e9cd 7303 	strd	r7, r3, [sp, #12]
 8001938:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
 800193c:	ab26      	add	r3, sp, #152	; 0x98
 800193e:	9605      	str	r6, [sp, #20]
 8001940:	960e      	str	r6, [sp, #56]	; 0x38
 8001942:	930d      	str	r3, [sp, #52]	; 0x34
 8001944:	9b03      	ldr	r3, [sp, #12]
 8001946:	f013 0702 	ands.w	r7, r3, #2
 800194a:	d002      	beq.n	8001952 <_svfprintf_r+0x3f2>
 800194c:	9b04      	ldr	r3, [sp, #16]
 800194e:	3302      	adds	r3, #2
 8001950:	9304      	str	r3, [sp, #16]
 8001952:	9b03      	ldr	r3, [sp, #12]
 8001954:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001956:	f013 0384 	ands.w	r3, r3, #132	; 0x84
 800195a:	930c      	str	r3, [sp, #48]	; 0x30
 800195c:	d13f      	bne.n	80019de <_svfprintf_r+0x47e>
 800195e:	9b07      	ldr	r3, [sp, #28]
 8001960:	9a04      	ldr	r2, [sp, #16]
 8001962:	1a9d      	subs	r5, r3, r2
 8001964:	2d00      	cmp	r5, #0
 8001966:	dd3a      	ble.n	80019de <_svfprintf_r+0x47e>
 8001968:	2d10      	cmp	r5, #16
 800196a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800196c:	dd29      	ble.n	80019c2 <_svfprintf_r+0x462>
 800196e:	4652      	mov	r2, sl
 8001970:	4621      	mov	r1, r4
 8001972:	46aa      	mov	sl, r5
 8001974:	2610      	movs	r6, #16
 8001976:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 800197a:	e006      	b.n	800198a <_svfprintf_r+0x42a>
 800197c:	f1aa 0a10 	sub.w	sl, sl, #16
 8001980:	f1ba 0f10 	cmp.w	sl, #16
 8001984:	f102 0208 	add.w	r2, r2, #8
 8001988:	dd18      	ble.n	80019bc <_svfprintf_r+0x45c>
 800198a:	3301      	adds	r3, #1
 800198c:	48bb      	ldr	r0, [pc, #748]	; (8001c7c <_svfprintf_r+0x71c>)
 800198e:	3110      	adds	r1, #16
 8001990:	2b07      	cmp	r3, #7
 8001992:	e9cd 3124 	strd	r3, r1, [sp, #144]	; 0x90
 8001996:	e9c2 0600 	strd	r0, r6, [r2]
 800199a:	ddef      	ble.n	800197c <_svfprintf_r+0x41c>
 800199c:	aa23      	add	r2, sp, #140	; 0x8c
 800199e:	4629      	mov	r1, r5
 80019a0:	4620      	mov	r0, r4
 80019a2:	f002 ff3f 	bl	8004824 <__ssprint_r>
 80019a6:	2800      	cmp	r0, #0
 80019a8:	f47f aea7 	bne.w	80016fa <_svfprintf_r+0x19a>
 80019ac:	f1aa 0a10 	sub.w	sl, sl, #16
 80019b0:	f1ba 0f10 	cmp.w	sl, #16
 80019b4:	e9dd 3124 	ldrd	r3, r1, [sp, #144]	; 0x90
 80019b8:	4642      	mov	r2, r8
 80019ba:	dce6      	bgt.n	800198a <_svfprintf_r+0x42a>
 80019bc:	4655      	mov	r5, sl
 80019be:	460c      	mov	r4, r1
 80019c0:	4692      	mov	sl, r2
 80019c2:	3301      	adds	r3, #1
 80019c4:	4aad      	ldr	r2, [pc, #692]	; (8001c7c <_svfprintf_r+0x71c>)
 80019c6:	442c      	add	r4, r5
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 80019ce:	e9ca 2500 	strd	r2, r5, [sl]
 80019d2:	f300 854a 	bgt.w	800246a <_svfprintf_r+0xf0a>
 80019d6:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 80019da:	f10a 0a08 	add.w	sl, sl, #8
 80019de:	b176      	cbz	r6, 80019fe <_svfprintf_r+0x49e>
 80019e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80019e2:	3301      	adds	r3, #1
 80019e4:	3401      	adds	r4, #1
 80019e6:	f10d 016f 	add.w	r1, sp, #111	; 0x6f
 80019ea:	2201      	movs	r2, #1
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 80019f2:	e9ca 1200 	strd	r1, r2, [sl]
 80019f6:	f300 82dc 	bgt.w	8001fb2 <_svfprintf_r+0xa52>
 80019fa:	f10a 0a08 	add.w	sl, sl, #8
 80019fe:	b16f      	cbz	r7, 8001a1c <_svfprintf_r+0x4bc>
 8001a00:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001a02:	3301      	adds	r3, #1
 8001a04:	3402      	adds	r4, #2
 8001a06:	a91c      	add	r1, sp, #112	; 0x70
 8001a08:	2202      	movs	r2, #2
 8001a0a:	2b07      	cmp	r3, #7
 8001a0c:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 8001a10:	e9ca 1200 	strd	r1, r2, [sl]
 8001a14:	f300 82d8 	bgt.w	8001fc8 <_svfprintf_r+0xa68>
 8001a18:	f10a 0a08 	add.w	sl, sl, #8
 8001a1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001a1e:	2b80      	cmp	r3, #128	; 0x80
 8001a20:	f000 81e8 	beq.w	8001df4 <_svfprintf_r+0x894>
 8001a24:	9b05      	ldr	r3, [sp, #20]
 8001a26:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a28:	1a9d      	subs	r5, r3, r2
 8001a2a:	2d00      	cmp	r5, #0
 8001a2c:	dd31      	ble.n	8001a92 <_svfprintf_r+0x532>
 8001a2e:	2d10      	cmp	r5, #16
 8001a30:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001a32:	4f93      	ldr	r7, [pc, #588]	; (8001c80 <_svfprintf_r+0x720>)
 8001a34:	dd22      	ble.n	8001a7c <_svfprintf_r+0x51c>
 8001a36:	4653      	mov	r3, sl
 8001a38:	4621      	mov	r1, r4
 8001a3a:	2610      	movs	r6, #16
 8001a3c:	e9dd a408 	ldrd	sl, r4, [sp, #32]
 8001a40:	e004      	b.n	8001a4c <_svfprintf_r+0x4ec>
 8001a42:	3d10      	subs	r5, #16
 8001a44:	2d10      	cmp	r5, #16
 8001a46:	f103 0308 	add.w	r3, r3, #8
 8001a4a:	dd15      	ble.n	8001a78 <_svfprintf_r+0x518>
 8001a4c:	3201      	adds	r2, #1
 8001a4e:	3110      	adds	r1, #16
 8001a50:	2a07      	cmp	r2, #7
 8001a52:	e9cd 2124 	strd	r2, r1, [sp, #144]	; 0x90
 8001a56:	e9c3 7600 	strd	r7, r6, [r3]
 8001a5a:	ddf2      	ble.n	8001a42 <_svfprintf_r+0x4e2>
 8001a5c:	aa23      	add	r2, sp, #140	; 0x8c
 8001a5e:	4651      	mov	r1, sl
 8001a60:	4620      	mov	r0, r4
 8001a62:	f002 fedf 	bl	8004824 <__ssprint_r>
 8001a66:	2800      	cmp	r0, #0
 8001a68:	f47f ae47 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001a6c:	3d10      	subs	r5, #16
 8001a6e:	2d10      	cmp	r5, #16
 8001a70:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8001a74:	4643      	mov	r3, r8
 8001a76:	dce9      	bgt.n	8001a4c <_svfprintf_r+0x4ec>
 8001a78:	469a      	mov	sl, r3
 8001a7a:	460c      	mov	r4, r1
 8001a7c:	3201      	adds	r2, #1
 8001a7e:	442c      	add	r4, r5
 8001a80:	2a07      	cmp	r2, #7
 8001a82:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8001a86:	e9ca 7500 	strd	r7, r5, [sl]
 8001a8a:	f300 82bd 	bgt.w	8002008 <_svfprintf_r+0xaa8>
 8001a8e:	f10a 0a08 	add.w	sl, sl, #8
 8001a92:	9b03      	ldr	r3, [sp, #12]
 8001a94:	05df      	lsls	r7, r3, #23
 8001a96:	f100 8151 	bmi.w	8001d3c <_svfprintf_r+0x7dc>
 8001a9a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001a9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001a9e:	f8ca 2000 	str.w	r2, [sl]
 8001aa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001aa4:	f8ca 2004 	str.w	r2, [sl, #4]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	4414      	add	r4, r2
 8001aac:	2b07      	cmp	r3, #7
 8001aae:	9425      	str	r4, [sp, #148]	; 0x94
 8001ab0:	9324      	str	r3, [sp, #144]	; 0x90
 8001ab2:	f300 820f 	bgt.w	8001ed4 <_svfprintf_r+0x974>
 8001ab6:	f10a 0a08 	add.w	sl, sl, #8
 8001aba:	9b03      	ldr	r3, [sp, #12]
 8001abc:	075a      	lsls	r2, r3, #29
 8001abe:	d531      	bpl.n	8001b24 <_svfprintf_r+0x5c4>
 8001ac0:	9b07      	ldr	r3, [sp, #28]
 8001ac2:	9a04      	ldr	r2, [sp, #16]
 8001ac4:	1a9d      	subs	r5, r3, r2
 8001ac6:	2d00      	cmp	r5, #0
 8001ac8:	dd2c      	ble.n	8001b24 <_svfprintf_r+0x5c4>
 8001aca:	2d10      	cmp	r5, #16
 8001acc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001ace:	dd1f      	ble.n	8001b10 <_svfprintf_r+0x5b0>
 8001ad0:	2610      	movs	r6, #16
 8001ad2:	e9dd 9708 	ldrd	r9, r7, [sp, #32]
 8001ad6:	e004      	b.n	8001ae2 <_svfprintf_r+0x582>
 8001ad8:	3d10      	subs	r5, #16
 8001ada:	2d10      	cmp	r5, #16
 8001adc:	f10a 0a08 	add.w	sl, sl, #8
 8001ae0:	dd16      	ble.n	8001b10 <_svfprintf_r+0x5b0>
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <_svfprintf_r+0x71c>)
 8001ae6:	3410      	adds	r4, #16
 8001ae8:	2b07      	cmp	r3, #7
 8001aea:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 8001aee:	e9ca 2600 	strd	r2, r6, [sl]
 8001af2:	ddf1      	ble.n	8001ad8 <_svfprintf_r+0x578>
 8001af4:	aa23      	add	r2, sp, #140	; 0x8c
 8001af6:	4649      	mov	r1, r9
 8001af8:	4638      	mov	r0, r7
 8001afa:	f002 fe93 	bl	8004824 <__ssprint_r>
 8001afe:	2800      	cmp	r0, #0
 8001b00:	f47f adfb 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001b04:	3d10      	subs	r5, #16
 8001b06:	2d10      	cmp	r5, #16
 8001b08:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 8001b0c:	46c2      	mov	sl, r8
 8001b0e:	dce8      	bgt.n	8001ae2 <_svfprintf_r+0x582>
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <_svfprintf_r+0x71c>)
 8001b14:	442c      	add	r4, r5
 8001b16:	2b07      	cmp	r3, #7
 8001b18:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 8001b1c:	e9ca 2500 	strd	r2, r5, [sl]
 8001b20:	f300 835f 	bgt.w	80021e2 <_svfprintf_r+0xc82>
 8001b24:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8001b28:	9904      	ldr	r1, [sp, #16]
 8001b2a:	428a      	cmp	r2, r1
 8001b2c:	bfac      	ite	ge
 8001b2e:	189b      	addge	r3, r3, r2
 8001b30:	185b      	addlt	r3, r3, r1
 8001b32:	9306      	str	r3, [sp, #24]
 8001b34:	2c00      	cmp	r4, #0
 8001b36:	f040 8196 	bne.w	8001e66 <_svfprintf_r+0x906>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	9324      	str	r3, [sp, #144]	; 0x90
 8001b3e:	46c2      	mov	sl, r8
 8001b40:	e536      	b.n	80015b0 <_svfprintf_r+0x50>
 8001b42:	2a00      	cmp	r2, #0
 8001b44:	f040 8711 	bne.w	800296a <_svfprintf_r+0x140a>
 8001b48:	4b4e      	ldr	r3, [pc, #312]	; (8001c84 <_svfprintf_r+0x724>)
 8001b4a:	9312      	str	r3, [sp, #72]	; 0x48
 8001b4c:	06b9      	lsls	r1, r7, #26
 8001b4e:	d53d      	bpl.n	8001bcc <_svfprintf_r+0x66c>
 8001b50:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001b52:	3507      	adds	r5, #7
 8001b54:	f025 0307 	bic.w	r3, r5, #7
 8001b58:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001b5c:	f103 0208 	add.w	r2, r3, #8
 8001b60:	920b      	str	r2, [sp, #44]	; 0x2c
 8001b62:	07fe      	lsls	r6, r7, #31
 8001b64:	f140 80d2 	bpl.w	8001d0c <_svfprintf_r+0x7ac>
 8001b68:	ea54 0305 	orrs.w	r3, r4, r5
 8001b6c:	f000 80ce 	beq.w	8001d0c <_svfprintf_r+0x7ac>
 8001b70:	2330      	movs	r3, #48	; 0x30
 8001b72:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8001b76:	f88d 9071 	strb.w	r9, [sp, #113]	; 0x71
 8001b7a:	f047 0702 	orr.w	r7, r7, #2
 8001b7e:	2302      	movs	r3, #2
 8001b80:	e5d7      	b.n	8001732 <_svfprintf_r+0x1d2>
 8001b82:	f89b 3000 	ldrb.w	r3, [fp]
 8001b86:	2201      	movs	r2, #1
 8001b88:	212b      	movs	r1, #43	; 0x2b
 8001b8a:	e544      	b.n	8001616 <_svfprintf_r+0xb6>
 8001b8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001b8e:	f89b 3000 	ldrb.w	r3, [fp]
 8001b92:	6804      	ldr	r4, [r0, #0]
 8001b94:	9407      	str	r4, [sp, #28]
 8001b96:	2c00      	cmp	r4, #0
 8001b98:	f100 0004 	add.w	r0, r0, #4
 8001b9c:	f2c0 840b 	blt.w	80023b6 <_svfprintf_r+0xe56>
 8001ba0:	900b      	str	r0, [sp, #44]	; 0x2c
 8001ba2:	e538      	b.n	8001616 <_svfprintf_r+0xb6>
 8001ba4:	f047 0701 	orr.w	r7, r7, #1
 8001ba8:	f89b 3000 	ldrb.w	r3, [fp]
 8001bac:	e533      	b.n	8001616 <_svfprintf_r+0xb6>
 8001bae:	f89b 3000 	ldrb.w	r3, [fp]
 8001bb2:	2900      	cmp	r1, #0
 8001bb4:	f47f ad2f 	bne.w	8001616 <_svfprintf_r+0xb6>
 8001bb8:	2201      	movs	r2, #1
 8001bba:	2120      	movs	r1, #32
 8001bbc:	e52b      	b.n	8001616 <_svfprintf_r+0xb6>
 8001bbe:	2a00      	cmp	r2, #0
 8001bc0:	f040 86e7 	bne.w	8002992 <_svfprintf_r+0x1432>
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <_svfprintf_r+0x728>)
 8001bc6:	9312      	str	r3, [sp, #72]	; 0x48
 8001bc8:	06b9      	lsls	r1, r7, #26
 8001bca:	d4c1      	bmi.n	8001b50 <_svfprintf_r+0x5f0>
 8001bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001bce:	06fa      	lsls	r2, r7, #27
 8001bd0:	f853 4b04 	ldr.w	r4, [r3], #4
 8001bd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001bd6:	f100 8312 	bmi.w	80021fe <_svfprintf_r+0xc9e>
 8001bda:	067b      	lsls	r3, r7, #25
 8001bdc:	f140 830f 	bpl.w	80021fe <_svfprintf_r+0xc9e>
 8001be0:	b2a4      	uxth	r4, r4
 8001be2:	2500      	movs	r5, #0
 8001be4:	e7bd      	b.n	8001b62 <_svfprintf_r+0x602>
 8001be6:	f047 0708 	orr.w	r7, r7, #8
 8001bea:	f89b 3000 	ldrb.w	r3, [fp]
 8001bee:	e512      	b.n	8001616 <_svfprintf_r+0xb6>
 8001bf0:	2a00      	cmp	r2, #0
 8001bf2:	f040 86be 	bne.w	8002972 <_svfprintf_r+0x1412>
 8001bf6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8001bf8:	3507      	adds	r5, #7
 8001bfa:	f025 0507 	bic.w	r5, r5, #7
 8001bfe:	ed95 7b00 	vldr	d7, [r5]
 8001c02:	ec52 1b17 	vmov	r1, r2, d7
 8001c06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8001c0a:	9317      	str	r3, [sp, #92]	; 0x5c
 8001c0c:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
 8001c10:	f105 0408 	add.w	r4, r5, #8
 8001c14:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c1c:	4b1b      	ldr	r3, [pc, #108]	; (8001c8c <_svfprintf_r+0x72c>)
 8001c1e:	940b      	str	r4, [sp, #44]	; 0x2c
 8001c20:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001c24:	f7ff f8ec 	bl	8000e00 <__aeabi_dcmpun>
 8001c28:	2800      	cmp	r0, #0
 8001c2a:	f040 8332 	bne.w	8002292 <_svfprintf_r+0xd32>
 8001c2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c32:	4b16      	ldr	r3, [pc, #88]	; (8001c8c <_svfprintf_r+0x72c>)
 8001c34:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
 8001c38:	f7ff f8c4 	bl	8000dc4 <__aeabi_dcmple>
 8001c3c:	2800      	cmp	r0, #0
 8001c3e:	f040 8328 	bne.w	8002292 <_svfprintf_r+0xd32>
 8001c42:	2200      	movs	r2, #0
 8001c44:	2300      	movs	r3, #0
 8001c46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001c4a:	f7ff f8b1 	bl	8000db0 <__aeabi_dcmplt>
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	f040 8526 	bne.w	80026a0 <_svfprintf_r+0x1140>
 8001c54:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 8001c58:	4a0d      	ldr	r2, [pc, #52]	; (8001c90 <_svfprintf_r+0x730>)
 8001c5a:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <_svfprintf_r+0x734>)
 8001c5c:	2103      	movs	r1, #3
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f027 0480 	bic.w	r4, r7, #128	; 0x80
 8001c64:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001c68:	bfd8      	it	le
 8001c6a:	461a      	movle	r2, r3
 8001c6c:	e9cd 1004 	strd	r1, r0, [sp, #16]
 8001c70:	9403      	str	r4, [sp, #12]
 8001c72:	920d      	str	r2, [sp, #52]	; 0x34
 8001c74:	910a      	str	r1, [sp, #40]	; 0x28
 8001c76:	900e      	str	r0, [sp, #56]	; 0x38
 8001c78:	e5d9      	b.n	800182e <_svfprintf_r+0x2ce>
 8001c7a:	bf00      	nop
 8001c7c:	0800ad78 	.word	0x0800ad78
 8001c80:	0800ad88 	.word	0x0800ad88
 8001c84:	0800d6f8 	.word	0x0800d6f8
 8001c88:	0800d70c 	.word	0x0800d70c
 8001c8c:	7fefffff 	.word	0x7fefffff
 8001c90:	0800d6ec 	.word	0x0800d6ec
 8001c94:	0800d6e8 	.word	0x0800d6e8
 8001c98:	2a00      	cmp	r2, #0
 8001c9a:	f040 866e 	bne.w	800297a <_svfprintf_r+0x141a>
 8001c9e:	f047 0710 	orr.w	r7, r7, #16
 8001ca2:	06bc      	lsls	r4, r7, #26
 8001ca4:	f53f adf5 	bmi.w	8001892 <_svfprintf_r+0x332>
 8001ca8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001caa:	06f8      	lsls	r0, r7, #27
 8001cac:	f853 4b04 	ldr.w	r4, [r3], #4
 8001cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8001cb2:	f100 82a6 	bmi.w	8002202 <_svfprintf_r+0xca2>
 8001cb6:	0679      	lsls	r1, r7, #25
 8001cb8:	f140 82a3 	bpl.w	8002202 <_svfprintf_r+0xca2>
 8001cbc:	b224      	sxth	r4, r4
 8001cbe:	17e5      	asrs	r5, r4, #31
 8001cc0:	e5f0      	b.n	80018a4 <_svfprintf_r+0x344>
 8001cc2:	f89b 9000 	ldrb.w	r9, [fp]
 8001cc6:	f1b9 0f2a 	cmp.w	r9, #42	; 0x2a
 8001cca:	f10b 0001 	add.w	r0, fp, #1
 8001cce:	f000 8618 	beq.w	8002902 <_svfprintf_r+0x13a2>
 8001cd2:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
 8001cd6:	2b09      	cmp	r3, #9
 8001cd8:	4683      	mov	fp, r0
 8001cda:	f200 8507 	bhi.w	80026ec <_svfprintf_r+0x118c>
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f81b 9b01 	ldrb.w	r9, [fp], #1
 8001ce4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001ce8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8001cec:	f1a9 0330 	sub.w	r3, r9, #48	; 0x30
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d9f5      	bls.n	8001ce0 <_svfprintf_r+0x780>
 8001cf4:	9005      	str	r0, [sp, #20]
 8001cf6:	e491      	b.n	800161c <_svfprintf_r+0xbc>
 8001cf8:	f89b 3000 	ldrb.w	r3, [fp]
 8001cfc:	f047 0704 	orr.w	r7, r7, #4
 8001d00:	e489      	b.n	8001616 <_svfprintf_r+0xb6>
 8001d02:	f047 0780 	orr.w	r7, r7, #128	; 0x80
 8001d06:	f89b 3000 	ldrb.w	r3, [fp]
 8001d0a:	e484      	b.n	8001616 <_svfprintf_r+0xb6>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e510      	b.n	8001732 <_svfprintf_r+0x1d2>
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	f040 8636 	bne.w	8002982 <_svfprintf_r+0x1422>
 8001d16:	f1b9 0f00 	cmp.w	r9, #0
 8001d1a:	f43f ace7 	beq.w	80016ec <_svfprintf_r+0x18c>
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2201      	movs	r2, #1
 8001d22:	461e      	mov	r6, r3
 8001d24:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8001d28:	9305      	str	r3, [sp, #20]
 8001d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8001d2c:	ab26      	add	r3, sp, #152	; 0x98
 8001d2e:	9204      	str	r2, [sp, #16]
 8001d30:	f88d 9098 	strb.w	r9, [sp, #152]	; 0x98
 8001d34:	9703      	str	r7, [sp, #12]
 8001d36:	920a      	str	r2, [sp, #40]	; 0x28
 8001d38:	930d      	str	r3, [sp, #52]	; 0x34
 8001d3a:	e603      	b.n	8001944 <_svfprintf_r+0x3e4>
 8001d3c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8001d40:	f340 80d3 	ble.w	8001eea <_svfprintf_r+0x98a>
 8001d44:	2200      	movs	r2, #0
 8001d46:	2300      	movs	r3, #0
 8001d48:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001d4c:	f7ff f826 	bl	8000d9c <__aeabi_dcmpeq>
 8001d50:	2800      	cmp	r0, #0
 8001d52:	f000 8169 	beq.w	8002028 <_svfprintf_r+0xac8>
 8001d56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001d58:	4ab1      	ldr	r2, [pc, #708]	; (8002020 <_svfprintf_r+0xac0>)
 8001d5a:	f8ca 2000 	str.w	r2, [sl]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	3401      	adds	r4, #1
 8001d62:	2201      	movs	r2, #1
 8001d64:	2b07      	cmp	r3, #7
 8001d66:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 8001d6a:	f8ca 2004 	str.w	r2, [sl, #4]
 8001d6e:	f300 83ce 	bgt.w	800250e <_svfprintf_r+0xfae>
 8001d72:	f10a 0a08 	add.w	sl, sl, #8
 8001d76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001d78:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001d7a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	f280 822b 	bge.w	80021d8 <_svfprintf_r+0xc78>
 8001d82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001d84:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001d86:	f8ca 2000 	str.w	r2, [sl]
 8001d8a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001d8c:	f8ca 2004 	str.w	r2, [sl, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4414      	add	r4, r2
 8001d94:	2b07      	cmp	r3, #7
 8001d96:	e9cd 3424 	strd	r3, r4, [sp, #144]	; 0x90
 8001d9a:	f300 8331 	bgt.w	8002400 <_svfprintf_r+0xea0>
 8001d9e:	f10a 0a08 	add.w	sl, sl, #8
 8001da2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001da4:	1e5d      	subs	r5, r3, #1
 8001da6:	2d00      	cmp	r5, #0
 8001da8:	f77f ae87 	ble.w	8001aba <_svfprintf_r+0x55a>
 8001dac:	2d10      	cmp	r5, #16
 8001dae:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001db0:	4f9c      	ldr	r7, [pc, #624]	; (8002024 <_svfprintf_r+0xac4>)
 8001db2:	f340 8385 	ble.w	80024c0 <_svfprintf_r+0xf60>
 8001db6:	4623      	mov	r3, r4
 8001db8:	2610      	movs	r6, #16
 8001dba:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 8001dbe:	e005      	b.n	8001dcc <_svfprintf_r+0x86c>
 8001dc0:	f10a 0a08 	add.w	sl, sl, #8
 8001dc4:	3d10      	subs	r5, #16
 8001dc6:	2d10      	cmp	r5, #16
 8001dc8:	f340 8379 	ble.w	80024be <_svfprintf_r+0xf5e>
 8001dcc:	3201      	adds	r2, #1
 8001dce:	3310      	adds	r3, #16
 8001dd0:	2a07      	cmp	r2, #7
 8001dd2:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8001dd6:	e9ca 7600 	strd	r7, r6, [sl]
 8001dda:	ddf1      	ble.n	8001dc0 <_svfprintf_r+0x860>
 8001ddc:	aa23      	add	r2, sp, #140	; 0x8c
 8001dde:	4621      	mov	r1, r4
 8001de0:	4648      	mov	r0, r9
 8001de2:	f002 fd1f 	bl	8004824 <__ssprint_r>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	f47f ac87 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001dec:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8001df0:	46c2      	mov	sl, r8
 8001df2:	e7e7      	b.n	8001dc4 <_svfprintf_r+0x864>
 8001df4:	9b07      	ldr	r3, [sp, #28]
 8001df6:	9a04      	ldr	r2, [sp, #16]
 8001df8:	1a9d      	subs	r5, r3, r2
 8001dfa:	2d00      	cmp	r5, #0
 8001dfc:	f77f ae12 	ble.w	8001a24 <_svfprintf_r+0x4c4>
 8001e00:	2d10      	cmp	r5, #16
 8001e02:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001e04:	4f87      	ldr	r7, [pc, #540]	; (8002024 <_svfprintf_r+0xac4>)
 8001e06:	dd22      	ble.n	8001e4e <_svfprintf_r+0x8ee>
 8001e08:	4653      	mov	r3, sl
 8001e0a:	4621      	mov	r1, r4
 8001e0c:	2610      	movs	r6, #16
 8001e0e:	e9dd a408 	ldrd	sl, r4, [sp, #32]
 8001e12:	e004      	b.n	8001e1e <_svfprintf_r+0x8be>
 8001e14:	3d10      	subs	r5, #16
 8001e16:	2d10      	cmp	r5, #16
 8001e18:	f103 0308 	add.w	r3, r3, #8
 8001e1c:	dd15      	ble.n	8001e4a <_svfprintf_r+0x8ea>
 8001e1e:	3201      	adds	r2, #1
 8001e20:	3110      	adds	r1, #16
 8001e22:	2a07      	cmp	r2, #7
 8001e24:	e9cd 2124 	strd	r2, r1, [sp, #144]	; 0x90
 8001e28:	e9c3 7600 	strd	r7, r6, [r3]
 8001e2c:	ddf2      	ble.n	8001e14 <_svfprintf_r+0x8b4>
 8001e2e:	aa23      	add	r2, sp, #140	; 0x8c
 8001e30:	4651      	mov	r1, sl
 8001e32:	4620      	mov	r0, r4
 8001e34:	f002 fcf6 	bl	8004824 <__ssprint_r>
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	f47f ac5e 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001e3e:	3d10      	subs	r5, #16
 8001e40:	2d10      	cmp	r5, #16
 8001e42:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	; 0x90
 8001e46:	4643      	mov	r3, r8
 8001e48:	dce9      	bgt.n	8001e1e <_svfprintf_r+0x8be>
 8001e4a:	469a      	mov	sl, r3
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	3201      	adds	r2, #1
 8001e50:	442c      	add	r4, r5
 8001e52:	2a07      	cmp	r2, #7
 8001e54:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8001e58:	e9ca 7500 	strd	r7, r5, [sl]
 8001e5c:	f300 833a 	bgt.w	80024d4 <_svfprintf_r+0xf74>
 8001e60:	f10a 0a08 	add.w	sl, sl, #8
 8001e64:	e5de      	b.n	8001a24 <_svfprintf_r+0x4c4>
 8001e66:	aa23      	add	r2, sp, #140	; 0x8c
 8001e68:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8001e6c:	f002 fcda 	bl	8004824 <__ssprint_r>
 8001e70:	2800      	cmp	r0, #0
 8001e72:	f43f ae62 	beq.w	8001b3a <_svfprintf_r+0x5da>
 8001e76:	e440      	b.n	80016fa <_svfprintf_r+0x19a>
 8001e78:	aa23      	add	r2, sp, #140	; 0x8c
 8001e7a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8001e7e:	f002 fcd1 	bl	8004824 <__ssprint_r>
 8001e82:	2800      	cmp	r0, #0
 8001e84:	f47f ac39 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001e88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001e8a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001e8c:	46c2      	mov	sl, r8
 8001e8e:	b91b      	cbnz	r3, 8001e98 <_svfprintf_r+0x938>
 8001e90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001e92:	2a00      	cmp	r2, #0
 8001e94:	f000 8375 	beq.w	8002582 <_svfprintf_r+0x1022>
 8001e98:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001e9a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001e9c:	f8ca 1000 	str.w	r1, [sl]
 8001ea0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001ea2:	f8ca 1004 	str.w	r1, [sl, #4]
 8001ea6:	3201      	adds	r2, #1
 8001ea8:	440c      	add	r4, r1
 8001eaa:	2a07      	cmp	r2, #7
 8001eac:	9425      	str	r4, [sp, #148]	; 0x94
 8001eae:	9224      	str	r2, [sp, #144]	; 0x90
 8001eb0:	f300 8450 	bgt.w	8002754 <_svfprintf_r+0x11f4>
 8001eb4:	f10a 0a08 	add.w	sl, sl, #8
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f2c0 8487 	blt.w	80027cc <_svfprintf_r+0x126c>
 8001ebe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001ec0:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001ec2:	3201      	adds	r2, #1
 8001ec4:	441c      	add	r4, r3
 8001ec6:	2a07      	cmp	r2, #7
 8001ec8:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8001ecc:	e9ca 1300 	strd	r1, r3, [sl]
 8001ed0:	f77f adf1 	ble.w	8001ab6 <_svfprintf_r+0x556>
 8001ed4:	aa23      	add	r2, sp, #140	; 0x8c
 8001ed6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8001eda:	f002 fca3 	bl	8004824 <__ssprint_r>
 8001ede:	2800      	cmp	r0, #0
 8001ee0:	f47f ac0b 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001ee4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001ee6:	46c2      	mov	sl, r8
 8001ee8:	e5e7      	b.n	8001aba <_svfprintf_r+0x55a>
 8001eea:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8001eec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001eee:	2a01      	cmp	r2, #1
 8001ef0:	f104 0401 	add.w	r4, r4, #1
 8001ef4:	f103 0501 	add.w	r5, r3, #1
 8001ef8:	f10a 0608 	add.w	r6, sl, #8
 8001efc:	f340 814a 	ble.w	8002194 <_svfprintf_r+0xc34>
 8001f00:	2301      	movs	r3, #1
 8001f02:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001f04:	f8ca 2000 	str.w	r2, [sl]
 8001f08:	2d07      	cmp	r5, #7
 8001f0a:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 8001f0e:	f8ca 3004 	str.w	r3, [sl, #4]
 8001f12:	f300 82b8 	bgt.w	8002486 <_svfprintf_r+0xf26>
 8001f16:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001f18:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001f1a:	3501      	adds	r5, #1
 8001f1c:	441c      	add	r4, r3
 8001f1e:	2d07      	cmp	r5, #7
 8001f20:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 8001f24:	e9c6 2300 	strd	r2, r3, [r6]
 8001f28:	f300 82b9 	bgt.w	800249e <_svfprintf_r+0xf3e>
 8001f2c:	3608      	adds	r6, #8
 8001f2e:	1c6b      	adds	r3, r5, #1
 8001f30:	461f      	mov	r7, r3
 8001f32:	46b9      	mov	r9, r7
 8001f34:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8001f36:	930a      	str	r3, [sp, #40]	; 0x28
 8001f38:	3f01      	subs	r7, #1
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8001f42:	9705      	str	r7, [sp, #20]
 8001f44:	f106 0a08 	add.w	sl, r6, #8
 8001f48:	f7fe ff28 	bl	8000d9c <__aeabi_dcmpeq>
 8001f4c:	2800      	cmp	r0, #0
 8001f4e:	f040 80e1 	bne.w	8002114 <_svfprintf_r+0xbb4>
 8001f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001f54:	6077      	str	r7, [r6, #4]
 8001f56:	3301      	adds	r3, #1
 8001f58:	443c      	add	r4, r7
 8001f5a:	f1b9 0f07 	cmp.w	r9, #7
 8001f5e:	6033      	str	r3, [r6, #0]
 8001f60:	9425      	str	r4, [sp, #148]	; 0x94
 8001f62:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8001f66:	f300 823b 	bgt.w	80023e0 <_svfprintf_r+0xe80>
 8001f6a:	f106 0310 	add.w	r3, r6, #16
 8001f6e:	f105 0902 	add.w	r9, r5, #2
 8001f72:	4656      	mov	r6, sl
 8001f74:	469a      	mov	sl, r3
 8001f76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001f78:	6072      	str	r2, [r6, #4]
 8001f7a:	4414      	add	r4, r2
 8001f7c:	ab1f      	add	r3, sp, #124	; 0x7c
 8001f7e:	f1b9 0f07 	cmp.w	r9, #7
 8001f82:	9425      	str	r4, [sp, #148]	; 0x94
 8001f84:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8001f88:	6033      	str	r3, [r6, #0]
 8001f8a:	f77f ad96 	ble.w	8001aba <_svfprintf_r+0x55a>
 8001f8e:	e7a1      	b.n	8001ed4 <_svfprintf_r+0x974>
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	9703      	str	r7, [sp, #12]
 8001f94:	f47f ac9d 	bne.w	80018d2 <_svfprintf_r+0x372>
 8001f98:	2d00      	cmp	r5, #0
 8001f9a:	bf08      	it	eq
 8001f9c:	2c0a      	cmpeq	r4, #10
 8001f9e:	f080 8147 	bcs.w	8002230 <_svfprintf_r+0xcd0>
 8001fa2:	ab40      	add	r3, sp, #256	; 0x100
 8001fa4:	3430      	adds	r4, #48	; 0x30
 8001fa6:	f803 4d41 	strb.w	r4, [r3, #-65]!
 8001faa:	930d      	str	r3, [sp, #52]	; 0x34
 8001fac:	2301      	movs	r3, #1
 8001fae:	930a      	str	r3, [sp, #40]	; 0x28
 8001fb0:	e4ad      	b.n	800190e <_svfprintf_r+0x3ae>
 8001fb2:	aa23      	add	r2, sp, #140	; 0x8c
 8001fb4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8001fb8:	f002 fc34 	bl	8004824 <__ssprint_r>
 8001fbc:	2800      	cmp	r0, #0
 8001fbe:	f47f ab9c 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001fc2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001fc4:	46c2      	mov	sl, r8
 8001fc6:	e51a      	b.n	80019fe <_svfprintf_r+0x49e>
 8001fc8:	aa23      	add	r2, sp, #140	; 0x8c
 8001fca:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8001fce:	f002 fc29 	bl	8004824 <__ssprint_r>
 8001fd2:	2800      	cmp	r0, #0
 8001fd4:	f47f ab91 	bne.w	80016fa <_svfprintf_r+0x19a>
 8001fd8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8001fda:	46c2      	mov	sl, r8
 8001fdc:	e51e      	b.n	8001a1c <_svfprintf_r+0x4bc>
 8001fde:	9f12      	ldr	r7, [sp, #72]	; 0x48
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	0923      	lsrs	r3, r4, #4
 8001fe4:	f004 000f 	and.w	r0, r4, #15
 8001fe8:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 8001fec:	0929      	lsrs	r1, r5, #4
 8001fee:	461c      	mov	r4, r3
 8001ff0:	460d      	mov	r5, r1
 8001ff2:	5c3b      	ldrb	r3, [r7, r0]
 8001ff4:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8001ff8:	ea54 0305 	orrs.w	r3, r4, r5
 8001ffc:	d1f1      	bne.n	8001fe2 <_svfprintf_r+0xa82>
 8001ffe:	eba8 0302 	sub.w	r3, r8, r2
 8002002:	920d      	str	r2, [sp, #52]	; 0x34
 8002004:	930a      	str	r3, [sp, #40]	; 0x28
 8002006:	e482      	b.n	800190e <_svfprintf_r+0x3ae>
 8002008:	aa23      	add	r2, sp, #140	; 0x8c
 800200a:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800200e:	f002 fc09 	bl	8004824 <__ssprint_r>
 8002012:	2800      	cmp	r0, #0
 8002014:	f47f ab71 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002018:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800201a:	46c2      	mov	sl, r8
 800201c:	e539      	b.n	8001a92 <_svfprintf_r+0x532>
 800201e:	bf00      	nop
 8002020:	0800b678 	.word	0x0800b678
 8002024:	0800ad88 	.word	0x0800ad88
 8002028:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800202a:	2b00      	cmp	r3, #0
 800202c:	f340 825e 	ble.w	80024ec <_svfprintf_r+0xf8c>
 8002030:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8002034:	4293      	cmp	r3, r2
 8002036:	bfa8      	it	ge
 8002038:	4613      	movge	r3, r2
 800203a:	2b00      	cmp	r3, #0
 800203c:	461d      	mov	r5, r3
 800203e:	dd0e      	ble.n	800205e <_svfprintf_r+0xafe>
 8002040:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8002042:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002044:	f8ca 2000 	str.w	r2, [sl]
 8002048:	3301      	adds	r3, #1
 800204a:	442c      	add	r4, r5
 800204c:	2b07      	cmp	r3, #7
 800204e:	9425      	str	r4, [sp, #148]	; 0x94
 8002050:	f8ca 5004 	str.w	r5, [sl, #4]
 8002054:	9324      	str	r3, [sp, #144]	; 0x90
 8002056:	f300 8318 	bgt.w	800268a <_svfprintf_r+0x112a>
 800205a:	f10a 0a08 	add.w	sl, sl, #8
 800205e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002060:	2d00      	cmp	r5, #0
 8002062:	bfa8      	it	ge
 8002064:	1b5b      	subge	r3, r3, r5
 8002066:	2b00      	cmp	r3, #0
 8002068:	461d      	mov	r5, r3
 800206a:	f300 8180 	bgt.w	800236e <_svfprintf_r+0xe0e>
 800206e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002070:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002072:	4293      	cmp	r3, r2
 8002074:	f2c0 81e4 	blt.w	8002440 <_svfprintf_r+0xee0>
 8002078:	9a03      	ldr	r2, [sp, #12]
 800207a:	07d0      	lsls	r0, r2, #31
 800207c:	f100 81e0 	bmi.w	8002440 <_svfprintf_r+0xee0>
 8002080:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002082:	980e      	ldr	r0, [sp, #56]	; 0x38
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	1a15      	subs	r5, r2, r0
 8002088:	429d      	cmp	r5, r3
 800208a:	bfa8      	it	ge
 800208c:	461d      	movge	r5, r3
 800208e:	2d00      	cmp	r5, #0
 8002090:	dd0f      	ble.n	80020b2 <_svfprintf_r+0xb52>
 8002092:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002094:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002096:	f8ca 5004 	str.w	r5, [sl, #4]
 800209a:	3201      	adds	r2, #1
 800209c:	4401      	add	r1, r0
 800209e:	442c      	add	r4, r5
 80020a0:	2a07      	cmp	r2, #7
 80020a2:	f8ca 1000 	str.w	r1, [sl]
 80020a6:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 80020aa:	f300 8323 	bgt.w	80026f4 <_svfprintf_r+0x1194>
 80020ae:	f10a 0a08 	add.w	sl, sl, #8
 80020b2:	2d00      	cmp	r5, #0
 80020b4:	bfac      	ite	ge
 80020b6:	1b5d      	subge	r5, r3, r5
 80020b8:	461d      	movlt	r5, r3
 80020ba:	2d00      	cmp	r5, #0
 80020bc:	f77f acfd 	ble.w	8001aba <_svfprintf_r+0x55a>
 80020c0:	2d10      	cmp	r5, #16
 80020c2:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80020c4:	4fc5      	ldr	r7, [pc, #788]	; (80023dc <_svfprintf_r+0xe7c>)
 80020c6:	f340 81fb 	ble.w	80024c0 <_svfprintf_r+0xf60>
 80020ca:	4623      	mov	r3, r4
 80020cc:	2610      	movs	r6, #16
 80020ce:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 80020d2:	e005      	b.n	80020e0 <_svfprintf_r+0xb80>
 80020d4:	f10a 0a08 	add.w	sl, sl, #8
 80020d8:	3d10      	subs	r5, #16
 80020da:	2d10      	cmp	r5, #16
 80020dc:	f340 81ef 	ble.w	80024be <_svfprintf_r+0xf5e>
 80020e0:	3201      	adds	r2, #1
 80020e2:	3310      	adds	r3, #16
 80020e4:	2a07      	cmp	r2, #7
 80020e6:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 80020ea:	e9ca 7600 	strd	r7, r6, [sl]
 80020ee:	ddf1      	ble.n	80020d4 <_svfprintf_r+0xb74>
 80020f0:	aa23      	add	r2, sp, #140	; 0x8c
 80020f2:	4621      	mov	r1, r4
 80020f4:	4648      	mov	r0, r9
 80020f6:	f002 fb95 	bl	8004824 <__ssprint_r>
 80020fa:	2800      	cmp	r0, #0
 80020fc:	f47f aafd 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002100:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 8002104:	46c2      	mov	sl, r8
 8002106:	e7e7      	b.n	80020d8 <_svfprintf_r+0xb78>
 8002108:	9b05      	ldr	r3, [sp, #20]
 800210a:	930a      	str	r3, [sp, #40]	; 0x28
 800210c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 8002110:	f7ff bbfd 	b.w	800190e <_svfprintf_r+0x3ae>
 8002114:	9a05      	ldr	r2, [sp, #20]
 8002116:	2a00      	cmp	r2, #0
 8002118:	f77f af2d 	ble.w	8001f76 <_svfprintf_r+0xa16>
 800211c:	2a10      	cmp	r2, #16
 800211e:	4faf      	ldr	r7, [pc, #700]	; (80023dc <_svfprintf_r+0xe7c>)
 8002120:	f340 83ea 	ble.w	80028f8 <_svfprintf_r+0x1398>
 8002124:	4633      	mov	r3, r6
 8002126:	4692      	mov	sl, r2
 8002128:	f04f 0910 	mov.w	r9, #16
 800212c:	4622      	mov	r2, r4
 800212e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002130:	e9dd 6408 	ldrd	r6, r4, [sp, #32]
 8002134:	e007      	b.n	8002146 <_svfprintf_r+0xbe6>
 8002136:	3308      	adds	r3, #8
 8002138:	f1aa 0a10 	sub.w	sl, sl, #16
 800213c:	f1ba 0f10 	cmp.w	sl, #16
 8002140:	f340 81ef 	ble.w	8002522 <_svfprintf_r+0xfc2>
 8002144:	3501      	adds	r5, #1
 8002146:	3210      	adds	r2, #16
 8002148:	2d07      	cmp	r5, #7
 800214a:	e9cd 5224 	strd	r5, r2, [sp, #144]	; 0x90
 800214e:	e9c3 7900 	strd	r7, r9, [r3]
 8002152:	ddf0      	ble.n	8002136 <_svfprintf_r+0xbd6>
 8002154:	aa23      	add	r2, sp, #140	; 0x8c
 8002156:	4631      	mov	r1, r6
 8002158:	4620      	mov	r0, r4
 800215a:	f002 fb63 	bl	8004824 <__ssprint_r>
 800215e:	2800      	cmp	r0, #0
 8002160:	f47f aacb 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002164:	e9dd 5224 	ldrd	r5, r2, [sp, #144]	; 0x90
 8002168:	4643      	mov	r3, r8
 800216a:	e7e5      	b.n	8002138 <_svfprintf_r+0xbd8>
 800216c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800216e:	06fd      	lsls	r5, r7, #27
 8002170:	f853 4b04 	ldr.w	r4, [r3], #4
 8002174:	930b      	str	r3, [sp, #44]	; 0x2c
 8002176:	d576      	bpl.n	8002266 <_svfprintf_r+0xd06>
 8002178:	2500      	movs	r5, #0
 800217a:	2301      	movs	r3, #1
 800217c:	f7ff bad9 	b.w	8001732 <_svfprintf_r+0x1d2>
 8002180:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002182:	f852 4b04 	ldr.w	r4, [r2], #4
 8002186:	920b      	str	r2, [sp, #44]	; 0x2c
 8002188:	f017 0210 	ands.w	r2, r7, #16
 800218c:	d079      	beq.n	8002282 <_svfprintf_r+0xd22>
 800218e:	2500      	movs	r5, #0
 8002190:	f7ff bacf 	b.w	8001732 <_svfprintf_r+0x1d2>
 8002194:	9a03      	ldr	r2, [sp, #12]
 8002196:	07d1      	lsls	r1, r2, #31
 8002198:	f53f aeb2 	bmi.w	8001f00 <_svfprintf_r+0x9a0>
 800219c:	2201      	movs	r2, #1
 800219e:	990d      	ldr	r1, [sp, #52]	; 0x34
 80021a0:	f8ca 1000 	str.w	r1, [sl]
 80021a4:	2d07      	cmp	r5, #7
 80021a6:	e9cd 5424 	strd	r5, r4, [sp, #144]	; 0x90
 80021aa:	f8ca 2004 	str.w	r2, [sl, #4]
 80021ae:	f300 8117 	bgt.w	80023e0 <_svfprintf_r+0xe80>
 80021b2:	f103 0902 	add.w	r9, r3, #2
 80021b6:	f10a 0a10 	add.w	sl, sl, #16
 80021ba:	e6dc      	b.n	8001f76 <_svfprintf_r+0xa16>
 80021bc:	2b30      	cmp	r3, #48	; 0x30
 80021be:	f000 8139 	beq.w	8002434 <_svfprintf_r+0xed4>
 80021c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80021c4:	3902      	subs	r1, #2
 80021c6:	2330      	movs	r3, #48	; 0x30
 80021c8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80021cc:	eba8 0301 	sub.w	r3, r8, r1
 80021d0:	930a      	str	r3, [sp, #40]	; 0x28
 80021d2:	910d      	str	r1, [sp, #52]	; 0x34
 80021d4:	f7ff bb9b 	b.w	800190e <_svfprintf_r+0x3ae>
 80021d8:	9b03      	ldr	r3, [sp, #12]
 80021da:	07de      	lsls	r6, r3, #31
 80021dc:	f53f add1 	bmi.w	8001d82 <_svfprintf_r+0x822>
 80021e0:	e46b      	b.n	8001aba <_svfprintf_r+0x55a>
 80021e2:	aa23      	add	r2, sp, #140	; 0x8c
 80021e4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80021e8:	f002 fb1c 	bl	8004824 <__ssprint_r>
 80021ec:	2800      	cmp	r0, #0
 80021ee:	f47f aa84 	bne.w	80016fa <_svfprintf_r+0x19a>
 80021f2:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80021f4:	e496      	b.n	8001b24 <_svfprintf_r+0x5c4>
 80021f6:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 80021fa:	f7ff bb88 	b.w	800190e <_svfprintf_r+0x3ae>
 80021fe:	2500      	movs	r5, #0
 8002200:	e4af      	b.n	8001b62 <_svfprintf_r+0x602>
 8002202:	17e5      	asrs	r5, r4, #31
 8002204:	2c00      	cmp	r4, #0
 8002206:	f175 0300 	sbcs.w	r3, r5, #0
 800220a:	f6bf ab50 	bge.w	80018ae <_svfprintf_r+0x34e>
 800220e:	9b05      	ldr	r3, [sp, #20]
 8002210:	4264      	negs	r4, r4
 8002212:	f04f 062d 	mov.w	r6, #45	; 0x2d
 8002216:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800221a:	3301      	adds	r3, #1
 800221c:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
 8002220:	f47f ab4b 	bne.w	80018ba <_svfprintf_r+0x35a>
 8002224:	2d00      	cmp	r5, #0
 8002226:	bf08      	it	eq
 8002228:	2c0a      	cmpeq	r4, #10
 800222a:	9703      	str	r7, [sp, #12]
 800222c:	f4ff aeb9 	bcc.w	8001fa2 <_svfprintf_r+0xa42>
 8002230:	4647      	mov	r7, r8
 8002232:	4620      	mov	r0, r4
 8002234:	4629      	mov	r1, r5
 8002236:	220a      	movs	r2, #10
 8002238:	2300      	movs	r3, #0
 800223a:	f7fe fe6f 	bl	8000f1c <__aeabi_uldivmod>
 800223e:	3230      	adds	r2, #48	; 0x30
 8002240:	f807 2d01 	strb.w	r2, [r7, #-1]!
 8002244:	4620      	mov	r0, r4
 8002246:	4629      	mov	r1, r5
 8002248:	2300      	movs	r3, #0
 800224a:	220a      	movs	r2, #10
 800224c:	f7fe fe66 	bl	8000f1c <__aeabi_uldivmod>
 8002250:	4604      	mov	r4, r0
 8002252:	460d      	mov	r5, r1
 8002254:	ea54 0305 	orrs.w	r3, r4, r5
 8002258:	d1eb      	bne.n	8002232 <_svfprintf_r+0xcd2>
 800225a:	eba8 0307 	sub.w	r3, r8, r7
 800225e:	970d      	str	r7, [sp, #52]	; 0x34
 8002260:	930a      	str	r3, [sp, #40]	; 0x28
 8002262:	f7ff bb54 	b.w	800190e <_svfprintf_r+0x3ae>
 8002266:	0678      	lsls	r0, r7, #25
 8002268:	bf48      	it	mi
 800226a:	b2a4      	uxthmi	r4, r4
 800226c:	2500      	movs	r5, #0
 800226e:	2301      	movs	r3, #1
 8002270:	f7ff ba5f 	b.w	8001732 <_svfprintf_r+0x1d2>
 8002274:	9a06      	ldr	r2, [sp, #24]
 8002276:	4610      	mov	r0, r2
 8002278:	17d1      	asrs	r1, r2, #31
 800227a:	e9c3 0100 	strd	r0, r1, [r3]
 800227e:	f7ff b997 	b.w	80015b0 <_svfprintf_r+0x50>
 8002282:	f017 0340 	ands.w	r3, r7, #64	; 0x40
 8002286:	bf1c      	itt	ne
 8002288:	4613      	movne	r3, r2
 800228a:	b2a4      	uxthne	r4, r4
 800228c:	2500      	movs	r5, #0
 800228e:	f7ff ba50 	b.w	8001732 <_svfprintf_r+0x1d2>
 8002292:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	f7fe fdb1 	bl	8000e00 <__aeabi_dcmpun>
 800229e:	2800      	cmp	r0, #0
 80022a0:	f040 8303 	bne.w	80028aa <_svfprintf_r+0x134a>
 80022a4:	9b05      	ldr	r3, [sp, #20]
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	f029 0620 	bic.w	r6, r9, #32
 80022ac:	f000 8244 	beq.w	8002738 <_svfprintf_r+0x11d8>
 80022b0:	2e47      	cmp	r6, #71	; 0x47
 80022b2:	f000 816b 	beq.w	800258c <_svfprintf_r+0x102c>
 80022b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80022b8:	f447 7280 	orr.w	r2, r7, #256	; 0x100
 80022bc:	2b00      	cmp	r3, #0
 80022be:	9203      	str	r2, [sp, #12]
 80022c0:	f2c0 820b 	blt.w	80026da <_svfprintf_r+0x117a>
 80022c4:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80022c8:	ed8d 7b18 	vstr	d7, [sp, #96]	; 0x60
 80022cc:	2300      	movs	r3, #0
 80022ce:	930c      	str	r3, [sp, #48]	; 0x30
 80022d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80022d4:	f000 8220 	beq.w	8002718 <_svfprintf_r+0x11b8>
 80022d8:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80022dc:	f000 825c 	beq.w	8002798 <_svfprintf_r+0x1238>
 80022e0:	2e45      	cmp	r6, #69	; 0x45
 80022e2:	f000 8158 	beq.w	8002596 <_svfprintf_r+0x1036>
 80022e6:	aa21      	add	r2, sp, #132	; 0x84
 80022e8:	ab1e      	add	r3, sp, #120	; 0x78
 80022ea:	e9cd 3200 	strd	r3, r2, [sp]
 80022ee:	2102      	movs	r1, #2
 80022f0:	ab1d      	add	r3, sp, #116	; 0x74
 80022f2:	9a05      	ldr	r2, [sp, #20]
 80022f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80022f6:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 80022fa:	f000 fbeb 	bl	8002ad4 <_dtoa_r>
 80022fe:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 8002302:	900d      	str	r0, [sp, #52]	; 0x34
 8002304:	f040 832f 	bne.w	8002966 <_svfprintf_r+0x1406>
 8002308:	07fb      	lsls	r3, r7, #31
 800230a:	f140 8169 	bpl.w	80025e0 <_svfprintf_r+0x1080>
 800230e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002310:	9a05      	ldr	r2, [sp, #20]
 8002312:	189c      	adds	r4, r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	2300      	movs	r3, #0
 8002318:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 800231c:	f7fe fd3e 	bl	8000d9c <__aeabi_dcmpeq>
 8002320:	2800      	cmp	r0, #0
 8002322:	f000 81ce 	beq.w	80026c2 <_svfprintf_r+0x1162>
 8002326:	4623      	mov	r3, r4
 8002328:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	930f      	str	r3, [sp, #60]	; 0x3c
 800232e:	2e47      	cmp	r6, #71	; 0x47
 8002330:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002332:	930e      	str	r3, [sp, #56]	; 0x38
 8002334:	f000 815d 	beq.w	80025f2 <_svfprintf_r+0x1092>
 8002338:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800233c:	f040 8161 	bne.w	8002602 <_svfprintf_r+0x10a2>
 8002340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002342:	2b00      	cmp	r3, #0
 8002344:	9b05      	ldr	r3, [sp, #20]
 8002346:	f340 82d0 	ble.w	80028ea <_svfprintf_r+0x138a>
 800234a:	2b00      	cmp	r3, #0
 800234c:	f040 82b9 	bne.w	80028c2 <_svfprintf_r+0x1362>
 8002350:	07fd      	lsls	r5, r7, #31
 8002352:	f100 82b6 	bmi.w	80028c2 <_svfprintf_r+0x1362>
 8002356:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002358:	9304      	str	r3, [sp, #16]
 800235a:	930a      	str	r3, [sp, #40]	; 0x28
 800235c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800235e:	2b00      	cmp	r3, #0
 8002360:	f040 817a 	bne.w	8002658 <_svfprintf_r+0x10f8>
 8002364:	9305      	str	r3, [sp, #20]
 8002366:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 800236a:	f7ff ba60 	b.w	800182e <_svfprintf_r+0x2ce>
 800236e:	2b10      	cmp	r3, #16
 8002370:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002372:	4f1a      	ldr	r7, [pc, #104]	; (80023dc <_svfprintf_r+0xe7c>)
 8002374:	f340 80ef 	ble.w	8002556 <_svfprintf_r+0xff6>
 8002378:	4623      	mov	r3, r4
 800237a:	2610      	movs	r6, #16
 800237c:	e9dd 4908 	ldrd	r4, r9, [sp, #32]
 8002380:	e005      	b.n	800238e <_svfprintf_r+0xe2e>
 8002382:	f10a 0a08 	add.w	sl, sl, #8
 8002386:	3d10      	subs	r5, #16
 8002388:	2d10      	cmp	r5, #16
 800238a:	f340 80e3 	ble.w	8002554 <_svfprintf_r+0xff4>
 800238e:	3201      	adds	r2, #1
 8002390:	3310      	adds	r3, #16
 8002392:	2a07      	cmp	r2, #7
 8002394:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
 8002398:	e9ca 7600 	strd	r7, r6, [sl]
 800239c:	ddf1      	ble.n	8002382 <_svfprintf_r+0xe22>
 800239e:	aa23      	add	r2, sp, #140	; 0x8c
 80023a0:	4621      	mov	r1, r4
 80023a2:	4648      	mov	r0, r9
 80023a4:	f002 fa3e 	bl	8004824 <__ssprint_r>
 80023a8:	2800      	cmp	r0, #0
 80023aa:	f47f a9a6 	bne.w	80016fa <_svfprintf_r+0x19a>
 80023ae:	e9dd 2324 	ldrd	r2, r3, [sp, #144]	; 0x90
 80023b2:	46c2      	mov	sl, r8
 80023b4:	e7e7      	b.n	8002386 <_svfprintf_r+0xe26>
 80023b6:	4264      	negs	r4, r4
 80023b8:	9407      	str	r4, [sp, #28]
 80023ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80023bc:	e49e      	b.n	8001cfc <_svfprintf_r+0x79c>
 80023be:	2140      	movs	r1, #64	; 0x40
 80023c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80023c2:	f001 faa3 	bl	800390c <_malloc_r>
 80023c6:	9b08      	ldr	r3, [sp, #32]
 80023c8:	6018      	str	r0, [r3, #0]
 80023ca:	6118      	str	r0, [r3, #16]
 80023cc:	2800      	cmp	r0, #0
 80023ce:	f000 82c2 	beq.w	8002956 <_svfprintf_r+0x13f6>
 80023d2:	9a08      	ldr	r2, [sp, #32]
 80023d4:	2340      	movs	r3, #64	; 0x40
 80023d6:	6153      	str	r3, [r2, #20]
 80023d8:	f7ff b8d9 	b.w	800158e <_svfprintf_r+0x2e>
 80023dc:	0800ad88 	.word	0x0800ad88
 80023e0:	aa23      	add	r2, sp, #140	; 0x8c
 80023e2:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80023e6:	f002 fa1d 	bl	8004824 <__ssprint_r>
 80023ea:	2800      	cmp	r0, #0
 80023ec:	f47f a985 	bne.w	80016fa <_svfprintf_r+0x19a>
 80023f0:	e9dd 3424 	ldrd	r3, r4, [sp, #144]	; 0x90
 80023f4:	f10d 0ac8 	add.w	sl, sp, #200	; 0xc8
 80023f8:	f103 0901 	add.w	r9, r3, #1
 80023fc:	4646      	mov	r6, r8
 80023fe:	e5ba      	b.n	8001f76 <_svfprintf_r+0xa16>
 8002400:	aa23      	add	r2, sp, #140	; 0x8c
 8002402:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8002406:	f002 fa0d 	bl	8004824 <__ssprint_r>
 800240a:	2800      	cmp	r0, #0
 800240c:	f47f a975 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002410:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002412:	46c2      	mov	sl, r8
 8002414:	e4c5      	b.n	8001da2 <_svfprintf_r+0x842>
 8002416:	9b05      	ldr	r3, [sp, #20]
 8002418:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 800241a:	9605      	str	r6, [sp, #20]
 800241c:	2b06      	cmp	r3, #6
 800241e:	bf28      	it	cs
 8002420:	2306      	movcs	r3, #6
 8002422:	9304      	str	r3, [sp, #16]
 8002424:	930a      	str	r3, [sp, #40]	; 0x28
 8002426:	4bba      	ldr	r3, [pc, #744]	; (8002710 <_svfprintf_r+0x11b0>)
 8002428:	950b      	str	r5, [sp, #44]	; 0x2c
 800242a:	9703      	str	r7, [sp, #12]
 800242c:	960e      	str	r6, [sp, #56]	; 0x38
 800242e:	930d      	str	r3, [sp, #52]	; 0x34
 8002430:	f7ff b9fd 	b.w	800182e <_svfprintf_r+0x2ce>
 8002434:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002436:	eba8 0303 	sub.w	r3, r8, r3
 800243a:	930a      	str	r3, [sp, #40]	; 0x28
 800243c:	f7ff ba67 	b.w	800190e <_svfprintf_r+0x3ae>
 8002440:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002442:	9914      	ldr	r1, [sp, #80]	; 0x50
 8002444:	f8ca 1000 	str.w	r1, [sl]
 8002448:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800244a:	f8ca 1004 	str.w	r1, [sl, #4]
 800244e:	3201      	adds	r2, #1
 8002450:	440c      	add	r4, r1
 8002452:	2a07      	cmp	r2, #7
 8002454:	9425      	str	r4, [sp, #148]	; 0x94
 8002456:	9224      	str	r2, [sp, #144]	; 0x90
 8002458:	f300 8127 	bgt.w	80026aa <_svfprintf_r+0x114a>
 800245c:	f10a 0a08 	add.w	sl, sl, #8
 8002460:	e60e      	b.n	8002080 <_svfprintf_r+0xb20>
 8002462:	9a06      	ldr	r2, [sp, #24]
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f7ff b8a3 	b.w	80015b0 <_svfprintf_r+0x50>
 800246a:	aa23      	add	r2, sp, #140	; 0x8c
 800246c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8002470:	f002 f9d8 	bl	8004824 <__ssprint_r>
 8002474:	2800      	cmp	r0, #0
 8002476:	f47f a940 	bne.w	80016fa <_svfprintf_r+0x19a>
 800247a:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 800247e:	9c25      	ldr	r4, [sp, #148]	; 0x94
 8002480:	46c2      	mov	sl, r8
 8002482:	f7ff baac 	b.w	80019de <_svfprintf_r+0x47e>
 8002486:	aa23      	add	r2, sp, #140	; 0x8c
 8002488:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800248c:	f002 f9ca 	bl	8004824 <__ssprint_r>
 8002490:	2800      	cmp	r0, #0
 8002492:	f47f a932 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002496:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 800249a:	4646      	mov	r6, r8
 800249c:	e53b      	b.n	8001f16 <_svfprintf_r+0x9b6>
 800249e:	aa23      	add	r2, sp, #140	; 0x8c
 80024a0:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80024a4:	f002 f9be 	bl	8004824 <__ssprint_r>
 80024a8:	2800      	cmp	r0, #0
 80024aa:	f47f a926 	bne.w	80016fa <_svfprintf_r+0x19a>
 80024ae:	e9dd 5424 	ldrd	r5, r4, [sp, #144]	; 0x90
 80024b2:	4646      	mov	r6, r8
 80024b4:	e53b      	b.n	8001f2e <_svfprintf_r+0x9ce>
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	f47f aa0b 	bne.w	80018d2 <_svfprintf_r+0x372>
 80024bc:	e571      	b.n	8001fa2 <_svfprintf_r+0xa42>
 80024be:	461c      	mov	r4, r3
 80024c0:	3201      	adds	r2, #1
 80024c2:	442c      	add	r4, r5
 80024c4:	2a07      	cmp	r2, #7
 80024c6:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 80024ca:	e9ca 7500 	strd	r7, r5, [sl]
 80024ce:	f77f aaf2 	ble.w	8001ab6 <_svfprintf_r+0x556>
 80024d2:	e4ff      	b.n	8001ed4 <_svfprintf_r+0x974>
 80024d4:	aa23      	add	r2, sp, #140	; 0x8c
 80024d6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80024da:	f002 f9a3 	bl	8004824 <__ssprint_r>
 80024de:	2800      	cmp	r0, #0
 80024e0:	f47f a90b 	bne.w	80016fa <_svfprintf_r+0x19a>
 80024e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80024e6:	46c2      	mov	sl, r8
 80024e8:	f7ff ba9c 	b.w	8001a24 <_svfprintf_r+0x4c4>
 80024ec:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80024ee:	4989      	ldr	r1, [pc, #548]	; (8002714 <_svfprintf_r+0x11b4>)
 80024f0:	f8ca 1000 	str.w	r1, [sl]
 80024f4:	3201      	adds	r2, #1
 80024f6:	3401      	adds	r4, #1
 80024f8:	2101      	movs	r1, #1
 80024fa:	2a07      	cmp	r2, #7
 80024fc:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8002500:	f8ca 1004 	str.w	r1, [sl, #4]
 8002504:	f73f acb8 	bgt.w	8001e78 <_svfprintf_r+0x918>
 8002508:	f10a 0a08 	add.w	sl, sl, #8
 800250c:	e4bf      	b.n	8001e8e <_svfprintf_r+0x92e>
 800250e:	aa23      	add	r2, sp, #140	; 0x8c
 8002510:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8002514:	f002 f986 	bl	8004824 <__ssprint_r>
 8002518:	2800      	cmp	r0, #0
 800251a:	f47f a8ee 	bne.w	80016fa <_svfprintf_r+0x19a>
 800251e:	46c2      	mov	sl, r8
 8002520:	e429      	b.n	8001d76 <_svfprintf_r+0x816>
 8002522:	4614      	mov	r4, r2
 8002524:	461e      	mov	r6, r3
 8002526:	f8cd a014 	str.w	sl, [sp, #20]
 800252a:	f105 0901 	add.w	r9, r5, #1
 800252e:	f103 0208 	add.w	r2, r3, #8
 8002532:	9b05      	ldr	r3, [sp, #20]
 8002534:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
 8002538:	441c      	add	r4, r3
 800253a:	f1b9 0f07 	cmp.w	r9, #7
 800253e:	9425      	str	r4, [sp, #148]	; 0x94
 8002540:	e9c6 7300 	strd	r7, r3, [r6]
 8002544:	f73f af4c 	bgt.w	80023e0 <_svfprintf_r+0xe80>
 8002548:	f109 0901 	add.w	r9, r9, #1
 800254c:	f102 0a08 	add.w	sl, r2, #8
 8002550:	4616      	mov	r6, r2
 8002552:	e510      	b.n	8001f76 <_svfprintf_r+0xa16>
 8002554:	461c      	mov	r4, r3
 8002556:	3201      	adds	r2, #1
 8002558:	442c      	add	r4, r5
 800255a:	2a07      	cmp	r2, #7
 800255c:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8002560:	e9ca 7500 	strd	r7, r5, [sl]
 8002564:	f300 8127 	bgt.w	80027b6 <_svfprintf_r+0x1256>
 8002568:	f10a 0a08 	add.w	sl, sl, #8
 800256c:	e57f      	b.n	800206e <_svfprintf_r+0xb0e>
 800256e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002570:	9405      	str	r4, [sp, #20]
 8002572:	f7fe ff85 	bl	8001480 <strlen>
 8002576:	9703      	str	r7, [sp, #12]
 8002578:	e9cd 050a 	strd	r0, r5, [sp, #40]	; 0x28
 800257c:	4603      	mov	r3, r0
 800257e:	f7ff b950 	b.w	8001822 <_svfprintf_r+0x2c2>
 8002582:	9a03      	ldr	r2, [sp, #12]
 8002584:	07d5      	lsls	r5, r2, #31
 8002586:	f57f aa98 	bpl.w	8001aba <_svfprintf_r+0x55a>
 800258a:	e485      	b.n	8001e98 <_svfprintf_r+0x938>
 800258c:	2b00      	cmp	r3, #0
 800258e:	bf08      	it	eq
 8002590:	2301      	moveq	r3, #1
 8002592:	9305      	str	r3, [sp, #20]
 8002594:	e68f      	b.n	80022b6 <_svfprintf_r+0xd56>
 8002596:	9b05      	ldr	r3, [sp, #20]
 8002598:	9809      	ldr	r0, [sp, #36]	; 0x24
 800259a:	1c5d      	adds	r5, r3, #1
 800259c:	a921      	add	r1, sp, #132	; 0x84
 800259e:	ab1e      	add	r3, sp, #120	; 0x78
 80025a0:	e9cd 3100 	strd	r3, r1, [sp]
 80025a4:	462a      	mov	r2, r5
 80025a6:	ab1d      	add	r3, sp, #116	; 0x74
 80025a8:	2102      	movs	r1, #2
 80025aa:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 80025ae:	f000 fa91 	bl	8002ad4 <_dtoa_r>
 80025b2:	900d      	str	r0, [sp, #52]	; 0x34
 80025b4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80025b8:	f040 81c3 	bne.w	8002942 <_svfprintf_r+0x13e2>
 80025bc:	07fb      	lsls	r3, r7, #31
 80025be:	f140 81b9 	bpl.w	8002934 <_svfprintf_r+0x13d4>
 80025c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025c4:	f1b9 0f46 	cmp.w	r9, #70	; 0x46
 80025c8:	eb03 0405 	add.w	r4, r3, r5
 80025cc:	f47f aea2 	bne.w	8002314 <_svfprintf_r+0xdb4>
 80025d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b30      	cmp	r3, #48	; 0x30
 80025d6:	f000 815a 	beq.w	800288e <_svfprintf_r+0x132e>
 80025da:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 80025dc:	442c      	add	r4, r5
 80025de:	e699      	b.n	8002314 <_svfprintf_r+0xdb4>
 80025e0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80025e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80025e4:	920e      	str	r2, [sp, #56]	; 0x38
 80025e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80025e8:	2e47      	cmp	r6, #71	; 0x47
 80025ea:	eba3 0302 	sub.w	r3, r3, r2
 80025ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80025f0:	d107      	bne.n	8002602 <_svfprintf_r+0x10a2>
 80025f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80025f4:	1cda      	adds	r2, r3, #3
 80025f6:	db02      	blt.n	80025fe <_svfprintf_r+0x109e>
 80025f8:	9a05      	ldr	r2, [sp, #20]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	da33      	bge.n	8002666 <_svfprintf_r+0x1106>
 80025fe:	f1a9 0902 	sub.w	r9, r9, #2
 8002602:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002604:	f88d 907c 	strb.w	r9, [sp, #124]	; 0x7c
 8002608:	3b01      	subs	r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	931d      	str	r3, [sp, #116]	; 0x74
 800260e:	bfbd      	ittte	lt
 8002610:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8002612:	f1c3 0301 	rsblt	r3, r3, #1
 8002616:	222d      	movlt	r2, #45	; 0x2d
 8002618:	222b      	movge	r2, #43	; 0x2b
 800261a:	2b09      	cmp	r3, #9
 800261c:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
 8002620:	f300 8101 	bgt.w	8002826 <_svfprintf_r+0x12c6>
 8002624:	3330      	adds	r3, #48	; 0x30
 8002626:	2230      	movs	r2, #48	; 0x30
 8002628:	f88d 307f 	strb.w	r3, [sp, #127]	; 0x7f
 800262c:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
 8002630:	ab20      	add	r3, sp, #128	; 0x80
 8002632:	aa1f      	add	r2, sp, #124	; 0x7c
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002638:	9315      	str	r3, [sp, #84]	; 0x54
 800263a:	2a01      	cmp	r2, #1
 800263c:	4413      	add	r3, r2
 800263e:	930a      	str	r3, [sp, #40]	; 0x28
 8002640:	f340 8149 	ble.w	80028d6 <_svfprintf_r+0x1376>
 8002644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002646:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002648:	4413      	add	r3, r2
 800264a:	930a      	str	r3, [sp, #40]	; 0x28
 800264c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002650:	9304      	str	r3, [sp, #16]
 8002652:	2300      	movs	r3, #0
 8002654:	930e      	str	r3, [sp, #56]	; 0x38
 8002656:	e681      	b.n	800235c <_svfprintf_r+0xdfc>
 8002658:	262d      	movs	r6, #45	; 0x2d
 800265a:	2300      	movs	r3, #0
 800265c:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
 8002660:	9305      	str	r3, [sp, #20]
 8002662:	f7ff b8e7 	b.w	8001834 <_svfprintf_r+0x2d4>
 8002666:	e9dd 310e 	ldrd	r3, r1, [sp, #56]	; 0x38
 800266a:	428b      	cmp	r3, r1
 800266c:	f2c0 8080 	blt.w	8002770 <_svfprintf_r+0x1210>
 8002670:	07f8      	lsls	r0, r7, #31
 8002672:	f140 8105 	bpl.w	8002880 <_svfprintf_r+0x1320>
 8002676:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002678:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800267a:	4413      	add	r3, r2
 800267c:	930a      	str	r3, [sp, #40]	; 0x28
 800267e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002682:	9304      	str	r3, [sp, #16]
 8002684:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002688:	e668      	b.n	800235c <_svfprintf_r+0xdfc>
 800268a:	aa23      	add	r2, sp, #140	; 0x8c
 800268c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8002690:	f002 f8c8 	bl	8004824 <__ssprint_r>
 8002694:	2800      	cmp	r0, #0
 8002696:	f47f a830 	bne.w	80016fa <_svfprintf_r+0x19a>
 800269a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800269c:	46c2      	mov	sl, r8
 800269e:	e4de      	b.n	800205e <_svfprintf_r+0xafe>
 80026a0:	262d      	movs	r6, #45	; 0x2d
 80026a2:	f88d 606f 	strb.w	r6, [sp, #111]	; 0x6f
 80026a6:	f7ff bad7 	b.w	8001c58 <_svfprintf_r+0x6f8>
 80026aa:	aa23      	add	r2, sp, #140	; 0x8c
 80026ac:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80026b0:	f002 f8b8 	bl	8004824 <__ssprint_r>
 80026b4:	2800      	cmp	r0, #0
 80026b6:	f47f a820 	bne.w	80016fa <_svfprintf_r+0x19a>
 80026ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80026bc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80026be:	46c2      	mov	sl, r8
 80026c0:	e4de      	b.n	8002080 <_svfprintf_r+0xb20>
 80026c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80026c4:	42a3      	cmp	r3, r4
 80026c6:	f4bf ae2f 	bcs.w	8002328 <_svfprintf_r+0xdc8>
 80026ca:	2130      	movs	r1, #48	; 0x30
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	9221      	str	r2, [sp, #132]	; 0x84
 80026d0:	7019      	strb	r1, [r3, #0]
 80026d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80026d4:	429c      	cmp	r4, r3
 80026d6:	d8f9      	bhi.n	80026cc <_svfprintf_r+0x116c>
 80026d8:	e626      	b.n	8002328 <_svfprintf_r+0xdc8>
 80026da:	e9dd 1210 	ldrd	r1, r2, [sp, #64]	; 0x40
 80026de:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 80026e2:	9319      	str	r3, [sp, #100]	; 0x64
 80026e4:	232d      	movs	r3, #45	; 0x2d
 80026e6:	9118      	str	r1, [sp, #96]	; 0x60
 80026e8:	930c      	str	r3, [sp, #48]	; 0x30
 80026ea:	e5f1      	b.n	80022d0 <_svfprintf_r+0xd70>
 80026ec:	2300      	movs	r3, #0
 80026ee:	9305      	str	r3, [sp, #20]
 80026f0:	f7fe bf94 	b.w	800161c <_svfprintf_r+0xbc>
 80026f4:	aa23      	add	r2, sp, #140	; 0x8c
 80026f6:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80026fa:	f002 f893 	bl	8004824 <__ssprint_r>
 80026fe:	2800      	cmp	r0, #0
 8002700:	f47e affb 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002704:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002706:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002708:	9c25      	ldr	r4, [sp, #148]	; 0x94
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	46c2      	mov	sl, r8
 800270e:	e4d0      	b.n	80020b2 <_svfprintf_r+0xb52>
 8002710:	0800b6b4 	.word	0x0800b6b4
 8002714:	0800b678 	.word	0x0800b678
 8002718:	9d05      	ldr	r5, [sp, #20]
 800271a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800271c:	aa21      	add	r2, sp, #132	; 0x84
 800271e:	ab1e      	add	r3, sp, #120	; 0x78
 8002720:	e9cd 3200 	strd	r3, r2, [sp]
 8002724:	2103      	movs	r1, #3
 8002726:	ab1d      	add	r3, sp, #116	; 0x74
 8002728:	462a      	mov	r2, r5
 800272a:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 800272e:	f000 f9d1 	bl	8002ad4 <_dtoa_r>
 8002732:	900d      	str	r0, [sp, #52]	; 0x34
 8002734:	1944      	adds	r4, r0, r5
 8002736:	e74b      	b.n	80025d0 <_svfprintf_r+0x1070>
 8002738:	2306      	movs	r3, #6
 800273a:	9305      	str	r3, [sp, #20]
 800273c:	e5bb      	b.n	80022b6 <_svfprintf_r+0xd56>
 800273e:	9b05      	ldr	r3, [sp, #20]
 8002740:	9304      	str	r3, [sp, #16]
 8002742:	930a      	str	r3, [sp, #40]	; 0x28
 8002744:	9005      	str	r0, [sp, #20]
 8002746:	950b      	str	r5, [sp, #44]	; 0x2c
 8002748:	9703      	str	r7, [sp, #12]
 800274a:	900e      	str	r0, [sp, #56]	; 0x38
 800274c:	f89d 606f 	ldrb.w	r6, [sp, #111]	; 0x6f
 8002750:	f7ff b86d 	b.w	800182e <_svfprintf_r+0x2ce>
 8002754:	aa23      	add	r2, sp, #140	; 0x8c
 8002756:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 800275a:	f002 f863 	bl	8004824 <__ssprint_r>
 800275e:	2800      	cmp	r0, #0
 8002760:	f47e afcb 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002764:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8002766:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800276a:	46c2      	mov	sl, r8
 800276c:	f7ff bba4 	b.w	8001eb8 <_svfprintf_r+0x958>
 8002770:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8002772:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002774:	4413      	add	r3, r2
 8002776:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002778:	930a      	str	r3, [sp, #40]	; 0x28
 800277a:	2a00      	cmp	r2, #0
 800277c:	dc06      	bgt.n	800278c <_svfprintf_r+0x122c>
 800277e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002780:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002782:	f1c3 0301 	rsb	r3, r3, #1
 8002786:	441a      	add	r2, r3
 8002788:	4613      	mov	r3, r2
 800278a:	920a      	str	r2, [sp, #40]	; 0x28
 800278c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002790:	9304      	str	r3, [sp, #16]
 8002792:	f04f 0967 	mov.w	r9, #103	; 0x67
 8002796:	e5e1      	b.n	800235c <_svfprintf_r+0xdfc>
 8002798:	9d05      	ldr	r5, [sp, #20]
 800279a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800279c:	aa21      	add	r2, sp, #132	; 0x84
 800279e:	ab1e      	add	r3, sp, #120	; 0x78
 80027a0:	e9cd 3200 	strd	r3, r2, [sp]
 80027a4:	2103      	movs	r1, #3
 80027a6:	ab1d      	add	r3, sp, #116	; 0x74
 80027a8:	462a      	mov	r2, r5
 80027aa:	ed9d 0b18 	vldr	d0, [sp, #96]	; 0x60
 80027ae:	f000 f991 	bl	8002ad4 <_dtoa_r>
 80027b2:	900d      	str	r0, [sp, #52]	; 0x34
 80027b4:	e705      	b.n	80025c2 <_svfprintf_r+0x1062>
 80027b6:	aa23      	add	r2, sp, #140	; 0x8c
 80027b8:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 80027bc:	f002 f832 	bl	8004824 <__ssprint_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	f47e af9a 	bne.w	80016fa <_svfprintf_r+0x19a>
 80027c6:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80027c8:	46c2      	mov	sl, r8
 80027ca:	e450      	b.n	800206e <_svfprintf_r+0xb0e>
 80027cc:	425d      	negs	r5, r3
 80027ce:	3310      	adds	r3, #16
 80027d0:	4f72      	ldr	r7, [pc, #456]	; (800299c <_svfprintf_r+0x143c>)
 80027d2:	da1c      	bge.n	800280e <_svfprintf_r+0x12ae>
 80027d4:	2610      	movs	r6, #16
 80027d6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80027da:	e004      	b.n	80027e6 <_svfprintf_r+0x1286>
 80027dc:	f10a 0a08 	add.w	sl, sl, #8
 80027e0:	3d10      	subs	r5, #16
 80027e2:	2d10      	cmp	r5, #16
 80027e4:	dd13      	ble.n	800280e <_svfprintf_r+0x12ae>
 80027e6:	3201      	adds	r2, #1
 80027e8:	3410      	adds	r4, #16
 80027ea:	2a07      	cmp	r2, #7
 80027ec:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 80027f0:	e9ca 7600 	strd	r7, r6, [sl]
 80027f4:	ddf2      	ble.n	80027dc <_svfprintf_r+0x127c>
 80027f6:	aa23      	add	r2, sp, #140	; 0x8c
 80027f8:	9908      	ldr	r1, [sp, #32]
 80027fa:	4648      	mov	r0, r9
 80027fc:	f002 f812 	bl	8004824 <__ssprint_r>
 8002800:	2800      	cmp	r0, #0
 8002802:	f47e af7a 	bne.w	80016fa <_svfprintf_r+0x19a>
 8002806:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800280a:	46c2      	mov	sl, r8
 800280c:	e7e8      	b.n	80027e0 <_svfprintf_r+0x1280>
 800280e:	3201      	adds	r2, #1
 8002810:	442c      	add	r4, r5
 8002812:	2a07      	cmp	r2, #7
 8002814:	e9cd 2424 	strd	r2, r4, [sp, #144]	; 0x90
 8002818:	e9ca 7500 	strd	r7, r5, [sl]
 800281c:	dc7d      	bgt.n	800291a <_svfprintf_r+0x13ba>
 800281e:	f10a 0a08 	add.w	sl, sl, #8
 8002822:	f7ff bb4c 	b.w	8001ebe <_svfprintf_r+0x95e>
 8002826:	f10d 048b 	add.w	r4, sp, #139	; 0x8b
 800282a:	4620      	mov	r0, r4
 800282c:	4d5c      	ldr	r5, [pc, #368]	; (80029a0 <_svfprintf_r+0x1440>)
 800282e:	e000      	b.n	8002832 <_svfprintf_r+0x12d2>
 8002830:	4610      	mov	r0, r2
 8002832:	fba5 1203 	umull	r1, r2, r5, r3
 8002836:	08d2      	lsrs	r2, r2, #3
 8002838:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 800283c:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
 8002840:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8002844:	4613      	mov	r3, r2
 8002846:	2b09      	cmp	r3, #9
 8002848:	f800 1c01 	strb.w	r1, [r0, #-1]
 800284c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8002850:	dcee      	bgt.n	8002830 <_svfprintf_r+0x12d0>
 8002852:	3330      	adds	r3, #48	; 0x30
 8002854:	3802      	subs	r0, #2
 8002856:	b2d9      	uxtb	r1, r3
 8002858:	4284      	cmp	r4, r0
 800285a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800285e:	d973      	bls.n	8002948 <_svfprintf_r+0x13e8>
 8002860:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 8002864:	4613      	mov	r3, r2
 8002866:	e001      	b.n	800286c <_svfprintf_r+0x130c>
 8002868:	f813 1b01 	ldrb.w	r1, [r3], #1
 800286c:	f800 1b01 	strb.w	r1, [r0], #1
 8002870:	429c      	cmp	r4, r3
 8002872:	d1f9      	bne.n	8002868 <_svfprintf_r+0x1308>
 8002874:	ab23      	add	r3, sp, #140	; 0x8c
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	f10d 027e 	add.w	r2, sp, #126	; 0x7e
 800287c:	4413      	add	r3, r2
 800287e:	e6d8      	b.n	8002632 <_svfprintf_r+0x10d2>
 8002880:	ea23 72e3 	bic.w	r2, r3, r3, asr #31
 8002884:	9204      	str	r2, [sp, #16]
 8002886:	930a      	str	r3, [sp, #40]	; 0x28
 8002888:	f04f 0967 	mov.w	r9, #103	; 0x67
 800288c:	e566      	b.n	800235c <_svfprintf_r+0xdfc>
 800288e:	2200      	movs	r2, #0
 8002890:	2300      	movs	r3, #0
 8002892:	e9dd 0118 	ldrd	r0, r1, [sp, #96]	; 0x60
 8002896:	f7fe fa81 	bl	8000d9c <__aeabi_dcmpeq>
 800289a:	2800      	cmp	r0, #0
 800289c:	f47f ae9d 	bne.w	80025da <_svfprintf_r+0x107a>
 80028a0:	f1c5 0501 	rsb	r5, r5, #1
 80028a4:	951d      	str	r5, [sp, #116]	; 0x74
 80028a6:	442c      	add	r4, r5
 80028a8:	e534      	b.n	8002314 <_svfprintf_r+0xdb4>
 80028aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80028ac:	4a3d      	ldr	r2, [pc, #244]	; (80029a4 <_svfprintf_r+0x1444>)
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	bfb6      	itet	lt
 80028b2:	262d      	movlt	r6, #45	; 0x2d
 80028b4:	f89d 606f 	ldrbge.w	r6, [sp, #111]	; 0x6f
 80028b8:	f88d 606f 	strblt.w	r6, [sp, #111]	; 0x6f
 80028bc:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <_svfprintf_r+0x1448>)
 80028be:	f7ff b9cd 	b.w	8001c5c <_svfprintf_r+0x6fc>
 80028c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80028c4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80028c6:	4413      	add	r3, r2
 80028c8:	9a05      	ldr	r2, [sp, #20]
 80028ca:	441a      	add	r2, r3
 80028cc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80028d0:	920a      	str	r2, [sp, #40]	; 0x28
 80028d2:	9304      	str	r3, [sp, #16]
 80028d4:	e542      	b.n	800235c <_svfprintf_r+0xdfc>
 80028d6:	f017 0301 	ands.w	r3, r7, #1
 80028da:	930e      	str	r3, [sp, #56]	; 0x38
 80028dc:	f47f aeb2 	bne.w	8002644 <_svfprintf_r+0x10e4>
 80028e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80028e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	e538      	b.n	800235c <_svfprintf_r+0xdfc>
 80028ea:	b93b      	cbnz	r3, 80028fc <_svfprintf_r+0x139c>
 80028ec:	07fc      	lsls	r4, r7, #31
 80028ee:	d405      	bmi.n	80028fc <_svfprintf_r+0x139c>
 80028f0:	2301      	movs	r3, #1
 80028f2:	9304      	str	r3, [sp, #16]
 80028f4:	930a      	str	r3, [sp, #40]	; 0x28
 80028f6:	e531      	b.n	800235c <_svfprintf_r+0xdfc>
 80028f8:	4652      	mov	r2, sl
 80028fa:	e61a      	b.n	8002532 <_svfprintf_r+0xfd2>
 80028fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80028fe:	3301      	adds	r3, #1
 8002900:	e7e2      	b.n	80028c8 <_svfprintf_r+0x1368>
 8002902:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002904:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8002908:	682c      	ldr	r4, [r5, #0]
 800290a:	4683      	mov	fp, r0
 800290c:	ea44 74e4 	orr.w	r4, r4, r4, asr #31
 8002910:	1d28      	adds	r0, r5, #4
 8002912:	9405      	str	r4, [sp, #20]
 8002914:	900b      	str	r0, [sp, #44]	; 0x2c
 8002916:	f7fe be7e 	b.w	8001616 <_svfprintf_r+0xb6>
 800291a:	aa23      	add	r2, sp, #140	; 0x8c
 800291c:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
 8002920:	f001 ff80 	bl	8004824 <__ssprint_r>
 8002924:	2800      	cmp	r0, #0
 8002926:	f47e aee8 	bne.w	80016fa <_svfprintf_r+0x19a>
 800292a:	e9dd 2424 	ldrd	r2, r4, [sp, #144]	; 0x90
 800292e:	46c2      	mov	sl, r8
 8002930:	f7ff bac5 	b.w	8001ebe <_svfprintf_r+0x95e>
 8002934:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8002936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8002938:	920e      	str	r2, [sp, #56]	; 0x38
 800293a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800293c:	1a9b      	subs	r3, r3, r2
 800293e:	930f      	str	r3, [sp, #60]	; 0x3c
 8002940:	e657      	b.n	80025f2 <_svfprintf_r+0x1092>
 8002942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002944:	195c      	adds	r4, r3, r5
 8002946:	e4e5      	b.n	8002314 <_svfprintf_r+0xdb4>
 8002948:	f10d 037e 	add.w	r3, sp, #126	; 0x7e
 800294c:	e671      	b.n	8002632 <_svfprintf_r+0x10d2>
 800294e:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002952:	f7fe bf9b 	b.w	800188c <_svfprintf_r+0x32c>
 8002956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002958:	230c      	movs	r3, #12
 800295a:	6013      	str	r3, [r2, #0]
 800295c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002960:	9306      	str	r3, [sp, #24]
 8002962:	f7fe bed3 	b.w	800170c <_svfprintf_r+0x1ac>
 8002966:	9d05      	ldr	r5, [sp, #20]
 8002968:	e624      	b.n	80025b4 <_svfprintf_r+0x1054>
 800296a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800296e:	f7ff b8eb 	b.w	8001b48 <_svfprintf_r+0x5e8>
 8002972:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002976:	f7ff b93e 	b.w	8001bf6 <_svfprintf_r+0x696>
 800297a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800297e:	f7ff b98e 	b.w	8001c9e <_svfprintf_r+0x73e>
 8002982:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002986:	f7ff b9c6 	b.w	8001d16 <_svfprintf_r+0x7b6>
 800298a:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 800298e:	f7fe bf58 	b.w	8001842 <_svfprintf_r+0x2e2>
 8002992:	f88d 106f 	strb.w	r1, [sp, #111]	; 0x6f
 8002996:	f7ff b915 	b.w	8001bc4 <_svfprintf_r+0x664>
 800299a:	bf00      	nop
 800299c:	0800ad88 	.word	0x0800ad88
 80029a0:	cccccccd 	.word	0xcccccccd
 80029a4:	0800d6f4 	.word	0x0800d6f4
 80029a8:	0800d6f0 	.word	0x0800d6f0
 80029ac:	00000000 	.word	0x00000000

080029b0 <quorem>:
 80029b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029b4:	6903      	ldr	r3, [r0, #16]
 80029b6:	690f      	ldr	r7, [r1, #16]
 80029b8:	42bb      	cmp	r3, r7
 80029ba:	b083      	sub	sp, #12
 80029bc:	f2c0 8086 	blt.w	8002acc <quorem+0x11c>
 80029c0:	3f01      	subs	r7, #1
 80029c2:	f101 0914 	add.w	r9, r1, #20
 80029c6:	f100 0a14 	add.w	sl, r0, #20
 80029ca:	f859 2027 	ldr.w	r2, [r9, r7, lsl #2]
 80029ce:	f85a 3027 	ldr.w	r3, [sl, r7, lsl #2]
 80029d2:	00bc      	lsls	r4, r7, #2
 80029d4:	3201      	adds	r2, #1
 80029d6:	fbb3 f8f2 	udiv	r8, r3, r2
 80029da:	eb0a 0304 	add.w	r3, sl, r4
 80029de:	9400      	str	r4, [sp, #0]
 80029e0:	eb09 0b04 	add.w	fp, r9, r4
 80029e4:	9301      	str	r3, [sp, #4]
 80029e6:	f1b8 0f00 	cmp.w	r8, #0
 80029ea:	d038      	beq.n	8002a5e <quorem+0xae>
 80029ec:	2500      	movs	r5, #0
 80029ee:	462e      	mov	r6, r5
 80029f0:	46ce      	mov	lr, r9
 80029f2:	46d4      	mov	ip, sl
 80029f4:	f85e 4b04 	ldr.w	r4, [lr], #4
 80029f8:	f8dc 3000 	ldr.w	r3, [ip]
 80029fc:	b2a2      	uxth	r2, r4
 80029fe:	fb08 5502 	mla	r5, r8, r2, r5
 8002a02:	0c22      	lsrs	r2, r4, #16
 8002a04:	0c2c      	lsrs	r4, r5, #16
 8002a06:	fb08 4202 	mla	r2, r8, r2, r4
 8002a0a:	b2ad      	uxth	r5, r5
 8002a0c:	1b75      	subs	r5, r6, r5
 8002a0e:	b296      	uxth	r6, r2
 8002a10:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
 8002a14:	fa15 f383 	uxtah	r3, r5, r3
 8002a18:	eb06 4623 	add.w	r6, r6, r3, asr #16
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8002a22:	45f3      	cmp	fp, lr
 8002a24:	ea4f 4512 	mov.w	r5, r2, lsr #16
 8002a28:	f84c 3b04 	str.w	r3, [ip], #4
 8002a2c:	ea4f 4626 	mov.w	r6, r6, asr #16
 8002a30:	d2e0      	bcs.n	80029f4 <quorem+0x44>
 8002a32:	9b00      	ldr	r3, [sp, #0]
 8002a34:	f85a 3003 	ldr.w	r3, [sl, r3]
 8002a38:	b98b      	cbnz	r3, 8002a5e <quorem+0xae>
 8002a3a:	9a01      	ldr	r2, [sp, #4]
 8002a3c:	1f13      	subs	r3, r2, #4
 8002a3e:	459a      	cmp	sl, r3
 8002a40:	d20c      	bcs.n	8002a5c <quorem+0xac>
 8002a42:	f852 3c04 	ldr.w	r3, [r2, #-4]
 8002a46:	b94b      	cbnz	r3, 8002a5c <quorem+0xac>
 8002a48:	f1a2 0308 	sub.w	r3, r2, #8
 8002a4c:	e002      	b.n	8002a54 <quorem+0xa4>
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	3b04      	subs	r3, #4
 8002a52:	b91a      	cbnz	r2, 8002a5c <quorem+0xac>
 8002a54:	459a      	cmp	sl, r3
 8002a56:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002a5a:	d3f8      	bcc.n	8002a4e <quorem+0x9e>
 8002a5c:	6107      	str	r7, [r0, #16]
 8002a5e:	4604      	mov	r4, r0
 8002a60:	f001 fcc4 	bl	80043ec <__mcmp>
 8002a64:	2800      	cmp	r0, #0
 8002a66:	db2d      	blt.n	8002ac4 <quorem+0x114>
 8002a68:	f108 0801 	add.w	r8, r8, #1
 8002a6c:	4655      	mov	r5, sl
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f859 1b04 	ldr.w	r1, [r9], #4
 8002a74:	6828      	ldr	r0, [r5, #0]
 8002a76:	b28a      	uxth	r2, r1
 8002a78:	1a9a      	subs	r2, r3, r2
 8002a7a:	0c0b      	lsrs	r3, r1, #16
 8002a7c:	fa12 f280 	uxtah	r2, r2, r0
 8002a80:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
 8002a84:	eb03 4322 	add.w	r3, r3, r2, asr #16
 8002a88:	b292      	uxth	r2, r2
 8002a8a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8002a8e:	45cb      	cmp	fp, r9
 8002a90:	f845 2b04 	str.w	r2, [r5], #4
 8002a94:	ea4f 4323 	mov.w	r3, r3, asr #16
 8002a98:	d2ea      	bcs.n	8002a70 <quorem+0xc0>
 8002a9a:	f85a 2027 	ldr.w	r2, [sl, r7, lsl #2]
 8002a9e:	eb0a 0387 	add.w	r3, sl, r7, lsl #2
 8002aa2:	b97a      	cbnz	r2, 8002ac4 <quorem+0x114>
 8002aa4:	1f1a      	subs	r2, r3, #4
 8002aa6:	4592      	cmp	sl, r2
 8002aa8:	d20b      	bcs.n	8002ac2 <quorem+0x112>
 8002aaa:	f853 2c04 	ldr.w	r2, [r3, #-4]
 8002aae:	b942      	cbnz	r2, 8002ac2 <quorem+0x112>
 8002ab0:	3b08      	subs	r3, #8
 8002ab2:	e002      	b.n	8002aba <quorem+0x10a>
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	3b04      	subs	r3, #4
 8002ab8:	b91a      	cbnz	r2, 8002ac2 <quorem+0x112>
 8002aba:	459a      	cmp	sl, r3
 8002abc:	f107 37ff 	add.w	r7, r7, #4294967295	; 0xffffffff
 8002ac0:	d3f8      	bcc.n	8002ab4 <quorem+0x104>
 8002ac2:	6127      	str	r7, [r4, #16]
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	b003      	add	sp, #12
 8002ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002acc:	2000      	movs	r0, #0
 8002ace:	b003      	add	sp, #12
 8002ad0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002ad4 <_dtoa_r>:
 8002ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ad8:	ec55 4b10 	vmov	r4, r5, d0
 8002adc:	b09b      	sub	sp, #108	; 0x6c
 8002ade:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8002ae0:	9102      	str	r1, [sp, #8]
 8002ae2:	4681      	mov	r9, r0
 8002ae4:	9207      	str	r2, [sp, #28]
 8002ae6:	9305      	str	r3, [sp, #20]
 8002ae8:	e9cd 4500 	strd	r4, r5, [sp]
 8002aec:	b156      	cbz	r6, 8002b04 <_dtoa_r+0x30>
 8002aee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002af0:	6072      	str	r2, [r6, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	4093      	lsls	r3, r2
 8002af6:	60b3      	str	r3, [r6, #8]
 8002af8:	4631      	mov	r1, r6
 8002afa:	f001 fa3b 	bl	8003f74 <_Bfree>
 8002afe:	2300      	movs	r3, #0
 8002b00:	f8c9 3040 	str.w	r3, [r9, #64]	; 0x40
 8002b04:	f1b5 0800 	subs.w	r8, r5, #0
 8002b08:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8002b0a:	bfb4      	ite	lt
 8002b0c:	2301      	movlt	r3, #1
 8002b0e:	2300      	movge	r3, #0
 8002b10:	6013      	str	r3, [r2, #0]
 8002b12:	4b77      	ldr	r3, [pc, #476]	; (8002cf0 <_dtoa_r+0x21c>)
 8002b14:	bfbc      	itt	lt
 8002b16:	f028 4800 	biclt.w	r8, r8, #2147483648	; 0x80000000
 8002b1a:	f8cd 8004 	strlt.w	r8, [sp, #4]
 8002b1e:	ea33 0308 	bics.w	r3, r3, r8
 8002b22:	f000 80a6 	beq.w	8002c72 <_dtoa_r+0x19e>
 8002b26:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	4630      	mov	r0, r6
 8002b30:	4639      	mov	r1, r7
 8002b32:	f7fe f933 	bl	8000d9c <__aeabi_dcmpeq>
 8002b36:	4605      	mov	r5, r0
 8002b38:	b178      	cbz	r0, 8002b5a <_dtoa_r+0x86>
 8002b3a:	9a05      	ldr	r2, [sp, #20]
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f000 80c0 	beq.w	8002cc8 <_dtoa_r+0x1f4>
 8002b48:	4b6a      	ldr	r3, [pc, #424]	; (8002cf4 <_dtoa_r+0x220>)
 8002b4a:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002b4c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8002b50:	6013      	str	r3, [r2, #0]
 8002b52:	4658      	mov	r0, fp
 8002b54:	b01b      	add	sp, #108	; 0x6c
 8002b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5a:	aa18      	add	r2, sp, #96	; 0x60
 8002b5c:	a919      	add	r1, sp, #100	; 0x64
 8002b5e:	ec47 6b10 	vmov	d0, r6, r7
 8002b62:	4648      	mov	r0, r9
 8002b64:	f001 fd5c 	bl	8004620 <__d2b>
 8002b68:	ea5f 5418 	movs.w	r4, r8, lsr #20
 8002b6c:	4682      	mov	sl, r0
 8002b6e:	f040 80a0 	bne.w	8002cb2 <_dtoa_r+0x1de>
 8002b72:	e9dd 5418 	ldrd	r5, r4, [sp, #96]	; 0x60
 8002b76:	442c      	add	r4, r5
 8002b78:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	f340 842e 	ble.w	80033de <_dtoa_r+0x90a>
 8002b82:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8002b86:	fa08 f803 	lsl.w	r8, r8, r3
 8002b8a:	9b00      	ldr	r3, [sp, #0]
 8002b8c:	f204 4012 	addw	r0, r4, #1042	; 0x412
 8002b90:	fa23 f000 	lsr.w	r0, r3, r0
 8002b94:	ea48 0000 	orr.w	r0, r8, r0
 8002b98:	f7fd fe1e 	bl	80007d8 <__aeabi_ui2d>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	4606      	mov	r6, r0
 8002ba0:	3c01      	subs	r4, #1
 8002ba2:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8002ba6:	930f      	str	r3, [sp, #60]	; 0x3c
 8002ba8:	4630      	mov	r0, r6
 8002baa:	4639      	mov	r1, r7
 8002bac:	2200      	movs	r2, #0
 8002bae:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <_dtoa_r+0x224>)
 8002bb0:	f7fd fcd4 	bl	800055c <__aeabi_dsub>
 8002bb4:	a348      	add	r3, pc, #288	; (adr r3, 8002cd8 <_dtoa_r+0x204>)
 8002bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bba:	f7fd fe87 	bl	80008cc <__aeabi_dmul>
 8002bbe:	a348      	add	r3, pc, #288	; (adr r3, 8002ce0 <_dtoa_r+0x20c>)
 8002bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc4:	f7fd fccc 	bl	8000560 <__adddf3>
 8002bc8:	4606      	mov	r6, r0
 8002bca:	4620      	mov	r0, r4
 8002bcc:	460f      	mov	r7, r1
 8002bce:	f7fd fe13 	bl	80007f8 <__aeabi_i2d>
 8002bd2:	a345      	add	r3, pc, #276	; (adr r3, 8002ce8 <_dtoa_r+0x214>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd fe78 	bl	80008cc <__aeabi_dmul>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4630      	mov	r0, r6
 8002be2:	4639      	mov	r1, r7
 8002be4:	f7fd fcbc 	bl	8000560 <__adddf3>
 8002be8:	4606      	mov	r6, r0
 8002bea:	460f      	mov	r7, r1
 8002bec:	f7fe f91e 	bl	8000e2c <__aeabi_d2iz>
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	9006      	str	r0, [sp, #24]
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	4630      	mov	r0, r6
 8002bf8:	4639      	mov	r1, r7
 8002bfa:	f7fe f8d9 	bl	8000db0 <__aeabi_dcmplt>
 8002bfe:	2800      	cmp	r0, #0
 8002c00:	f040 8275 	bne.w	80030ee <_dtoa_r+0x61a>
 8002c04:	9e06      	ldr	r6, [sp, #24]
 8002c06:	2e16      	cmp	r6, #22
 8002c08:	f200 825f 	bhi.w	80030ca <_dtoa_r+0x5f6>
 8002c0c:	4b3b      	ldr	r3, [pc, #236]	; (8002cfc <_dtoa_r+0x228>)
 8002c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8002c12:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c16:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c1a:	f7fe f8e7 	bl	8000dec <__aeabi_dcmpgt>
 8002c1e:	2800      	cmp	r0, #0
 8002c20:	f000 83d9 	beq.w	80033d6 <_dtoa_r+0x902>
 8002c24:	1e73      	subs	r3, r6, #1
 8002c26:	9306      	str	r3, [sp, #24]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	930d      	str	r3, [sp, #52]	; 0x34
 8002c2c:	1b2c      	subs	r4, r5, r4
 8002c2e:	f1b4 0801 	subs.w	r8, r4, #1
 8002c32:	f100 8256 	bmi.w	80030e2 <_dtoa_r+0x60e>
 8002c36:	2300      	movs	r3, #0
 8002c38:	9308      	str	r3, [sp, #32]
 8002c3a:	9b06      	ldr	r3, [sp, #24]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f2c0 8247 	blt.w	80030d0 <_dtoa_r+0x5fc>
 8002c42:	4498      	add	r8, r3
 8002c44:	930c      	str	r3, [sp, #48]	; 0x30
 8002c46:	2300      	movs	r3, #0
 8002c48:	930b      	str	r3, [sp, #44]	; 0x2c
 8002c4a:	9b02      	ldr	r3, [sp, #8]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d85d      	bhi.n	8002d0c <_dtoa_r+0x238>
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	f340 83c2 	ble.w	80033da <_dtoa_r+0x906>
 8002c56:	3b04      	subs	r3, #4
 8002c58:	9302      	str	r3, [sp, #8]
 8002c5a:	2500      	movs	r5, #0
 8002c5c:	9b02      	ldr	r3, [sp, #8]
 8002c5e:	3b02      	subs	r3, #2
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	f200 849a 	bhi.w	800359a <_dtoa_r+0xac6>
 8002c66:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002c6a:	03e1      	.short	0x03e1
 8002c6c:	03ea03c1 	.word	0x03ea03c1
 8002c70:	04f7      	.short	0x04f7
 8002c72:	9a05      	ldr	r2, [sp, #20]
 8002c74:	f242 730f 	movw	r3, #9999	; 0x270f
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	9b00      	ldr	r3, [sp, #0]
 8002c7c:	b983      	cbnz	r3, 8002ca0 <_dtoa_r+0x1cc>
 8002c7e:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8002c82:	b96b      	cbnz	r3, 8002ca0 <_dtoa_r+0x1cc>
 8002c84:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002c86:	f8df b078 	ldr.w	fp, [pc, #120]	; 8002d00 <_dtoa_r+0x22c>
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	f43f af61 	beq.w	8002b52 <_dtoa_r+0x7e>
 8002c90:	f10b 0308 	add.w	r3, fp, #8
 8002c94:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8002c96:	4658      	mov	r0, fp
 8002c98:	6013      	str	r3, [r2, #0]
 8002c9a:	b01b      	add	sp, #108	; 0x6c
 8002c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ca0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8002ca2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8002d04 <_dtoa_r+0x230>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f43f af53 	beq.w	8002b52 <_dtoa_r+0x7e>
 8002cac:	f10b 0303 	add.w	r3, fp, #3
 8002cb0:	e7f0      	b.n	8002c94 <_dtoa_r+0x1c0>
 8002cb2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8002cb6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8002cba:	950f      	str	r5, [sp, #60]	; 0x3c
 8002cbc:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002cc0:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8002cc4:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8002cc6:	e76f      	b.n	8002ba8 <_dtoa_r+0xd4>
 8002cc8:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8002d08 <_dtoa_r+0x234>
 8002ccc:	4658      	mov	r0, fp
 8002cce:	b01b      	add	sp, #108	; 0x6c
 8002cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cd4:	f3af 8000 	nop.w
 8002cd8:	636f4361 	.word	0x636f4361
 8002cdc:	3fd287a7 	.word	0x3fd287a7
 8002ce0:	8b60c8b3 	.word	0x8b60c8b3
 8002ce4:	3fc68a28 	.word	0x3fc68a28
 8002ce8:	509f79fb 	.word	0x509f79fb
 8002cec:	3fd34413 	.word	0x3fd34413
 8002cf0:	7ff00000 	.word	0x7ff00000
 8002cf4:	0800b679 	.word	0x0800b679
 8002cf8:	3ff80000 	.word	0x3ff80000
 8002cfc:	0800ada8 	.word	0x0800ada8
 8002d00:	0800d720 	.word	0x0800d720
 8002d04:	0800d72c 	.word	0x0800d72c
 8002d08:	0800b678 	.word	0x0800b678
 8002d0c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002d10:	2501      	movs	r5, #1
 8002d12:	e9cd 4509 	strd	r4, r5, [sp, #36]	; 0x24
 8002d16:	2300      	movs	r3, #0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	9307      	str	r3, [sp, #28]
 8002d1c:	2100      	movs	r1, #0
 8002d1e:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 8002d22:	940e      	str	r4, [sp, #56]	; 0x38
 8002d24:	4648      	mov	r0, r9
 8002d26:	f001 f8ff 	bl	8003f28 <_Balloc>
 8002d2a:	2c0e      	cmp	r4, #14
 8002d2c:	4683      	mov	fp, r0
 8002d2e:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 8002d32:	f200 80fb 	bhi.w	8002f2c <_dtoa_r+0x458>
 8002d36:	2d00      	cmp	r5, #0
 8002d38:	f000 80f8 	beq.w	8002f2c <_dtoa_r+0x458>
 8002d3c:	ed9d 7b00 	vldr	d7, [sp]
 8002d40:	9906      	ldr	r1, [sp, #24]
 8002d42:	2900      	cmp	r1, #0
 8002d44:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8002d48:	f340 83e5 	ble.w	8003516 <_dtoa_r+0xa42>
 8002d4c:	4b9d      	ldr	r3, [pc, #628]	; (8002fc4 <_dtoa_r+0x4f0>)
 8002d4e:	f001 020f 	and.w	r2, r1, #15
 8002d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002d56:	ed93 7b00 	vldr	d7, [r3]
 8002d5a:	110c      	asrs	r4, r1, #4
 8002d5c:	06e2      	lsls	r2, r4, #27
 8002d5e:	ed8d 7b00 	vstr	d7, [sp]
 8002d62:	f140 849e 	bpl.w	80036a2 <_dtoa_r+0xbce>
 8002d66:	4b98      	ldr	r3, [pc, #608]	; (8002fc8 <_dtoa_r+0x4f4>)
 8002d68:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8002d6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002d70:	f7fd fed6 	bl	8000b20 <__aeabi_ddiv>
 8002d74:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8002d78:	f004 040f 	and.w	r4, r4, #15
 8002d7c:	2603      	movs	r6, #3
 8002d7e:	b17c      	cbz	r4, 8002da0 <_dtoa_r+0x2cc>
 8002d80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002d84:	4d90      	ldr	r5, [pc, #576]	; (8002fc8 <_dtoa_r+0x4f4>)
 8002d86:	07e3      	lsls	r3, r4, #31
 8002d88:	d504      	bpl.n	8002d94 <_dtoa_r+0x2c0>
 8002d8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002d8e:	f7fd fd9d 	bl	80008cc <__aeabi_dmul>
 8002d92:	3601      	adds	r6, #1
 8002d94:	1064      	asrs	r4, r4, #1
 8002d96:	f105 0508 	add.w	r5, r5, #8
 8002d9a:	d1f4      	bne.n	8002d86 <_dtoa_r+0x2b2>
 8002d9c:	e9cd 0100 	strd	r0, r1, [sp]
 8002da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002da4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8002da8:	f7fd feba 	bl	8000b20 <__aeabi_ddiv>
 8002dac:	e9cd 0100 	strd	r0, r1, [sp]
 8002db0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002db2:	b143      	cbz	r3, 8002dc6 <_dtoa_r+0x2f2>
 8002db4:	2200      	movs	r2, #0
 8002db6:	4b85      	ldr	r3, [pc, #532]	; (8002fcc <_dtoa_r+0x4f8>)
 8002db8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002dbc:	f7fd fff8 	bl	8000db0 <__aeabi_dcmplt>
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	f040 84ff 	bne.w	80037c4 <_dtoa_r+0xcf0>
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f7fd fd16 	bl	80007f8 <__aeabi_i2d>
 8002dcc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002dd0:	f7fd fd7c 	bl	80008cc <__aeabi_dmul>
 8002dd4:	4b7e      	ldr	r3, [pc, #504]	; (8002fd0 <_dtoa_r+0x4fc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f7fd fbc2 	bl	8000560 <__adddf3>
 8002ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dde:	4606      	mov	r6, r0
 8002de0:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 841c 	beq.w	8003622 <_dtoa_r+0xb4e>
 8002dea:	9b06      	ldr	r3, [sp, #24]
 8002dec:	9316      	str	r3, [sp, #88]	; 0x58
 8002dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002df0:	9312      	str	r3, [sp, #72]	; 0x48
 8002df2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002df6:	f7fe f819 	bl	8000e2c <__aeabi_d2iz>
 8002dfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002dfc:	4b71      	ldr	r3, [pc, #452]	; (8002fc4 <_dtoa_r+0x4f0>)
 8002dfe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002e02:	ed13 7b02 	vldr	d7, [r3, #-8]
 8002e06:	f100 0530 	add.w	r5, r0, #48	; 0x30
 8002e0a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8002e0e:	f7fd fcf3 	bl	80007f8 <__aeabi_i2d>
 8002e12:	460b      	mov	r3, r1
 8002e14:	4602      	mov	r2, r0
 8002e16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e1a:	e9cd 6700 	strd	r6, r7, [sp]
 8002e1e:	f7fd fb9d 	bl	800055c <__aeabi_dsub>
 8002e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e24:	b2ed      	uxtb	r5, r5
 8002e26:	4606      	mov	r6, r0
 8002e28:	460f      	mov	r7, r1
 8002e2a:	f10b 0401 	add.w	r4, fp, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 8458 	beq.w	80036e4 <_dtoa_r+0xc10>
 8002e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8002e38:	2000      	movs	r0, #0
 8002e3a:	4966      	ldr	r1, [pc, #408]	; (8002fd4 <_dtoa_r+0x500>)
 8002e3c:	f7fd fe70 	bl	8000b20 <__aeabi_ddiv>
 8002e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e44:	f7fd fb8a 	bl	800055c <__aeabi_dsub>
 8002e48:	f88b 5000 	strb.w	r5, [fp]
 8002e4c:	4632      	mov	r2, r6
 8002e4e:	463b      	mov	r3, r7
 8002e50:	e9cd 0100 	strd	r0, r1, [sp]
 8002e54:	f7fd ffca 	bl	8000dec <__aeabi_dcmpgt>
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	f040 8502 	bne.w	8003862 <_dtoa_r+0xd8e>
 8002e5e:	4632      	mov	r2, r6
 8002e60:	463b      	mov	r3, r7
 8002e62:	2000      	movs	r0, #0
 8002e64:	4959      	ldr	r1, [pc, #356]	; (8002fcc <_dtoa_r+0x4f8>)
 8002e66:	f7fd fb79 	bl	800055c <__aeabi_dsub>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8002e72:	f7fd ffbb 	bl	8000dec <__aeabi_dcmpgt>
 8002e76:	2800      	cmp	r0, #0
 8002e78:	f040 84fb 	bne.w	8003872 <_dtoa_r+0xd9e>
 8002e7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002e7e:	2a01      	cmp	r2, #1
 8002e80:	d050      	beq.n	8002f24 <_dtoa_r+0x450>
 8002e82:	445a      	add	r2, fp
 8002e84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8002e88:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
 8002e8c:	f8cd b050 	str.w	fp, [sp, #80]	; 0x50
 8002e90:	4692      	mov	sl, r2
 8002e92:	46cb      	mov	fp, r9
 8002e94:	e9dd 8900 	ldrd	r8, r9, [sp]
 8002e98:	e00c      	b.n	8002eb4 <_dtoa_r+0x3e0>
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	494b      	ldr	r1, [pc, #300]	; (8002fcc <_dtoa_r+0x4f8>)
 8002e9e:	f7fd fb5d 	bl	800055c <__aeabi_dsub>
 8002ea2:	4642      	mov	r2, r8
 8002ea4:	464b      	mov	r3, r9
 8002ea6:	f7fd ff83 	bl	8000db0 <__aeabi_dcmplt>
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	f040 84dc 	bne.w	8003868 <_dtoa_r+0xd94>
 8002eb0:	4554      	cmp	r4, sl
 8002eb2:	d030      	beq.n	8002f16 <_dtoa_r+0x442>
 8002eb4:	4640      	mov	r0, r8
 8002eb6:	4649      	mov	r1, r9
 8002eb8:	2200      	movs	r2, #0
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <_dtoa_r+0x504>)
 8002ebc:	f7fd fd06 	bl	80008cc <__aeabi_dmul>
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	4b45      	ldr	r3, [pc, #276]	; (8002fd8 <_dtoa_r+0x504>)
 8002ec4:	4680      	mov	r8, r0
 8002ec6:	4689      	mov	r9, r1
 8002ec8:	4630      	mov	r0, r6
 8002eca:	4639      	mov	r1, r7
 8002ecc:	f7fd fcfe 	bl	80008cc <__aeabi_dmul>
 8002ed0:	460f      	mov	r7, r1
 8002ed2:	4606      	mov	r6, r0
 8002ed4:	f7fd ffaa 	bl	8000e2c <__aeabi_d2iz>
 8002ed8:	4605      	mov	r5, r0
 8002eda:	f7fd fc8d 	bl	80007f8 <__aeabi_i2d>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	4630      	mov	r0, r6
 8002ee4:	4639      	mov	r1, r7
 8002ee6:	f7fd fb39 	bl	800055c <__aeabi_dsub>
 8002eea:	3530      	adds	r5, #48	; 0x30
 8002eec:	b2ed      	uxtb	r5, r5
 8002eee:	4642      	mov	r2, r8
 8002ef0:	464b      	mov	r3, r9
 8002ef2:	f804 5b01 	strb.w	r5, [r4], #1
 8002ef6:	4606      	mov	r6, r0
 8002ef8:	460f      	mov	r7, r1
 8002efa:	f7fd ff59 	bl	8000db0 <__aeabi_dcmplt>
 8002efe:	4632      	mov	r2, r6
 8002f00:	463b      	mov	r3, r7
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d0c9      	beq.n	8002e9a <_dtoa_r+0x3c6>
 8002f06:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8002f08:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8002f0c:	9306      	str	r3, [sp, #24]
 8002f0e:	46d9      	mov	r9, fp
 8002f10:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8002f14:	e236      	b.n	8003384 <_dtoa_r+0x8b0>
 8002f16:	46d9      	mov	r9, fp
 8002f18:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8002f1c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 8002f20:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8002f24:	e9dd 3410 	ldrd	r3, r4, [sp, #64]	; 0x40
 8002f28:	e9cd 3400 	strd	r3, r4, [sp]
 8002f2c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f2c0 80ae 	blt.w	8003090 <_dtoa_r+0x5bc>
 8002f34:	9a06      	ldr	r2, [sp, #24]
 8002f36:	2a0e      	cmp	r2, #14
 8002f38:	f300 80aa 	bgt.w	8003090 <_dtoa_r+0x5bc>
 8002f3c:	4b21      	ldr	r3, [pc, #132]	; (8002fc4 <_dtoa_r+0x4f0>)
 8002f3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002f42:	ed93 7b00 	vldr	d7, [r3]
 8002f46:	9b07      	ldr	r3, [sp, #28]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002f4e:	f2c0 82be 	blt.w	80034ce <_dtoa_r+0x9fa>
 8002f52:	e9dd 6700 	ldrd	r6, r7, [sp]
 8002f56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f5a:	4630      	mov	r0, r6
 8002f5c:	4639      	mov	r1, r7
 8002f5e:	f7fd fddf 	bl	8000b20 <__aeabi_ddiv>
 8002f62:	f7fd ff63 	bl	8000e2c <__aeabi_d2iz>
 8002f66:	4605      	mov	r5, r0
 8002f68:	f7fd fc46 	bl	80007f8 <__aeabi_i2d>
 8002f6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8002f70:	f7fd fcac 	bl	80008cc <__aeabi_dmul>
 8002f74:	460b      	mov	r3, r1
 8002f76:	4602      	mov	r2, r0
 8002f78:	4639      	mov	r1, r7
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	f7fd faee 	bl	800055c <__aeabi_dsub>
 8002f80:	f105 0330 	add.w	r3, r5, #48	; 0x30
 8002f84:	f88b 3000 	strb.w	r3, [fp]
 8002f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	4606      	mov	r6, r0
 8002f8e:	460f      	mov	r7, r1
 8002f90:	f10b 0401 	add.w	r4, fp, #1
 8002f94:	d053      	beq.n	800303e <_dtoa_r+0x56a>
 8002f96:	2200      	movs	r2, #0
 8002f98:	4b0f      	ldr	r3, [pc, #60]	; (8002fd8 <_dtoa_r+0x504>)
 8002f9a:	f7fd fc97 	bl	80008cc <__aeabi_dmul>
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	4606      	mov	r6, r0
 8002fa4:	460f      	mov	r7, r1
 8002fa6:	f7fd fef9 	bl	8000d9c <__aeabi_dcmpeq>
 8002faa:	2800      	cmp	r0, #0
 8002fac:	f040 81ea 	bne.w	8003384 <_dtoa_r+0x8b0>
 8002fb0:	f8cd a000 	str.w	sl, [sp]
 8002fb4:	f8cd 901c 	str.w	r9, [sp, #28]
 8002fb8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 8002fbc:	e9dd 9a02 	ldrd	r9, sl, [sp, #8]
 8002fc0:	e017      	b.n	8002ff2 <_dtoa_r+0x51e>
 8002fc2:	bf00      	nop
 8002fc4:	0800ada8 	.word	0x0800ada8
 8002fc8:	0800ae98 	.word	0x0800ae98
 8002fcc:	3ff00000 	.word	0x3ff00000
 8002fd0:	401c0000 	.word	0x401c0000
 8002fd4:	3fe00000 	.word	0x3fe00000
 8002fd8:	40240000 	.word	0x40240000
 8002fdc:	f7fd fc76 	bl	80008cc <__aeabi_dmul>
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	4606      	mov	r6, r0
 8002fe6:	460f      	mov	r7, r1
 8002fe8:	f7fd fed8 	bl	8000d9c <__aeabi_dcmpeq>
 8002fec:	2800      	cmp	r0, #0
 8002fee:	f040 833d 	bne.w	800366c <_dtoa_r+0xb98>
 8002ff2:	464a      	mov	r2, r9
 8002ff4:	4653      	mov	r3, sl
 8002ff6:	4630      	mov	r0, r6
 8002ff8:	4639      	mov	r1, r7
 8002ffa:	f7fd fd91 	bl	8000b20 <__aeabi_ddiv>
 8002ffe:	f7fd ff15 	bl	8000e2c <__aeabi_d2iz>
 8003002:	4605      	mov	r5, r0
 8003004:	f7fd fbf8 	bl	80007f8 <__aeabi_i2d>
 8003008:	464a      	mov	r2, r9
 800300a:	4653      	mov	r3, sl
 800300c:	f7fd fc5e 	bl	80008cc <__aeabi_dmul>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4630      	mov	r0, r6
 8003016:	4639      	mov	r1, r7
 8003018:	f7fd faa0 	bl	800055c <__aeabi_dsub>
 800301c:	f105 0c30 	add.w	ip, r5, #48	; 0x30
 8003020:	f804 cb01 	strb.w	ip, [r4], #1
 8003024:	eba4 0c0b 	sub.w	ip, r4, fp
 8003028:	45e0      	cmp	r8, ip
 800302a:	4606      	mov	r6, r0
 800302c:	460f      	mov	r7, r1
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	4bc1      	ldr	r3, [pc, #772]	; (8003338 <_dtoa_r+0x864>)
 8003034:	d1d2      	bne.n	8002fdc <_dtoa_r+0x508>
 8003036:	f8dd a000 	ldr.w	sl, [sp]
 800303a:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800303e:	4632      	mov	r2, r6
 8003040:	463b      	mov	r3, r7
 8003042:	4630      	mov	r0, r6
 8003044:	4639      	mov	r1, r7
 8003046:	f7fd fa8b 	bl	8000560 <__adddf3>
 800304a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800304e:	4606      	mov	r6, r0
 8003050:	460f      	mov	r7, r1
 8003052:	f7fd fecb 	bl	8000dec <__aeabi_dcmpgt>
 8003056:	b958      	cbnz	r0, 8003070 <_dtoa_r+0x59c>
 8003058:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800305c:	4630      	mov	r0, r6
 800305e:	4639      	mov	r1, r7
 8003060:	f7fd fe9c 	bl	8000d9c <__aeabi_dcmpeq>
 8003064:	2800      	cmp	r0, #0
 8003066:	f000 818d 	beq.w	8003384 <_dtoa_r+0x8b0>
 800306a:	07e9      	lsls	r1, r5, #31
 800306c:	f140 818a 	bpl.w	8003384 <_dtoa_r+0x8b0>
 8003070:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8003074:	e005      	b.n	8003082 <_dtoa_r+0x5ae>
 8003076:	459b      	cmp	fp, r3
 8003078:	f000 8373 	beq.w	8003762 <_dtoa_r+0xc8e>
 800307c:	f813 5c01 	ldrb.w	r5, [r3, #-1]
 8003080:	461c      	mov	r4, r3
 8003082:	2d39      	cmp	r5, #57	; 0x39
 8003084:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8003088:	d0f5      	beq.n	8003076 <_dtoa_r+0x5a2>
 800308a:	3501      	adds	r5, #1
 800308c:	701d      	strb	r5, [r3, #0]
 800308e:	e179      	b.n	8003384 <_dtoa_r+0x8b0>
 8003090:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003092:	2a00      	cmp	r2, #0
 8003094:	d03b      	beq.n	800310e <_dtoa_r+0x63a>
 8003096:	9a02      	ldr	r2, [sp, #8]
 8003098:	2a01      	cmp	r2, #1
 800309a:	f340 820b 	ble.w	80034b4 <_dtoa_r+0x9e0>
 800309e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a0:	1e5f      	subs	r7, r3, #1
 80030a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80030a4:	42bb      	cmp	r3, r7
 80030a6:	f2c0 82e6 	blt.w	8003676 <_dtoa_r+0xba2>
 80030aa:	1bdf      	subs	r7, r3, r7
 80030ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	f2c0 830b 	blt.w	80036ca <_dtoa_r+0xbf6>
 80030b4:	9a08      	ldr	r2, [sp, #32]
 80030b6:	4614      	mov	r4, r2
 80030b8:	441a      	add	r2, r3
 80030ba:	4498      	add	r8, r3
 80030bc:	9208      	str	r2, [sp, #32]
 80030be:	2101      	movs	r1, #1
 80030c0:	4648      	mov	r0, r9
 80030c2:	f001 f83d 	bl	8004140 <__i2b>
 80030c6:	4605      	mov	r5, r0
 80030c8:	e024      	b.n	8003114 <_dtoa_r+0x640>
 80030ca:	2301      	movs	r3, #1
 80030cc:	930d      	str	r3, [sp, #52]	; 0x34
 80030ce:	e5ad      	b.n	8002c2c <_dtoa_r+0x158>
 80030d0:	9a08      	ldr	r2, [sp, #32]
 80030d2:	9b06      	ldr	r3, [sp, #24]
 80030d4:	1ad2      	subs	r2, r2, r3
 80030d6:	425b      	negs	r3, r3
 80030d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80030da:	2300      	movs	r3, #0
 80030dc:	9208      	str	r2, [sp, #32]
 80030de:	930c      	str	r3, [sp, #48]	; 0x30
 80030e0:	e5b3      	b.n	8002c4a <_dtoa_r+0x176>
 80030e2:	f1c4 0301 	rsb	r3, r4, #1
 80030e6:	9308      	str	r3, [sp, #32]
 80030e8:	f04f 0800 	mov.w	r8, #0
 80030ec:	e5a5      	b.n	8002c3a <_dtoa_r+0x166>
 80030ee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80030f2:	4640      	mov	r0, r8
 80030f4:	f7fd fb80 	bl	80007f8 <__aeabi_i2d>
 80030f8:	4632      	mov	r2, r6
 80030fa:	463b      	mov	r3, r7
 80030fc:	f7fd fe4e 	bl	8000d9c <__aeabi_dcmpeq>
 8003100:	2800      	cmp	r0, #0
 8003102:	f47f ad7f 	bne.w	8002c04 <_dtoa_r+0x130>
 8003106:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800310a:	9306      	str	r3, [sp, #24]
 800310c:	e57a      	b.n	8002c04 <_dtoa_r+0x130>
 800310e:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 8003110:	9c08      	ldr	r4, [sp, #32]
 8003112:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8003114:	2c00      	cmp	r4, #0
 8003116:	dd0c      	ble.n	8003132 <_dtoa_r+0x65e>
 8003118:	f1b8 0f00 	cmp.w	r8, #0
 800311c:	dd09      	ble.n	8003132 <_dtoa_r+0x65e>
 800311e:	4544      	cmp	r4, r8
 8003120:	9a08      	ldr	r2, [sp, #32]
 8003122:	4623      	mov	r3, r4
 8003124:	bfa8      	it	ge
 8003126:	4643      	movge	r3, r8
 8003128:	1ad2      	subs	r2, r2, r3
 800312a:	9208      	str	r2, [sp, #32]
 800312c:	1ae4      	subs	r4, r4, r3
 800312e:	eba8 0803 	sub.w	r8, r8, r3
 8003132:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003134:	b16b      	cbz	r3, 8003152 <_dtoa_r+0x67e>
 8003136:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003138:	2a00      	cmp	r2, #0
 800313a:	f000 8290 	beq.w	800365e <_dtoa_r+0xb8a>
 800313e:	1bde      	subs	r6, r3, r7
 8003140:	2f00      	cmp	r7, #0
 8003142:	f040 819b 	bne.w	800347c <_dtoa_r+0x9a8>
 8003146:	4651      	mov	r1, sl
 8003148:	4632      	mov	r2, r6
 800314a:	4648      	mov	r0, r9
 800314c:	f001 f8a8 	bl	80042a0 <__pow5mult>
 8003150:	4682      	mov	sl, r0
 8003152:	2101      	movs	r1, #1
 8003154:	4648      	mov	r0, r9
 8003156:	f000 fff3 	bl	8004140 <__i2b>
 800315a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800315c:	4606      	mov	r6, r0
 800315e:	2a00      	cmp	r2, #0
 8003160:	f040 8125 	bne.w	80033ae <_dtoa_r+0x8da>
 8003164:	9b02      	ldr	r3, [sp, #8]
 8003166:	2b01      	cmp	r3, #1
 8003168:	f340 816c 	ble.w	8003444 <_dtoa_r+0x970>
 800316c:	2001      	movs	r0, #1
 800316e:	4440      	add	r0, r8
 8003170:	f010 001f 	ands.w	r0, r0, #31
 8003174:	f000 8119 	beq.w	80033aa <_dtoa_r+0x8d6>
 8003178:	f1c0 0320 	rsb	r3, r0, #32
 800317c:	2b04      	cmp	r3, #4
 800317e:	f340 83ac 	ble.w	80038da <_dtoa_r+0xe06>
 8003182:	f1c0 001c 	rsb	r0, r0, #28
 8003186:	9b08      	ldr	r3, [sp, #32]
 8003188:	4403      	add	r3, r0
 800318a:	9308      	str	r3, [sp, #32]
 800318c:	4404      	add	r4, r0
 800318e:	4480      	add	r8, r0
 8003190:	9b08      	ldr	r3, [sp, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	dd05      	ble.n	80031a2 <_dtoa_r+0x6ce>
 8003196:	4651      	mov	r1, sl
 8003198:	461a      	mov	r2, r3
 800319a:	4648      	mov	r0, r9
 800319c:	f001 f8d0 	bl	8004340 <__lshift>
 80031a0:	4682      	mov	sl, r0
 80031a2:	f1b8 0f00 	cmp.w	r8, #0
 80031a6:	dd05      	ble.n	80031b4 <_dtoa_r+0x6e0>
 80031a8:	4631      	mov	r1, r6
 80031aa:	4642      	mov	r2, r8
 80031ac:	4648      	mov	r0, r9
 80031ae:	f001 f8c7 	bl	8004340 <__lshift>
 80031b2:	4606      	mov	r6, r0
 80031b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d177      	bne.n	80032aa <_dtoa_r+0x7d6>
 80031ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f340 8209 	ble.w	80035d4 <_dtoa_r+0xb00>
 80031c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f000 8089 	beq.w	80032dc <_dtoa_r+0x808>
 80031ca:	2c00      	cmp	r4, #0
 80031cc:	f300 816b 	bgt.w	80034a6 <_dtoa_r+0x9d2>
 80031d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 81cd 	bne.w	8003572 <_dtoa_r+0xa9e>
 80031d8:	46a8      	mov	r8, r5
 80031da:	9a00      	ldr	r2, [sp, #0]
 80031dc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80031e0:	f002 0201 	and.w	r2, r2, #1
 80031e4:	920a      	str	r2, [sp, #40]	; 0x28
 80031e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80031e8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80031ec:	441a      	add	r2, r3
 80031ee:	465f      	mov	r7, fp
 80031f0:	9209      	str	r2, [sp, #36]	; 0x24
 80031f2:	46b3      	mov	fp, r6
 80031f4:	4659      	mov	r1, fp
 80031f6:	4650      	mov	r0, sl
 80031f8:	f7ff fbda 	bl	80029b0 <quorem>
 80031fc:	4629      	mov	r1, r5
 80031fe:	4604      	mov	r4, r0
 8003200:	4650      	mov	r0, sl
 8003202:	f001 f8f3 	bl	80043ec <__mcmp>
 8003206:	4659      	mov	r1, fp
 8003208:	4606      	mov	r6, r0
 800320a:	4642      	mov	r2, r8
 800320c:	4648      	mov	r0, r9
 800320e:	f001 f909 	bl	8004424 <__mdiff>
 8003212:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8003216:	9300      	str	r3, [sp, #0]
 8003218:	68c3      	ldr	r3, [r0, #12]
 800321a:	4601      	mov	r1, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	f040 81d4 	bne.w	80035ca <_dtoa_r+0xaf6>
 8003222:	9008      	str	r0, [sp, #32]
 8003224:	4650      	mov	r0, sl
 8003226:	f001 f8e1 	bl	80043ec <__mcmp>
 800322a:	9a08      	ldr	r2, [sp, #32]
 800322c:	9007      	str	r0, [sp, #28]
 800322e:	4611      	mov	r1, r2
 8003230:	4648      	mov	r0, r9
 8003232:	f000 fe9f 	bl	8003f74 <_Bfree>
 8003236:	9b07      	ldr	r3, [sp, #28]
 8003238:	b933      	cbnz	r3, 8003248 <_dtoa_r+0x774>
 800323a:	9a02      	ldr	r2, [sp, #8]
 800323c:	b922      	cbnz	r2, 8003248 <_dtoa_r+0x774>
 800323e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 8319 	beq.w	8003878 <_dtoa_r+0xda4>
 8003246:	9b02      	ldr	r3, [sp, #8]
 8003248:	2e00      	cmp	r6, #0
 800324a:	f2c0 821c 	blt.w	8003686 <_dtoa_r+0xbb2>
 800324e:	d105      	bne.n	800325c <_dtoa_r+0x788>
 8003250:	9a02      	ldr	r2, [sp, #8]
 8003252:	b91a      	cbnz	r2, 800325c <_dtoa_r+0x788>
 8003254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003256:	2a00      	cmp	r2, #0
 8003258:	f000 8215 	beq.w	8003686 <_dtoa_r+0xbb2>
 800325c:	2b00      	cmp	r3, #0
 800325e:	f107 0401 	add.w	r4, r7, #1
 8003262:	f300 8225 	bgt.w	80036b0 <_dtoa_r+0xbdc>
 8003266:	9b00      	ldr	r3, [sp, #0]
 8003268:	703b      	strb	r3, [r7, #0]
 800326a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800326c:	42bb      	cmp	r3, r7
 800326e:	f000 8230 	beq.w	80036d2 <_dtoa_r+0xbfe>
 8003272:	4651      	mov	r1, sl
 8003274:	2300      	movs	r3, #0
 8003276:	220a      	movs	r2, #10
 8003278:	4648      	mov	r0, r9
 800327a:	f000 fe85 	bl	8003f88 <__multadd>
 800327e:	4545      	cmp	r5, r8
 8003280:	4682      	mov	sl, r0
 8003282:	4629      	mov	r1, r5
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	f04f 020a 	mov.w	r2, #10
 800328c:	4648      	mov	r0, r9
 800328e:	f000 8196 	beq.w	80035be <_dtoa_r+0xaea>
 8003292:	f000 fe79 	bl	8003f88 <__multadd>
 8003296:	4641      	mov	r1, r8
 8003298:	4605      	mov	r5, r0
 800329a:	2300      	movs	r3, #0
 800329c:	220a      	movs	r2, #10
 800329e:	4648      	mov	r0, r9
 80032a0:	f000 fe72 	bl	8003f88 <__multadd>
 80032a4:	4627      	mov	r7, r4
 80032a6:	4680      	mov	r8, r0
 80032a8:	e7a4      	b.n	80031f4 <_dtoa_r+0x720>
 80032aa:	4631      	mov	r1, r6
 80032ac:	4650      	mov	r0, sl
 80032ae:	f001 f89d 	bl	80043ec <__mcmp>
 80032b2:	2800      	cmp	r0, #0
 80032b4:	da81      	bge.n	80031ba <_dtoa_r+0x6e6>
 80032b6:	9f06      	ldr	r7, [sp, #24]
 80032b8:	4651      	mov	r1, sl
 80032ba:	2300      	movs	r3, #0
 80032bc:	220a      	movs	r2, #10
 80032be:	4648      	mov	r0, r9
 80032c0:	3f01      	subs	r7, #1
 80032c2:	9706      	str	r7, [sp, #24]
 80032c4:	f000 fe60 	bl	8003f88 <__multadd>
 80032c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ca:	4682      	mov	sl, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f040 82eb 	bne.w	80038a8 <_dtoa_r+0xdd4>
 80032d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f340 82f3 	ble.w	80038c0 <_dtoa_r+0xdec>
 80032da:	9309      	str	r3, [sp, #36]	; 0x24
 80032dc:	465c      	mov	r4, fp
 80032de:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80032e2:	e002      	b.n	80032ea <_dtoa_r+0x816>
 80032e4:	f000 fe50 	bl	8003f88 <__multadd>
 80032e8:	4682      	mov	sl, r0
 80032ea:	4631      	mov	r1, r6
 80032ec:	4650      	mov	r0, sl
 80032ee:	f7ff fb5f 	bl	80029b0 <quorem>
 80032f2:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80032f6:	f804 7b01 	strb.w	r7, [r4], #1
 80032fa:	eba4 030b 	sub.w	r3, r4, fp
 80032fe:	4598      	cmp	r8, r3
 8003300:	f04f 020a 	mov.w	r2, #10
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	4651      	mov	r1, sl
 800330a:	4648      	mov	r0, r9
 800330c:	dcea      	bgt.n	80032e4 <_dtoa_r+0x810>
 800330e:	2300      	movs	r3, #0
 8003310:	9700      	str	r7, [sp, #0]
 8003312:	9302      	str	r3, [sp, #8]
 8003314:	4651      	mov	r1, sl
 8003316:	2201      	movs	r2, #1
 8003318:	4648      	mov	r0, r9
 800331a:	f001 f811 	bl	8004340 <__lshift>
 800331e:	4631      	mov	r1, r6
 8003320:	4682      	mov	sl, r0
 8003322:	f001 f863 	bl	80043ec <__mcmp>
 8003326:	2800      	cmp	r0, #0
 8003328:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 800332c:	dc14      	bgt.n	8003358 <_dtoa_r+0x884>
 800332e:	d108      	bne.n	8003342 <_dtoa_r+0x86e>
 8003330:	9b00      	ldr	r3, [sp, #0]
 8003332:	07db      	lsls	r3, r3, #31
 8003334:	d410      	bmi.n	8003358 <_dtoa_r+0x884>
 8003336:	e004      	b.n	8003342 <_dtoa_r+0x86e>
 8003338:	40240000 	.word	0x40240000
 800333c:	f814 2c02 	ldrb.w	r2, [r4, #-2]
 8003340:	461c      	mov	r4, r3
 8003342:	2a30      	cmp	r2, #48	; 0x30
 8003344:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 8003348:	d0f8      	beq.n	800333c <_dtoa_r+0x868>
 800334a:	e00b      	b.n	8003364 <_dtoa_r+0x890>
 800334c:	459b      	cmp	fp, r3
 800334e:	f000 814e 	beq.w	80035ee <_dtoa_r+0xb1a>
 8003352:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8003356:	461c      	mov	r4, r3
 8003358:	2a39      	cmp	r2, #57	; 0x39
 800335a:	f104 33ff 	add.w	r3, r4, #4294967295	; 0xffffffff
 800335e:	d0f5      	beq.n	800334c <_dtoa_r+0x878>
 8003360:	3201      	adds	r2, #1
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	4631      	mov	r1, r6
 8003366:	4648      	mov	r0, r9
 8003368:	f000 fe04 	bl	8003f74 <_Bfree>
 800336c:	b155      	cbz	r5, 8003384 <_dtoa_r+0x8b0>
 800336e:	9902      	ldr	r1, [sp, #8]
 8003370:	b121      	cbz	r1, 800337c <_dtoa_r+0x8a8>
 8003372:	42a9      	cmp	r1, r5
 8003374:	d002      	beq.n	800337c <_dtoa_r+0x8a8>
 8003376:	4648      	mov	r0, r9
 8003378:	f000 fdfc 	bl	8003f74 <_Bfree>
 800337c:	4629      	mov	r1, r5
 800337e:	4648      	mov	r0, r9
 8003380:	f000 fdf8 	bl	8003f74 <_Bfree>
 8003384:	4651      	mov	r1, sl
 8003386:	4648      	mov	r0, r9
 8003388:	f000 fdf4 	bl	8003f74 <_Bfree>
 800338c:	2200      	movs	r2, #0
 800338e:	9b06      	ldr	r3, [sp, #24]
 8003390:	7022      	strb	r2, [r4, #0]
 8003392:	9a05      	ldr	r2, [sp, #20]
 8003394:	3301      	adds	r3, #1
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800339a:	2b00      	cmp	r3, #0
 800339c:	f43f abd9 	beq.w	8002b52 <_dtoa_r+0x7e>
 80033a0:	4658      	mov	r0, fp
 80033a2:	601c      	str	r4, [r3, #0]
 80033a4:	b01b      	add	sp, #108	; 0x6c
 80033a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033aa:	201c      	movs	r0, #28
 80033ac:	e6eb      	b.n	8003186 <_dtoa_r+0x6b2>
 80033ae:	4601      	mov	r1, r0
 80033b0:	4648      	mov	r0, r9
 80033b2:	f000 ff75 	bl	80042a0 <__pow5mult>
 80033b6:	9b02      	ldr	r3, [sp, #8]
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	4606      	mov	r6, r0
 80033bc:	f340 80d4 	ble.w	8003568 <_dtoa_r+0xa94>
 80033c0:	2300      	movs	r3, #0
 80033c2:	930c      	str	r3, [sp, #48]	; 0x30
 80033c4:	6933      	ldr	r3, [r6, #16]
 80033c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80033ca:	6918      	ldr	r0, [r3, #16]
 80033cc:	f000 fe68 	bl	80040a0 <__hi0bits>
 80033d0:	f1c0 0020 	rsb	r0, r0, #32
 80033d4:	e6cb      	b.n	800316e <_dtoa_r+0x69a>
 80033d6:	900d      	str	r0, [sp, #52]	; 0x34
 80033d8:	e428      	b.n	8002c2c <_dtoa_r+0x158>
 80033da:	2501      	movs	r5, #1
 80033dc:	e43e      	b.n	8002c5c <_dtoa_r+0x188>
 80033de:	f1c3 0820 	rsb	r8, r3, #32
 80033e2:	9b00      	ldr	r3, [sp, #0]
 80033e4:	fa03 f008 	lsl.w	r0, r3, r8
 80033e8:	f7ff bbd6 	b.w	8002b98 <_dtoa_r+0xc4>
 80033ec:	2300      	movs	r3, #0
 80033ee:	930a      	str	r3, [sp, #40]	; 0x28
 80033f0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80033f4:	4413      	add	r3, r2
 80033f6:	930e      	str	r3, [sp, #56]	; 0x38
 80033f8:	3301      	adds	r3, #1
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	461e      	mov	r6, r3
 80033fe:	9309      	str	r3, [sp, #36]	; 0x24
 8003400:	bfb8      	it	lt
 8003402:	2601      	movlt	r6, #1
 8003404:	2100      	movs	r1, #0
 8003406:	2e17      	cmp	r6, #23
 8003408:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800340c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800340e:	f77f ac89 	ble.w	8002d24 <_dtoa_r+0x250>
 8003412:	2201      	movs	r2, #1
 8003414:	2304      	movs	r3, #4
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	f103 0014 	add.w	r0, r3, #20
 800341c:	42b0      	cmp	r0, r6
 800341e:	4611      	mov	r1, r2
 8003420:	f102 0201 	add.w	r2, r2, #1
 8003424:	d9f7      	bls.n	8003416 <_dtoa_r+0x942>
 8003426:	f8c9 1044 	str.w	r1, [r9, #68]	; 0x44
 800342a:	e47b      	b.n	8002d24 <_dtoa_r+0x250>
 800342c:	2300      	movs	r3, #0
 800342e:	930a      	str	r3, [sp, #40]	; 0x28
 8003430:	9e07      	ldr	r6, [sp, #28]
 8003432:	2e00      	cmp	r6, #0
 8003434:	f340 80e2 	ble.w	80035fc <_dtoa_r+0xb28>
 8003438:	960e      	str	r6, [sp, #56]	; 0x38
 800343a:	9609      	str	r6, [sp, #36]	; 0x24
 800343c:	e7e2      	b.n	8003404 <_dtoa_r+0x930>
 800343e:	2301      	movs	r3, #1
 8003440:	930a      	str	r3, [sp, #40]	; 0x28
 8003442:	e7f5      	b.n	8003430 <_dtoa_r+0x95c>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	f47f ae90 	bne.w	800316c <_dtoa_r+0x698>
 800344c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003450:	f3c2 0313 	ubfx	r3, r2, #0, #20
 8003454:	2b00      	cmp	r3, #0
 8003456:	f040 8192 	bne.w	800377e <_dtoa_r+0xcaa>
 800345a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800345e:	0d1b      	lsrs	r3, r3, #20
 8003460:	051b      	lsls	r3, r3, #20
 8003462:	b12b      	cbz	r3, 8003470 <_dtoa_r+0x99c>
 8003464:	9b08      	ldr	r3, [sp, #32]
 8003466:	3301      	adds	r3, #1
 8003468:	9308      	str	r3, [sp, #32]
 800346a:	f108 0801 	add.w	r8, r8, #1
 800346e:	2301      	movs	r3, #1
 8003470:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003472:	930c      	str	r3, [sp, #48]	; 0x30
 8003474:	2a00      	cmp	r2, #0
 8003476:	f43f ae79 	beq.w	800316c <_dtoa_r+0x698>
 800347a:	e7a3      	b.n	80033c4 <_dtoa_r+0x8f0>
 800347c:	463a      	mov	r2, r7
 800347e:	4629      	mov	r1, r5
 8003480:	4648      	mov	r0, r9
 8003482:	f000 ff0d 	bl	80042a0 <__pow5mult>
 8003486:	4652      	mov	r2, sl
 8003488:	4601      	mov	r1, r0
 800348a:	4605      	mov	r5, r0
 800348c:	4648      	mov	r0, r9
 800348e:	f000 fe61 	bl	8004154 <__multiply>
 8003492:	4651      	mov	r1, sl
 8003494:	4607      	mov	r7, r0
 8003496:	4648      	mov	r0, r9
 8003498:	f000 fd6c 	bl	8003f74 <_Bfree>
 800349c:	46ba      	mov	sl, r7
 800349e:	2e00      	cmp	r6, #0
 80034a0:	f43f ae57 	beq.w	8003152 <_dtoa_r+0x67e>
 80034a4:	e64f      	b.n	8003146 <_dtoa_r+0x672>
 80034a6:	4629      	mov	r1, r5
 80034a8:	4622      	mov	r2, r4
 80034aa:	4648      	mov	r0, r9
 80034ac:	f000 ff48 	bl	8004340 <__lshift>
 80034b0:	4605      	mov	r5, r0
 80034b2:	e68d      	b.n	80031d0 <_dtoa_r+0x6fc>
 80034b4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80034b6:	2a00      	cmp	r2, #0
 80034b8:	f000 815d 	beq.w	8003776 <_dtoa_r+0xca2>
 80034bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80034c0:	9a08      	ldr	r2, [sp, #32]
 80034c2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 80034c4:	4614      	mov	r4, r2
 80034c6:	441a      	add	r2, r3
 80034c8:	4498      	add	r8, r3
 80034ca:	9208      	str	r2, [sp, #32]
 80034cc:	e5f7      	b.n	80030be <_dtoa_r+0x5ea>
 80034ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	f73f ad3e 	bgt.w	8002f52 <_dtoa_r+0x47e>
 80034d6:	f040 80bc 	bne.w	8003652 <_dtoa_r+0xb7e>
 80034da:	ec51 0b17 	vmov	r0, r1, d7
 80034de:	2200      	movs	r2, #0
 80034e0:	4bb2      	ldr	r3, [pc, #712]	; (80037ac <_dtoa_r+0xcd8>)
 80034e2:	f7fd f9f3 	bl	80008cc <__aeabi_dmul>
 80034e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80034ea:	f7fd fc75 	bl	8000dd8 <__aeabi_dcmpge>
 80034ee:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80034f0:	4635      	mov	r5, r6
 80034f2:	2800      	cmp	r0, #0
 80034f4:	d176      	bne.n	80035e4 <_dtoa_r+0xb10>
 80034f6:	9a06      	ldr	r2, [sp, #24]
 80034f8:	2331      	movs	r3, #49	; 0x31
 80034fa:	3201      	adds	r2, #1
 80034fc:	9206      	str	r2, [sp, #24]
 80034fe:	f88b 3000 	strb.w	r3, [fp]
 8003502:	f10b 0401 	add.w	r4, fp, #1
 8003506:	4631      	mov	r1, r6
 8003508:	4648      	mov	r0, r9
 800350a:	f000 fd33 	bl	8003f74 <_Bfree>
 800350e:	2d00      	cmp	r5, #0
 8003510:	f47f af34 	bne.w	800337c <_dtoa_r+0x8a8>
 8003514:	e736      	b.n	8003384 <_dtoa_r+0x8b0>
 8003516:	f000 8142 	beq.w	800379e <_dtoa_r+0xcca>
 800351a:	9b06      	ldr	r3, [sp, #24]
 800351c:	425c      	negs	r4, r3
 800351e:	4ba4      	ldr	r3, [pc, #656]	; (80037b0 <_dtoa_r+0xcdc>)
 8003520:	f004 020f 	and.w	r2, r4, #15
 8003524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8003530:	f7fd f9cc 	bl	80008cc <__aeabi_dmul>
 8003534:	1124      	asrs	r4, r4, #4
 8003536:	e9cd 0100 	strd	r0, r1, [sp]
 800353a:	f000 81c6 	beq.w	80038ca <_dtoa_r+0xdf6>
 800353e:	4d9d      	ldr	r5, [pc, #628]	; (80037b4 <_dtoa_r+0xce0>)
 8003540:	2300      	movs	r3, #0
 8003542:	2602      	movs	r6, #2
 8003544:	07e7      	lsls	r7, r4, #31
 8003546:	d505      	bpl.n	8003554 <_dtoa_r+0xa80>
 8003548:	e9d5 2300 	ldrd	r2, r3, [r5]
 800354c:	f7fd f9be 	bl	80008cc <__aeabi_dmul>
 8003550:	3601      	adds	r6, #1
 8003552:	2301      	movs	r3, #1
 8003554:	1064      	asrs	r4, r4, #1
 8003556:	f105 0508 	add.w	r5, r5, #8
 800355a:	d1f3      	bne.n	8003544 <_dtoa_r+0xa70>
 800355c:	2b00      	cmp	r3, #0
 800355e:	f43f ac27 	beq.w	8002db0 <_dtoa_r+0x2dc>
 8003562:	e9cd 0100 	strd	r0, r1, [sp]
 8003566:	e423      	b.n	8002db0 <_dtoa_r+0x2dc>
 8003568:	9b00      	ldr	r3, [sp, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f43f af6e 	beq.w	800344c <_dtoa_r+0x978>
 8003570:	e726      	b.n	80033c0 <_dtoa_r+0x8ec>
 8003572:	6869      	ldr	r1, [r5, #4]
 8003574:	4648      	mov	r0, r9
 8003576:	f000 fcd7 	bl	8003f28 <_Balloc>
 800357a:	692b      	ldr	r3, [r5, #16]
 800357c:	3302      	adds	r3, #2
 800357e:	009a      	lsls	r2, r3, #2
 8003580:	4604      	mov	r4, r0
 8003582:	f105 010c 	add.w	r1, r5, #12
 8003586:	300c      	adds	r0, #12
 8003588:	f7fd fe4e 	bl	8001228 <memcpy>
 800358c:	4621      	mov	r1, r4
 800358e:	2201      	movs	r2, #1
 8003590:	4648      	mov	r0, r9
 8003592:	f000 fed5 	bl	8004340 <__lshift>
 8003596:	4680      	mov	r8, r0
 8003598:	e61f      	b.n	80031da <_dtoa_r+0x706>
 800359a:	2400      	movs	r4, #0
 800359c:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80035a0:	4621      	mov	r1, r4
 80035a2:	4648      	mov	r0, r9
 80035a4:	f000 fcc0 	bl	8003f28 <_Balloc>
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035ac:	930e      	str	r3, [sp, #56]	; 0x38
 80035ae:	9309      	str	r3, [sp, #36]	; 0x24
 80035b0:	2301      	movs	r3, #1
 80035b2:	4683      	mov	fp, r0
 80035b4:	9407      	str	r4, [sp, #28]
 80035b6:	f8c9 0040 	str.w	r0, [r9, #64]	; 0x40
 80035ba:	930a      	str	r3, [sp, #40]	; 0x28
 80035bc:	e4b6      	b.n	8002f2c <_dtoa_r+0x458>
 80035be:	f000 fce3 	bl	8003f88 <__multadd>
 80035c2:	4627      	mov	r7, r4
 80035c4:	4605      	mov	r5, r0
 80035c6:	4680      	mov	r8, r0
 80035c8:	e614      	b.n	80031f4 <_dtoa_r+0x720>
 80035ca:	4648      	mov	r0, r9
 80035cc:	f000 fcd2 	bl	8003f74 <_Bfree>
 80035d0:	2301      	movs	r3, #1
 80035d2:	e639      	b.n	8003248 <_dtoa_r+0x774>
 80035d4:	9b02      	ldr	r3, [sp, #8]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	f77f adf3 	ble.w	80031c2 <_dtoa_r+0x6ee>
 80035dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f000 80cf 	beq.w	8003782 <_dtoa_r+0xcae>
 80035e4:	9b07      	ldr	r3, [sp, #28]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	9306      	str	r3, [sp, #24]
 80035ea:	465c      	mov	r4, fp
 80035ec:	e78b      	b.n	8003506 <_dtoa_r+0xa32>
 80035ee:	9a06      	ldr	r2, [sp, #24]
 80035f0:	2331      	movs	r3, #49	; 0x31
 80035f2:	3201      	adds	r2, #1
 80035f4:	9206      	str	r2, [sp, #24]
 80035f6:	f88b 3000 	strb.w	r3, [fp]
 80035fa:	e6b3      	b.n	8003364 <_dtoa_r+0x890>
 80035fc:	2401      	movs	r4, #1
 80035fe:	9409      	str	r4, [sp, #36]	; 0x24
 8003600:	9407      	str	r4, [sp, #28]
 8003602:	f7ff bb8b 	b.w	8002d1c <_dtoa_r+0x248>
 8003606:	4630      	mov	r0, r6
 8003608:	f7fd f8f6 	bl	80007f8 <__aeabi_i2d>
 800360c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003610:	f7fd f95c 	bl	80008cc <__aeabi_dmul>
 8003614:	2200      	movs	r2, #0
 8003616:	4b68      	ldr	r3, [pc, #416]	; (80037b8 <_dtoa_r+0xce4>)
 8003618:	f7fc ffa2 	bl	8000560 <__adddf3>
 800361c:	4606      	mov	r6, r0
 800361e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8003622:	2200      	movs	r2, #0
 8003624:	4b61      	ldr	r3, [pc, #388]	; (80037ac <_dtoa_r+0xcd8>)
 8003626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800362a:	f7fc ff97 	bl	800055c <__aeabi_dsub>
 800362e:	4632      	mov	r2, r6
 8003630:	463b      	mov	r3, r7
 8003632:	4604      	mov	r4, r0
 8003634:	460d      	mov	r5, r1
 8003636:	f7fd fbd9 	bl	8000dec <__aeabi_dcmpgt>
 800363a:	2800      	cmp	r0, #0
 800363c:	d14f      	bne.n	80036de <_dtoa_r+0xc0a>
 800363e:	4632      	mov	r2, r6
 8003640:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003644:	4620      	mov	r0, r4
 8003646:	4629      	mov	r1, r5
 8003648:	f7fd fbb2 	bl	8000db0 <__aeabi_dcmplt>
 800364c:	2800      	cmp	r0, #0
 800364e:	f43f ac69 	beq.w	8002f24 <_dtoa_r+0x450>
 8003652:	2600      	movs	r6, #0
 8003654:	4635      	mov	r5, r6
 8003656:	e7c5      	b.n	80035e4 <_dtoa_r+0xb10>
 8003658:	2301      	movs	r3, #1
 800365a:	930a      	str	r3, [sp, #40]	; 0x28
 800365c:	e6c8      	b.n	80033f0 <_dtoa_r+0x91c>
 800365e:	4651      	mov	r1, sl
 8003660:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003662:	4648      	mov	r0, r9
 8003664:	f000 fe1c 	bl	80042a0 <__pow5mult>
 8003668:	4682      	mov	sl, r0
 800366a:	e572      	b.n	8003152 <_dtoa_r+0x67e>
 800366c:	f8dd a000 	ldr.w	sl, [sp]
 8003670:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8003674:	e686      	b.n	8003384 <_dtoa_r+0x8b0>
 8003676:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003678:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800367a:	1afb      	subs	r3, r7, r3
 800367c:	441a      	add	r2, r3
 800367e:	e9cd 720b 	strd	r7, r2, [sp, #44]	; 0x2c
 8003682:	2700      	movs	r7, #0
 8003684:	e512      	b.n	80030ac <_dtoa_r+0x5d8>
 8003686:	2b00      	cmp	r3, #0
 8003688:	9402      	str	r4, [sp, #8]
 800368a:	465e      	mov	r6, fp
 800368c:	f107 0401 	add.w	r4, r7, #1
 8003690:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8003694:	f300 80ba 	bgt.w	800380c <_dtoa_r+0xd38>
 8003698:	9b00      	ldr	r3, [sp, #0]
 800369a:	9502      	str	r5, [sp, #8]
 800369c:	703b      	strb	r3, [r7, #0]
 800369e:	4645      	mov	r5, r8
 80036a0:	e660      	b.n	8003364 <_dtoa_r+0x890>
 80036a2:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80036a6:	2602      	movs	r6, #2
 80036a8:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 80036ac:	f7ff bb67 	b.w	8002d7e <_dtoa_r+0x2aa>
 80036b0:	9b00      	ldr	r3, [sp, #0]
 80036b2:	2b39      	cmp	r3, #57	; 0x39
 80036b4:	465e      	mov	r6, fp
 80036b6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80036ba:	f000 80b9 	beq.w	8003830 <_dtoa_r+0xd5c>
 80036be:	9b00      	ldr	r3, [sp, #0]
 80036c0:	9502      	str	r5, [sp, #8]
 80036c2:	3301      	adds	r3, #1
 80036c4:	703b      	strb	r3, [r7, #0]
 80036c6:	4645      	mov	r5, r8
 80036c8:	e64c      	b.n	8003364 <_dtoa_r+0x890>
 80036ca:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 80036ce:	1a9c      	subs	r4, r3, r2
 80036d0:	e4f5      	b.n	80030be <_dtoa_r+0x5ea>
 80036d2:	465e      	mov	r6, fp
 80036d4:	9502      	str	r5, [sp, #8]
 80036d6:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 80036da:	4645      	mov	r5, r8
 80036dc:	e61a      	b.n	8003314 <_dtoa_r+0x840>
 80036de:	2600      	movs	r6, #0
 80036e0:	4635      	mov	r5, r6
 80036e2:	e708      	b.n	80034f6 <_dtoa_r+0xa22>
 80036e4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80036e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80036ec:	f7fd f8ee 	bl	80008cc <__aeabi_dmul>
 80036f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80036f2:	f88b 5000 	strb.w	r5, [fp]
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	e9cd 0100 	strd	r0, r1, [sp]
 80036fc:	d020      	beq.n	8003740 <_dtoa_r+0xc6c>
 80036fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003700:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
 8003704:	445b      	add	r3, fp
 8003706:	4698      	mov	r8, r3
 8003708:	2200      	movs	r2, #0
 800370a:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <_dtoa_r+0xce8>)
 800370c:	4630      	mov	r0, r6
 800370e:	4639      	mov	r1, r7
 8003710:	f7fd f8dc 	bl	80008cc <__aeabi_dmul>
 8003714:	460f      	mov	r7, r1
 8003716:	4606      	mov	r6, r0
 8003718:	f7fd fb88 	bl	8000e2c <__aeabi_d2iz>
 800371c:	4605      	mov	r5, r0
 800371e:	f7fd f86b 	bl	80007f8 <__aeabi_i2d>
 8003722:	3530      	adds	r5, #48	; 0x30
 8003724:	4602      	mov	r2, r0
 8003726:	460b      	mov	r3, r1
 8003728:	4630      	mov	r0, r6
 800372a:	4639      	mov	r1, r7
 800372c:	f7fc ff16 	bl	800055c <__aeabi_dsub>
 8003730:	f804 5b01 	strb.w	r5, [r4], #1
 8003734:	4544      	cmp	r4, r8
 8003736:	4606      	mov	r6, r0
 8003738:	460f      	mov	r7, r1
 800373a:	d1e5      	bne.n	8003708 <_dtoa_r+0xc34>
 800373c:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8003740:	4b1f      	ldr	r3, [pc, #124]	; (80037c0 <_dtoa_r+0xcec>)
 8003742:	2200      	movs	r2, #0
 8003744:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003748:	f7fc ff0a 	bl	8000560 <__adddf3>
 800374c:	4632      	mov	r2, r6
 800374e:	463b      	mov	r3, r7
 8003750:	f7fd fb2e 	bl	8000db0 <__aeabi_dcmplt>
 8003754:	2800      	cmp	r0, #0
 8003756:	d070      	beq.n	800383a <_dtoa_r+0xd66>
 8003758:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800375a:	9306      	str	r3, [sp, #24]
 800375c:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 8003760:	e48f      	b.n	8003082 <_dtoa_r+0x5ae>
 8003762:	2330      	movs	r3, #48	; 0x30
 8003764:	f88b 3000 	strb.w	r3, [fp]
 8003768:	9b06      	ldr	r3, [sp, #24]
 800376a:	f814 5c01 	ldrb.w	r5, [r4, #-1]
 800376e:	3301      	adds	r3, #1
 8003770:	9306      	str	r3, [sp, #24]
 8003772:	465b      	mov	r3, fp
 8003774:	e489      	b.n	800308a <_dtoa_r+0x5b6>
 8003776:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8003778:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800377c:	e6a0      	b.n	80034c0 <_dtoa_r+0x9ec>
 800377e:	2300      	movs	r3, #0
 8003780:	e676      	b.n	8003470 <_dtoa_r+0x99c>
 8003782:	4631      	mov	r1, r6
 8003784:	2205      	movs	r2, #5
 8003786:	4648      	mov	r0, r9
 8003788:	f000 fbfe 	bl	8003f88 <__multadd>
 800378c:	4601      	mov	r1, r0
 800378e:	4606      	mov	r6, r0
 8003790:	4650      	mov	r0, sl
 8003792:	f000 fe2b 	bl	80043ec <__mcmp>
 8003796:	2800      	cmp	r0, #0
 8003798:	f73f aead 	bgt.w	80034f6 <_dtoa_r+0xa22>
 800379c:	e722      	b.n	80035e4 <_dtoa_r+0xb10>
 800379e:	ed9d 7b10 	vldr	d7, [sp, #64]	; 0x40
 80037a2:	2602      	movs	r6, #2
 80037a4:	ed8d 7b00 	vstr	d7, [sp]
 80037a8:	f7ff bb02 	b.w	8002db0 <_dtoa_r+0x2dc>
 80037ac:	40140000 	.word	0x40140000
 80037b0:	0800ada8 	.word	0x0800ada8
 80037b4:	0800ae98 	.word	0x0800ae98
 80037b8:	401c0000 	.word	0x401c0000
 80037bc:	40240000 	.word	0x40240000
 80037c0:	3fe00000 	.word	0x3fe00000
 80037c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f43f af1d 	beq.w	8003606 <_dtoa_r+0xb32>
 80037cc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80037ce:	2c00      	cmp	r4, #0
 80037d0:	f77f aba8 	ble.w	8002f24 <_dtoa_r+0x450>
 80037d4:	2200      	movs	r2, #0
 80037d6:	4b45      	ldr	r3, [pc, #276]	; (80038ec <_dtoa_r+0xe18>)
 80037d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80037dc:	f7fd f876 	bl	80008cc <__aeabi_dmul>
 80037e0:	e9cd 0100 	strd	r0, r1, [sp]
 80037e4:	1c70      	adds	r0, r6, #1
 80037e6:	f7fd f807 	bl	80007f8 <__aeabi_i2d>
 80037ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80037ee:	f7fd f86d 	bl	80008cc <__aeabi_dmul>
 80037f2:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <_dtoa_r+0xe1c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	f7fc feb3 	bl	8000560 <__adddf3>
 80037fa:	9b06      	ldr	r3, [sp, #24]
 80037fc:	9412      	str	r4, [sp, #72]	; 0x48
 80037fe:	3b01      	subs	r3, #1
 8003800:	4606      	mov	r6, r0
 8003802:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8003806:	9316      	str	r3, [sp, #88]	; 0x58
 8003808:	f7ff baf3 	b.w	8002df2 <_dtoa_r+0x31e>
 800380c:	4651      	mov	r1, sl
 800380e:	2201      	movs	r2, #1
 8003810:	4648      	mov	r0, r9
 8003812:	f000 fd95 	bl	8004340 <__lshift>
 8003816:	4631      	mov	r1, r6
 8003818:	4682      	mov	sl, r0
 800381a:	f000 fde7 	bl	80043ec <__mcmp>
 800381e:	2800      	cmp	r0, #0
 8003820:	dd3b      	ble.n	800389a <_dtoa_r+0xdc6>
 8003822:	9b00      	ldr	r3, [sp, #0]
 8003824:	2b39      	cmp	r3, #57	; 0x39
 8003826:	d003      	beq.n	8003830 <_dtoa_r+0xd5c>
 8003828:	9b02      	ldr	r3, [sp, #8]
 800382a:	3331      	adds	r3, #49	; 0x31
 800382c:	9300      	str	r3, [sp, #0]
 800382e:	e733      	b.n	8003698 <_dtoa_r+0xbc4>
 8003830:	2239      	movs	r2, #57	; 0x39
 8003832:	9502      	str	r5, [sp, #8]
 8003834:	703a      	strb	r2, [r7, #0]
 8003836:	4645      	mov	r5, r8
 8003838:	e58e      	b.n	8003358 <_dtoa_r+0x884>
 800383a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800383e:	2000      	movs	r0, #0
 8003840:	492c      	ldr	r1, [pc, #176]	; (80038f4 <_dtoa_r+0xe20>)
 8003842:	f7fc fe8b 	bl	800055c <__aeabi_dsub>
 8003846:	4632      	mov	r2, r6
 8003848:	463b      	mov	r3, r7
 800384a:	f7fd facf 	bl	8000dec <__aeabi_dcmpgt>
 800384e:	b910      	cbnz	r0, 8003856 <_dtoa_r+0xd82>
 8003850:	f7ff bb68 	b.w	8002f24 <_dtoa_r+0x450>
 8003854:	4614      	mov	r4, r2
 8003856:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 800385a:	2b30      	cmp	r3, #48	; 0x30
 800385c:	f104 32ff 	add.w	r2, r4, #4294967295	; 0xffffffff
 8003860:	d0f8      	beq.n	8003854 <_dtoa_r+0xd80>
 8003862:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003864:	9306      	str	r3, [sp, #24]
 8003866:	e58d      	b.n	8003384 <_dtoa_r+0x8b0>
 8003868:	46d9      	mov	r9, fp
 800386a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 800386e:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
 8003872:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8003874:	9306      	str	r3, [sp, #24]
 8003876:	e404      	b.n	8003082 <_dtoa_r+0x5ae>
 8003878:	9b00      	ldr	r3, [sp, #0]
 800387a:	2b39      	cmp	r3, #57	; 0x39
 800387c:	4621      	mov	r1, r4
 800387e:	4632      	mov	r2, r6
 8003880:	f107 0401 	add.w	r4, r7, #1
 8003884:	465e      	mov	r6, fp
 8003886:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800388a:	d0d1      	beq.n	8003830 <_dtoa_r+0xd5c>
 800388c:	2a00      	cmp	r2, #0
 800388e:	f77f af03 	ble.w	8003698 <_dtoa_r+0xbc4>
 8003892:	460b      	mov	r3, r1
 8003894:	3331      	adds	r3, #49	; 0x31
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	e6fe      	b.n	8003698 <_dtoa_r+0xbc4>
 800389a:	f47f aefd 	bne.w	8003698 <_dtoa_r+0xbc4>
 800389e:	9b00      	ldr	r3, [sp, #0]
 80038a0:	07da      	lsls	r2, r3, #31
 80038a2:	f57f aef9 	bpl.w	8003698 <_dtoa_r+0xbc4>
 80038a6:	e7bc      	b.n	8003822 <_dtoa_r+0xd4e>
 80038a8:	4629      	mov	r1, r5
 80038aa:	2300      	movs	r3, #0
 80038ac:	220a      	movs	r2, #10
 80038ae:	4648      	mov	r0, r9
 80038b0:	f000 fb6a 	bl	8003f88 <__multadd>
 80038b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	4605      	mov	r5, r0
 80038ba:	dd09      	ble.n	80038d0 <_dtoa_r+0xdfc>
 80038bc:	9309      	str	r3, [sp, #36]	; 0x24
 80038be:	e484      	b.n	80031ca <_dtoa_r+0x6f6>
 80038c0:	9b02      	ldr	r3, [sp, #8]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	dc0e      	bgt.n	80038e4 <_dtoa_r+0xe10>
 80038c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038c8:	e507      	b.n	80032da <_dtoa_r+0x806>
 80038ca:	2602      	movs	r6, #2
 80038cc:	f7ff ba70 	b.w	8002db0 <_dtoa_r+0x2dc>
 80038d0:	9b02      	ldr	r3, [sp, #8]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	dc06      	bgt.n	80038e4 <_dtoa_r+0xe10>
 80038d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038d8:	e7f0      	b.n	80038bc <_dtoa_r+0xde8>
 80038da:	f43f ac59 	beq.w	8003190 <_dtoa_r+0x6bc>
 80038de:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 80038e2:	e450      	b.n	8003186 <_dtoa_r+0x6b2>
 80038e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80038e6:	9309      	str	r3, [sp, #36]	; 0x24
 80038e8:	e678      	b.n	80035dc <_dtoa_r+0xb08>
 80038ea:	bf00      	nop
 80038ec:	40240000 	.word	0x40240000
 80038f0:	401c0000 	.word	0x401c0000
 80038f4:	3fe00000 	.word	0x3fe00000

080038f8 <__localeconv_l>:
 80038f8:	30f0      	adds	r0, #240	; 0xf0
 80038fa:	4770      	bx	lr

080038fc <_localeconv_r>:
 80038fc:	4800      	ldr	r0, [pc, #0]	; (8003900 <_localeconv_r+0x4>)
 80038fe:	4770      	bx	lr
 8003900:	20001138 	.word	0x20001138

08003904 <localeconv>:
 8003904:	4800      	ldr	r0, [pc, #0]	; (8003908 <localeconv+0x4>)
 8003906:	4770      	bx	lr
 8003908:	20001138 	.word	0x20001138

0800390c <_malloc_r>:
 800390c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003910:	f101 050b 	add.w	r5, r1, #11
 8003914:	2d16      	cmp	r5, #22
 8003916:	b083      	sub	sp, #12
 8003918:	4606      	mov	r6, r0
 800391a:	d823      	bhi.n	8003964 <_malloc_r+0x58>
 800391c:	2910      	cmp	r1, #16
 800391e:	f200 80b9 	bhi.w	8003a94 <_malloc_r+0x188>
 8003922:	f000 fafd 	bl	8003f20 <__malloc_lock>
 8003926:	2510      	movs	r5, #16
 8003928:	2318      	movs	r3, #24
 800392a:	2002      	movs	r0, #2
 800392c:	4fd2      	ldr	r7, [pc, #840]	; (8003c78 <_malloc_r+0x36c>)
 800392e:	443b      	add	r3, r7
 8003930:	f1a3 0208 	sub.w	r2, r3, #8
 8003934:	685c      	ldr	r4, [r3, #4]
 8003936:	4294      	cmp	r4, r2
 8003938:	f000 816f 	beq.w	8003c1a <_malloc_r+0x30e>
 800393c:	6863      	ldr	r3, [r4, #4]
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	4423      	add	r3, r4
 8003944:	e9d4 5102 	ldrd	r5, r1, [r4, #8]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	60e9      	str	r1, [r5, #12]
 800394c:	f042 0201 	orr.w	r2, r2, #1
 8003950:	608d      	str	r5, [r1, #8]
 8003952:	4630      	mov	r0, r6
 8003954:	605a      	str	r2, [r3, #4]
 8003956:	f000 fae5 	bl	8003f24 <__malloc_unlock>
 800395a:	3408      	adds	r4, #8
 800395c:	4620      	mov	r0, r4
 800395e:	b003      	add	sp, #12
 8003960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003964:	f035 0507 	bics.w	r5, r5, #7
 8003968:	f100 8094 	bmi.w	8003a94 <_malloc_r+0x188>
 800396c:	42a9      	cmp	r1, r5
 800396e:	f200 8091 	bhi.w	8003a94 <_malloc_r+0x188>
 8003972:	f000 fad5 	bl	8003f20 <__malloc_lock>
 8003976:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800397a:	f0c0 8183 	bcc.w	8003c84 <_malloc_r+0x378>
 800397e:	0a6b      	lsrs	r3, r5, #9
 8003980:	f000 808f 	beq.w	8003aa2 <_malloc_r+0x196>
 8003984:	2b04      	cmp	r3, #4
 8003986:	f200 814f 	bhi.w	8003c28 <_malloc_r+0x31c>
 800398a:	09ab      	lsrs	r3, r5, #6
 800398c:	f103 0039 	add.w	r0, r3, #57	; 0x39
 8003990:	f103 0c38 	add.w	ip, r3, #56	; 0x38
 8003994:	00c3      	lsls	r3, r0, #3
 8003996:	4fb8      	ldr	r7, [pc, #736]	; (8003c78 <_malloc_r+0x36c>)
 8003998:	443b      	add	r3, r7
 800399a:	f1a3 0108 	sub.w	r1, r3, #8
 800399e:	685c      	ldr	r4, [r3, #4]
 80039a0:	42a1      	cmp	r1, r4
 80039a2:	d106      	bne.n	80039b2 <_malloc_r+0xa6>
 80039a4:	e00c      	b.n	80039c0 <_malloc_r+0xb4>
 80039a6:	2a00      	cmp	r2, #0
 80039a8:	f280 8126 	bge.w	8003bf8 <_malloc_r+0x2ec>
 80039ac:	68e4      	ldr	r4, [r4, #12]
 80039ae:	42a1      	cmp	r1, r4
 80039b0:	d006      	beq.n	80039c0 <_malloc_r+0xb4>
 80039b2:	6863      	ldr	r3, [r4, #4]
 80039b4:	f023 0303 	bic.w	r3, r3, #3
 80039b8:	1b5a      	subs	r2, r3, r5
 80039ba:	2a0f      	cmp	r2, #15
 80039bc:	ddf3      	ble.n	80039a6 <_malloc_r+0x9a>
 80039be:	4660      	mov	r0, ip
 80039c0:	693c      	ldr	r4, [r7, #16]
 80039c2:	f8df c2b8 	ldr.w	ip, [pc, #696]	; 8003c7c <_malloc_r+0x370>
 80039c6:	4564      	cmp	r4, ip
 80039c8:	d071      	beq.n	8003aae <_malloc_r+0x1a2>
 80039ca:	6863      	ldr	r3, [r4, #4]
 80039cc:	f023 0303 	bic.w	r3, r3, #3
 80039d0:	1b5a      	subs	r2, r3, r5
 80039d2:	2a0f      	cmp	r2, #15
 80039d4:	f300 813e 	bgt.w	8003c54 <_malloc_r+0x348>
 80039d8:	2a00      	cmp	r2, #0
 80039da:	e9c7 cc04 	strd	ip, ip, [r7, #16]
 80039de:	f280 812f 	bge.w	8003c40 <_malloc_r+0x334>
 80039e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039e6:	f080 8169 	bcs.w	8003cbc <_malloc_r+0x3b0>
 80039ea:	08db      	lsrs	r3, r3, #3
 80039ec:	1c59      	adds	r1, r3, #1
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	f857 8031 	ldr.w	r8, [r7, r1, lsl #3]
 80039f4:	f8c4 8008 	str.w	r8, [r4, #8]
 80039f8:	f04f 0e01 	mov.w	lr, #1
 80039fc:	109b      	asrs	r3, r3, #2
 80039fe:	fa0e f303 	lsl.w	r3, lr, r3
 8003a02:	eb07 0ec1 	add.w	lr, r7, r1, lsl #3
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f1ae 0208 	sub.w	r2, lr, #8
 8003a0c:	60e2      	str	r2, [r4, #12]
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	f847 4031 	str.w	r4, [r7, r1, lsl #3]
 8003a14:	f8c8 400c 	str.w	r4, [r8, #12]
 8003a18:	1082      	asrs	r2, r0, #2
 8003a1a:	2401      	movs	r4, #1
 8003a1c:	4094      	lsls	r4, r2
 8003a1e:	429c      	cmp	r4, r3
 8003a20:	d84b      	bhi.n	8003aba <_malloc_r+0x1ae>
 8003a22:	421c      	tst	r4, r3
 8003a24:	d106      	bne.n	8003a34 <_malloc_r+0x128>
 8003a26:	f020 0003 	bic.w	r0, r0, #3
 8003a2a:	0064      	lsls	r4, r4, #1
 8003a2c:	421c      	tst	r4, r3
 8003a2e:	f100 0004 	add.w	r0, r0, #4
 8003a32:	d0fa      	beq.n	8003a2a <_malloc_r+0x11e>
 8003a34:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
 8003a38:	46ce      	mov	lr, r9
 8003a3a:	4680      	mov	r8, r0
 8003a3c:	f8de 300c 	ldr.w	r3, [lr, #12]
 8003a40:	459e      	cmp	lr, r3
 8003a42:	d107      	bne.n	8003a54 <_malloc_r+0x148>
 8003a44:	e122      	b.n	8003c8c <_malloc_r+0x380>
 8003a46:	2a00      	cmp	r2, #0
 8003a48:	f280 8129 	bge.w	8003c9e <_malloc_r+0x392>
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	459e      	cmp	lr, r3
 8003a50:	f000 811c 	beq.w	8003c8c <_malloc_r+0x380>
 8003a54:	6859      	ldr	r1, [r3, #4]
 8003a56:	f021 0103 	bic.w	r1, r1, #3
 8003a5a:	1b4a      	subs	r2, r1, r5
 8003a5c:	2a0f      	cmp	r2, #15
 8003a5e:	ddf2      	ble.n	8003a46 <_malloc_r+0x13a>
 8003a60:	e9d3 8e02 	ldrd	r8, lr, [r3, #8]
 8003a64:	195c      	adds	r4, r3, r5
 8003a66:	f045 0501 	orr.w	r5, r5, #1
 8003a6a:	605d      	str	r5, [r3, #4]
 8003a6c:	f042 0501 	orr.w	r5, r2, #1
 8003a70:	f8c8 e00c 	str.w	lr, [r8, #12]
 8003a74:	4630      	mov	r0, r6
 8003a76:	f8ce 8008 	str.w	r8, [lr, #8]
 8003a7a:	e9c7 4404 	strd	r4, r4, [r7, #16]
 8003a7e:	e9c4 cc02 	strd	ip, ip, [r4, #8]
 8003a82:	6065      	str	r5, [r4, #4]
 8003a84:	505a      	str	r2, [r3, r1]
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	f000 fa4c 	bl	8003f24 <__malloc_unlock>
 8003a8c:	9b00      	ldr	r3, [sp, #0]
 8003a8e:	f103 0408 	add.w	r4, r3, #8
 8003a92:	e763      	b.n	800395c <_malloc_r+0x50>
 8003a94:	2400      	movs	r4, #0
 8003a96:	230c      	movs	r3, #12
 8003a98:	4620      	mov	r0, r4
 8003a9a:	6033      	str	r3, [r6, #0]
 8003a9c:	b003      	add	sp, #12
 8003a9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aa2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aa6:	2040      	movs	r0, #64	; 0x40
 8003aa8:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
 8003aac:	e773      	b.n	8003996 <_malloc_r+0x8a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	1082      	asrs	r2, r0, #2
 8003ab2:	2401      	movs	r4, #1
 8003ab4:	4094      	lsls	r4, r2
 8003ab6:	429c      	cmp	r4, r3
 8003ab8:	d9b3      	bls.n	8003a22 <_malloc_r+0x116>
 8003aba:	68bc      	ldr	r4, [r7, #8]
 8003abc:	6863      	ldr	r3, [r4, #4]
 8003abe:	f023 0903 	bic.w	r9, r3, #3
 8003ac2:	45a9      	cmp	r9, r5
 8003ac4:	d304      	bcc.n	8003ad0 <_malloc_r+0x1c4>
 8003ac6:	eba9 0305 	sub.w	r3, r9, r5
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	f300 8084 	bgt.w	8003bd8 <_malloc_r+0x2cc>
 8003ad0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8003c80 <_malloc_r+0x374>
 8003ad4:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
 8003ad8:	f8da 3000 	ldr.w	r3, [sl]
 8003adc:	3201      	adds	r2, #1
 8003ade:	eb05 0803 	add.w	r8, r5, r3
 8003ae2:	f000 8147 	beq.w	8003d74 <_malloc_r+0x468>
 8003ae6:	f508 5880 	add.w	r8, r8, #4096	; 0x1000
 8003aea:	f108 080f 	add.w	r8, r8, #15
 8003aee:	f428 687f 	bic.w	r8, r8, #4080	; 0xff0
 8003af2:	f028 080f 	bic.w	r8, r8, #15
 8003af6:	4641      	mov	r1, r8
 8003af8:	4630      	mov	r0, r6
 8003afa:	f003 fcc1 	bl	8007480 <_sbrk_r>
 8003afe:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003b02:	4683      	mov	fp, r0
 8003b04:	f000 8103 	beq.w	8003d0e <_malloc_r+0x402>
 8003b08:	eb04 0009 	add.w	r0, r4, r9
 8003b0c:	4558      	cmp	r0, fp
 8003b0e:	f200 80fc 	bhi.w	8003d0a <_malloc_r+0x3fe>
 8003b12:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003b16:	eb08 0102 	add.w	r1, r8, r2
 8003b1a:	f8ca 1004 	str.w	r1, [sl, #4]
 8003b1e:	f000 815a 	beq.w	8003dd6 <_malloc_r+0x4ca>
 8003b22:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8003b26:	3301      	adds	r3, #1
 8003b28:	bf1b      	ittet	ne
 8003b2a:	ebab 0200 	subne.w	r2, fp, r0
 8003b2e:	1852      	addne	r2, r2, r1
 8003b30:	f8c7 b408 	streq.w	fp, [r7, #1032]	; 0x408
 8003b34:	f8ca 2004 	strne.w	r2, [sl, #4]
 8003b38:	f01b 0307 	ands.w	r3, fp, #7
 8003b3c:	f000 8130 	beq.w	8003da0 <_malloc_r+0x494>
 8003b40:	f1c3 0208 	rsb	r2, r3, #8
 8003b44:	4493      	add	fp, r2
 8003b46:	f5c3 5280 	rsb	r2, r3, #4096	; 0x1000
 8003b4a:	44d8      	add	r8, fp
 8003b4c:	3208      	adds	r2, #8
 8003b4e:	eba2 0208 	sub.w	r2, r2, r8
 8003b52:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003b56:	4611      	mov	r1, r2
 8003b58:	4630      	mov	r0, r6
 8003b5a:	9301      	str	r3, [sp, #4]
 8003b5c:	9200      	str	r2, [sp, #0]
 8003b5e:	f003 fc8f 	bl	8007480 <_sbrk_r>
 8003b62:	1c42      	adds	r2, r0, #1
 8003b64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003b68:	f000 8166 	beq.w	8003e38 <_malloc_r+0x52c>
 8003b6c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003b70:	f8c7 b008 	str.w	fp, [r7, #8]
 8003b74:	eba0 030b 	sub.w	r3, r0, fp
 8003b78:	4413      	add	r3, r2
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	4411      	add	r1, r2
 8003b80:	42bc      	cmp	r4, r7
 8003b82:	f8cb 3004 	str.w	r3, [fp, #4]
 8003b86:	f8ca 1004 	str.w	r1, [sl, #4]
 8003b8a:	d014      	beq.n	8003bb6 <_malloc_r+0x2aa>
 8003b8c:	f1b9 0f0f 	cmp.w	r9, #15
 8003b90:	f240 8138 	bls.w	8003e04 <_malloc_r+0x4f8>
 8003b94:	6862      	ldr	r2, [r4, #4]
 8003b96:	f1a9 030c 	sub.w	r3, r9, #12
 8003b9a:	f023 0307 	bic.w	r3, r3, #7
 8003b9e:	f002 0201 	and.w	r2, r2, #1
 8003ba2:	18e0      	adds	r0, r4, r3
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	f04f 0c05 	mov.w	ip, #5
 8003baa:	2b0f      	cmp	r3, #15
 8003bac:	6062      	str	r2, [r4, #4]
 8003bae:	e9c0 cc01 	strd	ip, ip, [r0, #4]
 8003bb2:	f200 8146 	bhi.w	8003e42 <_malloc_r+0x536>
 8003bb6:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
 8003bba:	68bc      	ldr	r4, [r7, #8]
 8003bbc:	4299      	cmp	r1, r3
 8003bbe:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
 8003bc2:	6862      	ldr	r2, [r4, #4]
 8003bc4:	bf88      	it	hi
 8003bc6:	f8ca 102c 	strhi.w	r1, [sl, #44]	; 0x2c
 8003bca:	4299      	cmp	r1, r3
 8003bcc:	f022 0203 	bic.w	r2, r2, #3
 8003bd0:	bf88      	it	hi
 8003bd2:	f8ca 1030 	strhi.w	r1, [sl, #48]	; 0x30
 8003bd6:	e09e      	b.n	8003d16 <_malloc_r+0x40a>
 8003bd8:	1962      	adds	r2, r4, r5
 8003bda:	f043 0301 	orr.w	r3, r3, #1
 8003bde:	f045 0501 	orr.w	r5, r5, #1
 8003be2:	6065      	str	r5, [r4, #4]
 8003be4:	4630      	mov	r0, r6
 8003be6:	60ba      	str	r2, [r7, #8]
 8003be8:	6053      	str	r3, [r2, #4]
 8003bea:	f000 f99b 	bl	8003f24 <__malloc_unlock>
 8003bee:	3408      	adds	r4, #8
 8003bf0:	4620      	mov	r0, r4
 8003bf2:	b003      	add	sp, #12
 8003bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf8:	4423      	add	r3, r4
 8003bfa:	68e1      	ldr	r1, [r4, #12]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	68a5      	ldr	r5, [r4, #8]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	60e9      	str	r1, [r5, #12]
 8003c06:	4630      	mov	r0, r6
 8003c08:	608d      	str	r5, [r1, #8]
 8003c0a:	605a      	str	r2, [r3, #4]
 8003c0c:	f000 f98a 	bl	8003f24 <__malloc_unlock>
 8003c10:	3408      	adds	r4, #8
 8003c12:	4620      	mov	r0, r4
 8003c14:	b003      	add	sp, #12
 8003c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c1a:	68dc      	ldr	r4, [r3, #12]
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	bf08      	it	eq
 8003c20:	3002      	addeq	r0, #2
 8003c22:	f43f aecd 	beq.w	80039c0 <_malloc_r+0xb4>
 8003c26:	e689      	b.n	800393c <_malloc_r+0x30>
 8003c28:	2b14      	cmp	r3, #20
 8003c2a:	d968      	bls.n	8003cfe <_malloc_r+0x3f2>
 8003c2c:	2b54      	cmp	r3, #84	; 0x54
 8003c2e:	f200 80a4 	bhi.w	8003d7a <_malloc_r+0x46e>
 8003c32:	0b2b      	lsrs	r3, r5, #12
 8003c34:	f103 006f 	add.w	r0, r3, #111	; 0x6f
 8003c38:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
 8003c3c:	00c3      	lsls	r3, r0, #3
 8003c3e:	e6aa      	b.n	8003996 <_malloc_r+0x8a>
 8003c40:	4423      	add	r3, r4
 8003c42:	4630      	mov	r0, r6
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	605a      	str	r2, [r3, #4]
 8003c4c:	3408      	adds	r4, #8
 8003c4e:	f000 f969 	bl	8003f24 <__malloc_unlock>
 8003c52:	e683      	b.n	800395c <_malloc_r+0x50>
 8003c54:	1961      	adds	r1, r4, r5
 8003c56:	f045 0e01 	orr.w	lr, r5, #1
 8003c5a:	f042 0501 	orr.w	r5, r2, #1
 8003c5e:	f8c4 e004 	str.w	lr, [r4, #4]
 8003c62:	4630      	mov	r0, r6
 8003c64:	e9c7 1104 	strd	r1, r1, [r7, #16]
 8003c68:	e9c1 cc02 	strd	ip, ip, [r1, #8]
 8003c6c:	604d      	str	r5, [r1, #4]
 8003c6e:	50e2      	str	r2, [r4, r3]
 8003c70:	f000 f958 	bl	8003f24 <__malloc_unlock>
 8003c74:	3408      	adds	r4, #8
 8003c76:	e671      	b.n	800395c <_malloc_r+0x50>
 8003c78:	20000c38 	.word	0x20000c38
 8003c7c:	20000c40 	.word	0x20000c40
 8003c80:	200011e8 	.word	0x200011e8
 8003c84:	08e8      	lsrs	r0, r5, #3
 8003c86:	f105 0308 	add.w	r3, r5, #8
 8003c8a:	e64f      	b.n	800392c <_malloc_r+0x20>
 8003c8c:	f108 0801 	add.w	r8, r8, #1
 8003c90:	f018 0f03 	tst.w	r8, #3
 8003c94:	f10e 0e08 	add.w	lr, lr, #8
 8003c98:	f47f aed0 	bne.w	8003a3c <_malloc_r+0x130>
 8003c9c:	e052      	b.n	8003d44 <_malloc_r+0x438>
 8003c9e:	4419      	add	r1, r3
 8003ca0:	461c      	mov	r4, r3
 8003ca2:	684a      	ldr	r2, [r1, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	f854 5f08 	ldr.w	r5, [r4, #8]!
 8003caa:	f042 0201 	orr.w	r2, r2, #1
 8003cae:	604a      	str	r2, [r1, #4]
 8003cb0:	4630      	mov	r0, r6
 8003cb2:	60eb      	str	r3, [r5, #12]
 8003cb4:	609d      	str	r5, [r3, #8]
 8003cb6:	f000 f935 	bl	8003f24 <__malloc_unlock>
 8003cba:	e64f      	b.n	800395c <_malloc_r+0x50>
 8003cbc:	0a5a      	lsrs	r2, r3, #9
 8003cbe:	2a04      	cmp	r2, #4
 8003cc0:	d935      	bls.n	8003d2e <_malloc_r+0x422>
 8003cc2:	2a14      	cmp	r2, #20
 8003cc4:	d87f      	bhi.n	8003dc6 <_malloc_r+0x4ba>
 8003cc6:	f102 015c 	add.w	r1, r2, #92	; 0x5c
 8003cca:	00c9      	lsls	r1, r1, #3
 8003ccc:	325b      	adds	r2, #91	; 0x5b
 8003cce:	eb07 0e01 	add.w	lr, r7, r1
 8003cd2:	5879      	ldr	r1, [r7, r1]
 8003cd4:	f1ae 0e08 	sub.w	lr, lr, #8
 8003cd8:	458e      	cmp	lr, r1
 8003cda:	d058      	beq.n	8003d8e <_malloc_r+0x482>
 8003cdc:	684a      	ldr	r2, [r1, #4]
 8003cde:	f022 0203 	bic.w	r2, r2, #3
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d902      	bls.n	8003cec <_malloc_r+0x3e0>
 8003ce6:	6889      	ldr	r1, [r1, #8]
 8003ce8:	458e      	cmp	lr, r1
 8003cea:	d1f7      	bne.n	8003cdc <_malloc_r+0x3d0>
 8003cec:	f8d1 e00c 	ldr.w	lr, [r1, #12]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	e9c4 1e02 	strd	r1, lr, [r4, #8]
 8003cf6:	f8ce 4008 	str.w	r4, [lr, #8]
 8003cfa:	60cc      	str	r4, [r1, #12]
 8003cfc:	e68c      	b.n	8003a18 <_malloc_r+0x10c>
 8003cfe:	f103 005c 	add.w	r0, r3, #92	; 0x5c
 8003d02:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
 8003d06:	00c3      	lsls	r3, r0, #3
 8003d08:	e645      	b.n	8003996 <_malloc_r+0x8a>
 8003d0a:	42bc      	cmp	r4, r7
 8003d0c:	d07e      	beq.n	8003e0c <_malloc_r+0x500>
 8003d0e:	68bc      	ldr	r4, [r7, #8]
 8003d10:	6862      	ldr	r2, [r4, #4]
 8003d12:	f022 0203 	bic.w	r2, r2, #3
 8003d16:	4295      	cmp	r5, r2
 8003d18:	eba2 0305 	sub.w	r3, r2, r5
 8003d1c:	d802      	bhi.n	8003d24 <_malloc_r+0x418>
 8003d1e:	2b0f      	cmp	r3, #15
 8003d20:	f73f af5a 	bgt.w	8003bd8 <_malloc_r+0x2cc>
 8003d24:	4630      	mov	r0, r6
 8003d26:	f000 f8fd 	bl	8003f24 <__malloc_unlock>
 8003d2a:	2400      	movs	r4, #0
 8003d2c:	e616      	b.n	800395c <_malloc_r+0x50>
 8003d2e:	099a      	lsrs	r2, r3, #6
 8003d30:	f102 0139 	add.w	r1, r2, #57	; 0x39
 8003d34:	00c9      	lsls	r1, r1, #3
 8003d36:	3238      	adds	r2, #56	; 0x38
 8003d38:	e7c9      	b.n	8003cce <_malloc_r+0x3c2>
 8003d3a:	f8d9 9000 	ldr.w	r9, [r9]
 8003d3e:	4599      	cmp	r9, r3
 8003d40:	f040 8095 	bne.w	8003e6e <_malloc_r+0x562>
 8003d44:	f010 0f03 	tst.w	r0, #3
 8003d48:	f1a9 0308 	sub.w	r3, r9, #8
 8003d4c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
 8003d50:	d1f3      	bne.n	8003d3a <_malloc_r+0x42e>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	ea23 0304 	bic.w	r3, r3, r4
 8003d58:	607b      	str	r3, [r7, #4]
 8003d5a:	0064      	lsls	r4, r4, #1
 8003d5c:	429c      	cmp	r4, r3
 8003d5e:	f63f aeac 	bhi.w	8003aba <_malloc_r+0x1ae>
 8003d62:	b91c      	cbnz	r4, 8003d6c <_malloc_r+0x460>
 8003d64:	e6a9      	b.n	8003aba <_malloc_r+0x1ae>
 8003d66:	0064      	lsls	r4, r4, #1
 8003d68:	f108 0804 	add.w	r8, r8, #4
 8003d6c:	421c      	tst	r4, r3
 8003d6e:	d0fa      	beq.n	8003d66 <_malloc_r+0x45a>
 8003d70:	4640      	mov	r0, r8
 8003d72:	e65f      	b.n	8003a34 <_malloc_r+0x128>
 8003d74:	f108 0810 	add.w	r8, r8, #16
 8003d78:	e6bd      	b.n	8003af6 <_malloc_r+0x1ea>
 8003d7a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003d7e:	d836      	bhi.n	8003dee <_malloc_r+0x4e2>
 8003d80:	0beb      	lsrs	r3, r5, #15
 8003d82:	f103 0078 	add.w	r0, r3, #120	; 0x78
 8003d86:	f103 0c77 	add.w	ip, r3, #119	; 0x77
 8003d8a:	00c3      	lsls	r3, r0, #3
 8003d8c:	e603      	b.n	8003996 <_malloc_r+0x8a>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	1092      	asrs	r2, r2, #2
 8003d92:	f04f 0801 	mov.w	r8, #1
 8003d96:	fa08 f202 	lsl.w	r2, r8, r2
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e7a8      	b.n	8003cf2 <_malloc_r+0x3e6>
 8003da0:	44d8      	add	r8, fp
 8003da2:	f1c8 0200 	rsb	r2, r8, #0
 8003da6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8003daa:	4611      	mov	r1, r2
 8003dac:	4630      	mov	r0, r6
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	9200      	str	r2, [sp, #0]
 8003db2:	f003 fb65 	bl	8007480 <_sbrk_r>
 8003db6:	1c43      	adds	r3, r0, #1
 8003db8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003dbc:	f47f aed6 	bne.w	8003b6c <_malloc_r+0x260>
 8003dc0:	4640      	mov	r0, r8
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	e6d2      	b.n	8003b6c <_malloc_r+0x260>
 8003dc6:	2a54      	cmp	r2, #84	; 0x54
 8003dc8:	d827      	bhi.n	8003e1a <_malloc_r+0x50e>
 8003dca:	0b1a      	lsrs	r2, r3, #12
 8003dcc:	f102 016f 	add.w	r1, r2, #111	; 0x6f
 8003dd0:	00c9      	lsls	r1, r1, #3
 8003dd2:	326e      	adds	r2, #110	; 0x6e
 8003dd4:	e77b      	b.n	8003cce <_malloc_r+0x3c2>
 8003dd6:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f47f aea1 	bne.w	8003b22 <_malloc_r+0x216>
 8003de0:	eb09 0308 	add.w	r3, r9, r8
 8003de4:	68ba      	ldr	r2, [r7, #8]
 8003de6:	f043 0301 	orr.w	r3, r3, #1
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e6e3      	b.n	8003bb6 <_malloc_r+0x2aa>
 8003dee:	f240 5254 	movw	r2, #1364	; 0x554
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d81a      	bhi.n	8003e2c <_malloc_r+0x520>
 8003df6:	0cab      	lsrs	r3, r5, #18
 8003df8:	f103 007d 	add.w	r0, r3, #125	; 0x7d
 8003dfc:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
 8003e00:	00c3      	lsls	r3, r0, #3
 8003e02:	e5c8      	b.n	8003996 <_malloc_r+0x8a>
 8003e04:	2301      	movs	r3, #1
 8003e06:	f8cb 3004 	str.w	r3, [fp, #4]
 8003e0a:	e78b      	b.n	8003d24 <_malloc_r+0x418>
 8003e0c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8003e10:	eb08 0102 	add.w	r1, r8, r2
 8003e14:	f8ca 1004 	str.w	r1, [sl, #4]
 8003e18:	e683      	b.n	8003b22 <_malloc_r+0x216>
 8003e1a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003e1e:	d818      	bhi.n	8003e52 <_malloc_r+0x546>
 8003e20:	0bda      	lsrs	r2, r3, #15
 8003e22:	f102 0178 	add.w	r1, r2, #120	; 0x78
 8003e26:	00c9      	lsls	r1, r1, #3
 8003e28:	3277      	adds	r2, #119	; 0x77
 8003e2a:	e750      	b.n	8003cce <_malloc_r+0x3c2>
 8003e2c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8003e30:	207f      	movs	r0, #127	; 0x7f
 8003e32:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
 8003e36:	e5ae      	b.n	8003996 <_malloc_r+0x8a>
 8003e38:	3b08      	subs	r3, #8
 8003e3a:	eb08 0003 	add.w	r0, r8, r3
 8003e3e:	2200      	movs	r2, #0
 8003e40:	e694      	b.n	8003b6c <_malloc_r+0x260>
 8003e42:	f104 0108 	add.w	r1, r4, #8
 8003e46:	4630      	mov	r0, r6
 8003e48:	f001 fb1c 	bl	8005484 <_free_r>
 8003e4c:	f8da 1004 	ldr.w	r1, [sl, #4]
 8003e50:	e6b1      	b.n	8003bb6 <_malloc_r+0x2aa>
 8003e52:	f240 5154 	movw	r1, #1364	; 0x554
 8003e56:	428a      	cmp	r2, r1
 8003e58:	d805      	bhi.n	8003e66 <_malloc_r+0x55a>
 8003e5a:	0c9a      	lsrs	r2, r3, #18
 8003e5c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
 8003e60:	00c9      	lsls	r1, r1, #3
 8003e62:	327c      	adds	r2, #124	; 0x7c
 8003e64:	e733      	b.n	8003cce <_malloc_r+0x3c2>
 8003e66:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 8003e6a:	227e      	movs	r2, #126	; 0x7e
 8003e6c:	e72f      	b.n	8003cce <_malloc_r+0x3c2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	e773      	b.n	8003d5a <_malloc_r+0x44e>
 8003e72:	bf00      	nop
	...

08003e80 <memchr>:
 8003e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003e84:	2a10      	cmp	r2, #16
 8003e86:	db2b      	blt.n	8003ee0 <memchr+0x60>
 8003e88:	f010 0f07 	tst.w	r0, #7
 8003e8c:	d008      	beq.n	8003ea0 <memchr+0x20>
 8003e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003e92:	3a01      	subs	r2, #1
 8003e94:	428b      	cmp	r3, r1
 8003e96:	d02d      	beq.n	8003ef4 <memchr+0x74>
 8003e98:	f010 0f07 	tst.w	r0, #7
 8003e9c:	b342      	cbz	r2, 8003ef0 <memchr+0x70>
 8003e9e:	d1f6      	bne.n	8003e8e <memchr+0xe>
 8003ea0:	b4f0      	push	{r4, r5, r6, r7}
 8003ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8003ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8003eaa:	f022 0407 	bic.w	r4, r2, #7
 8003eae:	f07f 0700 	mvns.w	r7, #0
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8003eb8:	3c08      	subs	r4, #8
 8003eba:	ea85 0501 	eor.w	r5, r5, r1
 8003ebe:	ea86 0601 	eor.w	r6, r6, r1
 8003ec2:	fa85 f547 	uadd8	r5, r5, r7
 8003ec6:	faa3 f587 	sel	r5, r3, r7
 8003eca:	fa86 f647 	uadd8	r6, r6, r7
 8003ece:	faa5 f687 	sel	r6, r5, r7
 8003ed2:	b98e      	cbnz	r6, 8003ef8 <memchr+0x78>
 8003ed4:	d1ee      	bne.n	8003eb4 <memchr+0x34>
 8003ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8003edc:	f002 0207 	and.w	r2, r2, #7
 8003ee0:	b132      	cbz	r2, 8003ef0 <memchr+0x70>
 8003ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003ee6:	3a01      	subs	r2, #1
 8003ee8:	ea83 0301 	eor.w	r3, r3, r1
 8003eec:	b113      	cbz	r3, 8003ef4 <memchr+0x74>
 8003eee:	d1f8      	bne.n	8003ee2 <memchr+0x62>
 8003ef0:	2000      	movs	r0, #0
 8003ef2:	4770      	bx	lr
 8003ef4:	3801      	subs	r0, #1
 8003ef6:	4770      	bx	lr
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	bf06      	itte	eq
 8003efc:	4635      	moveq	r5, r6
 8003efe:	3803      	subeq	r0, #3
 8003f00:	3807      	subne	r0, #7
 8003f02:	f015 0f01 	tst.w	r5, #1
 8003f06:	d107      	bne.n	8003f18 <memchr+0x98>
 8003f08:	3001      	adds	r0, #1
 8003f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8003f0e:	bf02      	ittt	eq
 8003f10:	3001      	addeq	r0, #1
 8003f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8003f16:	3001      	addeq	r0, #1
 8003f18:	bcf0      	pop	{r4, r5, r6, r7}
 8003f1a:	3801      	subs	r0, #1
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop

08003f20 <__malloc_lock>:
 8003f20:	4770      	bx	lr
 8003f22:	bf00      	nop

08003f24 <__malloc_unlock>:
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop

08003f28 <_Balloc>:
 8003f28:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f2a:	b570      	push	{r4, r5, r6, lr}
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	460c      	mov	r4, r1
 8003f30:	b14b      	cbz	r3, 8003f46 <_Balloc+0x1e>
 8003f32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8003f36:	b180      	cbz	r0, 8003f5a <_Balloc+0x32>
 8003f38:	6802      	ldr	r2, [r0, #0]
 8003f3a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8003f44:	bd70      	pop	{r4, r5, r6, pc}
 8003f46:	2221      	movs	r2, #33	; 0x21
 8003f48:	2104      	movs	r1, #4
 8003f4a:	f001 fa17 	bl	800537c <_calloc_r>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	64e8      	str	r0, [r5, #76]	; 0x4c
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d1ed      	bne.n	8003f32 <_Balloc+0xa>
 8003f56:	2000      	movs	r0, #0
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f604 	lsl.w	r6, r1, r4
 8003f60:	1d72      	adds	r2, r6, #5
 8003f62:	4628      	mov	r0, r5
 8003f64:	0092      	lsls	r2, r2, #2
 8003f66:	f001 fa09 	bl	800537c <_calloc_r>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d0f3      	beq.n	8003f56 <_Balloc+0x2e>
 8003f6e:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8003f72:	e7e4      	b.n	8003f3e <_Balloc+0x16>

08003f74 <_Bfree>:
 8003f74:	b131      	cbz	r1, 8003f84 <_Bfree+0x10>
 8003f76:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003f78:	684a      	ldr	r2, [r1, #4]
 8003f7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003f7e:	6008      	str	r0, [r1, #0]
 8003f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f84:	4770      	bx	lr
 8003f86:	bf00      	nop

08003f88 <__multadd>:
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8a:	690c      	ldr	r4, [r1, #16]
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	460d      	mov	r5, r1
 8003f90:	4606      	mov	r6, r0
 8003f92:	f101 0c14 	add.w	ip, r1, #20
 8003f96:	2700      	movs	r7, #0
 8003f98:	f8dc 0000 	ldr.w	r0, [ip]
 8003f9c:	b281      	uxth	r1, r0
 8003f9e:	fb02 3301 	mla	r3, r2, r1, r3
 8003fa2:	0c01      	lsrs	r1, r0, #16
 8003fa4:	0c18      	lsrs	r0, r3, #16
 8003fa6:	fb02 0101 	mla	r1, r2, r1, r0
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	3701      	adds	r7, #1
 8003fae:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8003fb2:	42bc      	cmp	r4, r7
 8003fb4:	f84c 3b04 	str.w	r3, [ip], #4
 8003fb8:	ea4f 4311 	mov.w	r3, r1, lsr #16
 8003fbc:	dcec      	bgt.n	8003f98 <__multadd+0x10>
 8003fbe:	b13b      	cbz	r3, 8003fd0 <__multadd+0x48>
 8003fc0:	68aa      	ldr	r2, [r5, #8]
 8003fc2:	42a2      	cmp	r2, r4
 8003fc4:	dd07      	ble.n	8003fd6 <__multadd+0x4e>
 8003fc6:	eb05 0284 	add.w	r2, r5, r4, lsl #2
 8003fca:	3401      	adds	r4, #1
 8003fcc:	6153      	str	r3, [r2, #20]
 8003fce:	612c      	str	r4, [r5, #16]
 8003fd0:	4628      	mov	r0, r5
 8003fd2:	b003      	add	sp, #12
 8003fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fd6:	6869      	ldr	r1, [r5, #4]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	3101      	adds	r1, #1
 8003fdc:	4630      	mov	r0, r6
 8003fde:	f7ff ffa3 	bl	8003f28 <_Balloc>
 8003fe2:	692a      	ldr	r2, [r5, #16]
 8003fe4:	3202      	adds	r2, #2
 8003fe6:	f105 010c 	add.w	r1, r5, #12
 8003fea:	4607      	mov	r7, r0
 8003fec:	0092      	lsls	r2, r2, #2
 8003fee:	300c      	adds	r0, #12
 8003ff0:	f7fd f91a 	bl	8001228 <memcpy>
 8003ff4:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
 8003ff6:	6869      	ldr	r1, [r5, #4]
 8003ff8:	9b01      	ldr	r3, [sp, #4]
 8003ffa:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
 8003ffe:	6028      	str	r0, [r5, #0]
 8004000:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
 8004004:	463d      	mov	r5, r7
 8004006:	e7de      	b.n	8003fc6 <__multadd+0x3e>

08004008 <__s2b>:
 8004008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800400c:	4c23      	ldr	r4, [pc, #140]	; (800409c <__s2b+0x94>)
 800400e:	9d08      	ldr	r5, [sp, #32]
 8004010:	461e      	mov	r6, r3
 8004012:	3308      	adds	r3, #8
 8004014:	fb84 4c03 	smull	r4, ip, r4, r3
 8004018:	17db      	asrs	r3, r3, #31
 800401a:	ebc3 0c6c 	rsb	ip, r3, ip, asr #1
 800401e:	f1bc 0f01 	cmp.w	ip, #1
 8004022:	4607      	mov	r7, r0
 8004024:	460c      	mov	r4, r1
 8004026:	4690      	mov	r8, r2
 8004028:	dd35      	ble.n	8004096 <__s2b+0x8e>
 800402a:	2301      	movs	r3, #1
 800402c:	2100      	movs	r1, #0
 800402e:	005b      	lsls	r3, r3, #1
 8004030:	459c      	cmp	ip, r3
 8004032:	f101 0101 	add.w	r1, r1, #1
 8004036:	dcfa      	bgt.n	800402e <__s2b+0x26>
 8004038:	4638      	mov	r0, r7
 800403a:	f7ff ff75 	bl	8003f28 <_Balloc>
 800403e:	2301      	movs	r3, #1
 8004040:	f1b8 0f09 	cmp.w	r8, #9
 8004044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004048:	dd21      	ble.n	800408e <__s2b+0x86>
 800404a:	f104 0909 	add.w	r9, r4, #9
 800404e:	464d      	mov	r5, r9
 8004050:	4444      	add	r4, r8
 8004052:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004056:	4601      	mov	r1, r0
 8004058:	3b30      	subs	r3, #48	; 0x30
 800405a:	220a      	movs	r2, #10
 800405c:	4638      	mov	r0, r7
 800405e:	f7ff ff93 	bl	8003f88 <__multadd>
 8004062:	42ac      	cmp	r4, r5
 8004064:	d1f5      	bne.n	8004052 <__s2b+0x4a>
 8004066:	eb09 0408 	add.w	r4, r9, r8
 800406a:	3c08      	subs	r4, #8
 800406c:	4546      	cmp	r6, r8
 800406e:	dd0c      	ble.n	800408a <__s2b+0x82>
 8004070:	eba6 0608 	sub.w	r6, r6, r8
 8004074:	4426      	add	r6, r4
 8004076:	f814 3b01 	ldrb.w	r3, [r4], #1
 800407a:	4601      	mov	r1, r0
 800407c:	3b30      	subs	r3, #48	; 0x30
 800407e:	220a      	movs	r2, #10
 8004080:	4638      	mov	r0, r7
 8004082:	f7ff ff81 	bl	8003f88 <__multadd>
 8004086:	42a6      	cmp	r6, r4
 8004088:	d1f5      	bne.n	8004076 <__s2b+0x6e>
 800408a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800408e:	340a      	adds	r4, #10
 8004090:	f04f 0809 	mov.w	r8, #9
 8004094:	e7ea      	b.n	800406c <__s2b+0x64>
 8004096:	2100      	movs	r1, #0
 8004098:	e7ce      	b.n	8004038 <__s2b+0x30>
 800409a:	bf00      	nop
 800409c:	38e38e39 	.word	0x38e38e39

080040a0 <__hi0bits>:
 80040a0:	0c02      	lsrs	r2, r0, #16
 80040a2:	0412      	lsls	r2, r2, #16
 80040a4:	4603      	mov	r3, r0
 80040a6:	b9c2      	cbnz	r2, 80040da <__hi0bits+0x3a>
 80040a8:	0403      	lsls	r3, r0, #16
 80040aa:	2010      	movs	r0, #16
 80040ac:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80040b0:	bf04      	itt	eq
 80040b2:	021b      	lsleq	r3, r3, #8
 80040b4:	3008      	addeq	r0, #8
 80040b6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80040ba:	bf04      	itt	eq
 80040bc:	011b      	lsleq	r3, r3, #4
 80040be:	3004      	addeq	r0, #4
 80040c0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80040c4:	bf04      	itt	eq
 80040c6:	009b      	lsleq	r3, r3, #2
 80040c8:	3002      	addeq	r0, #2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	db04      	blt.n	80040d8 <__hi0bits+0x38>
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	d501      	bpl.n	80040d6 <__hi0bits+0x36>
 80040d2:	3001      	adds	r0, #1
 80040d4:	4770      	bx	lr
 80040d6:	2020      	movs	r0, #32
 80040d8:	4770      	bx	lr
 80040da:	2000      	movs	r0, #0
 80040dc:	e7e6      	b.n	80040ac <__hi0bits+0xc>
 80040de:	bf00      	nop

080040e0 <__lo0bits>:
 80040e0:	6803      	ldr	r3, [r0, #0]
 80040e2:	f013 0207 	ands.w	r2, r3, #7
 80040e6:	4601      	mov	r1, r0
 80040e8:	d007      	beq.n	80040fa <__lo0bits+0x1a>
 80040ea:	07da      	lsls	r2, r3, #31
 80040ec:	d41f      	bmi.n	800412e <__lo0bits+0x4e>
 80040ee:	0798      	lsls	r0, r3, #30
 80040f0:	d51f      	bpl.n	8004132 <__lo0bits+0x52>
 80040f2:	085b      	lsrs	r3, r3, #1
 80040f4:	600b      	str	r3, [r1, #0]
 80040f6:	2001      	movs	r0, #1
 80040f8:	4770      	bx	lr
 80040fa:	b298      	uxth	r0, r3
 80040fc:	b1a0      	cbz	r0, 8004128 <__lo0bits+0x48>
 80040fe:	4610      	mov	r0, r2
 8004100:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004104:	bf04      	itt	eq
 8004106:	0a1b      	lsreq	r3, r3, #8
 8004108:	3008      	addeq	r0, #8
 800410a:	071a      	lsls	r2, r3, #28
 800410c:	bf04      	itt	eq
 800410e:	091b      	lsreq	r3, r3, #4
 8004110:	3004      	addeq	r0, #4
 8004112:	079a      	lsls	r2, r3, #30
 8004114:	bf04      	itt	eq
 8004116:	089b      	lsreq	r3, r3, #2
 8004118:	3002      	addeq	r0, #2
 800411a:	07da      	lsls	r2, r3, #31
 800411c:	d402      	bmi.n	8004124 <__lo0bits+0x44>
 800411e:	085b      	lsrs	r3, r3, #1
 8004120:	d00b      	beq.n	800413a <__lo0bits+0x5a>
 8004122:	3001      	adds	r0, #1
 8004124:	600b      	str	r3, [r1, #0]
 8004126:	4770      	bx	lr
 8004128:	0c1b      	lsrs	r3, r3, #16
 800412a:	2010      	movs	r0, #16
 800412c:	e7e8      	b.n	8004100 <__lo0bits+0x20>
 800412e:	2000      	movs	r0, #0
 8004130:	4770      	bx	lr
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	600b      	str	r3, [r1, #0]
 8004136:	2002      	movs	r0, #2
 8004138:	4770      	bx	lr
 800413a:	2020      	movs	r0, #32
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop

08004140 <__i2b>:
 8004140:	b510      	push	{r4, lr}
 8004142:	460c      	mov	r4, r1
 8004144:	2101      	movs	r1, #1
 8004146:	f7ff feef 	bl	8003f28 <_Balloc>
 800414a:	2201      	movs	r2, #1
 800414c:	e9c0 2404 	strd	r2, r4, [r0, #16]
 8004150:	bd10      	pop	{r4, pc}
 8004152:	bf00      	nop

08004154 <__multiply>:
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	690e      	ldr	r6, [r1, #16]
 800415a:	6914      	ldr	r4, [r2, #16]
 800415c:	42a6      	cmp	r6, r4
 800415e:	b083      	sub	sp, #12
 8004160:	460f      	mov	r7, r1
 8004162:	4615      	mov	r5, r2
 8004164:	da04      	bge.n	8004170 <__multiply+0x1c>
 8004166:	4632      	mov	r2, r6
 8004168:	462f      	mov	r7, r5
 800416a:	4626      	mov	r6, r4
 800416c:	460d      	mov	r5, r1
 800416e:	4614      	mov	r4, r2
 8004170:	e9d7 1301 	ldrd	r1, r3, [r7, #4]
 8004174:	eb06 0804 	add.w	r8, r6, r4
 8004178:	4543      	cmp	r3, r8
 800417a:	bfb8      	it	lt
 800417c:	3101      	addlt	r1, #1
 800417e:	f7ff fed3 	bl	8003f28 <_Balloc>
 8004182:	f100 0914 	add.w	r9, r0, #20
 8004186:	eb09 0e88 	add.w	lr, r9, r8, lsl #2
 800418a:	45f1      	cmp	r9, lr
 800418c:	9000      	str	r0, [sp, #0]
 800418e:	d205      	bcs.n	800419c <__multiply+0x48>
 8004190:	464b      	mov	r3, r9
 8004192:	2200      	movs	r2, #0
 8004194:	f843 2b04 	str.w	r2, [r3], #4
 8004198:	459e      	cmp	lr, r3
 800419a:	d8fb      	bhi.n	8004194 <__multiply+0x40>
 800419c:	f105 0a14 	add.w	sl, r5, #20
 80041a0:	eb0a 0484 	add.w	r4, sl, r4, lsl #2
 80041a4:	f107 0314 	add.w	r3, r7, #20
 80041a8:	45a2      	cmp	sl, r4
 80041aa:	eb03 0c86 	add.w	ip, r3, r6, lsl #2
 80041ae:	d261      	bcs.n	8004274 <__multiply+0x120>
 80041b0:	1b64      	subs	r4, r4, r5
 80041b2:	3c15      	subs	r4, #21
 80041b4:	f024 0403 	bic.w	r4, r4, #3
 80041b8:	f8cd e004 	str.w	lr, [sp, #4]
 80041bc:	44a2      	add	sl, r4
 80041be:	f105 0210 	add.w	r2, r5, #16
 80041c2:	469e      	mov	lr, r3
 80041c4:	e005      	b.n	80041d2 <__multiply+0x7e>
 80041c6:	0c2d      	lsrs	r5, r5, #16
 80041c8:	d12b      	bne.n	8004222 <__multiply+0xce>
 80041ca:	4592      	cmp	sl, r2
 80041cc:	f109 0904 	add.w	r9, r9, #4
 80041d0:	d04e      	beq.n	8004270 <__multiply+0x11c>
 80041d2:	f852 5f04 	ldr.w	r5, [r2, #4]!
 80041d6:	fa1f fb85 	uxth.w	fp, r5
 80041da:	f1bb 0f00 	cmp.w	fp, #0
 80041de:	d0f2      	beq.n	80041c6 <__multiply+0x72>
 80041e0:	4677      	mov	r7, lr
 80041e2:	464e      	mov	r6, r9
 80041e4:	2000      	movs	r0, #0
 80041e6:	e000      	b.n	80041ea <__multiply+0x96>
 80041e8:	4626      	mov	r6, r4
 80041ea:	f857 1b04 	ldr.w	r1, [r7], #4
 80041ee:	6834      	ldr	r4, [r6, #0]
 80041f0:	b28b      	uxth	r3, r1
 80041f2:	b2a5      	uxth	r5, r4
 80041f4:	0c09      	lsrs	r1, r1, #16
 80041f6:	0c24      	lsrs	r4, r4, #16
 80041f8:	fb0b 5303 	mla	r3, fp, r3, r5
 80041fc:	4403      	add	r3, r0
 80041fe:	fb0b 4001 	mla	r0, fp, r1, r4
 8004202:	eb00 4013 	add.w	r0, r0, r3, lsr #16
 8004206:	4634      	mov	r4, r6
 8004208:	b29b      	uxth	r3, r3
 800420a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800420e:	45bc      	cmp	ip, r7
 8004210:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8004214:	f844 3b04 	str.w	r3, [r4], #4
 8004218:	d8e6      	bhi.n	80041e8 <__multiply+0x94>
 800421a:	6070      	str	r0, [r6, #4]
 800421c:	6815      	ldr	r5, [r2, #0]
 800421e:	0c2d      	lsrs	r5, r5, #16
 8004220:	d0d3      	beq.n	80041ca <__multiply+0x76>
 8004222:	f8d9 3000 	ldr.w	r3, [r9]
 8004226:	4676      	mov	r6, lr
 8004228:	4618      	mov	r0, r3
 800422a:	46cb      	mov	fp, r9
 800422c:	2100      	movs	r1, #0
 800422e:	e000      	b.n	8004232 <__multiply+0xde>
 8004230:	46a3      	mov	fp, r4
 8004232:	8834      	ldrh	r4, [r6, #0]
 8004234:	0c00      	lsrs	r0, r0, #16
 8004236:	fb05 0004 	mla	r0, r5, r4, r0
 800423a:	4401      	add	r1, r0
 800423c:	b29b      	uxth	r3, r3
 800423e:	465c      	mov	r4, fp
 8004240:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004244:	f844 3b04 	str.w	r3, [r4], #4
 8004248:	f856 3b04 	ldr.w	r3, [r6], #4
 800424c:	f8db 0004 	ldr.w	r0, [fp, #4]
 8004250:	0c1b      	lsrs	r3, r3, #16
 8004252:	b287      	uxth	r7, r0
 8004254:	fb05 7303 	mla	r3, r5, r3, r7
 8004258:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 800425c:	45b4      	cmp	ip, r6
 800425e:	ea4f 4113 	mov.w	r1, r3, lsr #16
 8004262:	d8e5      	bhi.n	8004230 <__multiply+0xdc>
 8004264:	4592      	cmp	sl, r2
 8004266:	f8cb 3004 	str.w	r3, [fp, #4]
 800426a:	f109 0904 	add.w	r9, r9, #4
 800426e:	d1b0      	bne.n	80041d2 <__multiply+0x7e>
 8004270:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004274:	f1b8 0f00 	cmp.w	r8, #0
 8004278:	dd0b      	ble.n	8004292 <__multiply+0x13e>
 800427a:	f85e 3c04 	ldr.w	r3, [lr, #-4]
 800427e:	f1ae 0e04 	sub.w	lr, lr, #4
 8004282:	b11b      	cbz	r3, 800428c <__multiply+0x138>
 8004284:	e005      	b.n	8004292 <__multiply+0x13e>
 8004286:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800428a:	b913      	cbnz	r3, 8004292 <__multiply+0x13e>
 800428c:	f1b8 0801 	subs.w	r8, r8, #1
 8004290:	d1f9      	bne.n	8004286 <__multiply+0x132>
 8004292:	9800      	ldr	r0, [sp, #0]
 8004294:	f8c0 8010 	str.w	r8, [r0, #16]
 8004298:	b003      	add	sp, #12
 800429a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800429e:	bf00      	nop

080042a0 <__pow5mult>:
 80042a0:	f012 0303 	ands.w	r3, r2, #3
 80042a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042a8:	4614      	mov	r4, r2
 80042aa:	4607      	mov	r7, r0
 80042ac:	d12e      	bne.n	800430c <__pow5mult+0x6c>
 80042ae:	460d      	mov	r5, r1
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	d01c      	beq.n	80042ee <__pow5mult+0x4e>
 80042b4:	6cbe      	ldr	r6, [r7, #72]	; 0x48
 80042b6:	b396      	cbz	r6, 800431e <__pow5mult+0x7e>
 80042b8:	07e3      	lsls	r3, r4, #31
 80042ba:	f04f 0800 	mov.w	r8, #0
 80042be:	d406      	bmi.n	80042ce <__pow5mult+0x2e>
 80042c0:	1064      	asrs	r4, r4, #1
 80042c2:	d014      	beq.n	80042ee <__pow5mult+0x4e>
 80042c4:	6830      	ldr	r0, [r6, #0]
 80042c6:	b1a8      	cbz	r0, 80042f4 <__pow5mult+0x54>
 80042c8:	4606      	mov	r6, r0
 80042ca:	07e3      	lsls	r3, r4, #31
 80042cc:	d5f8      	bpl.n	80042c0 <__pow5mult+0x20>
 80042ce:	4632      	mov	r2, r6
 80042d0:	4629      	mov	r1, r5
 80042d2:	4638      	mov	r0, r7
 80042d4:	f7ff ff3e 	bl	8004154 <__multiply>
 80042d8:	b1b5      	cbz	r5, 8004308 <__pow5mult+0x68>
 80042da:	686a      	ldr	r2, [r5, #4]
 80042dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042de:	1064      	asrs	r4, r4, #1
 80042e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80042e4:	6029      	str	r1, [r5, #0]
 80042e6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80042ea:	4605      	mov	r5, r0
 80042ec:	d1ea      	bne.n	80042c4 <__pow5mult+0x24>
 80042ee:	4628      	mov	r0, r5
 80042f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80042f4:	4632      	mov	r2, r6
 80042f6:	4631      	mov	r1, r6
 80042f8:	4638      	mov	r0, r7
 80042fa:	f7ff ff2b 	bl	8004154 <__multiply>
 80042fe:	6030      	str	r0, [r6, #0]
 8004300:	f8c0 8000 	str.w	r8, [r0]
 8004304:	4606      	mov	r6, r0
 8004306:	e7e0      	b.n	80042ca <__pow5mult+0x2a>
 8004308:	4605      	mov	r5, r0
 800430a:	e7d9      	b.n	80042c0 <__pow5mult+0x20>
 800430c:	3b01      	subs	r3, #1
 800430e:	4a0b      	ldr	r2, [pc, #44]	; (800433c <__pow5mult+0x9c>)
 8004310:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004314:	2300      	movs	r3, #0
 8004316:	f7ff fe37 	bl	8003f88 <__multadd>
 800431a:	4605      	mov	r5, r0
 800431c:	e7c8      	b.n	80042b0 <__pow5mult+0x10>
 800431e:	2101      	movs	r1, #1
 8004320:	4638      	mov	r0, r7
 8004322:	f7ff fe01 	bl	8003f28 <_Balloc>
 8004326:	f240 2371 	movw	r3, #625	; 0x271
 800432a:	6143      	str	r3, [r0, #20]
 800432c:	2201      	movs	r2, #1
 800432e:	2300      	movs	r3, #0
 8004330:	6102      	str	r2, [r0, #16]
 8004332:	4606      	mov	r6, r0
 8004334:	64b8      	str	r0, [r7, #72]	; 0x48
 8004336:	6003      	str	r3, [r0, #0]
 8004338:	e7be      	b.n	80042b8 <__pow5mult+0x18>
 800433a:	bf00      	nop
 800433c:	0800ad98 	.word	0x0800ad98

08004340 <__lshift>:
 8004340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004344:	4691      	mov	r9, r2
 8004346:	690a      	ldr	r2, [r1, #16]
 8004348:	460e      	mov	r6, r1
 800434a:	ea4f 1469 	mov.w	r4, r9, asr #5
 800434e:	e9d1 1301 	ldrd	r1, r3, [r1, #4]
 8004352:	eb04 0802 	add.w	r8, r4, r2
 8004356:	f108 0501 	add.w	r5, r8, #1
 800435a:	429d      	cmp	r5, r3
 800435c:	4607      	mov	r7, r0
 800435e:	dd04      	ble.n	800436a <__lshift+0x2a>
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	429d      	cmp	r5, r3
 8004364:	f101 0101 	add.w	r1, r1, #1
 8004368:	dcfa      	bgt.n	8004360 <__lshift+0x20>
 800436a:	4638      	mov	r0, r7
 800436c:	f7ff fddc 	bl	8003f28 <_Balloc>
 8004370:	2c00      	cmp	r4, #0
 8004372:	f100 0314 	add.w	r3, r0, #20
 8004376:	dd37      	ble.n	80043e8 <__lshift+0xa8>
 8004378:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 800437c:	2200      	movs	r2, #0
 800437e:	f843 2b04 	str.w	r2, [r3], #4
 8004382:	428b      	cmp	r3, r1
 8004384:	d1fb      	bne.n	800437e <__lshift+0x3e>
 8004386:	6934      	ldr	r4, [r6, #16]
 8004388:	f106 0314 	add.w	r3, r6, #20
 800438c:	f019 091f 	ands.w	r9, r9, #31
 8004390:	eb03 0c84 	add.w	ip, r3, r4, lsl #2
 8004394:	d020      	beq.n	80043d8 <__lshift+0x98>
 8004396:	f1c9 0e20 	rsb	lr, r9, #32
 800439a:	2200      	movs	r2, #0
 800439c:	e000      	b.n	80043a0 <__lshift+0x60>
 800439e:	4651      	mov	r1, sl
 80043a0:	681c      	ldr	r4, [r3, #0]
 80043a2:	468a      	mov	sl, r1
 80043a4:	fa04 f409 	lsl.w	r4, r4, r9
 80043a8:	4314      	orrs	r4, r2
 80043aa:	f84a 4b04 	str.w	r4, [sl], #4
 80043ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80043b2:	4563      	cmp	r3, ip
 80043b4:	fa22 f20e 	lsr.w	r2, r2, lr
 80043b8:	d3f1      	bcc.n	800439e <__lshift+0x5e>
 80043ba:	604a      	str	r2, [r1, #4]
 80043bc:	b10a      	cbz	r2, 80043c2 <__lshift+0x82>
 80043be:	f108 0502 	add.w	r5, r8, #2
 80043c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c4:	6872      	ldr	r2, [r6, #4]
 80043c6:	3d01      	subs	r5, #1
 80043c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80043cc:	6105      	str	r5, [r0, #16]
 80043ce:	6031      	str	r1, [r6, #0]
 80043d0:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043d8:	3904      	subs	r1, #4
 80043da:	f853 2b04 	ldr.w	r2, [r3], #4
 80043de:	f841 2f04 	str.w	r2, [r1, #4]!
 80043e2:	459c      	cmp	ip, r3
 80043e4:	d8f9      	bhi.n	80043da <__lshift+0x9a>
 80043e6:	e7ec      	b.n	80043c2 <__lshift+0x82>
 80043e8:	4619      	mov	r1, r3
 80043ea:	e7cc      	b.n	8004386 <__lshift+0x46>

080043ec <__mcmp>:
 80043ec:	b430      	push	{r4, r5}
 80043ee:	690b      	ldr	r3, [r1, #16]
 80043f0:	4605      	mov	r5, r0
 80043f2:	6900      	ldr	r0, [r0, #16]
 80043f4:	1ac0      	subs	r0, r0, r3
 80043f6:	d10f      	bne.n	8004418 <__mcmp+0x2c>
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	3514      	adds	r5, #20
 80043fc:	3114      	adds	r1, #20
 80043fe:	4419      	add	r1, r3
 8004400:	442b      	add	r3, r5
 8004402:	e001      	b.n	8004408 <__mcmp+0x1c>
 8004404:	429d      	cmp	r5, r3
 8004406:	d207      	bcs.n	8004418 <__mcmp+0x2c>
 8004408:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 800440c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8004410:	4294      	cmp	r4, r2
 8004412:	d0f7      	beq.n	8004404 <__mcmp+0x18>
 8004414:	d302      	bcc.n	800441c <__mcmp+0x30>
 8004416:	2001      	movs	r0, #1
 8004418:	bc30      	pop	{r4, r5}
 800441a:	4770      	bx	lr
 800441c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004420:	e7fa      	b.n	8004418 <__mcmp+0x2c>
 8004422:	bf00      	nop

08004424 <__mdiff>:
 8004424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004428:	6913      	ldr	r3, [r2, #16]
 800442a:	690d      	ldr	r5, [r1, #16]
 800442c:	1aed      	subs	r5, r5, r3
 800442e:	2d00      	cmp	r5, #0
 8004430:	460e      	mov	r6, r1
 8004432:	4690      	mov	r8, r2
 8004434:	f101 0414 	add.w	r4, r1, #20
 8004438:	f102 0714 	add.w	r7, r2, #20
 800443c:	d114      	bne.n	8004468 <__mdiff+0x44>
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	18e2      	adds	r2, r4, r3
 8004442:	443b      	add	r3, r7
 8004444:	e001      	b.n	800444a <__mdiff+0x26>
 8004446:	42a2      	cmp	r2, r4
 8004448:	d959      	bls.n	80044fe <__mdiff+0xda>
 800444a:	f852 cd04 	ldr.w	ip, [r2, #-4]!
 800444e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8004452:	458c      	cmp	ip, r1
 8004454:	d0f7      	beq.n	8004446 <__mdiff+0x22>
 8004456:	d209      	bcs.n	800446c <__mdiff+0x48>
 8004458:	4622      	mov	r2, r4
 800445a:	4633      	mov	r3, r6
 800445c:	463c      	mov	r4, r7
 800445e:	4646      	mov	r6, r8
 8004460:	4617      	mov	r7, r2
 8004462:	4698      	mov	r8, r3
 8004464:	2501      	movs	r5, #1
 8004466:	e001      	b.n	800446c <__mdiff+0x48>
 8004468:	dbf6      	blt.n	8004458 <__mdiff+0x34>
 800446a:	2500      	movs	r5, #0
 800446c:	6871      	ldr	r1, [r6, #4]
 800446e:	f7ff fd5b 	bl	8003f28 <_Balloc>
 8004472:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8004476:	6936      	ldr	r6, [r6, #16]
 8004478:	60c5      	str	r5, [r0, #12]
 800447a:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
 800447e:	46bc      	mov	ip, r7
 8004480:	f100 0514 	add.w	r5, r0, #20
 8004484:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 8004488:	2300      	movs	r3, #0
 800448a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800448e:	f854 8b04 	ldr.w	r8, [r4], #4
 8004492:	b28a      	uxth	r2, r1
 8004494:	fa13 f388 	uxtah	r3, r3, r8
 8004498:	0c09      	lsrs	r1, r1, #16
 800449a:	1a9a      	subs	r2, r3, r2
 800449c:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
 80044a0:	eb03 4322 	add.w	r3, r3, r2, asr #16
 80044a4:	b292      	uxth	r2, r2
 80044a6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80044aa:	45e6      	cmp	lr, ip
 80044ac:	f845 2b04 	str.w	r2, [r5], #4
 80044b0:	ea4f 4323 	mov.w	r3, r3, asr #16
 80044b4:	d8e9      	bhi.n	800448a <__mdiff+0x66>
 80044b6:	42a7      	cmp	r7, r4
 80044b8:	d917      	bls.n	80044ea <__mdiff+0xc6>
 80044ba:	46ae      	mov	lr, r5
 80044bc:	46a4      	mov	ip, r4
 80044be:	f85c 2b04 	ldr.w	r2, [ip], #4
 80044c2:	fa13 f382 	uxtah	r3, r3, r2
 80044c6:	1419      	asrs	r1, r3, #16
 80044c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
 80044d2:	4567      	cmp	r7, ip
 80044d4:	f84e 2b04 	str.w	r2, [lr], #4
 80044d8:	ea4f 4321 	mov.w	r3, r1, asr #16
 80044dc:	d8ef      	bhi.n	80044be <__mdiff+0x9a>
 80044de:	43e4      	mvns	r4, r4
 80044e0:	4427      	add	r7, r4
 80044e2:	f027 0703 	bic.w	r7, r7, #3
 80044e6:	3704      	adds	r7, #4
 80044e8:	443d      	add	r5, r7
 80044ea:	3d04      	subs	r5, #4
 80044ec:	b922      	cbnz	r2, 80044f8 <__mdiff+0xd4>
 80044ee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80044f2:	3e01      	subs	r6, #1
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0fa      	beq.n	80044ee <__mdiff+0xca>
 80044f8:	6106      	str	r6, [r0, #16]
 80044fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044fe:	2100      	movs	r1, #0
 8004500:	f7ff fd12 	bl	8003f28 <_Balloc>
 8004504:	2201      	movs	r2, #1
 8004506:	2300      	movs	r3, #0
 8004508:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800450c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004510 <__ulp>:
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <__ulp+0x50>)
 8004512:	ee10 2a90 	vmov	r2, s1
 8004516:	401a      	ands	r2, r3
 8004518:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800451c:	2b00      	cmp	r3, #0
 800451e:	dd04      	ble.n	800452a <__ulp+0x1a>
 8004520:	2000      	movs	r0, #0
 8004522:	4619      	mov	r1, r3
 8004524:	ec41 0b10 	vmov	d0, r0, r1
 8004528:	4770      	bx	lr
 800452a:	425b      	negs	r3, r3
 800452c:	151b      	asrs	r3, r3, #20
 800452e:	2b13      	cmp	r3, #19
 8004530:	dd0d      	ble.n	800454e <__ulp+0x3e>
 8004532:	3b14      	subs	r3, #20
 8004534:	2b1e      	cmp	r3, #30
 8004536:	bfdd      	ittte	le
 8004538:	f1c3 031f 	rsble	r3, r3, #31
 800453c:	2201      	movle	r2, #1
 800453e:	fa02 f303 	lslle.w	r3, r2, r3
 8004542:	2301      	movgt	r3, #1
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	ec41 0b10 	vmov	d0, r0, r1
 800454c:	4770      	bx	lr
 800454e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004552:	2000      	movs	r0, #0
 8004554:	fa42 f103 	asr.w	r1, r2, r3
 8004558:	ec41 0b10 	vmov	d0, r0, r1
 800455c:	4770      	bx	lr
 800455e:	bf00      	nop
 8004560:	7ff00000 	.word	0x7ff00000

08004564 <__b2d>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	6904      	ldr	r4, [r0, #16]
 8004568:	f100 0614 	add.w	r6, r0, #20
 800456c:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8004570:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004574:	4628      	mov	r0, r5
 8004576:	f7ff fd93 	bl	80040a0 <__hi0bits>
 800457a:	f1c0 0320 	rsb	r3, r0, #32
 800457e:	280a      	cmp	r0, #10
 8004580:	600b      	str	r3, [r1, #0]
 8004582:	f1a4 0104 	sub.w	r1, r4, #4
 8004586:	dc17      	bgt.n	80045b8 <__b2d+0x54>
 8004588:	428e      	cmp	r6, r1
 800458a:	f1c0 070b 	rsb	r7, r0, #11
 800458e:	bf38      	it	cc
 8004590:	f854 1c08 	ldrcc.w	r1, [r4, #-8]
 8004594:	fa25 fc07 	lsr.w	ip, r5, r7
 8004598:	f100 0015 	add.w	r0, r0, #21
 800459c:	f04c 537f 	orr.w	r3, ip, #1069547520	; 0x3fc00000
 80045a0:	bf34      	ite	cc
 80045a2:	40f9      	lsrcc	r1, r7
 80045a4:	2100      	movcs	r1, #0
 80045a6:	fa05 f000 	lsl.w	r0, r5, r0
 80045aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80045ae:	ea40 0201 	orr.w	r2, r0, r1
 80045b2:	ec43 2b10 	vmov	d0, r2, r3
 80045b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045b8:	428e      	cmp	r6, r1
 80045ba:	f1a0 000b 	sub.w	r0, r0, #11
 80045be:	d21c      	bcs.n	80045fa <__b2d+0x96>
 80045c0:	f854 1c08 	ldr.w	r1, [r4, #-8]
 80045c4:	b1d8      	cbz	r0, 80045fe <__b2d+0x9a>
 80045c6:	4085      	lsls	r5, r0
 80045c8:	f1c0 0c20 	rsb	ip, r0, #32
 80045cc:	f045 557f 	orr.w	r5, r5, #1069547520	; 0x3fc00000
 80045d0:	f1a4 0708 	sub.w	r7, r4, #8
 80045d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80045d8:	fa21 fe0c 	lsr.w	lr, r1, ip
 80045dc:	42be      	cmp	r6, r7
 80045de:	fa01 f000 	lsl.w	r0, r1, r0
 80045e2:	ea45 030e 	orr.w	r3, r5, lr
 80045e6:	d204      	bcs.n	80045f2 <__b2d+0x8e>
 80045e8:	f854 1c0c 	ldr.w	r1, [r4, #-12]
 80045ec:	fa21 f10c 	lsr.w	r1, r1, ip
 80045f0:	4308      	orrs	r0, r1
 80045f2:	4602      	mov	r2, r0
 80045f4:	ec43 2b10 	vmov	d0, r2, r3
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	b940      	cbnz	r0, 800460e <__b2d+0xaa>
 80045fc:	4601      	mov	r1, r0
 80045fe:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8004602:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004606:	460a      	mov	r2, r1
 8004608:	ec43 2b10 	vmov	d0, r2, r3
 800460c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460e:	fa05 f000 	lsl.w	r0, r5, r0
 8004612:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 8004616:	2000      	movs	r0, #0
 8004618:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800461c:	4602      	mov	r2, r0
 800461e:	e7e9      	b.n	80045f4 <__b2d+0x90>

08004620 <__d2b>:
 8004620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004624:	460f      	mov	r7, r1
 8004626:	b083      	sub	sp, #12
 8004628:	2101      	movs	r1, #1
 800462a:	ec55 4b10 	vmov	r4, r5, d0
 800462e:	4616      	mov	r6, r2
 8004630:	f7ff fc7a 	bl	8003f28 <_Balloc>
 8004634:	f3c5 580a 	ubfx	r8, r5, #20, #11
 8004638:	4681      	mov	r9, r0
 800463a:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800463e:	f1b8 0f00 	cmp.w	r8, #0
 8004642:	d001      	beq.n	8004648 <__d2b+0x28>
 8004644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004648:	2c00      	cmp	r4, #0
 800464a:	9301      	str	r3, [sp, #4]
 800464c:	d024      	beq.n	8004698 <__d2b+0x78>
 800464e:	a802      	add	r0, sp, #8
 8004650:	f840 4d08 	str.w	r4, [r0, #-8]!
 8004654:	f7ff fd44 	bl	80040e0 <__lo0bits>
 8004658:	2800      	cmp	r0, #0
 800465a:	d136      	bne.n	80046ca <__d2b+0xaa>
 800465c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004660:	f8c9 2014 	str.w	r2, [r9, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	bf0c      	ite	eq
 8004668:	2101      	moveq	r1, #1
 800466a:	2102      	movne	r1, #2
 800466c:	f8c9 3018 	str.w	r3, [r9, #24]
 8004670:	f8c9 1010 	str.w	r1, [r9, #16]
 8004674:	f1b8 0f00 	cmp.w	r8, #0
 8004678:	d11b      	bne.n	80046b2 <__d2b+0x92>
 800467a:	eb09 0381 	add.w	r3, r9, r1, lsl #2
 800467e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004682:	6038      	str	r0, [r7, #0]
 8004684:	6918      	ldr	r0, [r3, #16]
 8004686:	f7ff fd0b 	bl	80040a0 <__hi0bits>
 800468a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800468e:	6030      	str	r0, [r6, #0]
 8004690:	4648      	mov	r0, r9
 8004692:	b003      	add	sp, #12
 8004694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004698:	a801      	add	r0, sp, #4
 800469a:	f7ff fd21 	bl	80040e0 <__lo0bits>
 800469e:	9b01      	ldr	r3, [sp, #4]
 80046a0:	f8c9 3014 	str.w	r3, [r9, #20]
 80046a4:	2101      	movs	r1, #1
 80046a6:	3020      	adds	r0, #32
 80046a8:	f8c9 1010 	str.w	r1, [r9, #16]
 80046ac:	f1b8 0f00 	cmp.w	r8, #0
 80046b0:	d0e3      	beq.n	800467a <__d2b+0x5a>
 80046b2:	f2a8 4833 	subw	r8, r8, #1075	; 0x433
 80046b6:	eb08 0300 	add.w	r3, r8, r0
 80046ba:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	6030      	str	r0, [r6, #0]
 80046c2:	4648      	mov	r0, r9
 80046c4:	b003      	add	sp, #12
 80046c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ca:	e9dd 1300 	ldrd	r1, r3, [sp]
 80046ce:	f1c0 0220 	rsb	r2, r0, #32
 80046d2:	fa03 f202 	lsl.w	r2, r3, r2
 80046d6:	430a      	orrs	r2, r1
 80046d8:	40c3      	lsrs	r3, r0
 80046da:	9301      	str	r3, [sp, #4]
 80046dc:	f8c9 2014 	str.w	r2, [r9, #20]
 80046e0:	e7c0      	b.n	8004664 <__d2b+0x44>
 80046e2:	bf00      	nop

080046e4 <__ratio>:
 80046e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80046e8:	b083      	sub	sp, #12
 80046ea:	4688      	mov	r8, r1
 80046ec:	4669      	mov	r1, sp
 80046ee:	4681      	mov	r9, r0
 80046f0:	f7ff ff38 	bl	8004564 <__b2d>
 80046f4:	4640      	mov	r0, r8
 80046f6:	a901      	add	r1, sp, #4
 80046f8:	ec55 4b10 	vmov	r4, r5, d0
 80046fc:	f7ff ff32 	bl	8004564 <__b2d>
 8004700:	e9dd 1300 	ldrd	r1, r3, [sp]
 8004704:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8004708:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800470c:	1acb      	subs	r3, r1, r3
 800470e:	1a12      	subs	r2, r2, r0
 8004710:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8004714:	2b00      	cmp	r3, #0
 8004716:	ec57 6b10 	vmov	r6, r7, d0
 800471a:	dd0d      	ble.n	8004738 <__ratio+0x54>
 800471c:	eb05 5903 	add.w	r9, r5, r3, lsl #20
 8004720:	464d      	mov	r5, r9
 8004722:	4632      	mov	r2, r6
 8004724:	463b      	mov	r3, r7
 8004726:	4620      	mov	r0, r4
 8004728:	4629      	mov	r1, r5
 800472a:	f7fc f9f9 	bl	8000b20 <__aeabi_ddiv>
 800472e:	ec41 0b10 	vmov	d0, r0, r1
 8004732:	b003      	add	sp, #12
 8004734:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004738:	ebc3 3303 	rsb	r3, r3, r3, lsl #12
 800473c:	eb07 5103 	add.w	r1, r7, r3, lsl #20
 8004740:	460f      	mov	r7, r1
 8004742:	e7ee      	b.n	8004722 <__ratio+0x3e>

08004744 <_mprec_log10>:
 8004744:	2817      	cmp	r0, #23
 8004746:	b5d0      	push	{r4, r6, r7, lr}
 8004748:	4604      	mov	r4, r0
 800474a:	dd0c      	ble.n	8004766 <_mprec_log10+0x22>
 800474c:	490a      	ldr	r1, [pc, #40]	; (8004778 <_mprec_log10+0x34>)
 800474e:	4f0b      	ldr	r7, [pc, #44]	; (800477c <_mprec_log10+0x38>)
 8004750:	2000      	movs	r0, #0
 8004752:	2600      	movs	r6, #0
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	f7fc f8b8 	bl	80008cc <__aeabi_dmul>
 800475c:	3c01      	subs	r4, #1
 800475e:	d1f9      	bne.n	8004754 <_mprec_log10+0x10>
 8004760:	ec41 0b10 	vmov	d0, r0, r1
 8004764:	bdd0      	pop	{r4, r6, r7, pc}
 8004766:	4b06      	ldr	r3, [pc, #24]	; (8004780 <_mprec_log10+0x3c>)
 8004768:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800476c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8004770:	ec41 0b10 	vmov	d0, r0, r1
 8004774:	bdd0      	pop	{r4, r6, r7, pc}
 8004776:	bf00      	nop
 8004778:	3ff00000 	.word	0x3ff00000
 800477c:	40240000 	.word	0x40240000
 8004780:	0800ad98 	.word	0x0800ad98

08004784 <__copybits>:
 8004784:	b470      	push	{r4, r5, r6}
 8004786:	6914      	ldr	r4, [r2, #16]
 8004788:	1e4d      	subs	r5, r1, #1
 800478a:	f102 0314 	add.w	r3, r2, #20
 800478e:	eb03 0184 	add.w	r1, r3, r4, lsl #2
 8004792:	116d      	asrs	r5, r5, #5
 8004794:	3501      	adds	r5, #1
 8004796:	428b      	cmp	r3, r1
 8004798:	eb00 0485 	add.w	r4, r0, r5, lsl #2
 800479c:	d20c      	bcs.n	80047b8 <__copybits+0x34>
 800479e:	1f05      	subs	r5, r0, #4
 80047a0:	f853 6b04 	ldr.w	r6, [r3], #4
 80047a4:	f845 6f04 	str.w	r6, [r5, #4]!
 80047a8:	4299      	cmp	r1, r3
 80047aa:	d8f9      	bhi.n	80047a0 <__copybits+0x1c>
 80047ac:	1a8b      	subs	r3, r1, r2
 80047ae:	3b15      	subs	r3, #21
 80047b0:	f023 0303 	bic.w	r3, r3, #3
 80047b4:	3304      	adds	r3, #4
 80047b6:	4418      	add	r0, r3
 80047b8:	4284      	cmp	r4, r0
 80047ba:	d904      	bls.n	80047c6 <__copybits+0x42>
 80047bc:	2300      	movs	r3, #0
 80047be:	f840 3b04 	str.w	r3, [r0], #4
 80047c2:	4284      	cmp	r4, r0
 80047c4:	d8fb      	bhi.n	80047be <__copybits+0x3a>
 80047c6:	bc70      	pop	{r4, r5, r6}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop

080047cc <__any_on>:
 80047cc:	6903      	ldr	r3, [r0, #16]
 80047ce:	b410      	push	{r4}
 80047d0:	114c      	asrs	r4, r1, #5
 80047d2:	42a3      	cmp	r3, r4
 80047d4:	f100 0214 	add.w	r2, r0, #20
 80047d8:	da10      	bge.n	80047fc <__any_on+0x30>
 80047da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80047de:	429a      	cmp	r2, r3
 80047e0:	d21e      	bcs.n	8004820 <__any_on+0x54>
 80047e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80047e6:	3b04      	subs	r3, #4
 80047e8:	b118      	cbz	r0, 80047f2 <__any_on+0x26>
 80047ea:	e015      	b.n	8004818 <__any_on+0x4c>
 80047ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80047f0:	b991      	cbnz	r1, 8004818 <__any_on+0x4c>
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3fa      	bcc.n	80047ec <__any_on+0x20>
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047fa:	4770      	bx	lr
 80047fc:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8004800:	dded      	ble.n	80047de <__any_on+0x12>
 8004802:	f011 011f 	ands.w	r1, r1, #31
 8004806:	d0ea      	beq.n	80047de <__any_on+0x12>
 8004808:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 800480c:	fa24 f001 	lsr.w	r0, r4, r1
 8004810:	fa00 f101 	lsl.w	r1, r0, r1
 8004814:	428c      	cmp	r4, r1
 8004816:	d0e2      	beq.n	80047de <__any_on+0x12>
 8004818:	2001      	movs	r0, #1
 800481a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	2000      	movs	r0, #0
 8004822:	e7e8      	b.n	80047f6 <__any_on+0x2a>

08004824 <__ssprint_r>:
 8004824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004828:	6893      	ldr	r3, [r2, #8]
 800482a:	b083      	sub	sp, #12
 800482c:	4690      	mov	r8, r2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d06c      	beq.n	800490c <__ssprint_r+0xe8>
 8004832:	6817      	ldr	r7, [r2, #0]
 8004834:	688d      	ldr	r5, [r1, #8]
 8004836:	4682      	mov	sl, r0
 8004838:	460c      	mov	r4, r1
 800483a:	6808      	ldr	r0, [r1, #0]
 800483c:	3708      	adds	r7, #8
 800483e:	e042      	b.n	80048c6 <__ssprint_r+0xa2>
 8004840:	89a3      	ldrh	r3, [r4, #12]
 8004842:	f413 6f90 	tst.w	r3, #1152	; 0x480
 8004846:	d02d      	beq.n	80048a4 <__ssprint_r+0x80>
 8004848:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
 800484c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004850:	eba0 0b01 	sub.w	fp, r0, r1
 8004854:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004858:	1c70      	adds	r0, r6, #1
 800485a:	106d      	asrs	r5, r5, #1
 800485c:	4458      	add	r0, fp
 800485e:	42a8      	cmp	r0, r5
 8004860:	462a      	mov	r2, r5
 8004862:	bf84      	itt	hi
 8004864:	4605      	movhi	r5, r0
 8004866:	462a      	movhi	r2, r5
 8004868:	055b      	lsls	r3, r3, #21
 800486a:	d536      	bpl.n	80048da <__ssprint_r+0xb6>
 800486c:	4611      	mov	r1, r2
 800486e:	4650      	mov	r0, sl
 8004870:	f7ff f84c 	bl	800390c <_malloc_r>
 8004874:	2800      	cmp	r0, #0
 8004876:	d03a      	beq.n	80048ee <__ssprint_r+0xca>
 8004878:	465a      	mov	r2, fp
 800487a:	6921      	ldr	r1, [r4, #16]
 800487c:	9001      	str	r0, [sp, #4]
 800487e:	f7fc fcd3 	bl	8001228 <memcpy>
 8004882:	89a2      	ldrh	r2, [r4, #12]
 8004884:	9b01      	ldr	r3, [sp, #4]
 8004886:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800488a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800488e:	81a2      	strh	r2, [r4, #12]
 8004890:	eba5 020b 	sub.w	r2, r5, fp
 8004894:	eb03 000b 	add.w	r0, r3, fp
 8004898:	6165      	str	r5, [r4, #20]
 800489a:	6123      	str	r3, [r4, #16]
 800489c:	6020      	str	r0, [r4, #0]
 800489e:	60a2      	str	r2, [r4, #8]
 80048a0:	4635      	mov	r5, r6
 80048a2:	46b3      	mov	fp, r6
 80048a4:	465a      	mov	r2, fp
 80048a6:	4649      	mov	r1, r9
 80048a8:	f000 ff00 	bl	80056ac <memmove>
 80048ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80048b0:	68a2      	ldr	r2, [r4, #8]
 80048b2:	6820      	ldr	r0, [r4, #0]
 80048b4:	1b55      	subs	r5, r2, r5
 80048b6:	4458      	add	r0, fp
 80048b8:	1b9e      	subs	r6, r3, r6
 80048ba:	60a5      	str	r5, [r4, #8]
 80048bc:	6020      	str	r0, [r4, #0]
 80048be:	f8c8 6008 	str.w	r6, [r8, #8]
 80048c2:	b31e      	cbz	r6, 800490c <__ssprint_r+0xe8>
 80048c4:	3708      	adds	r7, #8
 80048c6:	e957 9602 	ldrd	r9, r6, [r7, #-8]
 80048ca:	46ab      	mov	fp, r5
 80048cc:	2e00      	cmp	r6, #0
 80048ce:	d0f9      	beq.n	80048c4 <__ssprint_r+0xa0>
 80048d0:	42ae      	cmp	r6, r5
 80048d2:	d2b5      	bcs.n	8004840 <__ssprint_r+0x1c>
 80048d4:	4635      	mov	r5, r6
 80048d6:	46b3      	mov	fp, r6
 80048d8:	e7e4      	b.n	80048a4 <__ssprint_r+0x80>
 80048da:	4650      	mov	r0, sl
 80048dc:	f000 ff4a 	bl	8005774 <_realloc_r>
 80048e0:	4603      	mov	r3, r0
 80048e2:	2800      	cmp	r0, #0
 80048e4:	d1d4      	bne.n	8004890 <__ssprint_r+0x6c>
 80048e6:	6921      	ldr	r1, [r4, #16]
 80048e8:	4650      	mov	r0, sl
 80048ea:	f000 fdcb 	bl	8005484 <_free_r>
 80048ee:	230c      	movs	r3, #12
 80048f0:	f8ca 3000 	str.w	r3, [sl]
 80048f4:	89a3      	ldrh	r3, [r4, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004900:	81a3      	strh	r3, [r4, #12]
 8004902:	e9c8 2201 	strd	r2, r2, [r8, #4]
 8004906:	b003      	add	sp, #12
 8004908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800490c:	2000      	movs	r0, #0
 800490e:	f8c8 0004 	str.w	r0, [r8, #4]
 8004912:	b003      	add	sp, #12
 8004914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004918 <_svfiprintf_r>:
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	4692      	mov	sl, r2
 800491e:	898a      	ldrh	r2, [r1, #12]
 8004920:	b0ab      	sub	sp, #172	; 0xac
 8004922:	0614      	lsls	r4, r2, #24
 8004924:	9102      	str	r1, [sp, #8]
 8004926:	e9cd 0305 	strd	r0, r3, [sp, #20]
 800492a:	d503      	bpl.n	8004934 <_svfiprintf_r+0x1c>
 800492c:	690b      	ldr	r3, [r1, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8498 	beq.w	8005264 <_svfiprintf_r+0x94c>
 8004934:	2300      	movs	r3, #0
 8004936:	9308      	str	r3, [sp, #32]
 8004938:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 800493c:	9301      	str	r3, [sp, #4]
 800493e:	ab1a      	add	r3, sp, #104	; 0x68
 8004940:	930d      	str	r3, [sp, #52]	; 0x34
 8004942:	469b      	mov	fp, r3
 8004944:	f89a 3000 	ldrb.w	r3, [sl]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 80f1 	beq.w	8004b30 <_svfiprintf_r+0x218>
 800494e:	2b25      	cmp	r3, #37	; 0x25
 8004950:	4654      	mov	r4, sl
 8004952:	d102      	bne.n	800495a <_svfiprintf_r+0x42>
 8004954:	e01e      	b.n	8004994 <_svfiprintf_r+0x7c>
 8004956:	2b25      	cmp	r3, #37	; 0x25
 8004958:	d003      	beq.n	8004962 <_svfiprintf_r+0x4a>
 800495a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800495e:	2b00      	cmp	r3, #0
 8004960:	d1f9      	bne.n	8004956 <_svfiprintf_r+0x3e>
 8004962:	eba4 050a 	sub.w	r5, r4, sl
 8004966:	b18d      	cbz	r5, 800498c <_svfiprintf_r+0x74>
 8004968:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 800496c:	3301      	adds	r3, #1
 800496e:	442a      	add	r2, r5
 8004970:	2b07      	cmp	r3, #7
 8004972:	f8cb a000 	str.w	sl, [fp]
 8004976:	f8cb 5004 	str.w	r5, [fp, #4]
 800497a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 800497e:	f300 80ce 	bgt.w	8004b1e <_svfiprintf_r+0x206>
 8004982:	f10b 0b08 	add.w	fp, fp, #8
 8004986:	9b01      	ldr	r3, [sp, #4]
 8004988:	442b      	add	r3, r5
 800498a:	9301      	str	r3, [sp, #4]
 800498c:	7823      	ldrb	r3, [r4, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 80ce 	beq.w	8004b30 <_svfiprintf_r+0x218>
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	2100      	movs	r1, #0
 800499a:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 800499e:	7863      	ldrb	r3, [r4, #1]
 80049a0:	9104      	str	r1, [sp, #16]
 80049a2:	4608      	mov	r0, r1
 80049a4:	4688      	mov	r8, r1
 80049a6:	f104 0a01 	add.w	sl, r4, #1
 80049aa:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80049ae:	f10a 0a01 	add.w	sl, sl, #1
 80049b2:	f1a3 0220 	sub.w	r2, r3, #32
 80049b6:	2a58      	cmp	r2, #88	; 0x58
 80049b8:	f200 8341 	bhi.w	800503e <_svfiprintf_r+0x726>
 80049bc:	e8df f012 	tbh	[pc, r2, lsl #1]
 80049c0:	033f0115 	.word	0x033f0115
 80049c4:	0110033f 	.word	0x0110033f
 80049c8:	033f033f 	.word	0x033f033f
 80049cc:	033f033f 	.word	0x033f033f
 80049d0:	033f033f 	.word	0x033f033f
 80049d4:	00ff0104 	.word	0x00ff0104
 80049d8:	00fa033f 	.word	0x00fa033f
 80049dc:	033f00e0 	.word	0x033f00e0
 80049e0:	00cc00db 	.word	0x00cc00db
 80049e4:	00cc00cc 	.word	0x00cc00cc
 80049e8:	00cc00cc 	.word	0x00cc00cc
 80049ec:	00cc00cc 	.word	0x00cc00cc
 80049f0:	00cc00cc 	.word	0x00cc00cc
 80049f4:	033f033f 	.word	0x033f033f
 80049f8:	033f033f 	.word	0x033f033f
 80049fc:	033f033f 	.word	0x033f033f
 8004a00:	033f033f 	.word	0x033f033f
 8004a04:	033f033f 	.word	0x033f033f
 8004a08:	033f02e1 	.word	0x033f02e1
 8004a0c:	033f033f 	.word	0x033f033f
 8004a10:	033f033f 	.word	0x033f033f
 8004a14:	033f033f 	.word	0x033f033f
 8004a18:	033f033f 	.word	0x033f033f
 8004a1c:	009e033f 	.word	0x009e033f
 8004a20:	033f033f 	.word	0x033f033f
 8004a24:	033f033f 	.word	0x033f033f
 8004a28:	0059033f 	.word	0x0059033f
 8004a2c:	033f033f 	.word	0x033f033f
 8004a30:	033f02c9 	.word	0x033f02c9
 8004a34:	033f033f 	.word	0x033f033f
 8004a38:	033f033f 	.word	0x033f033f
 8004a3c:	033f033f 	.word	0x033f033f
 8004a40:	033f033f 	.word	0x033f033f
 8004a44:	01ab033f 	.word	0x01ab033f
 8004a48:	033f0177 	.word	0x033f0177
 8004a4c:	033f033f 	.word	0x033f033f
 8004a50:	01770172 	.word	0x01770172
 8004a54:	033f033f 	.word	0x033f033f
 8004a58:	033f0165 	.word	0x033f0165
 8004a5c:	00a00311 	.word	0x00a00311
 8004a60:	016002f9 	.word	0x016002f9
 8004a64:	0140033f 	.word	0x0140033f
 8004a68:	005b033f 	.word	0x005b033f
 8004a6c:	033f033f 	.word	0x033f033f
 8004a70:	011d      	.short	0x011d
 8004a72:	f048 0810 	orr.w	r8, r8, #16
 8004a76:	f018 0f20 	tst.w	r8, #32
 8004a7a:	f000 82d3 	beq.w	8005024 <_svfiprintf_r+0x70c>
 8004a7e:	9e06      	ldr	r6, [sp, #24]
 8004a80:	3607      	adds	r6, #7
 8004a82:	f026 0307 	bic.w	r3, r6, #7
 8004a86:	f103 0208 	add.w	r2, r3, #8
 8004a8a:	9206      	str	r2, [sp, #24]
 8004a8c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004a98:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8004a9c:	f04f 0301 	mov.w	r3, #1
 8004aa0:	f040 829d 	bne.w	8004fde <_svfiprintf_r+0x6c6>
 8004aa4:	f8cd 8000 	str.w	r8, [sp]
 8004aa8:	2400      	movs	r4, #0
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	f000 836f 	beq.w	800518e <_svfiprintf_r+0x876>
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	f000 82d4 	beq.w	800505e <_svfiprintf_r+0x746>
 8004ab6:	a91a      	add	r1, sp, #104	; 0x68
 8004ab8:	e000      	b.n	8004abc <_svfiprintf_r+0x1a4>
 8004aba:	4629      	mov	r1, r5
 8004abc:	08f2      	lsrs	r2, r6, #3
 8004abe:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8004ac2:	08f8      	lsrs	r0, r7, #3
 8004ac4:	f006 0307 	and.w	r3, r6, #7
 8004ac8:	4607      	mov	r7, r0
 8004aca:	4616      	mov	r6, r2
 8004acc:	3330      	adds	r3, #48	; 0x30
 8004ace:	ea56 0207 	orrs.w	r2, r6, r7
 8004ad2:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004ad6:	f101 35ff 	add.w	r5, r1, #4294967295	; 0xffffffff
 8004ada:	d1ee      	bne.n	8004aba <_svfiprintf_r+0x1a2>
 8004adc:	9a00      	ldr	r2, [sp, #0]
 8004ade:	07d2      	lsls	r2, r2, #31
 8004ae0:	f140 82cd 	bpl.w	800507e <_svfiprintf_r+0x766>
 8004ae4:	2b30      	cmp	r3, #48	; 0x30
 8004ae6:	f000 82ca 	beq.w	800507e <_svfiprintf_r+0x766>
 8004aea:	2330      	movs	r3, #48	; 0x30
 8004aec:	3902      	subs	r1, #2
 8004aee:	f805 3c01 	strb.w	r3, [r5, #-1]
 8004af2:	ab1a      	add	r3, sp, #104	; 0x68
 8004af4:	1a5b      	subs	r3, r3, r1
 8004af6:	9303      	str	r3, [sp, #12]
 8004af8:	460d      	mov	r5, r1
 8004afa:	e2c3      	b.n	8005084 <_svfiprintf_r+0x76c>
 8004afc:	f048 0810 	orr.w	r8, r8, #16
 8004b00:	f018 0320 	ands.w	r3, r8, #32
 8004b04:	f000 8284 	beq.w	8005010 <_svfiprintf_r+0x6f8>
 8004b08:	9e06      	ldr	r6, [sp, #24]
 8004b0a:	3607      	adds	r6, #7
 8004b0c:	f026 0307 	bic.w	r3, r6, #7
 8004b10:	f103 0208 	add.w	r2, r3, #8
 8004b14:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004b18:	9206      	str	r2, [sp, #24]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e257      	b.n	8004fce <_svfiprintf_r+0x6b6>
 8004b1e:	aa0d      	add	r2, sp, #52	; 0x34
 8004b20:	9902      	ldr	r1, [sp, #8]
 8004b22:	9805      	ldr	r0, [sp, #20]
 8004b24:	f7ff fe7e 	bl	8004824 <__ssprint_r>
 8004b28:	b948      	cbnz	r0, 8004b3e <_svfiprintf_r+0x226>
 8004b2a:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8004b2e:	e72a      	b.n	8004986 <_svfiprintf_r+0x6e>
 8004b30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b32:	b123      	cbz	r3, 8004b3e <_svfiprintf_r+0x226>
 8004b34:	9805      	ldr	r0, [sp, #20]
 8004b36:	9902      	ldr	r1, [sp, #8]
 8004b38:	aa0d      	add	r2, sp, #52	; 0x34
 8004b3a:	f7ff fe73 	bl	8004824 <__ssprint_r>
 8004b3e:	9b02      	ldr	r3, [sp, #8]
 8004b40:	899b      	ldrh	r3, [r3, #12]
 8004b42:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b46:	9b01      	ldr	r3, [sp, #4]
 8004b48:	bf18      	it	ne
 8004b4a:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8004b4e:	9301      	str	r3, [sp, #4]
 8004b50:	9801      	ldr	r0, [sp, #4]
 8004b52:	b02b      	add	sp, #172	; 0xac
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004b5c:	2400      	movs	r4, #0
 8004b5e:	f81a 3b01 	ldrb.w	r3, [sl], #1
 8004b62:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8004b66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8004b6a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004b6e:	2a09      	cmp	r2, #9
 8004b70:	d9f5      	bls.n	8004b5e <_svfiprintf_r+0x246>
 8004b72:	9404      	str	r4, [sp, #16]
 8004b74:	e71d      	b.n	80049b2 <_svfiprintf_r+0x9a>
 8004b76:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 8004b7a:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7e:	e716      	b.n	80049ae <_svfiprintf_r+0x96>
 8004b80:	f89a 3000 	ldrb.w	r3, [sl]
 8004b84:	2b2a      	cmp	r3, #42	; 0x2a
 8004b86:	f10a 0401 	add.w	r4, sl, #1
 8004b8a:	f000 83cf 	beq.w	800532c <_svfiprintf_r+0xa14>
 8004b8e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004b92:	2a09      	cmp	r2, #9
 8004b94:	f200 83b9 	bhi.w	800530a <_svfiprintf_r+0x9f2>
 8004b98:	f04f 0900 	mov.w	r9, #0
 8004b9c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004ba0:	eb09 0989 	add.w	r9, r9, r9, lsl #2
 8004ba4:	eb02 0949 	add.w	r9, r2, r9, lsl #1
 8004ba8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8004bac:	2a09      	cmp	r2, #9
 8004bae:	d9f5      	bls.n	8004b9c <_svfiprintf_r+0x284>
 8004bb0:	46a2      	mov	sl, r4
 8004bb2:	e6fe      	b.n	80049b2 <_svfiprintf_r+0x9a>
 8004bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8004bb8:	f048 0804 	orr.w	r8, r8, #4
 8004bbc:	e6f7      	b.n	80049ae <_svfiprintf_r+0x96>
 8004bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc2:	2101      	movs	r1, #1
 8004bc4:	202b      	movs	r0, #43	; 0x2b
 8004bc6:	e6f2      	b.n	80049ae <_svfiprintf_r+0x96>
 8004bc8:	9a06      	ldr	r2, [sp, #24]
 8004bca:	f89a 3000 	ldrb.w	r3, [sl]
 8004bce:	6814      	ldr	r4, [r2, #0]
 8004bd0:	9404      	str	r4, [sp, #16]
 8004bd2:	2c00      	cmp	r4, #0
 8004bd4:	f102 0204 	add.w	r2, r2, #4
 8004bd8:	f2c0 8340 	blt.w	800525c <_svfiprintf_r+0x944>
 8004bdc:	9206      	str	r2, [sp, #24]
 8004bde:	e6e6      	b.n	80049ae <_svfiprintf_r+0x96>
 8004be0:	f048 0801 	orr.w	r8, r8, #1
 8004be4:	f89a 3000 	ldrb.w	r3, [sl]
 8004be8:	e6e1      	b.n	80049ae <_svfiprintf_r+0x96>
 8004bea:	f89a 3000 	ldrb.w	r3, [sl]
 8004bee:	2800      	cmp	r0, #0
 8004bf0:	f47f aedd 	bne.w	80049ae <_svfiprintf_r+0x96>
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	2020      	movs	r0, #32
 8004bf8:	e6d9      	b.n	80049ae <_svfiprintf_r+0x96>
 8004bfa:	2900      	cmp	r1, #0
 8004bfc:	f040 83b2 	bne.w	8005364 <_svfiprintf_r+0xa4c>
 8004c00:	4ab7      	ldr	r2, [pc, #732]	; (8004ee0 <_svfiprintf_r+0x5c8>)
 8004c02:	9208      	str	r2, [sp, #32]
 8004c04:	f018 0f20 	tst.w	r8, #32
 8004c08:	f000 81ac 	beq.w	8004f64 <_svfiprintf_r+0x64c>
 8004c0c:	9e06      	ldr	r6, [sp, #24]
 8004c0e:	3607      	adds	r6, #7
 8004c10:	f026 0207 	bic.w	r2, r6, #7
 8004c14:	e9d2 6700 	ldrd	r6, r7, [r2]
 8004c18:	f102 0108 	add.w	r1, r2, #8
 8004c1c:	9106      	str	r1, [sp, #24]
 8004c1e:	f018 0f01 	tst.w	r8, #1
 8004c22:	f000 820a 	beq.w	800503a <_svfiprintf_r+0x722>
 8004c26:	ea56 0207 	orrs.w	r2, r6, r7
 8004c2a:	f000 8206 	beq.w	800503a <_svfiprintf_r+0x722>
 8004c2e:	2230      	movs	r2, #48	; 0x30
 8004c30:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
 8004c34:	f048 0802 	orr.w	r8, r8, #2
 8004c38:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e1c6      	b.n	8004fce <_svfiprintf_r+0x6b6>
 8004c40:	9b06      	ldr	r3, [sp, #24]
 8004c42:	681d      	ldr	r5, [r3, #0]
 8004c44:	f04f 0200 	mov.w	r2, #0
 8004c48:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8004c4c:	1d1e      	adds	r6, r3, #4
 8004c4e:	2d00      	cmp	r5, #0
 8004c50:	f000 8352 	beq.w	80052f8 <_svfiprintf_r+0x9e0>
 8004c54:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004c58:	f000 8311 	beq.w	800527e <_svfiprintf_r+0x966>
 8004c5c:	464a      	mov	r2, r9
 8004c5e:	2100      	movs	r1, #0
 8004c60:	4628      	mov	r0, r5
 8004c62:	f7ff f90d 	bl	8003e80 <memchr>
 8004c66:	2800      	cmp	r0, #0
 8004c68:	f000 8354 	beq.w	8005314 <_svfiprintf_r+0x9fc>
 8004c6c:	1b43      	subs	r3, r0, r5
 8004c6e:	9303      	str	r3, [sp, #12]
 8004c70:	9606      	str	r6, [sp, #24]
 8004c72:	f8cd 8000 	str.w	r8, [sp]
 8004c76:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 8004c7a:	f04f 0900 	mov.w	r9, #0
 8004c7e:	e201      	b.n	8005084 <_svfiprintf_r+0x76c>
 8004c80:	f048 0820 	orr.w	r8, r8, #32
 8004c84:	f89a 3000 	ldrb.w	r3, [sl]
 8004c88:	e691      	b.n	80049ae <_svfiprintf_r+0x96>
 8004c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8004c8e:	2b6c      	cmp	r3, #108	; 0x6c
 8004c90:	bf03      	ittte	eq
 8004c92:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
 8004c96:	f048 0820 	orreq.w	r8, r8, #32
 8004c9a:	f10a 0a01 	addeq.w	sl, sl, #1
 8004c9e:	f048 0810 	orrne.w	r8, r8, #16
 8004ca2:	e684      	b.n	80049ae <_svfiprintf_r+0x96>
 8004ca4:	f048 0840 	orr.w	r8, r8, #64	; 0x40
 8004ca8:	f89a 3000 	ldrb.w	r3, [sl]
 8004cac:	e67f      	b.n	80049ae <_svfiprintf_r+0x96>
 8004cae:	2900      	cmp	r1, #0
 8004cb0:	f040 835b 	bne.w	800536a <_svfiprintf_r+0xa52>
 8004cb4:	f018 0f20 	tst.w	r8, #32
 8004cb8:	f000 816c 	beq.w	8004f94 <_svfiprintf_r+0x67c>
 8004cbc:	9e06      	ldr	r6, [sp, #24]
 8004cbe:	3607      	adds	r6, #7
 8004cc0:	f026 0307 	bic.w	r3, r6, #7
 8004cc4:	e9d3 6700 	ldrd	r6, r7, [r3]
 8004cc8:	f103 0208 	add.w	r2, r3, #8
 8004ccc:	9206      	str	r2, [sp, #24]
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	f177 0300 	sbcs.w	r3, r7, #0
 8004cd4:	f2c0 8281 	blt.w	80051da <_svfiprintf_r+0x8c2>
 8004cd8:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 8004cdc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004ce0:	f000 8253 	beq.w	800518a <_svfiprintf_r+0x872>
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 8004cea:	9200      	str	r2, [sp, #0]
 8004cec:	ea56 0207 	orrs.w	r2, r6, r7
 8004cf0:	f47f aedb 	bne.w	8004aaa <_svfiprintf_r+0x192>
 8004cf4:	f1b9 0f00 	cmp.w	r9, #0
 8004cf8:	f040 82d2 	bne.w	80052a0 <_svfiprintf_r+0x988>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f040 8262 	bne.w	80051c6 <_svfiprintf_r+0x8ae>
 8004d02:	f018 0301 	ands.w	r3, r8, #1
 8004d06:	9303      	str	r3, [sp, #12]
 8004d08:	f000 8289 	beq.w	800521e <_svfiprintf_r+0x906>
 8004d0c:	ad2a      	add	r5, sp, #168	; 0xa8
 8004d0e:	2330      	movs	r3, #48	; 0x30
 8004d10:	f805 3d41 	strb.w	r3, [r5, #-65]!
 8004d14:	e1b6      	b.n	8005084 <_svfiprintf_r+0x76c>
 8004d16:	9a06      	ldr	r2, [sp, #24]
 8004d18:	6813      	ldr	r3, [r2, #0]
 8004d1a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8004d1e:	f04f 0100 	mov.w	r1, #0
 8004d22:	2601      	movs	r6, #1
 8004d24:	1d13      	adds	r3, r2, #4
 8004d26:	f88d 102f 	strb.w	r1, [sp, #47]	; 0x2f
 8004d2a:	9306      	str	r3, [sp, #24]
 8004d2c:	9603      	str	r6, [sp, #12]
 8004d2e:	ad10      	add	r5, sp, #64	; 0x40
 8004d30:	f8cd 8000 	str.w	r8, [sp]
 8004d34:	f04f 0900 	mov.w	r9, #0
 8004d38:	9b00      	ldr	r3, [sp, #0]
 8004d3a:	9800      	ldr	r0, [sp, #0]
 8004d3c:	f013 0302 	ands.w	r3, r3, #2
 8004d40:	bf18      	it	ne
 8004d42:	3602      	addne	r6, #2
 8004d44:	f010 0084 	ands.w	r0, r0, #132	; 0x84
 8004d48:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8004d4c:	9007      	str	r0, [sp, #28]
 8004d4e:	d13d      	bne.n	8004dcc <_svfiprintf_r+0x4b4>
 8004d50:	9804      	ldr	r0, [sp, #16]
 8004d52:	1b84      	subs	r4, r0, r6
 8004d54:	2c00      	cmp	r4, #0
 8004d56:	dd39      	ble.n	8004dcc <_svfiprintf_r+0x4b4>
 8004d58:	2c10      	cmp	r4, #16
 8004d5a:	4f62      	ldr	r7, [pc, #392]	; (8004ee4 <_svfiprintf_r+0x5cc>)
 8004d5c:	dd2b      	ble.n	8004db6 <_svfiprintf_r+0x49e>
 8004d5e:	4658      	mov	r0, fp
 8004d60:	46d3      	mov	fp, sl
 8004d62:	46b2      	mov	sl, r6
 8004d64:	461e      	mov	r6, r3
 8004d66:	463b      	mov	r3, r7
 8004d68:	f04f 0810 	mov.w	r8, #16
 8004d6c:	462f      	mov	r7, r5
 8004d6e:	461d      	mov	r5, r3
 8004d70:	e004      	b.n	8004d7c <_svfiprintf_r+0x464>
 8004d72:	3c10      	subs	r4, #16
 8004d74:	2c10      	cmp	r4, #16
 8004d76:	f100 0008 	add.w	r0, r0, #8
 8004d7a:	dd15      	ble.n	8004da8 <_svfiprintf_r+0x490>
 8004d7c:	3101      	adds	r1, #1
 8004d7e:	3210      	adds	r2, #16
 8004d80:	2907      	cmp	r1, #7
 8004d82:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8004d86:	e9c0 5800 	strd	r5, r8, [r0]
 8004d8a:	ddf2      	ble.n	8004d72 <_svfiprintf_r+0x45a>
 8004d8c:	aa0d      	add	r2, sp, #52	; 0x34
 8004d8e:	9902      	ldr	r1, [sp, #8]
 8004d90:	9805      	ldr	r0, [sp, #20]
 8004d92:	f7ff fd47 	bl	8004824 <__ssprint_r>
 8004d96:	2800      	cmp	r0, #0
 8004d98:	f47f aed1 	bne.w	8004b3e <_svfiprintf_r+0x226>
 8004d9c:	3c10      	subs	r4, #16
 8004d9e:	2c10      	cmp	r4, #16
 8004da0:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8004da4:	a81a      	add	r0, sp, #104	; 0x68
 8004da6:	dce9      	bgt.n	8004d7c <_svfiprintf_r+0x464>
 8004da8:	4633      	mov	r3, r6
 8004daa:	4656      	mov	r6, sl
 8004dac:	46da      	mov	sl, fp
 8004dae:	4683      	mov	fp, r0
 8004db0:	4628      	mov	r0, r5
 8004db2:	463d      	mov	r5, r7
 8004db4:	4607      	mov	r7, r0
 8004db6:	3101      	adds	r1, #1
 8004db8:	4422      	add	r2, r4
 8004dba:	2907      	cmp	r1, #7
 8004dbc:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8004dc0:	e9cb 7400 	strd	r7, r4, [fp]
 8004dc4:	f300 8212 	bgt.w	80051ec <_svfiprintf_r+0x8d4>
 8004dc8:	f10b 0b08 	add.w	fp, fp, #8
 8004dcc:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 8004dd0:	f101 0c01 	add.w	ip, r1, #1
 8004dd4:	f10b 0008 	add.w	r0, fp, #8
 8004dd8:	b194      	cbz	r4, 8004e00 <_svfiprintf_r+0x4e8>
 8004dda:	3201      	adds	r2, #1
 8004ddc:	f10d 072f 	add.w	r7, sp, #47	; 0x2f
 8004de0:	2401      	movs	r4, #1
 8004de2:	f1bc 0f07 	cmp.w	ip, #7
 8004de6:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
 8004dea:	e9cb 7400 	strd	r7, r4, [fp]
 8004dee:	f300 81aa 	bgt.w	8005146 <_svfiprintf_r+0x82e>
 8004df2:	1c8f      	adds	r7, r1, #2
 8004df4:	f10b 0410 	add.w	r4, fp, #16
 8004df8:	4661      	mov	r1, ip
 8004dfa:	4683      	mov	fp, r0
 8004dfc:	46bc      	mov	ip, r7
 8004dfe:	4620      	mov	r0, r4
 8004e00:	b17b      	cbz	r3, 8004e22 <_svfiprintf_r+0x50a>
 8004e02:	3202      	adds	r2, #2
 8004e04:	a90c      	add	r1, sp, #48	; 0x30
 8004e06:	2302      	movs	r3, #2
 8004e08:	f1bc 0f07 	cmp.w	ip, #7
 8004e0c:	e9cd c20e 	strd	ip, r2, [sp, #56]	; 0x38
 8004e10:	e9cb 1300 	strd	r1, r3, [fp]
 8004e14:	f300 81a9 	bgt.w	800516a <_svfiprintf_r+0x852>
 8004e18:	4661      	mov	r1, ip
 8004e1a:	4683      	mov	fp, r0
 8004e1c:	f10c 0c01 	add.w	ip, ip, #1
 8004e20:	3008      	adds	r0, #8
 8004e22:	9b07      	ldr	r3, [sp, #28]
 8004e24:	2b80      	cmp	r3, #128	; 0x80
 8004e26:	f000 8137 	beq.w	8005098 <_svfiprintf_r+0x780>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	eba9 0703 	sub.w	r7, r9, r3
 8004e30:	2f00      	cmp	r7, #0
 8004e32:	dd39      	ble.n	8004ea8 <_svfiprintf_r+0x590>
 8004e34:	2f10      	cmp	r7, #16
 8004e36:	4c2c      	ldr	r4, [pc, #176]	; (8004ee8 <_svfiprintf_r+0x5d0>)
 8004e38:	f340 825c 	ble.w	80052f4 <_svfiprintf_r+0x9dc>
 8004e3c:	465b      	mov	r3, fp
 8004e3e:	f04f 0810 	mov.w	r8, #16
 8004e42:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e46:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004e4a:	e004      	b.n	8004e56 <_svfiprintf_r+0x53e>
 8004e4c:	3f10      	subs	r7, #16
 8004e4e:	2f10      	cmp	r7, #16
 8004e50:	f103 0308 	add.w	r3, r3, #8
 8004e54:	dd15      	ble.n	8004e82 <_svfiprintf_r+0x56a>
 8004e56:	3101      	adds	r1, #1
 8004e58:	3210      	adds	r2, #16
 8004e5a:	2907      	cmp	r1, #7
 8004e5c:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 8004e60:	e9c3 4800 	strd	r4, r8, [r3]
 8004e64:	ddf2      	ble.n	8004e4c <_svfiprintf_r+0x534>
 8004e66:	aa0d      	add	r2, sp, #52	; 0x34
 8004e68:	4659      	mov	r1, fp
 8004e6a:	4648      	mov	r0, r9
 8004e6c:	f7ff fcda 	bl	8004824 <__ssprint_r>
 8004e70:	2800      	cmp	r0, #0
 8004e72:	f47f ae64 	bne.w	8004b3e <_svfiprintf_r+0x226>
 8004e76:	3f10      	subs	r7, #16
 8004e78:	2f10      	cmp	r7, #16
 8004e7a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8004e7e:	ab1a      	add	r3, sp, #104	; 0x68
 8004e80:	dce9      	bgt.n	8004e56 <_svfiprintf_r+0x53e>
 8004e82:	469b      	mov	fp, r3
 8004e84:	f101 0c01 	add.w	ip, r1, #1
 8004e88:	3308      	adds	r3, #8
 8004e8a:	443a      	add	r2, r7
 8004e8c:	f1bc 0f07 	cmp.w	ip, #7
 8004e90:	920f      	str	r2, [sp, #60]	; 0x3c
 8004e92:	e9cb 4700 	strd	r4, r7, [fp]
 8004e96:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8004e9a:	f300 8184 	bgt.w	80051a6 <_svfiprintf_r+0x88e>
 8004e9e:	f10c 0c01 	add.w	ip, ip, #1
 8004ea2:	f103 0008 	add.w	r0, r3, #8
 8004ea6:	469b      	mov	fp, r3
 8004ea8:	9b03      	ldr	r3, [sp, #12]
 8004eaa:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
 8004eae:	441a      	add	r2, r3
 8004eb0:	f1bc 0f07 	cmp.w	ip, #7
 8004eb4:	920f      	str	r2, [sp, #60]	; 0x3c
 8004eb6:	e9cb 5300 	strd	r5, r3, [fp]
 8004eba:	f300 8130 	bgt.w	800511e <_svfiprintf_r+0x806>
 8004ebe:	9b00      	ldr	r3, [sp, #0]
 8004ec0:	075b      	lsls	r3, r3, #29
 8004ec2:	d537      	bpl.n	8004f34 <_svfiprintf_r+0x61c>
 8004ec4:	9b04      	ldr	r3, [sp, #16]
 8004ec6:	1b9c      	subs	r4, r3, r6
 8004ec8:	2c00      	cmp	r4, #0
 8004eca:	dd33      	ble.n	8004f34 <_svfiprintf_r+0x61c>
 8004ecc:	2c10      	cmp	r4, #16
 8004ece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ed0:	4f04      	ldr	r7, [pc, #16]	; (8004ee4 <_svfiprintf_r+0x5cc>)
 8004ed2:	dd26      	ble.n	8004f22 <_svfiprintf_r+0x60a>
 8004ed4:	2510      	movs	r5, #16
 8004ed6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8004eda:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8004ede:	e00a      	b.n	8004ef6 <_svfiprintf_r+0x5de>
 8004ee0:	0800d70c 	.word	0x0800d70c
 8004ee4:	0800aec0 	.word	0x0800aec0
 8004ee8:	0800aed0 	.word	0x0800aed0
 8004eec:	3c10      	subs	r4, #16
 8004eee:	2c10      	cmp	r4, #16
 8004ef0:	f100 0008 	add.w	r0, r0, #8
 8004ef4:	dd15      	ble.n	8004f22 <_svfiprintf_r+0x60a>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	3210      	adds	r2, #16
 8004efa:	2b07      	cmp	r3, #7
 8004efc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8004f00:	e9c0 7500 	strd	r7, r5, [r0]
 8004f04:	ddf2      	ble.n	8004eec <_svfiprintf_r+0x5d4>
 8004f06:	aa0d      	add	r2, sp, #52	; 0x34
 8004f08:	4649      	mov	r1, r9
 8004f0a:	4640      	mov	r0, r8
 8004f0c:	f7ff fc8a 	bl	8004824 <__ssprint_r>
 8004f10:	2800      	cmp	r0, #0
 8004f12:	f47f ae14 	bne.w	8004b3e <_svfiprintf_r+0x226>
 8004f16:	3c10      	subs	r4, #16
 8004f18:	2c10      	cmp	r4, #16
 8004f1a:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8004f1e:	a81a      	add	r0, sp, #104	; 0x68
 8004f20:	dce9      	bgt.n	8004ef6 <_svfiprintf_r+0x5de>
 8004f22:	3301      	adds	r3, #1
 8004f24:	4422      	add	r2, r4
 8004f26:	2b07      	cmp	r3, #7
 8004f28:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
 8004f2c:	e9c0 7400 	strd	r7, r4, [r0]
 8004f30:	f300 816b 	bgt.w	800520a <_svfiprintf_r+0x8f2>
 8004f34:	9b01      	ldr	r3, [sp, #4]
 8004f36:	9904      	ldr	r1, [sp, #16]
 8004f38:	42b1      	cmp	r1, r6
 8004f3a:	bfac      	ite	ge
 8004f3c:	185b      	addge	r3, r3, r1
 8004f3e:	199b      	addlt	r3, r3, r6
 8004f40:	9301      	str	r3, [sp, #4]
 8004f42:	2a00      	cmp	r2, #0
 8004f44:	f040 80f6 	bne.w	8005134 <_svfiprintf_r+0x81c>
 8004f48:	2300      	movs	r3, #0
 8004f4a:	930e      	str	r3, [sp, #56]	; 0x38
 8004f4c:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8004f50:	e4f8      	b.n	8004944 <_svfiprintf_r+0x2c>
 8004f52:	2900      	cmp	r1, #0
 8004f54:	f040 8203 	bne.w	800535e <_svfiprintf_r+0xa46>
 8004f58:	4abd      	ldr	r2, [pc, #756]	; (8005250 <_svfiprintf_r+0x938>)
 8004f5a:	9208      	str	r2, [sp, #32]
 8004f5c:	f018 0f20 	tst.w	r8, #32
 8004f60:	f47f ae54 	bne.w	8004c0c <_svfiprintf_r+0x2f4>
 8004f64:	9a06      	ldr	r2, [sp, #24]
 8004f66:	f018 0f10 	tst.w	r8, #16
 8004f6a:	f852 6b04 	ldr.w	r6, [r2], #4
 8004f6e:	9206      	str	r2, [sp, #24]
 8004f70:	f040 813a 	bne.w	80051e8 <_svfiprintf_r+0x8d0>
 8004f74:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004f78:	f000 8136 	beq.w	80051e8 <_svfiprintf_r+0x8d0>
 8004f7c:	b2b6      	uxth	r6, r6
 8004f7e:	2700      	movs	r7, #0
 8004f80:	e64d      	b.n	8004c1e <_svfiprintf_r+0x306>
 8004f82:	2900      	cmp	r1, #0
 8004f84:	f040 81e5 	bne.w	8005352 <_svfiprintf_r+0xa3a>
 8004f88:	f048 0810 	orr.w	r8, r8, #16
 8004f8c:	f018 0f20 	tst.w	r8, #32
 8004f90:	f47f ae94 	bne.w	8004cbc <_svfiprintf_r+0x3a4>
 8004f94:	9b06      	ldr	r3, [sp, #24]
 8004f96:	f018 0f10 	tst.w	r8, #16
 8004f9a:	f853 6b04 	ldr.w	r6, [r3], #4
 8004f9e:	9306      	str	r3, [sp, #24]
 8004fa0:	f040 8115 	bne.w	80051ce <_svfiprintf_r+0x8b6>
 8004fa4:	f018 0f40 	tst.w	r8, #64	; 0x40
 8004fa8:	f000 8111 	beq.w	80051ce <_svfiprintf_r+0x8b6>
 8004fac:	b236      	sxth	r6, r6
 8004fae:	17f7      	asrs	r7, r6, #31
 8004fb0:	e68d      	b.n	8004cce <_svfiprintf_r+0x3b6>
 8004fb2:	9a06      	ldr	r2, [sp, #24]
 8004fb4:	4ba7      	ldr	r3, [pc, #668]	; (8005254 <_svfiprintf_r+0x93c>)
 8004fb6:	6816      	ldr	r6, [r2, #0]
 8004fb8:	9308      	str	r3, [sp, #32]
 8004fba:	3204      	adds	r2, #4
 8004fbc:	f647 0330 	movw	r3, #30768	; 0x7830
 8004fc0:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8004fc4:	f048 0802 	orr.w	r8, r8, #2
 8004fc8:	9206      	str	r2, [sp, #24]
 8004fca:	2700      	movs	r7, #0
 8004fcc:	2302      	movs	r3, #2
 8004fce:	f04f 0200 	mov.w	r2, #0
 8004fd2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004fd6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
 8004fda:	f43f ad63 	beq.w	8004aa4 <_svfiprintf_r+0x18c>
 8004fde:	2400      	movs	r4, #0
 8004fe0:	e681      	b.n	8004ce6 <_svfiprintf_r+0x3ce>
 8004fe2:	2900      	cmp	r1, #0
 8004fe4:	f040 81b8 	bne.w	8005358 <_svfiprintf_r+0xa40>
 8004fe8:	9a06      	ldr	r2, [sp, #24]
 8004fea:	f018 0f20 	tst.w	r8, #32
 8004fee:	f102 0304 	add.w	r3, r2, #4
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f040 8123 	bne.w	800523e <_svfiprintf_r+0x926>
 8004ff8:	f018 0f10 	tst.w	r8, #16
 8004ffc:	f040 814b 	bne.w	8005296 <_svfiprintf_r+0x97e>
 8005000:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005004:	f000 8147 	beq.w	8005296 <_svfiprintf_r+0x97e>
 8005008:	9901      	ldr	r1, [sp, #4]
 800500a:	8011      	strh	r1, [r2, #0]
 800500c:	9306      	str	r3, [sp, #24]
 800500e:	e499      	b.n	8004944 <_svfiprintf_r+0x2c>
 8005010:	9a06      	ldr	r2, [sp, #24]
 8005012:	f852 6b04 	ldr.w	r6, [r2], #4
 8005016:	9206      	str	r2, [sp, #24]
 8005018:	f018 0210 	ands.w	r2, r8, #16
 800501c:	f000 8108 	beq.w	8005230 <_svfiprintf_r+0x918>
 8005020:	2700      	movs	r7, #0
 8005022:	e7d4      	b.n	8004fce <_svfiprintf_r+0x6b6>
 8005024:	9b06      	ldr	r3, [sp, #24]
 8005026:	f018 0f10 	tst.w	r8, #16
 800502a:	f853 6b04 	ldr.w	r6, [r3], #4
 800502e:	9306      	str	r3, [sp, #24]
 8005030:	f000 80f7 	beq.w	8005222 <_svfiprintf_r+0x90a>
 8005034:	2700      	movs	r7, #0
 8005036:	2301      	movs	r3, #1
 8005038:	e7c9      	b.n	8004fce <_svfiprintf_r+0x6b6>
 800503a:	2302      	movs	r3, #2
 800503c:	e7c7      	b.n	8004fce <_svfiprintf_r+0x6b6>
 800503e:	2900      	cmp	r1, #0
 8005040:	f040 8196 	bne.w	8005370 <_svfiprintf_r+0xa58>
 8005044:	2b00      	cmp	r3, #0
 8005046:	f43f ad73 	beq.w	8004b30 <_svfiprintf_r+0x218>
 800504a:	2601      	movs	r6, #1
 800504c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8005050:	f04f 0300 	mov.w	r3, #0
 8005054:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
 8005058:	9603      	str	r6, [sp, #12]
 800505a:	ad10      	add	r5, sp, #64	; 0x40
 800505c:	e668      	b.n	8004d30 <_svfiprintf_r+0x418>
 800505e:	9808      	ldr	r0, [sp, #32]
 8005060:	ad1a      	add	r5, sp, #104	; 0x68
 8005062:	0933      	lsrs	r3, r6, #4
 8005064:	f006 010f 	and.w	r1, r6, #15
 8005068:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800506c:	093a      	lsrs	r2, r7, #4
 800506e:	461e      	mov	r6, r3
 8005070:	4617      	mov	r7, r2
 8005072:	5c43      	ldrb	r3, [r0, r1]
 8005074:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005078:	ea56 0307 	orrs.w	r3, r6, r7
 800507c:	d1f1      	bne.n	8005062 <_svfiprintf_r+0x74a>
 800507e:	ab1a      	add	r3, sp, #104	; 0x68
 8005080:	1b5b      	subs	r3, r3, r5
 8005082:	9303      	str	r3, [sp, #12]
 8005084:	9b03      	ldr	r3, [sp, #12]
 8005086:	454b      	cmp	r3, r9
 8005088:	bfb8      	it	lt
 800508a:	464b      	movlt	r3, r9
 800508c:	461e      	mov	r6, r3
 800508e:	2c00      	cmp	r4, #0
 8005090:	f43f ae52 	beq.w	8004d38 <_svfiprintf_r+0x420>
 8005094:	3601      	adds	r6, #1
 8005096:	e64f      	b.n	8004d38 <_svfiprintf_r+0x420>
 8005098:	9b04      	ldr	r3, [sp, #16]
 800509a:	1b9f      	subs	r7, r3, r6
 800509c:	2f00      	cmp	r7, #0
 800509e:	f77f aec4 	ble.w	8004e2a <_svfiprintf_r+0x512>
 80050a2:	2f10      	cmp	r7, #16
 80050a4:	4c6c      	ldr	r4, [pc, #432]	; (8005258 <_svfiprintf_r+0x940>)
 80050a6:	f340 813e 	ble.w	8005326 <_svfiprintf_r+0xa0e>
 80050aa:	4658      	mov	r0, fp
 80050ac:	f04f 0810 	mov.w	r8, #16
 80050b0:	46d3      	mov	fp, sl
 80050b2:	46b2      	mov	sl, r6
 80050b4:	462e      	mov	r6, r5
 80050b6:	4625      	mov	r5, r4
 80050b8:	9c05      	ldr	r4, [sp, #20]
 80050ba:	e004      	b.n	80050c6 <_svfiprintf_r+0x7ae>
 80050bc:	3f10      	subs	r7, #16
 80050be:	2f10      	cmp	r7, #16
 80050c0:	f100 0008 	add.w	r0, r0, #8
 80050c4:	dd15      	ble.n	80050f2 <_svfiprintf_r+0x7da>
 80050c6:	3101      	adds	r1, #1
 80050c8:	3210      	adds	r2, #16
 80050ca:	2907      	cmp	r1, #7
 80050cc:	e9cd 120e 	strd	r1, r2, [sp, #56]	; 0x38
 80050d0:	e9c0 5800 	strd	r5, r8, [r0]
 80050d4:	ddf2      	ble.n	80050bc <_svfiprintf_r+0x7a4>
 80050d6:	aa0d      	add	r2, sp, #52	; 0x34
 80050d8:	9902      	ldr	r1, [sp, #8]
 80050da:	4620      	mov	r0, r4
 80050dc:	f7ff fba2 	bl	8004824 <__ssprint_r>
 80050e0:	2800      	cmp	r0, #0
 80050e2:	f47f ad2c 	bne.w	8004b3e <_svfiprintf_r+0x226>
 80050e6:	3f10      	subs	r7, #16
 80050e8:	2f10      	cmp	r7, #16
 80050ea:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80050ee:	a81a      	add	r0, sp, #104	; 0x68
 80050f0:	dce9      	bgt.n	80050c6 <_svfiprintf_r+0x7ae>
 80050f2:	462c      	mov	r4, r5
 80050f4:	3101      	adds	r1, #1
 80050f6:	4635      	mov	r5, r6
 80050f8:	f100 0308 	add.w	r3, r0, #8
 80050fc:	4656      	mov	r6, sl
 80050fe:	46da      	mov	sl, fp
 8005100:	4683      	mov	fp, r0
 8005102:	443a      	add	r2, r7
 8005104:	2907      	cmp	r1, #7
 8005106:	920f      	str	r2, [sp, #60]	; 0x3c
 8005108:	e9cb 4700 	strd	r4, r7, [fp]
 800510c:	910e      	str	r1, [sp, #56]	; 0x38
 800510e:	f300 80e1 	bgt.w	80052d4 <_svfiprintf_r+0x9bc>
 8005112:	f101 0c01 	add.w	ip, r1, #1
 8005116:	f103 0008 	add.w	r0, r3, #8
 800511a:	469b      	mov	fp, r3
 800511c:	e685      	b.n	8004e2a <_svfiprintf_r+0x512>
 800511e:	aa0d      	add	r2, sp, #52	; 0x34
 8005120:	9902      	ldr	r1, [sp, #8]
 8005122:	9805      	ldr	r0, [sp, #20]
 8005124:	f7ff fb7e 	bl	8004824 <__ssprint_r>
 8005128:	2800      	cmp	r0, #0
 800512a:	f47f ad08 	bne.w	8004b3e <_svfiprintf_r+0x226>
 800512e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005130:	a81a      	add	r0, sp, #104	; 0x68
 8005132:	e6c4      	b.n	8004ebe <_svfiprintf_r+0x5a6>
 8005134:	aa0d      	add	r2, sp, #52	; 0x34
 8005136:	9902      	ldr	r1, [sp, #8]
 8005138:	9805      	ldr	r0, [sp, #20]
 800513a:	f7ff fb73 	bl	8004824 <__ssprint_r>
 800513e:	2800      	cmp	r0, #0
 8005140:	f43f af02 	beq.w	8004f48 <_svfiprintf_r+0x630>
 8005144:	e4fb      	b.n	8004b3e <_svfiprintf_r+0x226>
 8005146:	aa0d      	add	r2, sp, #52	; 0x34
 8005148:	9902      	ldr	r1, [sp, #8]
 800514a:	9805      	ldr	r0, [sp, #20]
 800514c:	9309      	str	r3, [sp, #36]	; 0x24
 800514e:	f7ff fb69 	bl	8004824 <__ssprint_r>
 8005152:	2800      	cmp	r0, #0
 8005154:	f47f acf3 	bne.w	8004b3e <_svfiprintf_r+0x226>
 8005158:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800515c:	a81c      	add	r0, sp, #112	; 0x70
 800515e:	f101 0c01 	add.w	ip, r1, #1
 8005162:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005168:	e64a      	b.n	8004e00 <_svfiprintf_r+0x4e8>
 800516a:	aa0d      	add	r2, sp, #52	; 0x34
 800516c:	9902      	ldr	r1, [sp, #8]
 800516e:	9805      	ldr	r0, [sp, #20]
 8005170:	f7ff fb58 	bl	8004824 <__ssprint_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	f47f ace2 	bne.w	8004b3e <_svfiprintf_r+0x226>
 800517a:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 800517e:	a81c      	add	r0, sp, #112	; 0x70
 8005180:	f101 0c01 	add.w	ip, r1, #1
 8005184:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005188:	e64b      	b.n	8004e22 <_svfiprintf_r+0x50a>
 800518a:	f8cd 8000 	str.w	r8, [sp]
 800518e:	2f00      	cmp	r7, #0
 8005190:	bf08      	it	eq
 8005192:	2e0a      	cmpeq	r6, #10
 8005194:	f080 8088 	bcs.w	80052a8 <_svfiprintf_r+0x990>
 8005198:	ad2a      	add	r5, sp, #168	; 0xa8
 800519a:	3630      	adds	r6, #48	; 0x30
 800519c:	2301      	movs	r3, #1
 800519e:	f805 6d41 	strb.w	r6, [r5, #-65]!
 80051a2:	9303      	str	r3, [sp, #12]
 80051a4:	e76e      	b.n	8005084 <_svfiprintf_r+0x76c>
 80051a6:	aa0d      	add	r2, sp, #52	; 0x34
 80051a8:	9902      	ldr	r1, [sp, #8]
 80051aa:	9805      	ldr	r0, [sp, #20]
 80051ac:	f7ff fb3a 	bl	8004824 <__ssprint_r>
 80051b0:	2800      	cmp	r0, #0
 80051b2:	f47f acc4 	bne.w	8004b3e <_svfiprintf_r+0x226>
 80051b6:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 80051ba:	a81c      	add	r0, sp, #112	; 0x70
 80051bc:	f103 0c01 	add.w	ip, r3, #1
 80051c0:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80051c4:	e670      	b.n	8004ea8 <_svfiprintf_r+0x590>
 80051c6:	f8cd 900c 	str.w	r9, [sp, #12]
 80051ca:	ad1a      	add	r5, sp, #104	; 0x68
 80051cc:	e75a      	b.n	8005084 <_svfiprintf_r+0x76c>
 80051ce:	17f7      	asrs	r7, r6, #31
 80051d0:	2e00      	cmp	r6, #0
 80051d2:	f177 0300 	sbcs.w	r3, r7, #0
 80051d6:	f6bf ad7f 	bge.w	8004cd8 <_svfiprintf_r+0x3c0>
 80051da:	242d      	movs	r4, #45	; 0x2d
 80051dc:	4276      	negs	r6, r6
 80051de:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80051e2:	f88d 402f 	strb.w	r4, [sp, #47]	; 0x2f
 80051e6:	e579      	b.n	8004cdc <_svfiprintf_r+0x3c4>
 80051e8:	2700      	movs	r7, #0
 80051ea:	e518      	b.n	8004c1e <_svfiprintf_r+0x306>
 80051ec:	aa0d      	add	r2, sp, #52	; 0x34
 80051ee:	9902      	ldr	r1, [sp, #8]
 80051f0:	9805      	ldr	r0, [sp, #20]
 80051f2:	9309      	str	r3, [sp, #36]	; 0x24
 80051f4:	f7ff fb16 	bl	8004824 <__ssprint_r>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	f47f aca0 	bne.w	8004b3e <_svfiprintf_r+0x226>
 80051fe:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 8005202:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 8005206:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005208:	e5e0      	b.n	8004dcc <_svfiprintf_r+0x4b4>
 800520a:	aa0d      	add	r2, sp, #52	; 0x34
 800520c:	9902      	ldr	r1, [sp, #8]
 800520e:	9805      	ldr	r0, [sp, #20]
 8005210:	f7ff fb08 	bl	8004824 <__ssprint_r>
 8005214:	2800      	cmp	r0, #0
 8005216:	f47f ac92 	bne.w	8004b3e <_svfiprintf_r+0x226>
 800521a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800521c:	e68a      	b.n	8004f34 <_svfiprintf_r+0x61c>
 800521e:	ad1a      	add	r5, sp, #104	; 0x68
 8005220:	e730      	b.n	8005084 <_svfiprintf_r+0x76c>
 8005222:	f018 0f40 	tst.w	r8, #64	; 0x40
 8005226:	bf18      	it	ne
 8005228:	b2b6      	uxthne	r6, r6
 800522a:	2700      	movs	r7, #0
 800522c:	2301      	movs	r3, #1
 800522e:	e6ce      	b.n	8004fce <_svfiprintf_r+0x6b6>
 8005230:	f018 0340 	ands.w	r3, r8, #64	; 0x40
 8005234:	bf1c      	itt	ne
 8005236:	4613      	movne	r3, r2
 8005238:	b2b6      	uxthne	r6, r6
 800523a:	2700      	movs	r7, #0
 800523c:	e6c7      	b.n	8004fce <_svfiprintf_r+0x6b6>
 800523e:	9901      	ldr	r1, [sp, #4]
 8005240:	9306      	str	r3, [sp, #24]
 8005242:	17cd      	asrs	r5, r1, #31
 8005244:	4608      	mov	r0, r1
 8005246:	4629      	mov	r1, r5
 8005248:	e9c2 0100 	strd	r0, r1, [r2]
 800524c:	f7ff bb7a 	b.w	8004944 <_svfiprintf_r+0x2c>
 8005250:	0800d6f8 	.word	0x0800d6f8
 8005254:	0800d70c 	.word	0x0800d70c
 8005258:	0800aed0 	.word	0x0800aed0
 800525c:	4264      	negs	r4, r4
 800525e:	9404      	str	r4, [sp, #16]
 8005260:	9206      	str	r2, [sp, #24]
 8005262:	e4a9      	b.n	8004bb8 <_svfiprintf_r+0x2a0>
 8005264:	2140      	movs	r1, #64	; 0x40
 8005266:	f7fe fb51 	bl	800390c <_malloc_r>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	6018      	str	r0, [r3, #0]
 800526e:	6118      	str	r0, [r3, #16]
 8005270:	2800      	cmp	r0, #0
 8005272:	d066      	beq.n	8005342 <_svfiprintf_r+0xa2a>
 8005274:	9a02      	ldr	r2, [sp, #8]
 8005276:	2340      	movs	r3, #64	; 0x40
 8005278:	6153      	str	r3, [r2, #20]
 800527a:	f7ff bb5b 	b.w	8004934 <_svfiprintf_r+0x1c>
 800527e:	4628      	mov	r0, r5
 8005280:	9606      	str	r6, [sp, #24]
 8005282:	f8cd 8000 	str.w	r8, [sp]
 8005286:	f7fc f8fb 	bl	8001480 <strlen>
 800528a:	f04f 0900 	mov.w	r9, #0
 800528e:	9003      	str	r0, [sp, #12]
 8005290:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 8005294:	e6f6      	b.n	8005084 <_svfiprintf_r+0x76c>
 8005296:	9901      	ldr	r1, [sp, #4]
 8005298:	6011      	str	r1, [r2, #0]
 800529a:	9306      	str	r3, [sp, #24]
 800529c:	f7ff bb52 	b.w	8004944 <_svfiprintf_r+0x2c>
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	f47f ac05 	bne.w	8004ab0 <_svfiprintf_r+0x198>
 80052a6:	e777      	b.n	8005198 <_svfiprintf_r+0x880>
 80052a8:	ad1a      	add	r5, sp, #104	; 0x68
 80052aa:	4630      	mov	r0, r6
 80052ac:	4639      	mov	r1, r7
 80052ae:	220a      	movs	r2, #10
 80052b0:	2300      	movs	r3, #0
 80052b2:	f7fb fe33 	bl	8000f1c <__aeabi_uldivmod>
 80052b6:	3230      	adds	r2, #48	; 0x30
 80052b8:	f805 2d01 	strb.w	r2, [r5, #-1]!
 80052bc:	4630      	mov	r0, r6
 80052be:	4639      	mov	r1, r7
 80052c0:	2300      	movs	r3, #0
 80052c2:	220a      	movs	r2, #10
 80052c4:	f7fb fe2a 	bl	8000f1c <__aeabi_uldivmod>
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	ea56 0307 	orrs.w	r3, r6, r7
 80052d0:	d1eb      	bne.n	80052aa <_svfiprintf_r+0x992>
 80052d2:	e6d4      	b.n	800507e <_svfiprintf_r+0x766>
 80052d4:	aa0d      	add	r2, sp, #52	; 0x34
 80052d6:	9902      	ldr	r1, [sp, #8]
 80052d8:	9805      	ldr	r0, [sp, #20]
 80052da:	f7ff faa3 	bl	8004824 <__ssprint_r>
 80052de:	2800      	cmp	r0, #0
 80052e0:	f47f ac2d 	bne.w	8004b3e <_svfiprintf_r+0x226>
 80052e4:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	; 0x38
 80052e8:	a81c      	add	r0, sp, #112	; 0x70
 80052ea:	f101 0c01 	add.w	ip, r1, #1
 80052ee:	f10d 0b68 	add.w	fp, sp, #104	; 0x68
 80052f2:	e59a      	b.n	8004e2a <_svfiprintf_r+0x512>
 80052f4:	4603      	mov	r3, r0
 80052f6:	e5c8      	b.n	8004e8a <_svfiprintf_r+0x572>
 80052f8:	464b      	mov	r3, r9
 80052fa:	2b06      	cmp	r3, #6
 80052fc:	bf28      	it	cs
 80052fe:	2306      	movcs	r3, #6
 8005300:	9606      	str	r6, [sp, #24]
 8005302:	9303      	str	r3, [sp, #12]
 8005304:	461e      	mov	r6, r3
 8005306:	4d1c      	ldr	r5, [pc, #112]	; (8005378 <_svfiprintf_r+0xa60>)
 8005308:	e512      	b.n	8004d30 <_svfiprintf_r+0x418>
 800530a:	46a2      	mov	sl, r4
 800530c:	f04f 0900 	mov.w	r9, #0
 8005310:	f7ff bb4f 	b.w	80049b2 <_svfiprintf_r+0x9a>
 8005314:	f8cd 900c 	str.w	r9, [sp, #12]
 8005318:	f89d 402f 	ldrb.w	r4, [sp, #47]	; 0x2f
 800531c:	9606      	str	r6, [sp, #24]
 800531e:	f8cd 8000 	str.w	r8, [sp]
 8005322:	4681      	mov	r9, r0
 8005324:	e6ae      	b.n	8005084 <_svfiprintf_r+0x76c>
 8005326:	4603      	mov	r3, r0
 8005328:	4661      	mov	r1, ip
 800532a:	e6ea      	b.n	8005102 <_svfiprintf_r+0x7ea>
 800532c:	9d06      	ldr	r5, [sp, #24]
 800532e:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8005332:	682a      	ldr	r2, [r5, #0]
 8005334:	ea42 79e2 	orr.w	r9, r2, r2, asr #31
 8005338:	1d2a      	adds	r2, r5, #4
 800533a:	46a2      	mov	sl, r4
 800533c:	9206      	str	r2, [sp, #24]
 800533e:	f7ff bb36 	b.w	80049ae <_svfiprintf_r+0x96>
 8005342:	9a05      	ldr	r2, [sp, #20]
 8005344:	230c      	movs	r3, #12
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	f7ff bbff 	b.w	8004b50 <_svfiprintf_r+0x238>
 8005352:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005356:	e617      	b.n	8004f88 <_svfiprintf_r+0x670>
 8005358:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800535c:	e644      	b.n	8004fe8 <_svfiprintf_r+0x6d0>
 800535e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005362:	e5f9      	b.n	8004f58 <_svfiprintf_r+0x640>
 8005364:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005368:	e44a      	b.n	8004c00 <_svfiprintf_r+0x2e8>
 800536a:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 800536e:	e4a1      	b.n	8004cb4 <_svfiprintf_r+0x39c>
 8005370:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
 8005374:	e666      	b.n	8005044 <_svfiprintf_r+0x72c>
 8005376:	bf00      	nop
 8005378:	0800b6b4 	.word	0x0800b6b4

0800537c <_calloc_r>:
 800537c:	b510      	push	{r4, lr}
 800537e:	fb02 f101 	mul.w	r1, r2, r1
 8005382:	f7fe fac3 	bl	800390c <_malloc_r>
 8005386:	4604      	mov	r4, r0
 8005388:	b1d8      	cbz	r0, 80053c2 <_calloc_r+0x46>
 800538a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800538e:	f022 0203 	bic.w	r2, r2, #3
 8005392:	3a04      	subs	r2, #4
 8005394:	2a24      	cmp	r2, #36	; 0x24
 8005396:	d81d      	bhi.n	80053d4 <_calloc_r+0x58>
 8005398:	2a13      	cmp	r2, #19
 800539a:	d914      	bls.n	80053c6 <_calloc_r+0x4a>
 800539c:	2300      	movs	r3, #0
 800539e:	2a1b      	cmp	r2, #27
 80053a0:	e9c0 3300 	strd	r3, r3, [r0]
 80053a4:	d91b      	bls.n	80053de <_calloc_r+0x62>
 80053a6:	2a24      	cmp	r2, #36	; 0x24
 80053a8:	e9c0 3302 	strd	r3, r3, [r0, #8]
 80053ac:	bf0a      	itet	eq
 80053ae:	e9c0 3304 	strdeq	r3, r3, [r0, #16]
 80053b2:	f100 0210 	addne.w	r2, r0, #16
 80053b6:	f100 0218 	addeq.w	r2, r0, #24
 80053ba:	2300      	movs	r3, #0
 80053bc:	e9c2 3300 	strd	r3, r3, [r2]
 80053c0:	6093      	str	r3, [r2, #8]
 80053c2:	4620      	mov	r0, r4
 80053c4:	bd10      	pop	{r4, pc}
 80053c6:	4602      	mov	r2, r0
 80053c8:	2300      	movs	r3, #0
 80053ca:	e9c2 3300 	strd	r3, r3, [r2]
 80053ce:	6093      	str	r3, [r2, #8]
 80053d0:	4620      	mov	r0, r4
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	2100      	movs	r1, #0
 80053d6:	f7fb ffc1 	bl	800135c <memset>
 80053da:	4620      	mov	r0, r4
 80053dc:	bd10      	pop	{r4, pc}
 80053de:	f100 0208 	add.w	r2, r0, #8
 80053e2:	e7f1      	b.n	80053c8 <_calloc_r+0x4c>

080053e4 <_malloc_trim_r>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	4f24      	ldr	r7, [pc, #144]	; (8005478 <_malloc_trim_r+0x94>)
 80053e8:	460c      	mov	r4, r1
 80053ea:	4606      	mov	r6, r0
 80053ec:	f7fe fd98 	bl	8003f20 <__malloc_lock>
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	685d      	ldr	r5, [r3, #4]
 80053f4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
 80053f8:	310f      	adds	r1, #15
 80053fa:	f025 0503 	bic.w	r5, r5, #3
 80053fe:	4429      	add	r1, r5
 8005400:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
 8005404:	f021 010f 	bic.w	r1, r1, #15
 8005408:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
 800540c:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005410:	db07      	blt.n	8005422 <_malloc_trim_r+0x3e>
 8005412:	2100      	movs	r1, #0
 8005414:	4630      	mov	r0, r6
 8005416:	f002 f833 	bl	8007480 <_sbrk_r>
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	442b      	add	r3, r5
 800541e:	4298      	cmp	r0, r3
 8005420:	d004      	beq.n	800542c <_malloc_trim_r+0x48>
 8005422:	4630      	mov	r0, r6
 8005424:	f7fe fd7e 	bl	8003f24 <__malloc_unlock>
 8005428:	2000      	movs	r0, #0
 800542a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800542c:	4261      	negs	r1, r4
 800542e:	4630      	mov	r0, r6
 8005430:	f002 f826 	bl	8007480 <_sbrk_r>
 8005434:	3001      	adds	r0, #1
 8005436:	d00d      	beq.n	8005454 <_malloc_trim_r+0x70>
 8005438:	4b10      	ldr	r3, [pc, #64]	; (800547c <_malloc_trim_r+0x98>)
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	6819      	ldr	r1, [r3, #0]
 800543e:	1b2d      	subs	r5, r5, r4
 8005440:	f045 0501 	orr.w	r5, r5, #1
 8005444:	4630      	mov	r0, r6
 8005446:	1b09      	subs	r1, r1, r4
 8005448:	6055      	str	r5, [r2, #4]
 800544a:	6019      	str	r1, [r3, #0]
 800544c:	f7fe fd6a 	bl	8003f24 <__malloc_unlock>
 8005450:	2001      	movs	r0, #1
 8005452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005454:	2100      	movs	r1, #0
 8005456:	4630      	mov	r0, r6
 8005458:	f002 f812 	bl	8007480 <_sbrk_r>
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	1a83      	subs	r3, r0, r2
 8005460:	2b0f      	cmp	r3, #15
 8005462:	ddde      	ble.n	8005422 <_malloc_trim_r+0x3e>
 8005464:	4c06      	ldr	r4, [pc, #24]	; (8005480 <_malloc_trim_r+0x9c>)
 8005466:	4905      	ldr	r1, [pc, #20]	; (800547c <_malloc_trim_r+0x98>)
 8005468:	6824      	ldr	r4, [r4, #0]
 800546a:	f043 0301 	orr.w	r3, r3, #1
 800546e:	1b00      	subs	r0, r0, r4
 8005470:	6053      	str	r3, [r2, #4]
 8005472:	6008      	str	r0, [r1, #0]
 8005474:	e7d5      	b.n	8005422 <_malloc_trim_r+0x3e>
 8005476:	bf00      	nop
 8005478:	20000c38 	.word	0x20000c38
 800547c:	200011ec 	.word	0x200011ec
 8005480:	20001040 	.word	0x20001040

08005484 <_free_r>:
 8005484:	2900      	cmp	r1, #0
 8005486:	d053      	beq.n	8005530 <_free_r+0xac>
 8005488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800548a:	460c      	mov	r4, r1
 800548c:	4606      	mov	r6, r0
 800548e:	f7fe fd47 	bl	8003f20 <__malloc_lock>
 8005492:	f854 cc04 	ldr.w	ip, [r4, #-4]
 8005496:	4f71      	ldr	r7, [pc, #452]	; (800565c <_free_r+0x1d8>)
 8005498:	f02c 0101 	bic.w	r1, ip, #1
 800549c:	f1a4 0508 	sub.w	r5, r4, #8
 80054a0:	186b      	adds	r3, r5, r1
 80054a2:	68b8      	ldr	r0, [r7, #8]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	4298      	cmp	r0, r3
 80054a8:	f022 0203 	bic.w	r2, r2, #3
 80054ac:	d053      	beq.n	8005556 <_free_r+0xd2>
 80054ae:	f01c 0f01 	tst.w	ip, #1
 80054b2:	605a      	str	r2, [r3, #4]
 80054b4:	eb03 0002 	add.w	r0, r3, r2
 80054b8:	d13b      	bne.n	8005532 <_free_r+0xae>
 80054ba:	f854 cc08 	ldr.w	ip, [r4, #-8]
 80054be:	6840      	ldr	r0, [r0, #4]
 80054c0:	eba5 050c 	sub.w	r5, r5, ip
 80054c4:	f107 0e08 	add.w	lr, r7, #8
 80054c8:	68ac      	ldr	r4, [r5, #8]
 80054ca:	4574      	cmp	r4, lr
 80054cc:	4461      	add	r1, ip
 80054ce:	f000 0001 	and.w	r0, r0, #1
 80054d2:	d075      	beq.n	80055c0 <_free_r+0x13c>
 80054d4:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80054d8:	f8c4 c00c 	str.w	ip, [r4, #12]
 80054dc:	f8cc 4008 	str.w	r4, [ip, #8]
 80054e0:	b360      	cbz	r0, 800553c <_free_r+0xb8>
 80054e2:	f041 0301 	orr.w	r3, r1, #1
 80054e6:	606b      	str	r3, [r5, #4]
 80054e8:	5069      	str	r1, [r5, r1]
 80054ea:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80054ee:	d350      	bcc.n	8005592 <_free_r+0x10e>
 80054f0:	0a4b      	lsrs	r3, r1, #9
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d870      	bhi.n	80055d8 <_free_r+0x154>
 80054f6:	098b      	lsrs	r3, r1, #6
 80054f8:	f103 0439 	add.w	r4, r3, #57	; 0x39
 80054fc:	00e4      	lsls	r4, r4, #3
 80054fe:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005502:	1938      	adds	r0, r7, r4
 8005504:	593b      	ldr	r3, [r7, r4]
 8005506:	3808      	subs	r0, #8
 8005508:	4298      	cmp	r0, r3
 800550a:	d078      	beq.n	80055fe <_free_r+0x17a>
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	f022 0203 	bic.w	r2, r2, #3
 8005512:	428a      	cmp	r2, r1
 8005514:	d971      	bls.n	80055fa <_free_r+0x176>
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	4298      	cmp	r0, r3
 800551a:	d1f7      	bne.n	800550c <_free_r+0x88>
 800551c:	68c3      	ldr	r3, [r0, #12]
 800551e:	e9c5 0302 	strd	r0, r3, [r5, #8]
 8005522:	609d      	str	r5, [r3, #8]
 8005524:	60c5      	str	r5, [r0, #12]
 8005526:	4630      	mov	r0, r6
 8005528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800552c:	f7fe bcfa 	b.w	8003f24 <__malloc_unlock>
 8005530:	4770      	bx	lr
 8005532:	6840      	ldr	r0, [r0, #4]
 8005534:	f000 0001 	and.w	r0, r0, #1
 8005538:	2800      	cmp	r0, #0
 800553a:	d1d2      	bne.n	80054e2 <_free_r+0x5e>
 800553c:	6898      	ldr	r0, [r3, #8]
 800553e:	4c48      	ldr	r4, [pc, #288]	; (8005660 <_free_r+0x1dc>)
 8005540:	4411      	add	r1, r2
 8005542:	42a0      	cmp	r0, r4
 8005544:	f041 0201 	orr.w	r2, r1, #1
 8005548:	d062      	beq.n	8005610 <_free_r+0x18c>
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	60c3      	str	r3, [r0, #12]
 800554e:	6098      	str	r0, [r3, #8]
 8005550:	606a      	str	r2, [r5, #4]
 8005552:	5069      	str	r1, [r5, r1]
 8005554:	e7c9      	b.n	80054ea <_free_r+0x66>
 8005556:	f01c 0f01 	tst.w	ip, #1
 800555a:	440a      	add	r2, r1
 800555c:	d107      	bne.n	800556e <_free_r+0xea>
 800555e:	f854 3c08 	ldr.w	r3, [r4, #-8]
 8005562:	1aed      	subs	r5, r5, r3
 8005564:	441a      	add	r2, r3
 8005566:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800556a:	60cb      	str	r3, [r1, #12]
 800556c:	6099      	str	r1, [r3, #8]
 800556e:	4b3d      	ldr	r3, [pc, #244]	; (8005664 <_free_r+0x1e0>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f042 0101 	orr.w	r1, r2, #1
 8005576:	4293      	cmp	r3, r2
 8005578:	6069      	str	r1, [r5, #4]
 800557a:	60bd      	str	r5, [r7, #8]
 800557c:	d804      	bhi.n	8005588 <_free_r+0x104>
 800557e:	4b3a      	ldr	r3, [pc, #232]	; (8005668 <_free_r+0x1e4>)
 8005580:	4630      	mov	r0, r6
 8005582:	6819      	ldr	r1, [r3, #0]
 8005584:	f7ff ff2e 	bl	80053e4 <_malloc_trim_r>
 8005588:	4630      	mov	r0, r6
 800558a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800558e:	f7fe bcc9 	b.w	8003f24 <__malloc_unlock>
 8005592:	08c9      	lsrs	r1, r1, #3
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	1c4a      	adds	r2, r1, #1
 8005598:	2301      	movs	r3, #1
 800559a:	1089      	asrs	r1, r1, #2
 800559c:	408b      	lsls	r3, r1
 800559e:	4303      	orrs	r3, r0
 80055a0:	eb07 01c2 	add.w	r1, r7, r2, lsl #3
 80055a4:	f857 0032 	ldr.w	r0, [r7, r2, lsl #3]
 80055a8:	607b      	str	r3, [r7, #4]
 80055aa:	3908      	subs	r1, #8
 80055ac:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80055b0:	f847 5032 	str.w	r5, [r7, r2, lsl #3]
 80055b4:	60c5      	str	r5, [r0, #12]
 80055b6:	4630      	mov	r0, r6
 80055b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80055bc:	f7fe bcb2 	b.w	8003f24 <__malloc_unlock>
 80055c0:	2800      	cmp	r0, #0
 80055c2:	d145      	bne.n	8005650 <_free_r+0x1cc>
 80055c4:	440a      	add	r2, r1
 80055c6:	e9d3 1302 	ldrd	r1, r3, [r3, #8]
 80055ca:	f042 0001 	orr.w	r0, r2, #1
 80055ce:	60cb      	str	r3, [r1, #12]
 80055d0:	6099      	str	r1, [r3, #8]
 80055d2:	6068      	str	r0, [r5, #4]
 80055d4:	50aa      	str	r2, [r5, r2]
 80055d6:	e7d7      	b.n	8005588 <_free_r+0x104>
 80055d8:	2b14      	cmp	r3, #20
 80055da:	d908      	bls.n	80055ee <_free_r+0x16a>
 80055dc:	2b54      	cmp	r3, #84	; 0x54
 80055de:	d81e      	bhi.n	800561e <_free_r+0x19a>
 80055e0:	0b0b      	lsrs	r3, r1, #12
 80055e2:	f103 046f 	add.w	r4, r3, #111	; 0x6f
 80055e6:	00e4      	lsls	r4, r4, #3
 80055e8:	f103 026e 	add.w	r2, r3, #110	; 0x6e
 80055ec:	e789      	b.n	8005502 <_free_r+0x7e>
 80055ee:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 80055f2:	00e4      	lsls	r4, r4, #3
 80055f4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
 80055f8:	e783      	b.n	8005502 <_free_r+0x7e>
 80055fa:	4618      	mov	r0, r3
 80055fc:	e78e      	b.n	800551c <_free_r+0x98>
 80055fe:	1093      	asrs	r3, r2, #2
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	fa02 f303 	lsl.w	r3, r2, r3
 8005608:	430b      	orrs	r3, r1
 800560a:	607b      	str	r3, [r7, #4]
 800560c:	4603      	mov	r3, r0
 800560e:	e786      	b.n	800551e <_free_r+0x9a>
 8005610:	e9c7 5504 	strd	r5, r5, [r7, #16]
 8005614:	e9c5 0002 	strd	r0, r0, [r5, #8]
 8005618:	606a      	str	r2, [r5, #4]
 800561a:	5069      	str	r1, [r5, r1]
 800561c:	e7b4      	b.n	8005588 <_free_r+0x104>
 800561e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005622:	d806      	bhi.n	8005632 <_free_r+0x1ae>
 8005624:	0bcb      	lsrs	r3, r1, #15
 8005626:	f103 0478 	add.w	r4, r3, #120	; 0x78
 800562a:	00e4      	lsls	r4, r4, #3
 800562c:	f103 0277 	add.w	r2, r3, #119	; 0x77
 8005630:	e767      	b.n	8005502 <_free_r+0x7e>
 8005632:	f240 5254 	movw	r2, #1364	; 0x554
 8005636:	4293      	cmp	r3, r2
 8005638:	d806      	bhi.n	8005648 <_free_r+0x1c4>
 800563a:	0c8b      	lsrs	r3, r1, #18
 800563c:	f103 047d 	add.w	r4, r3, #125	; 0x7d
 8005640:	00e4      	lsls	r4, r4, #3
 8005642:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8005646:	e75c      	b.n	8005502 <_free_r+0x7e>
 8005648:	f44f 747e 	mov.w	r4, #1016	; 0x3f8
 800564c:	227e      	movs	r2, #126	; 0x7e
 800564e:	e758      	b.n	8005502 <_free_r+0x7e>
 8005650:	f041 0201 	orr.w	r2, r1, #1
 8005654:	606a      	str	r2, [r5, #4]
 8005656:	6019      	str	r1, [r3, #0]
 8005658:	e796      	b.n	8005588 <_free_r+0x104>
 800565a:	bf00      	nop
 800565c:	20000c38 	.word	0x20000c38
 8005660:	20000c40 	.word	0x20000c40
 8005664:	20001044 	.word	0x20001044
 8005668:	200011e8 	.word	0x200011e8

0800566c <_mbtowc_r>:
 800566c:	b410      	push	{r4}
 800566e:	4c03      	ldr	r4, [pc, #12]	; (800567c <_mbtowc_r+0x10>)
 8005670:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8005674:	46a4      	mov	ip, r4
 8005676:	f85d 4b04 	ldr.w	r4, [sp], #4
 800567a:	4760      	bx	ip
 800567c:	20001048 	.word	0x20001048

08005680 <__ascii_mbtowc>:
 8005680:	b082      	sub	sp, #8
 8005682:	b149      	cbz	r1, 8005698 <__ascii_mbtowc+0x18>
 8005684:	b15a      	cbz	r2, 800569e <__ascii_mbtowc+0x1e>
 8005686:	b16b      	cbz	r3, 80056a4 <__ascii_mbtowc+0x24>
 8005688:	7813      	ldrb	r3, [r2, #0]
 800568a:	600b      	str	r3, [r1, #0]
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	1c10      	adds	r0, r2, #0
 8005690:	bf18      	it	ne
 8005692:	2001      	movne	r0, #1
 8005694:	b002      	add	sp, #8
 8005696:	4770      	bx	lr
 8005698:	a901      	add	r1, sp, #4
 800569a:	2a00      	cmp	r2, #0
 800569c:	d1f3      	bne.n	8005686 <__ascii_mbtowc+0x6>
 800569e:	4610      	mov	r0, r2
 80056a0:	b002      	add	sp, #8
 80056a2:	4770      	bx	lr
 80056a4:	f06f 0001 	mvn.w	r0, #1
 80056a8:	e7f4      	b.n	8005694 <__ascii_mbtowc+0x14>
 80056aa:	bf00      	nop

080056ac <memmove>:
 80056ac:	4288      	cmp	r0, r1
 80056ae:	b4f0      	push	{r4, r5, r6, r7}
 80056b0:	d90d      	bls.n	80056ce <memmove+0x22>
 80056b2:	188b      	adds	r3, r1, r2
 80056b4:	4283      	cmp	r3, r0
 80056b6:	d90a      	bls.n	80056ce <memmove+0x22>
 80056b8:	1884      	adds	r4, r0, r2
 80056ba:	b132      	cbz	r2, 80056ca <memmove+0x1e>
 80056bc:	4622      	mov	r2, r4
 80056be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056c6:	4299      	cmp	r1, r3
 80056c8:	d1f9      	bne.n	80056be <memmove+0x12>
 80056ca:	bcf0      	pop	{r4, r5, r6, r7}
 80056cc:	4770      	bx	lr
 80056ce:	2a0f      	cmp	r2, #15
 80056d0:	d949      	bls.n	8005766 <memmove+0xba>
 80056d2:	ea40 0301 	orr.w	r3, r0, r1
 80056d6:	079b      	lsls	r3, r3, #30
 80056d8:	d147      	bne.n	800576a <memmove+0xbe>
 80056da:	f1a2 0310 	sub.w	r3, r2, #16
 80056de:	091b      	lsrs	r3, r3, #4
 80056e0:	f101 0720 	add.w	r7, r1, #32
 80056e4:	eb07 1703 	add.w	r7, r7, r3, lsl #4
 80056e8:	f101 0410 	add.w	r4, r1, #16
 80056ec:	f100 0510 	add.w	r5, r0, #16
 80056f0:	f854 6c10 	ldr.w	r6, [r4, #-16]
 80056f4:	f845 6c10 	str.w	r6, [r5, #-16]
 80056f8:	f854 6c0c 	ldr.w	r6, [r4, #-12]
 80056fc:	f845 6c0c 	str.w	r6, [r5, #-12]
 8005700:	f854 6c08 	ldr.w	r6, [r4, #-8]
 8005704:	f845 6c08 	str.w	r6, [r5, #-8]
 8005708:	f854 6c04 	ldr.w	r6, [r4, #-4]
 800570c:	f845 6c04 	str.w	r6, [r5, #-4]
 8005710:	3410      	adds	r4, #16
 8005712:	42bc      	cmp	r4, r7
 8005714:	f105 0510 	add.w	r5, r5, #16
 8005718:	d1ea      	bne.n	80056f0 <memmove+0x44>
 800571a:	3301      	adds	r3, #1
 800571c:	f002 050f 	and.w	r5, r2, #15
 8005720:	011b      	lsls	r3, r3, #4
 8005722:	2d03      	cmp	r5, #3
 8005724:	4419      	add	r1, r3
 8005726:	4403      	add	r3, r0
 8005728:	d921      	bls.n	800576e <memmove+0xc2>
 800572a:	1f1f      	subs	r7, r3, #4
 800572c:	460e      	mov	r6, r1
 800572e:	462c      	mov	r4, r5
 8005730:	3c04      	subs	r4, #4
 8005732:	f856 cb04 	ldr.w	ip, [r6], #4
 8005736:	f847 cf04 	str.w	ip, [r7, #4]!
 800573a:	2c03      	cmp	r4, #3
 800573c:	d8f8      	bhi.n	8005730 <memmove+0x84>
 800573e:	1f2c      	subs	r4, r5, #4
 8005740:	f024 0403 	bic.w	r4, r4, #3
 8005744:	3404      	adds	r4, #4
 8005746:	4423      	add	r3, r4
 8005748:	4421      	add	r1, r4
 800574a:	f002 0203 	and.w	r2, r2, #3
 800574e:	2a00      	cmp	r2, #0
 8005750:	d0bb      	beq.n	80056ca <memmove+0x1e>
 8005752:	3b01      	subs	r3, #1
 8005754:	440a      	add	r2, r1
 8005756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575e:	4291      	cmp	r1, r2
 8005760:	d1f9      	bne.n	8005756 <memmove+0xaa>
 8005762:	bcf0      	pop	{r4, r5, r6, r7}
 8005764:	4770      	bx	lr
 8005766:	4603      	mov	r3, r0
 8005768:	e7f1      	b.n	800574e <memmove+0xa2>
 800576a:	4603      	mov	r3, r0
 800576c:	e7f1      	b.n	8005752 <memmove+0xa6>
 800576e:	462a      	mov	r2, r5
 8005770:	e7ed      	b.n	800574e <memmove+0xa2>
 8005772:	bf00      	nop

08005774 <_realloc_r>:
 8005774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005778:	4692      	mov	sl, r2
 800577a:	b083      	sub	sp, #12
 800577c:	2900      	cmp	r1, #0
 800577e:	f000 80a1 	beq.w	80058c4 <_realloc_r+0x150>
 8005782:	460d      	mov	r5, r1
 8005784:	4680      	mov	r8, r0
 8005786:	f10a 040b 	add.w	r4, sl, #11
 800578a:	f7fe fbc9 	bl	8003f20 <__malloc_lock>
 800578e:	f855 2c04 	ldr.w	r2, [r5, #-4]
 8005792:	2c16      	cmp	r4, #22
 8005794:	f022 0603 	bic.w	r6, r2, #3
 8005798:	f1a5 0708 	sub.w	r7, r5, #8
 800579c:	d83e      	bhi.n	800581c <_realloc_r+0xa8>
 800579e:	2410      	movs	r4, #16
 80057a0:	4621      	mov	r1, r4
 80057a2:	45a2      	cmp	sl, r4
 80057a4:	d83f      	bhi.n	8005826 <_realloc_r+0xb2>
 80057a6:	428e      	cmp	r6, r1
 80057a8:	eb07 0906 	add.w	r9, r7, r6
 80057ac:	da74      	bge.n	8005898 <_realloc_r+0x124>
 80057ae:	4bc7      	ldr	r3, [pc, #796]	; (8005acc <_realloc_r+0x358>)
 80057b0:	6898      	ldr	r0, [r3, #8]
 80057b2:	4548      	cmp	r0, r9
 80057b4:	f000 80aa 	beq.w	800590c <_realloc_r+0x198>
 80057b8:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80057bc:	f020 0301 	bic.w	r3, r0, #1
 80057c0:	444b      	add	r3, r9
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	07db      	lsls	r3, r3, #31
 80057c6:	f140 8083 	bpl.w	80058d0 <_realloc_r+0x15c>
 80057ca:	07d2      	lsls	r2, r2, #31
 80057cc:	d534      	bpl.n	8005838 <_realloc_r+0xc4>
 80057ce:	4651      	mov	r1, sl
 80057d0:	4640      	mov	r0, r8
 80057d2:	f7fe f89b 	bl	800390c <_malloc_r>
 80057d6:	4682      	mov	sl, r0
 80057d8:	b1e0      	cbz	r0, 8005814 <_realloc_r+0xa0>
 80057da:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80057de:	f023 0301 	bic.w	r3, r3, #1
 80057e2:	443b      	add	r3, r7
 80057e4:	f1a0 0208 	sub.w	r2, r0, #8
 80057e8:	4293      	cmp	r3, r2
 80057ea:	f000 80f9 	beq.w	80059e0 <_realloc_r+0x26c>
 80057ee:	1f32      	subs	r2, r6, #4
 80057f0:	2a24      	cmp	r2, #36	; 0x24
 80057f2:	f200 8107 	bhi.w	8005a04 <_realloc_r+0x290>
 80057f6:	2a13      	cmp	r2, #19
 80057f8:	6829      	ldr	r1, [r5, #0]
 80057fa:	f200 80e6 	bhi.w	80059ca <_realloc_r+0x256>
 80057fe:	4603      	mov	r3, r0
 8005800:	462a      	mov	r2, r5
 8005802:	6019      	str	r1, [r3, #0]
 8005804:	6851      	ldr	r1, [r2, #4]
 8005806:	6059      	str	r1, [r3, #4]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	609a      	str	r2, [r3, #8]
 800580c:	4629      	mov	r1, r5
 800580e:	4640      	mov	r0, r8
 8005810:	f7ff fe38 	bl	8005484 <_free_r>
 8005814:	4640      	mov	r0, r8
 8005816:	f7fe fb85 	bl	8003f24 <__malloc_unlock>
 800581a:	e04f      	b.n	80058bc <_realloc_r+0x148>
 800581c:	f024 0407 	bic.w	r4, r4, #7
 8005820:	2c00      	cmp	r4, #0
 8005822:	4621      	mov	r1, r4
 8005824:	dabd      	bge.n	80057a2 <_realloc_r+0x2e>
 8005826:	f04f 0a00 	mov.w	sl, #0
 800582a:	230c      	movs	r3, #12
 800582c:	4650      	mov	r0, sl
 800582e:	f8c8 3000 	str.w	r3, [r8]
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	f855 3c08 	ldr.w	r3, [r5, #-8]
 800583c:	eba7 0b03 	sub.w	fp, r7, r3
 8005840:	f8db 2004 	ldr.w	r2, [fp, #4]
 8005844:	f022 0203 	bic.w	r2, r2, #3
 8005848:	18b3      	adds	r3, r6, r2
 800584a:	428b      	cmp	r3, r1
 800584c:	dbbf      	blt.n	80057ce <_realloc_r+0x5a>
 800584e:	46da      	mov	sl, fp
 8005850:	f8db 100c 	ldr.w	r1, [fp, #12]
 8005854:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 8005858:	1f32      	subs	r2, r6, #4
 800585a:	2a24      	cmp	r2, #36	; 0x24
 800585c:	60c1      	str	r1, [r0, #12]
 800585e:	eb0b 0903 	add.w	r9, fp, r3
 8005862:	6088      	str	r0, [r1, #8]
 8005864:	f200 80c6 	bhi.w	80059f4 <_realloc_r+0x280>
 8005868:	2a13      	cmp	r2, #19
 800586a:	6829      	ldr	r1, [r5, #0]
 800586c:	f240 80c0 	bls.w	80059f0 <_realloc_r+0x27c>
 8005870:	f8cb 1008 	str.w	r1, [fp, #8]
 8005874:	6869      	ldr	r1, [r5, #4]
 8005876:	f8cb 100c 	str.w	r1, [fp, #12]
 800587a:	2a1b      	cmp	r2, #27
 800587c:	68a9      	ldr	r1, [r5, #8]
 800587e:	f200 80d8 	bhi.w	8005a32 <_realloc_r+0x2be>
 8005882:	f10b 0210 	add.w	r2, fp, #16
 8005886:	3508      	adds	r5, #8
 8005888:	6011      	str	r1, [r2, #0]
 800588a:	6869      	ldr	r1, [r5, #4]
 800588c:	6051      	str	r1, [r2, #4]
 800588e:	68a9      	ldr	r1, [r5, #8]
 8005890:	6091      	str	r1, [r2, #8]
 8005892:	461e      	mov	r6, r3
 8005894:	465f      	mov	r7, fp
 8005896:	4655      	mov	r5, sl
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	1b32      	subs	r2, r6, r4
 800589c:	2a0f      	cmp	r2, #15
 800589e:	f003 0301 	and.w	r3, r3, #1
 80058a2:	d822      	bhi.n	80058ea <_realloc_r+0x176>
 80058a4:	4333      	orrs	r3, r6
 80058a6:	607b      	str	r3, [r7, #4]
 80058a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80058ac:	f043 0301 	orr.w	r3, r3, #1
 80058b0:	f8c9 3004 	str.w	r3, [r9, #4]
 80058b4:	4640      	mov	r0, r8
 80058b6:	f7fe fb35 	bl	8003f24 <__malloc_unlock>
 80058ba:	46aa      	mov	sl, r5
 80058bc:	4650      	mov	r0, sl
 80058be:	b003      	add	sp, #12
 80058c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c4:	4611      	mov	r1, r2
 80058c6:	b003      	add	sp, #12
 80058c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058cc:	f7fe b81e 	b.w	800390c <_malloc_r>
 80058d0:	f020 0003 	bic.w	r0, r0, #3
 80058d4:	1833      	adds	r3, r6, r0
 80058d6:	428b      	cmp	r3, r1
 80058d8:	db61      	blt.n	800599e <_realloc_r+0x22a>
 80058da:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 80058de:	461e      	mov	r6, r3
 80058e0:	60ca      	str	r2, [r1, #12]
 80058e2:	eb07 0903 	add.w	r9, r7, r3
 80058e6:	6091      	str	r1, [r2, #8]
 80058e8:	e7d6      	b.n	8005898 <_realloc_r+0x124>
 80058ea:	1939      	adds	r1, r7, r4
 80058ec:	4323      	orrs	r3, r4
 80058ee:	f042 0201 	orr.w	r2, r2, #1
 80058f2:	607b      	str	r3, [r7, #4]
 80058f4:	604a      	str	r2, [r1, #4]
 80058f6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	3108      	adds	r1, #8
 8005900:	f8c9 3004 	str.w	r3, [r9, #4]
 8005904:	4640      	mov	r0, r8
 8005906:	f7ff fdbd 	bl	8005484 <_free_r>
 800590a:	e7d3      	b.n	80058b4 <_realloc_r+0x140>
 800590c:	6840      	ldr	r0, [r0, #4]
 800590e:	f020 0903 	bic.w	r9, r0, #3
 8005912:	44b1      	add	r9, r6
 8005914:	f104 0010 	add.w	r0, r4, #16
 8005918:	4581      	cmp	r9, r0
 800591a:	da77      	bge.n	8005a0c <_realloc_r+0x298>
 800591c:	07d2      	lsls	r2, r2, #31
 800591e:	f53f af56 	bmi.w	80057ce <_realloc_r+0x5a>
 8005922:	f855 2c08 	ldr.w	r2, [r5, #-8]
 8005926:	eba7 0b02 	sub.w	fp, r7, r2
 800592a:	f8db 2004 	ldr.w	r2, [fp, #4]
 800592e:	f022 0203 	bic.w	r2, r2, #3
 8005932:	4491      	add	r9, r2
 8005934:	4548      	cmp	r0, r9
 8005936:	dc87      	bgt.n	8005848 <_realloc_r+0xd4>
 8005938:	46da      	mov	sl, fp
 800593a:	f8db 100c 	ldr.w	r1, [fp, #12]
 800593e:	f85a 0f08 	ldr.w	r0, [sl, #8]!
 8005942:	1f32      	subs	r2, r6, #4
 8005944:	2a24      	cmp	r2, #36	; 0x24
 8005946:	60c1      	str	r1, [r0, #12]
 8005948:	6088      	str	r0, [r1, #8]
 800594a:	f200 80a1 	bhi.w	8005a90 <_realloc_r+0x31c>
 800594e:	2a13      	cmp	r2, #19
 8005950:	6829      	ldr	r1, [r5, #0]
 8005952:	f240 809b 	bls.w	8005a8c <_realloc_r+0x318>
 8005956:	f8cb 1008 	str.w	r1, [fp, #8]
 800595a:	6869      	ldr	r1, [r5, #4]
 800595c:	f8cb 100c 	str.w	r1, [fp, #12]
 8005960:	2a1b      	cmp	r2, #27
 8005962:	68a9      	ldr	r1, [r5, #8]
 8005964:	f200 809b 	bhi.w	8005a9e <_realloc_r+0x32a>
 8005968:	f10b 0210 	add.w	r2, fp, #16
 800596c:	3508      	adds	r5, #8
 800596e:	6011      	str	r1, [r2, #0]
 8005970:	6869      	ldr	r1, [r5, #4]
 8005972:	6051      	str	r1, [r2, #4]
 8005974:	68a9      	ldr	r1, [r5, #8]
 8005976:	6091      	str	r1, [r2, #8]
 8005978:	eb0b 0104 	add.w	r1, fp, r4
 800597c:	eba9 0204 	sub.w	r2, r9, r4
 8005980:	f042 0201 	orr.w	r2, r2, #1
 8005984:	6099      	str	r1, [r3, #8]
 8005986:	604a      	str	r2, [r1, #4]
 8005988:	f8db 3004 	ldr.w	r3, [fp, #4]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	431c      	orrs	r4, r3
 8005992:	4640      	mov	r0, r8
 8005994:	f8cb 4004 	str.w	r4, [fp, #4]
 8005998:	f7fe fac4 	bl	8003f24 <__malloc_unlock>
 800599c:	e78e      	b.n	80058bc <_realloc_r+0x148>
 800599e:	07d3      	lsls	r3, r2, #31
 80059a0:	f53f af15 	bmi.w	80057ce <_realloc_r+0x5a>
 80059a4:	f855 3c08 	ldr.w	r3, [r5, #-8]
 80059a8:	eba7 0b03 	sub.w	fp, r7, r3
 80059ac:	f8db 2004 	ldr.w	r2, [fp, #4]
 80059b0:	f022 0203 	bic.w	r2, r2, #3
 80059b4:	4410      	add	r0, r2
 80059b6:	1983      	adds	r3, r0, r6
 80059b8:	428b      	cmp	r3, r1
 80059ba:	f6ff af45 	blt.w	8005848 <_realloc_r+0xd4>
 80059be:	e9d9 1202 	ldrd	r1, r2, [r9, #8]
 80059c2:	46da      	mov	sl, fp
 80059c4:	60ca      	str	r2, [r1, #12]
 80059c6:	6091      	str	r1, [r2, #8]
 80059c8:	e742      	b.n	8005850 <_realloc_r+0xdc>
 80059ca:	6001      	str	r1, [r0, #0]
 80059cc:	686b      	ldr	r3, [r5, #4]
 80059ce:	6043      	str	r3, [r0, #4]
 80059d0:	2a1b      	cmp	r2, #27
 80059d2:	d83a      	bhi.n	8005a4a <_realloc_r+0x2d6>
 80059d4:	f105 0208 	add.w	r2, r5, #8
 80059d8:	f100 0308 	add.w	r3, r0, #8
 80059dc:	68a9      	ldr	r1, [r5, #8]
 80059de:	e710      	b.n	8005802 <_realloc_r+0x8e>
 80059e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80059e4:	f023 0303 	bic.w	r3, r3, #3
 80059e8:	441e      	add	r6, r3
 80059ea:	eb07 0906 	add.w	r9, r7, r6
 80059ee:	e753      	b.n	8005898 <_realloc_r+0x124>
 80059f0:	4652      	mov	r2, sl
 80059f2:	e749      	b.n	8005888 <_realloc_r+0x114>
 80059f4:	4629      	mov	r1, r5
 80059f6:	4650      	mov	r0, sl
 80059f8:	461e      	mov	r6, r3
 80059fa:	465f      	mov	r7, fp
 80059fc:	f7ff fe56 	bl	80056ac <memmove>
 8005a00:	4655      	mov	r5, sl
 8005a02:	e749      	b.n	8005898 <_realloc_r+0x124>
 8005a04:	4629      	mov	r1, r5
 8005a06:	f7ff fe51 	bl	80056ac <memmove>
 8005a0a:	e6ff      	b.n	800580c <_realloc_r+0x98>
 8005a0c:	4427      	add	r7, r4
 8005a0e:	eba9 0904 	sub.w	r9, r9, r4
 8005a12:	f049 0201 	orr.w	r2, r9, #1
 8005a16:	609f      	str	r7, [r3, #8]
 8005a18:	607a      	str	r2, [r7, #4]
 8005a1a:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	431c      	orrs	r4, r3
 8005a24:	4640      	mov	r0, r8
 8005a26:	f845 4c04 	str.w	r4, [r5, #-4]
 8005a2a:	f7fe fa7b 	bl	8003f24 <__malloc_unlock>
 8005a2e:	46aa      	mov	sl, r5
 8005a30:	e744      	b.n	80058bc <_realloc_r+0x148>
 8005a32:	f8cb 1010 	str.w	r1, [fp, #16]
 8005a36:	68e9      	ldr	r1, [r5, #12]
 8005a38:	f8cb 1014 	str.w	r1, [fp, #20]
 8005a3c:	2a24      	cmp	r2, #36	; 0x24
 8005a3e:	d010      	beq.n	8005a62 <_realloc_r+0x2ee>
 8005a40:	6929      	ldr	r1, [r5, #16]
 8005a42:	f10b 0218 	add.w	r2, fp, #24
 8005a46:	3510      	adds	r5, #16
 8005a48:	e71e      	b.n	8005888 <_realloc_r+0x114>
 8005a4a:	68ab      	ldr	r3, [r5, #8]
 8005a4c:	6083      	str	r3, [r0, #8]
 8005a4e:	68eb      	ldr	r3, [r5, #12]
 8005a50:	60c3      	str	r3, [r0, #12]
 8005a52:	2a24      	cmp	r2, #36	; 0x24
 8005a54:	d010      	beq.n	8005a78 <_realloc_r+0x304>
 8005a56:	f105 0210 	add.w	r2, r5, #16
 8005a5a:	f100 0310 	add.w	r3, r0, #16
 8005a5e:	6929      	ldr	r1, [r5, #16]
 8005a60:	e6cf      	b.n	8005802 <_realloc_r+0x8e>
 8005a62:	692a      	ldr	r2, [r5, #16]
 8005a64:	f8cb 2018 	str.w	r2, [fp, #24]
 8005a68:	696a      	ldr	r2, [r5, #20]
 8005a6a:	f8cb 201c 	str.w	r2, [fp, #28]
 8005a6e:	69a9      	ldr	r1, [r5, #24]
 8005a70:	f10b 0220 	add.w	r2, fp, #32
 8005a74:	3518      	adds	r5, #24
 8005a76:	e707      	b.n	8005888 <_realloc_r+0x114>
 8005a78:	692b      	ldr	r3, [r5, #16]
 8005a7a:	6103      	str	r3, [r0, #16]
 8005a7c:	696b      	ldr	r3, [r5, #20]
 8005a7e:	6143      	str	r3, [r0, #20]
 8005a80:	69a9      	ldr	r1, [r5, #24]
 8005a82:	f105 0218 	add.w	r2, r5, #24
 8005a86:	f100 0318 	add.w	r3, r0, #24
 8005a8a:	e6ba      	b.n	8005802 <_realloc_r+0x8e>
 8005a8c:	4652      	mov	r2, sl
 8005a8e:	e76e      	b.n	800596e <_realloc_r+0x1fa>
 8005a90:	4629      	mov	r1, r5
 8005a92:	4650      	mov	r0, sl
 8005a94:	9301      	str	r3, [sp, #4]
 8005a96:	f7ff fe09 	bl	80056ac <memmove>
 8005a9a:	9b01      	ldr	r3, [sp, #4]
 8005a9c:	e76c      	b.n	8005978 <_realloc_r+0x204>
 8005a9e:	f8cb 1010 	str.w	r1, [fp, #16]
 8005aa2:	68e9      	ldr	r1, [r5, #12]
 8005aa4:	f8cb 1014 	str.w	r1, [fp, #20]
 8005aa8:	2a24      	cmp	r2, #36	; 0x24
 8005aaa:	d004      	beq.n	8005ab6 <_realloc_r+0x342>
 8005aac:	6929      	ldr	r1, [r5, #16]
 8005aae:	f10b 0218 	add.w	r2, fp, #24
 8005ab2:	3510      	adds	r5, #16
 8005ab4:	e75b      	b.n	800596e <_realloc_r+0x1fa>
 8005ab6:	692a      	ldr	r2, [r5, #16]
 8005ab8:	f8cb 2018 	str.w	r2, [fp, #24]
 8005abc:	696a      	ldr	r2, [r5, #20]
 8005abe:	f8cb 201c 	str.w	r2, [fp, #28]
 8005ac2:	69a9      	ldr	r1, [r5, #24]
 8005ac4:	f10b 0220 	add.w	r2, fp, #32
 8005ac8:	3518      	adds	r5, #24
 8005aca:	e750      	b.n	800596e <_realloc_r+0x1fa>
 8005acc:	20000c38 	.word	0x20000c38

08005ad0 <_wctomb_r>:
 8005ad0:	b410      	push	{r4}
 8005ad2:	4c03      	ldr	r4, [pc, #12]	; (8005ae0 <_wctomb_r+0x10>)
 8005ad4:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 8005ad8:	46a4      	mov	ip, r4
 8005ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ade:	4760      	bx	ip
 8005ae0:	20001048 	.word	0x20001048

08005ae4 <__ascii_wctomb>:
 8005ae4:	b121      	cbz	r1, 8005af0 <__ascii_wctomb+0xc>
 8005ae6:	2aff      	cmp	r2, #255	; 0xff
 8005ae8:	d804      	bhi.n	8005af4 <__ascii_wctomb+0x10>
 8005aea:	700a      	strb	r2, [r1, #0]
 8005aec:	2001      	movs	r0, #1
 8005aee:	4770      	bx	lr
 8005af0:	4608      	mov	r0, r1
 8005af2:	4770      	bx	lr
 8005af4:	238a      	movs	r3, #138	; 0x8a
 8005af6:	6003      	str	r3, [r0, #0]
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <notify1>:

#if STM32_SERIAL_USE_USART1 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  USART1->CR1 |= USART_CR1_TXEIE;
 8005b00:	4a02      	ldr	r2, [pc, #8]	; (8005b0c <notify1+0xc>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b08:	6013      	str	r3, [r2, #0]
}
 8005b0a:	4770      	bx	lr
 8005b0c:	40013800 	.word	0x40013800

08005b10 <notify2>:

#if STM32_SERIAL_USE_USART2 || defined(__DOXYGEN__)
static void notify2(io_queue_t *qp) {

  (void)qp;
  USART2->CR1 |= USART_CR1_TXEIE;
 8005b10:	4a02      	ldr	r2, [pc, #8]	; (8005b1c <notify2+0xc>)
 8005b12:	6813      	ldr	r3, [r2, #0]
 8005b14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b18:	6013      	str	r3, [r2, #0]
}
 8005b1a:	4770      	bx	lr
 8005b1c:	40004400 	.word	0x40004400

08005b20 <CRC16>:
   0X8201, 0X42C0, 0X4380, 0X8341, 0X4100, 0X81C1, 0X8081, 0X4040 };

char nTemp;
uint16_t wCRCWord = 0xFFFF;

   while (wLength--)
 8005b20:	b1a9      	cbz	r1, 8005b4e <CRC16+0x2e>
{
 8005b22:	b410      	push	{r4}
 8005b24:	1e4b      	subs	r3, r1, #1
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3301      	adds	r3, #1
 8005b2a:	18c1      	adds	r1, r0, r3
uint16_t wCRCWord = 0xFFFF;
 8005b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
   {
      nTemp = *nData++ ^ wCRCWord;
      wCRCWord >>= 8;
      wCRCWord  ^= wCRCTable[nTemp];
 8005b30:	4c09      	ldr	r4, [pc, #36]	; (8005b58 <CRC16+0x38>)
      nTemp = *nData++ ^ wCRCWord;
 8005b32:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b36:	4053      	eors	r3, r2
      wCRCWord  ^= wCRCTable[nTemp];
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8005b3e:	ea83 2212 	eor.w	r2, r3, r2, lsr #8
   while (wLength--)
 8005b42:	4288      	cmp	r0, r1
 8005b44:	d1f5      	bne.n	8005b32 <CRC16+0x12>
   }
   return wCRCWord;
} // End: CRC16
 8005b46:	4610      	mov	r0, r2
 8005b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b4c:	4770      	bx	lr
uint16_t wCRCWord = 0xFFFF;
 8005b4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
} // End: CRC16
 8005b52:	4610      	mov	r0, r2
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	0800d4d4 	.word	0x0800d4d4
 8005b5c:	00000000 	.word	0x00000000

08005b60 <write_flash>:
    if (FLASH->CR & FLASH_CR_LOCK){
 8005b60:	4b19      	ldr	r3, [pc, #100]	; (8005bc8 <write_flash+0x68>)
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005b68:	d005      	beq.n	8005b76 <write_flash+0x16>
	FLASH->KEYR = 0x45670123;
 8005b6a:	4b17      	ldr	r3, [pc, #92]	; (8005bc8 <write_flash+0x68>)
 8005b6c:	4a17      	ldr	r2, [pc, #92]	; (8005bcc <write_flash+0x6c>)
 8005b6e:	605a      	str	r2, [r3, #4]
	FLASH->KEYR = 0xCDEF89AB;
 8005b70:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8005b74:	605a      	str	r2, [r3, #4]
    FLASH->CR |= FLASH_CR_PER;             // set page erase
 8005b76:	4b14      	ldr	r3, [pc, #80]	; (8005bc8 <write_flash+0x68>)
 8005b78:	691a      	ldr	r2, [r3, #16]
 8005b7a:	f042 0202 	orr.w	r2, r2, #2
 8005b7e:	611a      	str	r2, [r3, #16]
    FLASH->AR = flash;                     // set page to flash
 8005b80:	6159      	str	r1, [r3, #20]
    FLASH->CR |= FLASH_CR_STRT;            // start erasing
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b88:	611a      	str	r2, [r3, #16]
    while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY); // loop till done
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	68d3      	ldr	r3, [r2, #12]
 8005b8e:	f013 0f01 	tst.w	r3, #1
 8005b92:	d1fb      	bne.n	8005b8c <write_flash+0x2c>
    SET_BIT (FLASH->SR, (FLASH_SR_EOP));   // tech note RM0316 says to clear
 8005b94:	4b0c      	ldr	r3, [pc, #48]	; (8005bc8 <write_flash+0x68>)
 8005b96:	68da      	ldr	r2, [r3, #12]
 8005b98:	f042 0220 	orr.w	r2, r2, #32
 8005b9c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT (FLASH->CR, (FLASH_CR_PER)); // found note online that you must
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	f022 0202 	bic.w	r2, r2, #2
 8005ba4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, (FLASH_CR_PG));     // we are already unlocked, trying
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	611a      	str	r2, [r3, #16]
    *flash = value;                        // actually write the value
 8005bae:	8008      	strh	r0, [r1, #0]
    while ((FLASH->SR & FLASH_SR_BSY) == FLASH_SR_BSY); // loop till done
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	68d3      	ldr	r3, [r2, #12]
 8005bb4:	f013 0f01 	tst.w	r3, #1
 8005bb8:	d1fb      	bne.n	8005bb2 <write_flash+0x52>
    FLASH->CR |= FLASH_CR_LOCK;
 8005bba:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <write_flash+0x68>)
 8005bbc:	6913      	ldr	r3, [r2, #16]
 8005bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc2:	6113      	str	r3, [r2, #16]
}
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	40022000 	.word	0x40022000
 8005bcc:	45670123 	.word	0x45670123

08005bd0 <long_to_string_with_divisor>:
#define FLOAT_PRECISION 9

static char *long_to_string_with_divisor(char *p,
                                         long num,
                                         unsigned radix,
                                         long divisor) {
 8005bd0:	b4f0      	push	{r4, r5, r6, r7}
  char *q;
  long l, ll;

  l = num;
  if (divisor == 0) {
    ll = num;
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	bf08      	it	eq
 8005bd6:	460b      	moveq	r3, r1
  } else {
    ll = divisor;
  }

  q = p + MAX_FILLER;
 8005bd8:	f100 070b 	add.w	r7, r0, #11
 8005bdc:	463c      	mov	r4, r7
  do {
    i = (int)(l % radix);
 8005bde:	460e      	mov	r6, r1
 8005be0:	fbb1 f5f2 	udiv	r5, r1, r2
 8005be4:	fb02 1115 	mls	r1, r2, r5, r1
    i += '0';
 8005be8:	f101 0530 	add.w	r5, r1, #48	; 0x30
    if (i > '9')
 8005bec:	2d39      	cmp	r5, #57	; 0x39
      i += 'A' - '0' - 10;
 8005bee:	bfc8      	it	gt
 8005bf0:	f101 0537 	addgt.w	r5, r1, #55	; 0x37
    *--q = i;
 8005bf4:	f804 5d01 	strb.w	r5, [r4, #-1]!
    l /= radix;
 8005bf8:	fbb6 f1f2 	udiv	r1, r6, r2
  } while ((ll /= radix) != 0);
 8005bfc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1ec      	bne.n	8005bde <long_to_string_with_divisor+0xe>
 8005c04:	1e43      	subs	r3, r0, #1

  i = (int)(p + MAX_FILLER - q);
 8005c06:	1b3f      	subs	r7, r7, r4
 8005c08:	19e1      	adds	r1, r4, r7
  do
    *p++ = *q++;
 8005c0a:	f814 2b01 	ldrb.w	r2, [r4], #1
 8005c0e:	f803 2f01 	strb.w	r2, [r3, #1]!
  while (--i);
 8005c12:	428c      	cmp	r4, r1
 8005c14:	d1f9      	bne.n	8005c0a <long_to_string_with_divisor+0x3a>

  return p;
}
 8005c16:	4438      	add	r0, r7
 8005c18:	bcf0      	pop	{r4, r5, r6, r7}
 8005c1a:	4770      	bx	lr
 8005c1c:	0000      	movs	r0, r0
	...

08005c20 <chTMStopMeasurementX>:
 *
 * @param[in,out] tmp   pointer to a @p time_measurement_t structure
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8005c20:	b430      	push	{r4, r5}
 *
 * @return              The realtime counter value.
 */
static inline rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8005c22:	4b0e      	ldr	r3, [pc, #56]	; (8005c5c <chTMStopMeasurementX+0x3c>)
 8005c24:	685b      	ldr	r3, [r3, #4]

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8005c26:	4a0e      	ldr	r2, [pc, #56]	; (8005c60 <chTMStopMeasurementX+0x40>)
 8005c28:	f8d2 1884 	ldr.w	r1, [r2, #2180]	; 0x884
  tmp->n++;
 8005c2c:	68c2      	ldr	r2, [r0, #12]
 8005c2e:	3201      	adds	r2, #1
 8005c30:	60c2      	str	r2, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8005c32:	6882      	ldr	r2, [r0, #8]
 8005c34:	1a9b      	subs	r3, r3, r2
 8005c36:	1a5b      	subs	r3, r3, r1
 8005c38:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 8005c3a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
 8005c3e:	18e1      	adds	r1, r4, r3
 8005c40:	f145 0200 	adc.w	r2, r5, #0
 8005c44:	e9c0 1204 	strd	r1, r2, [r0, #16]
  if (tmp->last > tmp->worst) {
 8005c48:	6842      	ldr	r2, [r0, #4]
 8005c4a:	4293      	cmp	r3, r2
    tmp->worst = tmp->last;
 8005c4c:	bf88      	it	hi
 8005c4e:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 8005c50:	6802      	ldr	r2, [r0, #0]
 8005c52:	4293      	cmp	r3, r2
    tmp->best = tmp->last;
 8005c54:	bf38      	it	cc
 8005c56:	6003      	strcc	r3, [r0, #0]
}
 8005c58:	bc30      	pop	{r4, r5}
 8005c5a:	4770      	bx	lr
 8005c5c:	e0001000 	.word	0xe0001000
 8005c60:	200015d8 	.word	0x200015d8
	...

08005c70 <chTMStartMeasurementX>:
 8005c70:	4b01      	ldr	r3, [pc, #4]	; (8005c78 <chTMStartMeasurementX+0x8>)
 8005c72:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 8005c74:	6083      	str	r3, [r0, #8]
}
 8005c76:	4770      	bx	lr
 8005c78:	e0001000 	.word	0xe0001000
 8005c7c:	00000000 	.word	0x00000000

08005c80 <trace_next>:
 *
 * @notapi
 */
static NOINLINE void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8005c80:	4b0c      	ldr	r3, [pc, #48]	; (8005cb4 <trace_next+0x34>)
 8005c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8005c84:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c88:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8005c8a:	6051      	str	r1, [r2, #4]
 8005c8c:	4a0a      	ldr	r2, [pc, #40]	; (8005cb8 <trace_next+0x38>)
 8005c8e:	6850      	ldr	r0, [r2, #4]
#if PORT_SUPPORTS_RT == TRUE
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8005c90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c92:	6811      	ldr	r1, [r2, #0]
 8005c94:	f360 211f 	bfi	r1, r0, #8, #24
 8005c98:	6011      	str	r1, [r2, #0]
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 8005c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c9c:	3210      	adds	r2, #16
 8005c9e:	f503 6304 	add.w	r3, r3, #2112	; 0x840
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	bf32      	itee	cc
 8005ca6:	f5a3 6304 	subcc.w	r3, r3, #2112	; 0x840
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8005caa:	4b02      	ldrcs	r3, [pc, #8]	; (8005cb4 <trace_next+0x34>)
 8005cac:	f103 0240 	addcs.w	r2, r3, #64	; 0x40
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
}
 8005cb2:	4770      	bx	lr
 8005cb4:	200015d8 	.word	0x200015d8
 8005cb8:	e0001000 	.word	0xe0001000
 8005cbc:	00000000 	.word	0x00000000

08005cc0 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8005cc0:	4b0e      	ldr	r3, [pc, #56]	; (8005cfc <_trace_isr_leave+0x3c>)
 8005cc2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005cc4:	f013 0f02 	tst.w	r3, #2
 8005cc8:	d000      	beq.n	8005ccc <_trace_isr_leave+0xc>
 8005cca:	4770      	bx	lr
void _trace_isr_leave(const char *isr) {
 8005ccc:	b510      	push	{r4, lr}
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__attribute__((always_inline)) __STATIC_INLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8005cce:	2320      	movs	r3, #32
 8005cd0:	f383 8811 	msr	BASEPRI, r3
    port_lock_from_isr();
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 8005cd4:	4b09      	ldr	r3, [pc, #36]	; (8005cfc <_trace_isr_leave+0x3c>)
 8005cd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005cd8:	7811      	ldrb	r1, [r2, #0]
 8005cda:	2403      	movs	r4, #3
 8005cdc:	f364 0102 	bfi	r1, r4, #0, #3
 8005ce0:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8005ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ce4:	7811      	ldrb	r1, [r2, #0]
 8005ce6:	f36f 01c7 	bfc	r1, #3, #5
 8005cea:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8005cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cee:	6098      	str	r0, [r3, #8]
    trace_next();
 8005cf0:	f7ff ffc6 	bl	8005c80 <trace_next>
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f383 8811 	msr	BASEPRI, r3
    port_unlock_from_isr();
  }
}
 8005cfa:	bd10      	pop	{r4, pc}
 8005cfc:	200015d8 	.word	0x200015d8

08005d00 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8005d00:	4b0e      	ldr	r3, [pc, #56]	; (8005d3c <_trace_isr_enter+0x3c>)
 8005d02:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d04:	f013 0f02 	tst.w	r3, #2
 8005d08:	d000      	beq.n	8005d0c <_trace_isr_enter+0xc>
 8005d0a:	4770      	bx	lr
void _trace_isr_enter(const char *isr) {
 8005d0c:	b510      	push	{r4, lr}
 8005d0e:	2320      	movs	r3, #32
 8005d10:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 8005d14:	4b09      	ldr	r3, [pc, #36]	; (8005d3c <_trace_isr_enter+0x3c>)
 8005d16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d18:	7811      	ldrb	r1, [r2, #0]
 8005d1a:	2402      	movs	r4, #2
 8005d1c:	f364 0102 	bfi	r1, r4, #0, #3
 8005d20:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = 0U;
 8005d22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d24:	7811      	ldrb	r1, [r2, #0]
 8005d26:	f36f 01c7 	bfc	r1, #3, #5
 8005d2a:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 8005d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2e:	6098      	str	r0, [r3, #8]
    trace_next();
 8005d30:	f7ff ffa6 	bl	8005c80 <trace_next>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f383 8811 	msr	BASEPRI, r3
}
 8005d3a:	bd10      	pop	{r4, pc}
 8005d3c:	200015d8 	.word	0x200015d8

08005d40 <_trace_switch>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 8005d40:	4b0e      	ldr	r3, [pc, #56]	; (8005d7c <_trace_switch+0x3c>)
 8005d42:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d44:	f013 0f01 	tst.w	r3, #1
 8005d48:	d000      	beq.n	8005d4c <_trace_switch+0xc>
 8005d4a:	4770      	bx	lr
void _trace_switch(thread_t *ntp, thread_t *otp) {
 8005d4c:	b510      	push	{r4, lr}
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8005d4e:	4b0b      	ldr	r3, [pc, #44]	; (8005d7c <_trace_switch+0x3c>)
 8005d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d52:	7810      	ldrb	r0, [r2, #0]
 8005d54:	2401      	movs	r4, #1
 8005d56:	f364 0002 	bfi	r0, r4, #0, #3
 8005d5a:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
 8005d5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d5e:	7810      	ldrb	r0, [r2, #0]
 8005d60:	f891 4020 	ldrb.w	r4, [r1, #32]
 8005d64:	f364 00c7 	bfi	r0, r4, #3, #5
 8005d68:	7010      	strb	r0, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8005d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d6c:	6998      	ldr	r0, [r3, #24]
 8005d6e:	6090      	str	r0, [r2, #8]
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8005d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d72:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8005d74:	60da      	str	r2, [r3, #12]
    trace_next();
 8005d76:	f7ff ff83 	bl	8005c80 <trace_next>
}
 8005d7a:	bd10      	pop	{r4, pc}
 8005d7c:	200015d8 	.word	0x200015d8

08005d80 <chSysHalt>:
 *
 * @param[in] reason        pointer to an error string
 *
 * @special
 */
void chSysHalt(const char *reason) {
 8005d80:	b508      	push	{r3, lr}
 8005d82:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d84:	b672      	cpsid	i
 *
 * @notapi
 */
void _trace_halt(const char *reason) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_HALT) == 0U) {
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <chSysHalt+0x38>)
 8005d88:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005d8a:	f013 0f04 	tst.w	r3, #4
 8005d8e:	d002      	beq.n	8005d96 <chSysHalt+0x16>

  /* Logging the event.*/
  _trace_halt(reason);

  /* Pointing to the passed message.*/
  ch.dbg.panic_msg = reason;
 8005d90:	4b09      	ldr	r3, [pc, #36]	; (8005db8 <chSysHalt+0x38>)
 8005d92:	62dc      	str	r4, [r3, #44]	; 0x2c
 8005d94:	e7fe      	b.n	8005d94 <chSysHalt+0x14>
    ch.dbg.trace_buffer.ptr->type          = CH_TRACE_TYPE_HALT;
 8005d96:	4b08      	ldr	r3, [pc, #32]	; (8005db8 <chSysHalt+0x38>)
 8005d98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d9a:	7811      	ldrb	r1, [r2, #0]
 8005d9c:	2004      	movs	r0, #4
 8005d9e:	f360 0102 	bfi	r1, r0, #0, #3
 8005da2:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->state         = 0;
 8005da4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005da6:	7811      	ldrb	r1, [r2, #0]
 8005da8:	f36f 01c7 	bfc	r1, #3, #5
 8005dac:	7011      	strb	r1, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.halt.reason = reason;
 8005dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db0:	609c      	str	r4, [r3, #8]
    trace_next();
 8005db2:	f7ff ff65 	bl	8005c80 <trace_next>
 8005db6:	e7eb      	b.n	8005d90 <chSysHalt+0x10>
 8005db8:	200015d8 	.word	0x200015d8
 8005dbc:	00000000 	.word	0x00000000

08005dc0 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t structure
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
 8005dc0:	b508      	push	{r3, lr}

  chDbgCheck(mp != NULL);
 8005dc2:	b128      	cbz	r0, 8005dd0 <chMtxObjectInit+0x10>
 8005dc4:	4603      	mov	r3, r0
 *
 * @notapi
 */
static inline void queue_init(threads_queue_t *tqp) {

  tqp->next = (thread_t *)tqp;
 8005dc6:	6018      	str	r0, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8005dc8:	6058      	str	r0, [r3, #4]

  queue_init(&mp->queue);
  mp->owner = NULL;
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6082      	str	r2, [r0, #8]
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
  mp->cnt = (cnt_t)0;
#endif
}
 8005dce:	bd08      	pop	{r3, pc}
  chDbgCheck(mp != NULL);
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <chMtxObjectInit+0x18>)
 8005dd2:	f7ff ffd5 	bl	8005d80 <chSysHalt>
 8005dd6:	bf00      	nop
 8005dd8:	0800b160 	.word	0x0800b160
 8005ddc:	00000000 	.word	0x00000000

08005de0 <chDbgCheckClassS>:
 *          an S-class API function. A panic is generated if the state is
 *          not compatible.
 *
 * @api
 */
void chDbgCheckClassS(void) {
 8005de0:	b508      	push	{r3, lr}

  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <chDbgCheckClassS+0x18>)
 8005de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de6:	b923      	cbnz	r3, 8005df2 <chDbgCheckClassS+0x12>
 8005de8:	4b03      	ldr	r3, [pc, #12]	; (8005df8 <chDbgCheckClassS+0x18>)
 8005dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dd00      	ble.n	8005df2 <chDbgCheckClassS+0x12>
    chSysHalt("SV#11");
  }
}
 8005df0:	bd08      	pop	{r3, pc}
    chSysHalt("SV#11");
 8005df2:	4802      	ldr	r0, [pc, #8]	; (8005dfc <chDbgCheckClassS+0x1c>)
 8005df4:	f7ff ffc4 	bl	8005d80 <chSysHalt>
 8005df8:	200015d8 	.word	0x200015d8
 8005dfc:	0800b67c 	.word	0x0800b67c

08005e00 <chDbgCheckClassI>:
void chDbgCheckClassI(void) {
 8005e00:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8005e02:	4b06      	ldr	r3, [pc, #24]	; (8005e1c <chDbgCheckClassI+0x1c>)
 8005e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	db04      	blt.n	8005e14 <chDbgCheckClassI+0x14>
 8005e0a:	4b04      	ldr	r3, [pc, #16]	; (8005e1c <chDbgCheckClassI+0x1c>)
 8005e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	dd00      	ble.n	8005e14 <chDbgCheckClassI+0x14>
}
 8005e12:	bd08      	pop	{r3, pc}
    chSysHalt("SV#10");
 8005e14:	4802      	ldr	r0, [pc, #8]	; (8005e20 <chDbgCheckClassI+0x20>)
 8005e16:	f7ff ffb3 	bl	8005d80 <chSysHalt>
 8005e1a:	bf00      	nop
 8005e1c:	200015d8 	.word	0x200015d8
 8005e20:	0800b674 	.word	0x0800b674
	...

08005e30 <chCoreAllocAlignedWithOffsetI>:
 *
 * @iclass
 */
void *chCoreAllocAlignedWithOffsetI(size_t size,
                                    unsigned align,
                                    size_t offset) {
 8005e30:	b570      	push	{r4, r5, r6, lr}
 8005e32:	4604      	mov	r4, r0
 8005e34:	460e      	mov	r6, r1
 8005e36:	4615      	mov	r5, r2
  uint8_t *p, *next;

  chDbgCheckClassI();
 8005e38:	f7ff ffe2 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));
 8005e3c:	b116      	cbz	r6, 8005e44 <chCoreAllocAlignedWithOffsetI+0x14>
 8005e3e:	1e73      	subs	r3, r6, #1
 8005e40:	4233      	tst	r3, r6
 8005e42:	d002      	beq.n	8005e4a <chCoreAllocAlignedWithOffsetI+0x1a>
 8005e44:	480c      	ldr	r0, [pc, #48]	; (8005e78 <chCoreAllocAlignedWithOffsetI+0x48>)
 8005e46:	f7ff ff9b 	bl	8005d80 <chSysHalt>

  size = MEM_ALIGN_NEXT(size, align);
 8005e4a:	1e63      	subs	r3, r4, #1
 8005e4c:	4433      	add	r3, r6
 8005e4e:	4274      	negs	r4, r6
  p = (uint8_t *)MEM_ALIGN_NEXT(ch_memcore.nextmem + offset, align);
 8005e50:	4a0a      	ldr	r2, [pc, #40]	; (8005e7c <chCoreAllocAlignedWithOffsetI+0x4c>)
 8005e52:	6811      	ldr	r1, [r2, #0]
 8005e54:	1948      	adds	r0, r1, r5
 8005e56:	4430      	add	r0, r6
 8005e58:	3801      	subs	r0, #1
 8005e5a:	4020      	ands	r0, r4
  size = MEM_ALIGN_NEXT(size, align);
 8005e5c:	4023      	ands	r3, r4
  next = p + size;
 8005e5e:	4403      	add	r3, r0

  /* Considering also the case where there is numeric overflow.*/
  if ((next > ch_memcore.endmem) || (next < ch_memcore.nextmem)) {
 8005e60:	6852      	ldr	r2, [r2, #4]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d304      	bcc.n	8005e70 <chCoreAllocAlignedWithOffsetI+0x40>
 8005e66:	4299      	cmp	r1, r3
 8005e68:	d804      	bhi.n	8005e74 <chCoreAllocAlignedWithOffsetI+0x44>
    return NULL;
  }

  ch_memcore.nextmem = next;
 8005e6a:	4a04      	ldr	r2, [pc, #16]	; (8005e7c <chCoreAllocAlignedWithOffsetI+0x4c>)
 8005e6c:	6013      	str	r3, [r2, #0]

  return p;
}
 8005e6e:	bd70      	pop	{r4, r5, r6, pc}
    return NULL;
 8005e70:	2000      	movs	r0, #0
 8005e72:	e7fc      	b.n	8005e6e <chCoreAllocAlignedWithOffsetI+0x3e>
 8005e74:	2000      	movs	r0, #0
 8005e76:	e7fa      	b.n	8005e6e <chCoreAllocAlignedWithOffsetI+0x3e>
 8005e78:	0800b1a8 	.word	0x0800b1a8
 8005e7c:	20002008 	.word	0x20002008

08005e80 <chCoreAllocAlignedI>:
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8005e80:	b508      	push	{r3, lr}

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
 8005e82:	2200      	movs	r2, #0
 8005e84:	f7ff ffd4 	bl	8005e30 <chCoreAllocAlignedWithOffsetI>
}
 8005e88:	bd08      	pop	{r3, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0000      	movs	r0, r0
	...

08005e90 <chSchReadyAheadI>:
 * @param[in] tp        the thread to be made ready
 * @return              The thread pointer.
 *
 * @iclass
 */
thread_t *chSchReadyAheadI(thread_t *tp) {
 8005e90:	b510      	push	{r4, lr}
 8005e92:	4604      	mov	r4, r0
  thread_t *cp;

  chDbgCheckClassI();
 8005e94:	f7ff ffb4 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8005e98:	b1a4      	cbz	r4, 8005ec4 <chSchReadyAheadI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005e9a:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005e9e:	b1a3      	cbz	r3, 8005eca <chSchReadyAheadI+0x3a>
 8005ea0:	2b0f      	cmp	r3, #15
 8005ea2:	d012      	beq.n	8005eca <chSchReadyAheadI+0x3a>
              (tp->state != CH_STATE_FINAL),
              "invalid state");

  tp->state = CH_STATE_READY;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f884 3020 	strb.w	r3, [r4, #32]
  cp = (thread_t *)&ch.rlist.queue;
  do {
    cp = cp->queue.next;
  } while (cp->prio > tp->prio);
 8005eaa:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8005eac:	4b08      	ldr	r3, [pc, #32]	; (8005ed0 <chSchReadyAheadI+0x40>)
    cp = cp->queue.next;
 8005eae:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 8005eb0:	689a      	ldr	r2, [r3, #8]
 8005eb2:	428a      	cmp	r2, r1
 8005eb4:	d8fb      	bhi.n	8005eae <chSchReadyAheadI+0x1e>
  /* Insertion on prev.*/
  tp->queue.next             = cp;
 8005eb6:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8005ebc:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005ebe:	605c      	str	r4, [r3, #4]

  return tp;
}
 8005ec0:	4620      	mov	r0, r4
 8005ec2:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8005ec4:	4803      	ldr	r0, [pc, #12]	; (8005ed4 <chSchReadyAheadI+0x44>)
 8005ec6:	f7ff ff5b 	bl	8005d80 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005eca:	4802      	ldr	r0, [pc, #8]	; (8005ed4 <chSchReadyAheadI+0x44>)
 8005ecc:	f7ff ff58 	bl	8005d80 <chSysHalt>
 8005ed0:	200015d8 	.word	0x200015d8
 8005ed4:	0800b194 	.word	0x0800b194
	...

08005ee0 <chSchReadyI>:
thread_t *chSchReadyI(thread_t *tp) {
 8005ee0:	b510      	push	{r4, lr}
 8005ee2:	4604      	mov	r4, r0
  chDbgCheckClassI();
 8005ee4:	f7ff ff8c 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8005ee8:	b1a4      	cbz	r4, 8005f14 <chSchReadyI+0x34>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005eea:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005eee:	b1a3      	cbz	r3, 8005f1a <chSchReadyI+0x3a>
 8005ef0:	2b0f      	cmp	r3, #15
 8005ef2:	d012      	beq.n	8005f1a <chSchReadyI+0x3a>
  tp->state = CH_STATE_READY;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	f884 3020 	strb.w	r3, [r4, #32]
  } while (cp->prio >= tp->prio);
 8005efa:	68a1      	ldr	r1, [r4, #8]
  cp = (thread_t *)&ch.rlist.queue;
 8005efc:	4b08      	ldr	r3, [pc, #32]	; (8005f20 <chSchReadyI+0x40>)
    cp = cp->queue.next;
 8005efe:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 8005f00:	689a      	ldr	r2, [r3, #8]
 8005f02:	428a      	cmp	r2, r1
 8005f04:	d2fb      	bcs.n	8005efe <chSchReadyI+0x1e>
  tp->queue.next             = cp;
 8005f06:	6023      	str	r3, [r4, #0]
  tp->queue.prev             = cp->queue.prev;
 8005f08:	685a      	ldr	r2, [r3, #4]
 8005f0a:	6062      	str	r2, [r4, #4]
  tp->queue.prev->queue.next = tp;
 8005f0c:	6014      	str	r4, [r2, #0]
  cp->queue.prev             = tp;
 8005f0e:	605c      	str	r4, [r3, #4]
}
 8005f10:	4620      	mov	r0, r4
 8005f12:	bd10      	pop	{r4, pc}
  chDbgCheck(tp != NULL);
 8005f14:	4803      	ldr	r0, [pc, #12]	; (8005f24 <chSchReadyI+0x44>)
 8005f16:	f7ff ff33 	bl	8005d80 <chSysHalt>
  chDbgAssert((tp->state != CH_STATE_READY) &&
 8005f1a:	4802      	ldr	r0, [pc, #8]	; (8005f24 <chSchReadyI+0x44>)
 8005f1c:	f7ff ff30 	bl	8005d80 <chSysHalt>
 8005f20:	200015d8 	.word	0x200015d8
 8005f24:	0800b170 	.word	0x0800b170
	...

08005f30 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 8005f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f34:	4607      	mov	r7, r0
 8005f36:	460e      	mov	r6, r1
  event_listener_t *elp;

  chDbgCheckClassI();
 8005f38:	f7ff ff62 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck(esp != NULL);
 8005f3c:	b12f      	cbz	r7, 8005f4a <chEvtBroadcastFlagsI+0x1a>

  elp = esp->next;
 8005f3e:	683c      	ldr	r4, [r7, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 8005f40:	42a7      	cmp	r7, r4
 8005f42:	d030      	beq.n	8005fa6 <chEvtBroadcastFlagsI+0x76>
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 8005f44:	f04f 0800 	mov.w	r8, #0
 8005f48:	e010      	b.n	8005f6c <chEvtBroadcastFlagsI+0x3c>
  chDbgCheck(esp != NULL);
 8005f4a:	4818      	ldr	r0, [pc, #96]	; (8005fac <chEvtBroadcastFlagsI+0x7c>)
 8005f4c:	f7ff ff18 	bl	8005d80 <chSysHalt>
  chDbgCheck(tp != NULL);
 8005f50:	4817      	ldr	r0, [pc, #92]	; (8005fb0 <chEvtBroadcastFlagsI+0x80>)
 8005f52:	f7ff ff15 	bl	8005d80 <chSysHalt>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005f56:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005f58:	4213      	tst	r3, r2
 8005f5a:	d004      	beq.n	8005f66 <chEvtBroadcastFlagsI+0x36>
    tp->u.rdymsg = MSG_OK;
 8005f5c:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
    (void) chSchReadyI(tp);
 8005f60:	4628      	mov	r0, r5
 8005f62:	f7ff ffbd 	bl	8005ee0 <chSchReadyI>
    elp = elp->next;
 8005f66:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8005f68:	42a7      	cmp	r7, r4
 8005f6a:	d01c      	beq.n	8005fa6 <chEvtBroadcastFlagsI+0x76>
    elp->flags |= flags;
 8005f6c:	68e3      	ldr	r3, [r4, #12]
 8005f6e:	4333      	orrs	r3, r6
 8005f70:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 8005f72:	b116      	cbz	r6, 8005f7a <chEvtBroadcastFlagsI+0x4a>
        ((elp->flags & elp->wflags) != (eventflags_t)0)) {
 8005f74:	6922      	ldr	r2, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 8005f76:	4213      	tst	r3, r2
 8005f78:	d0f5      	beq.n	8005f66 <chEvtBroadcastFlagsI+0x36>
      chEvtSignalI(elp->listener, elp->events);
 8005f7a:	6865      	ldr	r5, [r4, #4]
 8005f7c:	f8d4 9008 	ldr.w	r9, [r4, #8]
  chDbgCheckClassI();
 8005f80:	f7ff ff3e 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck(tp != NULL);
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	d0e3      	beq.n	8005f50 <chEvtBroadcastFlagsI+0x20>
  tp->epending |= events;
 8005f88:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8005f8a:	ea49 0303 	orr.w	r3, r9, r3
 8005f8e:	636b      	str	r3, [r5, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8005f90:	f895 2020 	ldrb.w	r2, [r5, #32]
 8005f94:	2a0a      	cmp	r2, #10
 8005f96:	d0de      	beq.n	8005f56 <chEvtBroadcastFlagsI+0x26>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 8005f98:	2a0b      	cmp	r2, #11
 8005f9a:	d1e4      	bne.n	8005f66 <chEvtBroadcastFlagsI+0x36>
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 8005f9c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8005f9e:	ea32 0303 	bics.w	r3, r2, r3
 8005fa2:	d1e0      	bne.n	8005f66 <chEvtBroadcastFlagsI+0x36>
 8005fa4:	e7da      	b.n	8005f5c <chEvtBroadcastFlagsI+0x2c>
}
 8005fa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005faa:	bf00      	nop
 8005fac:	0800b1f4 	.word	0x0800b1f4
 8005fb0:	0800b248 	.word	0x0800b248
	...

08005fc0 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 8005fc0:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool queue_notempty(const threads_queue_t *tqp) {

  return (bool)(tqp->next != (const thread_t *)tqp);
 8005fc2:	6803      	ldr	r3, [r0, #0]

  if (queue_notempty(tqp)) {
 8005fc4:	4298      	cmp	r0, r3
 8005fc6:	d00d      	beq.n	8005fe4 <chThdDequeueNextI+0x24>
}

static inline thread_t *queue_fifo_remove(threads_queue_t *tqp) {
  thread_t *tp = tqp->next;

  tqp->next             = tp->queue.next;
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8005fcc:	6050      	str	r0, [r2, #4]

  chDbgAssert(queue_notempty(tqp), "empty queue");

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8005fce:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005fd2:	2a04      	cmp	r2, #4
 8005fd4:	d002      	beq.n	8005fdc <chThdDequeueNextI+0x1c>
 8005fd6:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <chThdDequeueNextI+0x28>)
 8005fd8:	f7ff fed2 	bl	8005d80 <chSysHalt>

  tp->u.rdymsg = msg;
 8005fdc:	6259      	str	r1, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7ff ff7e 	bl	8005ee0 <chSchReadyI>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 8005fe4:	bd08      	pop	{r3, pc}
 8005fe6:	bf00      	nop
 8005fe8:	0800b134 	.word	0x0800b134
 8005fec:	00000000 	.word	0x00000000

08005ff0 <chThdDequeueAllI>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8005ff0:	b538      	push	{r3, r4, r5, lr}
  return (bool)(tqp->next != (const thread_t *)tqp);
 8005ff2:	6803      	ldr	r3, [r0, #0]

  while (queue_notempty(tqp)) {
 8005ff4:	4298      	cmp	r0, r3
 8005ff6:	d01a      	beq.n	800602e <chThdDequeueAllI+0x3e>
 8005ff8:	460d      	mov	r5, r1
 8005ffa:	4604      	mov	r4, r0
  tqp->next             = tp->queue.next;
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	6002      	str	r2, [r0, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006000:	6050      	str	r0, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8006002:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006006:	2a04      	cmp	r2, #4
 8006008:	d002      	beq.n	8006010 <chThdDequeueAllI+0x20>
 800600a:	4809      	ldr	r0, [pc, #36]	; (8006030 <chThdDequeueAllI+0x40>)
 800600c:	f7ff feb8 	bl	8005d80 <chSysHalt>
  tp->u.rdymsg = msg;
 8006010:	625d      	str	r5, [r3, #36]	; 0x24
  (void) chSchReadyI(tp);
 8006012:	4618      	mov	r0, r3
 8006014:	f7ff ff64 	bl	8005ee0 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8006018:	6823      	ldr	r3, [r4, #0]
 800601a:	429c      	cmp	r4, r3
 800601c:	d007      	beq.n	800602e <chThdDequeueAllI+0x3e>
  tqp->next             = tp->queue.next;
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8006022:	6054      	str	r4, [r2, #4]
  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 8006024:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006028:	2a04      	cmp	r2, #4
 800602a:	d1ee      	bne.n	800600a <chThdDequeueAllI+0x1a>
 800602c:	e7f0      	b.n	8006010 <chThdDequeueAllI+0x20>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	0800b134 	.word	0x0800b134
	...

08006040 <chThdResumeI>:
void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 8006040:	b508      	push	{r3, lr}
  if (*trp != NULL) {
 8006042:	6803      	ldr	r3, [r0, #0]
 8006044:	b14b      	cbz	r3, 800605a <chThdResumeI+0x1a>
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 8006046:	f893 2020 	ldrb.w	r2, [r3, #32]
 800604a:	2a03      	cmp	r2, #3
 800604c:	d106      	bne.n	800605c <chThdResumeI+0x1c>
    *trp = NULL;
 800604e:	2200      	movs	r2, #0
 8006050:	6002      	str	r2, [r0, #0]
    tp->u.rdymsg = msg;
 8006052:	6259      	str	r1, [r3, #36]	; 0x24
    (void) chSchReadyI(tp);
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff ff43 	bl	8005ee0 <chSchReadyI>
}
 800605a:	bd08      	pop	{r3, pc}
    chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 800605c:	4801      	ldr	r0, [pc, #4]	; (8006064 <chThdResumeI+0x24>)
 800605e:	f7ff fe8f 	bl	8005d80 <chSysHalt>
 8006062:	bf00      	nop
 8006064:	0800b2a0 	.word	0x0800b2a0
	...

08006070 <_dbg_check_leave_isr>:
void _dbg_check_leave_isr(void) {
 8006070:	b508      	push	{r3, lr}
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8006072:	2320      	movs	r3, #32
 8006074:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8006078:	4b08      	ldr	r3, [pc, #32]	; (800609c <_dbg_check_leave_isr+0x2c>)
 800607a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800607c:	2b00      	cmp	r3, #0
 800607e:	dd02      	ble.n	8006086 <_dbg_check_leave_isr+0x16>
 8006080:	4a06      	ldr	r2, [pc, #24]	; (800609c <_dbg_check_leave_isr+0x2c>)
 8006082:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006084:	b112      	cbz	r2, 800608c <_dbg_check_leave_isr+0x1c>
    chSysHalt("SV#9");
 8006086:	4806      	ldr	r0, [pc, #24]	; (80060a0 <_dbg_check_leave_isr+0x30>)
 8006088:	f7ff fe7a 	bl	8005d80 <chSysHalt>
  ch.dbg.isr_cnt--;
 800608c:	3b01      	subs	r3, #1
 800608e:	4a03      	ldr	r2, [pc, #12]	; (800609c <_dbg_check_leave_isr+0x2c>)
 8006090:	6313      	str	r3, [r2, #48]	; 0x30
 8006092:	2300      	movs	r3, #0
 8006094:	f383 8811 	msr	BASEPRI, r3
}
 8006098:	bd08      	pop	{r3, pc}
 800609a:	bf00      	nop
 800609c:	200015d8 	.word	0x200015d8
 80060a0:	0800b504 	.word	0x0800b504
	...

080060b0 <_dbg_check_enter_isr>:
void _dbg_check_enter_isr(void) {
 80060b0:	b508      	push	{r3, lr}
 80060b2:	2320      	movs	r3, #32
 80060b4:	f383 8811 	msr	BASEPRI, r3
  if ((ch.dbg.isr_cnt < (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 80060b8:	4b08      	ldr	r3, [pc, #32]	; (80060dc <_dbg_check_enter_isr+0x2c>)
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	db02      	blt.n	80060c6 <_dbg_check_enter_isr+0x16>
 80060c0:	4a06      	ldr	r2, [pc, #24]	; (80060dc <_dbg_check_enter_isr+0x2c>)
 80060c2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060c4:	b112      	cbz	r2, 80060cc <_dbg_check_enter_isr+0x1c>
    chSysHalt("SV#8");
 80060c6:	4806      	ldr	r0, [pc, #24]	; (80060e0 <_dbg_check_enter_isr+0x30>)
 80060c8:	f7ff fe5a 	bl	8005d80 <chSysHalt>
  ch.dbg.isr_cnt++;
 80060cc:	3301      	adds	r3, #1
 80060ce:	4a03      	ldr	r2, [pc, #12]	; (80060dc <_dbg_check_enter_isr+0x2c>)
 80060d0:	6313      	str	r3, [r2, #48]	; 0x30
 80060d2:	2300      	movs	r3, #0
 80060d4:	f383 8811 	msr	BASEPRI, r3
}
 80060d8:	bd08      	pop	{r3, pc}
 80060da:	bf00      	nop
 80060dc:	200015d8 	.word	0x200015d8
 80060e0:	0800b4fc 	.word	0x0800b4fc
	...

080060f0 <_dbg_check_unlock_from_isr>:
void _dbg_check_unlock_from_isr(void) {
 80060f0:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 80060f2:	4b07      	ldr	r3, [pc, #28]	; (8006110 <_dbg_check_unlock_from_isr+0x20>)
 80060f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	dd07      	ble.n	800610a <_dbg_check_unlock_from_isr+0x1a>
 80060fa:	4b05      	ldr	r3, [pc, #20]	; (8006110 <_dbg_check_unlock_from_isr+0x20>)
 80060fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fe:	2b00      	cmp	r3, #0
 8006100:	dd03      	ble.n	800610a <_dbg_check_unlock_from_isr+0x1a>
  _dbg_leave_lock();
 8006102:	4b03      	ldr	r3, [pc, #12]	; (8006110 <_dbg_check_unlock_from_isr+0x20>)
 8006104:	2200      	movs	r2, #0
 8006106:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006108:	bd08      	pop	{r3, pc}
    chSysHalt("SV#7");
 800610a:	4802      	ldr	r0, [pc, #8]	; (8006114 <_dbg_check_unlock_from_isr+0x24>)
 800610c:	f7ff fe38 	bl	8005d80 <chSysHalt>
 8006110:	200015d8 	.word	0x200015d8
 8006114:	0800b524 	.word	0x0800b524
	...

08006120 <_dbg_check_lock_from_isr>:
void _dbg_check_lock_from_isr(void) {
 8006120:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt <= (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8006122:	4b07      	ldr	r3, [pc, #28]	; (8006140 <_dbg_check_lock_from_isr+0x20>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	2b00      	cmp	r3, #0
 8006128:	dd02      	ble.n	8006130 <_dbg_check_lock_from_isr+0x10>
 800612a:	4b05      	ldr	r3, [pc, #20]	; (8006140 <_dbg_check_lock_from_isr+0x20>)
 800612c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800612e:	b113      	cbz	r3, 8006136 <_dbg_check_lock_from_isr+0x16>
    chSysHalt("SV#6");
 8006130:	4804      	ldr	r0, [pc, #16]	; (8006144 <_dbg_check_lock_from_isr+0x24>)
 8006132:	f7ff fe25 	bl	8005d80 <chSysHalt>
  _dbg_enter_lock();
 8006136:	4b02      	ldr	r3, [pc, #8]	; (8006140 <_dbg_check_lock_from_isr+0x20>)
 8006138:	2201      	movs	r2, #1
 800613a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800613c:	bd08      	pop	{r3, pc}
 800613e:	bf00      	nop
 8006140:	200015d8 	.word	0x200015d8
 8006144:	0800b514 	.word	0x0800b514
	...

08006150 <wakeup>:
}

/*
 * Timeout wakeup callback.
 */
static void wakeup(void *p) {
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4604      	mov	r4, r0
 8006154:	2320      	movs	r3, #32
 8006156:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLockFromISR(void) {

  port_lock_from_isr();
  _stats_start_measure_crit_isr();
  _dbg_check_lock_from_isr();
 800615a:	f7ff ffe1 	bl	8006120 <_dbg_check_lock_from_isr>
  thread_t *tp = (thread_t *)p;

  chSysLockFromISR();
  switch (tp->state) {
 800615e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006162:	2b07      	cmp	r3, #7
 8006164:	d81b      	bhi.n	800619e <wakeup+0x4e>
 8006166:	e8df f003 	tbb	[pc, r3]
 800616a:	1a04      	.short	0x1a04
 800616c:	0e140a1a 	.word	0x0e140a1a
 8006170:	141a      	.short	0x141a
 *
 * @special
 */
static inline void chSysUnlockFromISR(void) {

  _dbg_check_unlock_from_isr();
 8006172:	f7ff ffbd 	bl	80060f0 <_dbg_check_unlock_from_isr>
 8006176:	2300      	movs	r3, #0
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	e01a      	b.n	80061b4 <wakeup+0x64>
    /* Handling the special case where the thread has been made ready by
       another thread with higher priority.*/
    chSysUnlockFromISR();
    return;
  case CH_STATE_SUSPENDED:
    *tp->u.wttrp = NULL;
 800617e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	e00b      	b.n	800619e <wakeup+0x4e>
    break;
#if CH_CFG_USE_SEMAPHORES == TRUE
  case CH_STATE_WTSEM:
    chSemFastSignalI(tp->u.wtsemp);
 8006186:	6a65      	ldr	r5, [r4, #36]	; 0x24
 *
 * @iclass
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();
 8006188:	f7ff fe3a 	bl	8005e00 <chDbgCheckClassI>

  sp->cnt++;
 800618c:	68ab      	ldr	r3, [r5, #8]
 800618e:	3301      	adds	r3, #1
 8006190:	60ab      	str	r3, [r5, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8006192:	6863      	ldr	r3, [r4, #4]
 8006194:	6822      	ldr	r2, [r4, #0]
 8006196:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8006198:	6823      	ldr	r3, [r4, #0]
 800619a:	6862      	ldr	r2, [r4, #4]
 800619c:	605a      	str	r2, [r3, #4]
    break;
  default:
    /* Any other state, nothing to do.*/
    break;
  }
  tp->u.rdymsg = MSG_TIMEOUT;
 800619e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a2:	6263      	str	r3, [r4, #36]	; 0x24
  (void) chSchReadyI(tp);
 80061a4:	4620      	mov	r0, r4
 80061a6:	f7ff fe9b 	bl	8005ee0 <chSchReadyI>
 80061aa:	f7ff ffa1 	bl	80060f0 <_dbg_check_unlock_from_isr>
 80061ae:	2300      	movs	r3, #0
 80061b0:	f383 8811 	msr	BASEPRI, r3
  chSysUnlockFromISR();
}
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
	...

080061c0 <_idle_thread>:
static void _idle_thread(void *p) {
 80061c0:	e7fe      	b.n	80061c0 <_idle_thread>
 80061c2:	bf00      	nop
	...

080061d0 <gpio_init>:
/* Driver local functions.                                                   */
/*===========================================================================*/

static void gpio_init(stm32_gpio_t *gpiop, const gpio_setup_t *config) {

  gpiop->OTYPER  = config->otyper;
 80061d0:	684b      	ldr	r3, [r1, #4]
 80061d2:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80061d4:	688b      	ldr	r3, [r1, #8]
 80061d6:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80061d8:	68cb      	ldr	r3, [r1, #12]
 80061da:	60c3      	str	r3, [r0, #12]
  gpiop->ODR     = config->odr;
 80061dc:	690b      	ldr	r3, [r1, #16]
 80061de:	6143      	str	r3, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80061e0:	694b      	ldr	r3, [r1, #20]
 80061e2:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80061e4:	698b      	ldr	r3, [r1, #24]
 80061e6:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80061e8:	680b      	ldr	r3, [r1, #0]
 80061ea:	6003      	str	r3, [r0, #0]
}
 80061ec:	4770      	bx	lr
 80061ee:	bf00      	nop

080061f0 <serve_interrupt>:
static void serve_interrupt(SerialDriver *sdp) {
 80061f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061f4:	4604      	mov	r4, r0
  USART_TypeDef *u = sdp->usart;
 80061f6:	6d46      	ldr	r6, [r0, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 80061f8:	6837      	ldr	r7, [r6, #0]
  isr = u->ISR;
 80061fa:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;
 80061fc:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 80061fe:	f015 0f0f 	tst.w	r5, #15
 8006202:	d111      	bne.n	8006228 <serve_interrupt+0x38>
  if (isr & USART_ISR_LBDF) {
 8006204:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006208:	d134      	bne.n	8006274 <serve_interrupt+0x84>
  if (isr & USART_ISR_RXNE) {
 800620a:	f015 0f20 	tst.w	r5, #32
 800620e:	d141      	bne.n	8006294 <serve_interrupt+0xa4>
  if ((cr1 & USART_CR1_TXEIE) && (isr & USART_ISR_TXE)) {
 8006210:	f017 0f80 	tst.w	r7, #128	; 0x80
 8006214:	d002      	beq.n	800621c <serve_interrupt+0x2c>
 8006216:	f015 0f80 	tst.w	r5, #128	; 0x80
 800621a:	d17a      	bne.n	8006312 <serve_interrupt+0x122>
  if (isr & USART_ISR_TC) {
 800621c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006220:	f040 80ab 	bne.w	800637a <serve_interrupt+0x18a>
}
 8006224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (isr & USART_ISR_ORE)
 8006228:	f005 0308 	and.w	r3, r5, #8
    sts |= SD_OVERRUN_ERROR;
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf0c      	ite	eq
 8006230:	f04f 0800 	moveq.w	r8, #0
 8006234:	f04f 0880 	movne.w	r8, #128	; 0x80
  if (isr & USART_ISR_PE)
 8006238:	f015 0f01 	tst.w	r5, #1
    sts |= SD_PARITY_ERROR;
 800623c:	bf18      	it	ne
 800623e:	f048 0820 	orrne.w	r8, r8, #32
  if (isr & USART_ISR_FE)
 8006242:	f015 0f02 	tst.w	r5, #2
    sts |= SD_FRAMING_ERROR;
 8006246:	bf18      	it	ne
 8006248:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
  if (isr & USART_ISR_NE)
 800624c:	f015 0f04 	tst.w	r5, #4
    sts |= SD_NOISE_ERROR;
 8006250:	bf18      	it	ne
 8006252:	f448 7880 	orrne.w	r8, r8, #256	; 0x100
 8006256:	2320      	movs	r3, #32
 8006258:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800625c:	f7ff ff60 	bl	8006120 <_dbg_check_lock_from_isr>
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8006260:	4641      	mov	r1, r8
 8006262:	1d20      	adds	r0, r4, #4
 8006264:	f7ff fe64 	bl	8005f30 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8006268:	f7ff ff42 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800626c:	2300      	movs	r3, #0
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	e7c7      	b.n	8006204 <serve_interrupt+0x14>
 8006274:	2320      	movs	r3, #32
 8006276:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800627a:	f7ff ff51 	bl	8006120 <_dbg_check_lock_from_isr>
 800627e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006282:	1d20      	adds	r0, r4, #4
 8006284:	f7ff fe54 	bl	8005f30 <chEvtBroadcastFlagsI>
  _dbg_check_unlock_from_isr();
 8006288:	f7ff ff32 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800628c:	2300      	movs	r3, #0
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	e7ba      	b.n	800620a <serve_interrupt+0x1a>
 8006294:	2320      	movs	r3, #32
 8006296:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800629a:	f7ff ff41 	bl	8006120 <_dbg_check_lock_from_isr>
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 800629e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
 80062a0:	f894 805c 	ldrb.w	r8, [r4, #92]	; 0x5c
 80062a4:	ea08 0803 	and.w	r8, r8, r3
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
 80062a8:	f7ff fdaa 	bl	8005e00 <chDbgCheckClassI>
  osalDbgCheck(sdp != NULL);
 80062ac:	b304      	cbz	r4, 80062f0 <serve_interrupt+0x100>

  if (iqIsEmptyI(&sdp->iqueue))
 80062ae:	6963      	ldr	r3, [r4, #20]
 80062b0:	b30b      	cbz	r3, 80062f6 <serve_interrupt+0x106>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
 80062b2:	f104 090c 	add.w	r9, r4, #12
 *
 * @iclass
 */
msg_t iqPutI(input_queue_t *iqp, uint8_t b) {

  osalDbgCheckClassI();
 80062b6:	f7ff fda3 	bl	8005e00 <chDbgCheckClassI>

  /* Queue space check.*/
  if (!iqIsFullI(iqp)) {
 80062ba:	6a23      	ldr	r3, [r4, #32]
 80062bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80062be:	4293      	cmp	r3, r2
 80062c0:	d01e      	beq.n	8006300 <serve_interrupt+0x110>
    iqp->q_counter++;
 80062c2:	6962      	ldr	r2, [r4, #20]
 80062c4:	3201      	adds	r2, #1
 80062c6:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	6222      	str	r2, [r4, #32]
 80062cc:	f883 8000 	strb.w	r8, [r3]
    if (iqp->q_wrptr >= iqp->q_top) {
 80062d0:	6a22      	ldr	r2, [r4, #32]
 80062d2:	69e3      	ldr	r3, [r4, #28]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d301      	bcc.n	80062dc <serve_interrupt+0xec>
      iqp->q_wrptr = iqp->q_buffer;
 80062d8:	69a3      	ldr	r3, [r4, #24]
 80062da:	6223      	str	r3, [r4, #32]
  chThdDequeueNextI(tqp, msg);
 80062dc:	2100      	movs	r1, #0
 80062de:	4648      	mov	r0, r9
 80062e0:	f7ff fe6e 	bl	8005fc0 <chThdDequeueNextI>
  _dbg_check_unlock_from_isr();
 80062e4:	f7ff ff04 	bl	80060f0 <_dbg_check_unlock_from_isr>
 80062e8:	2300      	movs	r3, #0
 80062ea:	f383 8811 	msr	BASEPRI, r3
 80062ee:	e78f      	b.n	8006210 <serve_interrupt+0x20>
  osalDbgCheck(sdp != NULL);
 80062f0:	482f      	ldr	r0, [pc, #188]	; (80063b0 <serve_interrupt+0x1c0>)
 80062f2:	f7ff fd45 	bl	8005d80 <chSysHalt>
  chEvtBroadcastFlagsI(esp, flags);
 80062f6:	2104      	movs	r1, #4
 80062f8:	1860      	adds	r0, r4, r1
 80062fa:	f7ff fe19 	bl	8005f30 <chEvtBroadcastFlagsI>
 80062fe:	e7d8      	b.n	80062b2 <serve_interrupt+0xc2>
  if (!iqIsFullI(iqp)) {
 8006300:	6962      	ldr	r2, [r4, #20]
 8006302:	2a00      	cmp	r2, #0
 8006304:	d0dd      	beq.n	80062c2 <serve_interrupt+0xd2>
 8006306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800630a:	1d20      	adds	r0, r4, #4
 800630c:	f7ff fe10 	bl	8005f30 <chEvtBroadcastFlagsI>
 8006310:	e7e8      	b.n	80062e4 <serve_interrupt+0xf4>
 8006312:	2320      	movs	r3, #32
 8006314:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8006318:	f7ff ff02 	bl	8006120 <_dbg_check_lock_from_isr>
    b = oqGetI(&sdp->oqueue);
 800631c:	f104 0930 	add.w	r9, r4, #48	; 0x30
 *
 * @iclass
 */
msg_t oqGetI(output_queue_t *oqp) {

  osalDbgCheckClassI();
 8006320:	f7ff fd6e 	bl	8005e00 <chDbgCheckClassI>

  /* Queue data check.*/
  if (!oqIsEmptyI(oqp)) {
 8006324:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006326:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006328:	429a      	cmp	r2, r3
 800632a:	d019      	beq.n	8006360 <serve_interrupt+0x170>
    uint8_t b;

    oqp->q_counter++;
 800632c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800632e:	3201      	adds	r2, #1
 8006330:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	64a2      	str	r2, [r4, #72]	; 0x48
 8006336:	f893 8000 	ldrb.w	r8, [r3]
    if (oqp->q_rdptr >= oqp->q_top) {
 800633a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800633c:	429a      	cmp	r2, r3
 800633e:	d301      	bcc.n	8006344 <serve_interrupt+0x154>
      oqp->q_rdptr = oqp->q_buffer;
 8006340:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006342:	64a3      	str	r3, [r4, #72]	; 0x48
  chThdDequeueNextI(tqp, msg);
 8006344:	2100      	movs	r1, #0
 8006346:	4648      	mov	r0, r9
 8006348:	f7ff fe3a 	bl	8005fc0 <chThdDequeueNextI>
      u->TDR = b;
 800634c:	fa1f f888 	uxth.w	r8, r8
 8006350:	f8a6 8028 	strh.w	r8, [r6, #40]	; 0x28
  _dbg_check_unlock_from_isr();
 8006354:	f7ff fecc 	bl	80060f0 <_dbg_check_unlock_from_isr>
 8006358:	2300      	movs	r3, #0
 800635a:	f383 8811 	msr	BASEPRI, r3
 800635e:	e75d      	b.n	800621c <serve_interrupt+0x2c>
  if (!oqIsEmptyI(oqp)) {
 8006360:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006362:	2a00      	cmp	r2, #0
 8006364:	d0e2      	beq.n	800632c <serve_interrupt+0x13c>
  chEvtBroadcastFlagsI(esp, flags);
 8006366:	2108      	movs	r1, #8
 8006368:	1d20      	adds	r0, r4, #4
 800636a:	f7ff fde1 	bl	8005f30 <chEvtBroadcastFlagsI>
      u->CR1 = (cr1 & ~USART_CR1_TXEIE) | USART_CR1_TCIE;
 800636e:	f027 03c0 	bic.w	r3, r7, #192	; 0xc0
 8006372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006376:	6033      	str	r3, [r6, #0]
 8006378:	e7ec      	b.n	8006354 <serve_interrupt+0x164>
 800637a:	2320      	movs	r3, #32
 800637c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8006380:	f7ff fece 	bl	8006120 <_dbg_check_lock_from_isr>
    if (oqIsEmptyI(&sdp->oqueue))
 8006384:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006386:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006388:	429a      	cmp	r2, r3
 800638a:	d008      	beq.n	800639e <serve_interrupt+0x1ae>
    u->CR1 = cr1 & ~USART_CR1_TCIE;
 800638c:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8006390:	6037      	str	r7, [r6, #0]
  _dbg_check_unlock_from_isr();
 8006392:	f7ff fead 	bl	80060f0 <_dbg_check_unlock_from_isr>
 8006396:	2300      	movs	r3, #0
 8006398:	f383 8811 	msr	BASEPRI, r3
 800639c:	e742      	b.n	8006224 <serve_interrupt+0x34>
    if (oqIsEmptyI(&sdp->oqueue))
 800639e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d0f3      	beq.n	800638c <serve_interrupt+0x19c>
 80063a4:	2110      	movs	r1, #16
 80063a6:	1d20      	adds	r0, r4, #4
 80063a8:	f7ff fdc2 	bl	8005f30 <chEvtBroadcastFlagsI>
 80063ac:	e7ee      	b.n	800638c <serve_interrupt+0x19c>
 80063ae:	bf00      	nop
 80063b0:	0800b460 	.word	0x0800b460
	...

080063c0 <spi_lld_serve_tx_interrupt>:
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {

  /* DMA errors handling.*/
#if defined(STM32_SPI_DMA_ERROR_HOOK)
  (void)spip;
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80063c0:	f011 0f08 	tst.w	r1, #8
 80063c4:	d100      	bne.n	80063c8 <spi_lld_serve_tx_interrupt+0x8>
 80063c6:	4770      	bx	lr
static void spi_lld_serve_tx_interrupt(SPIDriver *spip, uint32_t flags) {
 80063c8:	b508      	push	{r3, lr}
  chSysHalt(reason);
 80063ca:	4801      	ldr	r0, [pc, #4]	; (80063d0 <spi_lld_serve_tx_interrupt+0x10>)
 80063cc:	f7ff fcd8 	bl	8005d80 <chSysHalt>
 80063d0:	0800d180 	.word	0x0800d180
	...

080063e0 <spi_lld_serve_rx_interrupt>:
static void spi_lld_serve_rx_interrupt(SPIDriver *spip, uint32_t flags) {
 80063e0:	b510      	push	{r4, lr}
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80063e2:	f011 0f08 	tst.w	r1, #8
 80063e6:	d10b      	bne.n	8006400 <spi_lld_serve_rx_interrupt+0x20>
 80063e8:	4604      	mov	r4, r0
  if (spip->config->circular) {
 80063ea:	6843      	ldr	r3, [r0, #4]
 80063ec:	781a      	ldrb	r2, [r3, #0]
 80063ee:	b1ba      	cbz	r2, 8006420 <spi_lld_serve_rx_interrupt+0x40>
    if ((flags & STM32_DMA_ISR_HTIF) != 0U) {
 80063f0:	f011 0f04 	tst.w	r1, #4
 80063f4:	d007      	beq.n	8006406 <spi_lld_serve_rx_interrupt+0x26>
      _spi_isr_code_half1(spip);
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d042      	beq.n	8006482 <spi_lld_serve_rx_interrupt+0xa2>
 80063fc:	4798      	blx	r3
 80063fe:	e040      	b.n	8006482 <spi_lld_serve_rx_interrupt+0xa2>
 8006400:	4823      	ldr	r0, [pc, #140]	; (8006490 <spi_lld_serve_rx_interrupt+0xb0>)
 8006402:	f7ff fcbd 	bl	8005d80 <chSysHalt>
      _spi_isr_code_half2(spip);
 8006406:	685a      	ldr	r2, [r3, #4]
 8006408:	2a00      	cmp	r2, #0
 800640a:	d03a      	beq.n	8006482 <spi_lld_serve_rx_interrupt+0xa2>
 800640c:	2204      	movs	r2, #4
 800640e:	7002      	strb	r2, [r0, #0]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	4798      	blx	r3
 8006414:	7823      	ldrb	r3, [r4, #0]
 8006416:	2b04      	cmp	r3, #4
 8006418:	d133      	bne.n	8006482 <spi_lld_serve_rx_interrupt+0xa2>
 800641a:	2303      	movs	r3, #3
 800641c:	7023      	strb	r3, [r4, #0]
 800641e:	e030      	b.n	8006482 <spi_lld_serve_rx_interrupt+0xa2>
    dmaStreamDisable(spip->dmatx);
 8006420:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	6813      	ldr	r3, [r2, #0]
 8006426:	f023 030f 	bic.w	r3, r3, #15
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800642e:	6819      	ldr	r1, [r3, #0]
 8006430:	7c1a      	ldrb	r2, [r3, #16]
 8006432:	230e      	movs	r3, #14
 8006434:	fa03 f202 	lsl.w	r2, r3, r2
 8006438:	604a      	str	r2, [r1, #4]
    dmaStreamDisable(spip->dmarx);
 800643a:	6a02      	ldr	r2, [r0, #32]
 800643c:	6851      	ldr	r1, [r2, #4]
 800643e:	680a      	ldr	r2, [r1, #0]
 8006440:	f022 020f 	bic.w	r2, r2, #15
 8006444:	600a      	str	r2, [r1, #0]
 8006446:	6a02      	ldr	r2, [r0, #32]
 8006448:	6811      	ldr	r1, [r2, #0]
 800644a:	7c12      	ldrb	r2, [r2, #16]
 800644c:	4093      	lsls	r3, r2
 800644e:	604b      	str	r3, [r1, #4]
    _spi_isr_code(spip);
 8006450:	6843      	ldr	r3, [r0, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	b1ca      	cbz	r2, 800648a <spi_lld_serve_rx_interrupt+0xaa>
 8006456:	2204      	movs	r2, #4
 8006458:	7002      	strb	r2, [r0, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	4798      	blx	r3
 800645e:	7823      	ldrb	r3, [r4, #0]
 8006460:	2b04      	cmp	r3, #4
 8006462:	d00f      	beq.n	8006484 <spi_lld_serve_rx_interrupt+0xa4>
 8006464:	2320      	movs	r3, #32
 8006466:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800646a:	f7ff fe59 	bl	8006120 <_dbg_check_lock_from_isr>
  chThdResumeI(trp, msg);
 800646e:	2100      	movs	r1, #0
 8006470:	f104 0008 	add.w	r0, r4, #8
 8006474:	f7ff fde4 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8006478:	f7ff fe3a 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800647c:	2300      	movs	r3, #0
 800647e:	f383 8811 	msr	BASEPRI, r3
}
 8006482:	bd10      	pop	{r4, pc}
    _spi_isr_code(spip);
 8006484:	2302      	movs	r3, #2
 8006486:	7023      	strb	r3, [r4, #0]
 8006488:	e7ec      	b.n	8006464 <spi_lld_serve_rx_interrupt+0x84>
 800648a:	2302      	movs	r3, #2
 800648c:	7003      	strb	r3, [r0, #0]
 800648e:	e7e9      	b.n	8006464 <spi_lld_serve_rx_interrupt+0x84>
 8006490:	0800d180 	.word	0x0800d180
	...

080064a0 <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
 80064a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80064a4:	f002 0903 	and.w	r9, r2, #3
  uint32_t otyper  = (mode & PAL_STM32_OTYPE_MASK) >> 2;
 80064a8:	f3c2 0880 	ubfx	r8, r2, #2, #1
  uint32_t ospeedr = (mode & PAL_STM32_OSPEED_MASK) >> 3;
 80064ac:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
  uint32_t pupdr   = (mode & PAL_STM32_PUPDR_MASK) >> 5;
 80064b0:	f3c2 1c41 	ubfx	ip, r2, #5, #2
  uint32_t altr    = (mode & PAL_STM32_ALTERNATE_MASK) >> 7;
 80064b4:	f3c2 12c3 	ubfx	r2, r2, #7, #4
  uint32_t moder   = (mode & PAL_STM32_MODE_MASK) >> 0;
 80064b8:	464f      	mov	r7, r9
  uint32_t bit     = 0;
 80064ba:	2600      	movs	r6, #0
 80064bc:	e015      	b.n	80064ea <_pal_lld_setgroupmode+0x4a>
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
        /* If going in alternate mode then the alternate number is set
           before switching mode in order to avoid glitches.*/
        if (bit < 8)
 80064be:	2e07      	cmp	r6, #7
 80064c0:	d84f      	bhi.n	8006562 <_pal_lld_setgroupmode+0xc2>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 80064c2:	f8d0 b020 	ldr.w	fp, [r0, #32]
 80064c6:	ea2b 0404 	bic.w	r4, fp, r4
 80064ca:	4325      	orrs	r5, r4
 80064cc:	6205      	str	r5, [r0, #32]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
        port->MODER   = (port->MODER & ~m2) | moder;
 80064ce:	6804      	ldr	r4, [r0, #0]
 80064d0:	4023      	ands	r3, r4
 80064d2:	433b      	orrs	r3, r7
 80064d4:	6003      	str	r3, [r0, #0]
        else
          port->AFRH = (port->AFRH & ~m4) | altrmask;
      }
    }
    mask >>= 1;
    if (!mask)
 80064d6:	0849      	lsrs	r1, r1, #1
 80064d8:	d050      	beq.n	800657c <_pal_lld_setgroupmode+0xdc>
      return;
    otyper <<= 1;
 80064da:	ea4f 0848 	mov.w	r8, r8, lsl #1
    ospeedr <<= 2;
 80064de:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
    pupdr <<= 2;
 80064e2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
    moder <<= 2;
 80064e6:	00bf      	lsls	r7, r7, #2
    bit++;
 80064e8:	3601      	adds	r6, #1
    if ((mask & 1) != 0) {
 80064ea:	f011 0f01 	tst.w	r1, #1
 80064ee:	d0f2      	beq.n	80064d6 <_pal_lld_setgroupmode+0x36>
      altrmask = altr << ((bit & 7) * 4);
 80064f0:	f006 0407 	and.w	r4, r6, #7
 80064f4:	00a4      	lsls	r4, r4, #2
 80064f6:	fa02 f504 	lsl.w	r5, r2, r4
      m4 = 15 << ((bit & 7) * 4);
 80064fa:	230f      	movs	r3, #15
 80064fc:	fa03 f404 	lsl.w	r4, r3, r4
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 8006500:	6843      	ldr	r3, [r0, #4]
      m1 = 1 << bit;
 8006502:	f04f 0b01 	mov.w	fp, #1
 8006506:	fa0b fb06 	lsl.w	fp, fp, r6
      port->OTYPER  = (port->OTYPER & ~m1) | otyper;
 800650a:	ea23 030b 	bic.w	r3, r3, fp
 800650e:	ea43 0308 	orr.w	r3, r3, r8
 8006512:	6043      	str	r3, [r0, #4]
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006514:	f8d0 b008 	ldr.w	fp, [r0, #8]
      m2 = 3 << (bit * 2);
 8006518:	0073      	lsls	r3, r6, #1
 800651a:	f04f 0a03 	mov.w	sl, #3
 800651e:	fa0a f303 	lsl.w	r3, sl, r3
      port->OSPEEDR = (port->OSPEEDR & ~m2) | ospeedr;
 8006522:	43db      	mvns	r3, r3
 8006524:	ea0b 0b03 	and.w	fp, fp, r3
 8006528:	ea4b 0b0e 	orr.w	fp, fp, lr
 800652c:	f8c0 b008 	str.w	fp, [r0, #8]
      port->PUPDR   = (port->PUPDR & ~m2) | pupdr;
 8006530:	f8d0 b00c 	ldr.w	fp, [r0, #12]
 8006534:	ea03 0b0b 	and.w	fp, r3, fp
 8006538:	ea4b 0b0c 	orr.w	fp, fp, ip
 800653c:	f8c0 b00c 	str.w	fp, [r0, #12]
      if ((mode & PAL_STM32_MODE_MASK) == PAL_STM32_MODE_ALTERNATE) {
 8006540:	f1b9 0f02 	cmp.w	r9, #2
 8006544:	d0bb      	beq.n	80064be <_pal_lld_setgroupmode+0x1e>
        port->MODER   = (port->MODER & ~m2) | moder;
 8006546:	f8d0 b000 	ldr.w	fp, [r0]
 800654a:	ea03 030b 	and.w	r3, r3, fp
 800654e:	433b      	orrs	r3, r7
 8006550:	6003      	str	r3, [r0, #0]
        if (bit < 8)
 8006552:	2e07      	cmp	r6, #7
 8006554:	d80c      	bhi.n	8006570 <_pal_lld_setgroupmode+0xd0>
          port->AFRL = (port->AFRL & ~m4) | altrmask;
 8006556:	6a03      	ldr	r3, [r0, #32]
 8006558:	ea23 0404 	bic.w	r4, r3, r4
 800655c:	4325      	orrs	r5, r4
 800655e:	6205      	str	r5, [r0, #32]
 8006560:	e7b9      	b.n	80064d6 <_pal_lld_setgroupmode+0x36>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006562:	f8d0 b024 	ldr.w	fp, [r0, #36]	; 0x24
 8006566:	ea2b 0404 	bic.w	r4, fp, r4
 800656a:	4325      	orrs	r5, r4
 800656c:	6245      	str	r5, [r0, #36]	; 0x24
 800656e:	e7ae      	b.n	80064ce <_pal_lld_setgroupmode+0x2e>
          port->AFRH = (port->AFRH & ~m4) | altrmask;
 8006570:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006572:	ea23 0404 	bic.w	r4, r3, r4
 8006576:	4325      	orrs	r5, r4
 8006578:	6245      	str	r5, [r0, #36]	; 0x24
 800657a:	e7ac      	b.n	80064d6 <_pal_lld_setgroupmode+0x36>
  }
}
 800657c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006580 <dmaStreamRelease>:
 *
 * @param[in] dmastp    pointer to a stm32_dma_stream_t structure
 *
 * @special
 */
void dmaStreamRelease(const stm32_dma_stream_t *dmastp) {
 8006580:	b538      	push	{r3, r4, r5, lr}

  osalDbgCheck(dmastp != NULL);
 8006582:	2800      	cmp	r0, #0
 8006584:	d02f      	beq.n	80065e6 <dmaStreamRelease+0x66>
 8006586:	4604      	mov	r4, r0

  /* Check if the streams is not taken.*/
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
 8006588:	4b21      	ldr	r3, [pc, #132]	; (8006610 <dmaStreamRelease+0x90>)
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	7c40      	ldrb	r0, [r0, #17]
 800658e:	2101      	movs	r1, #1
 8006590:	4081      	lsls	r1, r0
 8006592:	4219      	tst	r1, r3
 8006594:	d02a      	beq.n	80065ec <dmaStreamRelease+0x6c>
                "not allocated");

  /* Marks the stream as not allocated.*/
  dma.streams_mask &= ~(1U << dmastp->selfindex);
 8006596:	2201      	movs	r2, #1
 8006598:	4082      	lsls	r2, r0
 800659a:	43d2      	mvns	r2, r2
 800659c:	4013      	ands	r3, r2
 800659e:	491c      	ldr	r1, [pc, #112]	; (8006610 <dmaStreamRelease+0x90>)
 80065a0:	600b      	str	r3, [r1, #0]
  dma.isr_mask &= ~(1U << dmastp->selfindex);
 80065a2:	6848      	ldr	r0, [r1, #4]
 80065a4:	4002      	ands	r2, r0
 80065a6:	604a      	str	r2, [r1, #4]

  /* Disables the associated IRQ vector if it is no more in use.*/
  if ((dma.streams_mask & dmastp->cmask) == 0U) {
 80065a8:	68a2      	ldr	r2, [r4, #8]
 80065aa:	4213      	tst	r3, r2
 80065ac:	d021      	beq.n	80065f2 <dmaStreamRelease+0x72>
    nvicDisableVector(dmastp->vector);
  }

  /* Removes the DMA handler.*/
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = NULL;
 80065ae:	7c60      	ldrb	r0, [r4, #17]
 80065b0:	4a18      	ldr	r2, [pc, #96]	; (8006614 <dmaStreamRelease+0x94>)
 80065b2:	2100      	movs	r1, #0
 80065b4:	f842 1030 	str.w	r1, [r2, r0, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = NULL;
 80065b8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80065bc:	6051      	str	r1, [r2, #4]

  /* Shutting down clocks that are no more required, if any.*/
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 80065be:	f013 0f7f 	tst.w	r3, #127	; 0x7f
 80065c2:	d107      	bne.n	80065d4 <dmaStreamRelease+0x54>
    rccDisableDMA1();
 80065c4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 80065c8:	f501 3104 	add.w	r1, r1, #135168	; 0x21000
 80065cc:	694a      	ldr	r2, [r1, #20]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	614a      	str	r2, [r1, #20]
  }
#if STM32_DMA2_NUM_CHANNELS > 0
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 80065d4:	f413 6f78 	tst.w	r3, #3968	; 0xf80
 80065d8:	d104      	bne.n	80065e4 <dmaStreamRelease+0x64>
    rccDisableDMA2();
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <dmaStreamRelease+0x98>)
 80065dc:	6953      	ldr	r3, [r2, #20]
 80065de:	f023 0302 	bic.w	r3, r3, #2
 80065e2:	6153      	str	r3, [r2, #20]
  }
#endif
}
 80065e4:	bd38      	pop	{r3, r4, r5, pc}
  osalDbgCheck(dmastp != NULL);
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <dmaStreamRelease+0x9c>)
 80065e8:	f7ff fbca 	bl	8005d80 <chSysHalt>
  osalDbgAssert((dma.streams_mask & (1 << dmastp->selfindex)) != 0U,
 80065ec:	480b      	ldr	r0, [pc, #44]	; (800661c <dmaStreamRelease+0x9c>)
 80065ee:	f7ff fbc7 	bl	8005d80 <chSysHalt>
    nvicDisableVector(dmastp->vector);
 80065f2:	7ca1      	ldrb	r1, [r4, #18]
 *
 * @param[in] n         the interrupt number
 */
void nvicDisableVector(uint32_t n) {

  NVIC->ICER[n >> 5U] = 1U << (n & 0x1FU);
 80065f4:	0948      	lsrs	r0, r1, #5
 80065f6:	f001 021f 	and.w	r2, r1, #31
 80065fa:	2501      	movs	r5, #1
 80065fc:	4095      	lsls	r5, r2
 80065fe:	4a08      	ldr	r2, [pc, #32]	; (8006620 <dmaStreamRelease+0xa0>)
 8006600:	3020      	adds	r0, #32
 8006602:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = 0U;
 8006606:	440a      	add	r2, r1
 8006608:	2100      	movs	r1, #0
 800660a:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 800660e:	e7ce      	b.n	80065ae <dmaStreamRelease+0x2e>
 8006610:	20002034 	.word	0x20002034
 8006614:	20001570 	.word	0x20001570
 8006618:	40021000 	.word	0x40021000
 800661c:	0800b4c0 	.word	0x0800b4c0
 8006620:	e000e100 	.word	0xe000e100
	...

08006630 <adc_lld_stop_adc>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 */
static void adc_lld_stop_adc(ADCDriver *adcp) {

  if (adcp->adcm->CR & ADC_CR_ADSTART) {
 8006630:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006632:	689a      	ldr	r2, [r3, #8]
 8006634:	f012 0f04 	tst.w	r2, #4
 8006638:	d008      	beq.n	800664c <adc_lld_stop_adc+0x1c>
    adcp->adcm->CR |= ADC_CR_ADSTP;
 800663a:	689a      	ldr	r2, [r3, #8]
 800663c:	f042 0210 	orr.w	r2, r2, #16
 8006640:	609a      	str	r2, [r3, #8]
    while (adcp->adcm->CR & ADC_CR_ADSTP)
 8006642:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8006644:	6893      	ldr	r3, [r2, #8]
 8006646:	f013 0f10 	tst.w	r3, #16
 800664a:	d1fb      	bne.n	8006644 <adc_lld_stop_adc+0x14>
      ;
  }
}
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop

08006650 <adc_lld_stop_conversion>:
 *
 * @param[in] adcp      pointer to the @p ADCDriver object
 *
 * @notapi
 */
void adc_lld_stop_conversion(ADCDriver *adcp) {
 8006650:	b508      	push	{r3, lr}

  dmaStreamDisable(adcp->dmastp);
 8006652:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006654:	6859      	ldr	r1, [r3, #4]
 8006656:	680b      	ldr	r3, [r1, #0]
 8006658:	f023 030f 	bic.w	r3, r3, #15
 800665c:	600b      	str	r3, [r1, #0]
 800665e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	7c19      	ldrb	r1, [r3, #16]
 8006664:	230e      	movs	r3, #14
 8006666:	408b      	lsls	r3, r1
 8006668:	6053      	str	r3, [r2, #4]
  adc_lld_stop_adc(adcp);
 800666a:	f7ff ffe1 	bl	8006630 <adc_lld_stop_adc>
}
 800666e:	bd08      	pop	{r3, pc}

08006670 <adc_lld_serve_interrupt>:
static void adc_lld_serve_interrupt(ADCDriver *adcp, uint32_t isr) {
 8006670:	b538      	push	{r3, r4, r5, lr}
  if (adcp->grpp != NULL) {
 8006672:	6903      	ldr	r3, [r0, #16]
 8006674:	b18b      	cbz	r3, 800669a <adc_lld_serve_interrupt+0x2a>
 8006676:	460d      	mov	r5, r1
 8006678:	4604      	mov	r4, r0
    if ((isr & ADC_ISR_OVR) &&
 800667a:	f011 0f10 	tst.w	r1, #16
 800667e:	d003      	beq.n	8006688 <adc_lld_serve_interrupt+0x18>
        (dmaStreamGetTransactionSize(adcp->dmastp) > 0)) {
 8006680:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
    if ((isr & ADC_ISR_OVR) &&
 8006686:	b94b      	cbnz	r3, 800669c <adc_lld_serve_interrupt+0x2c>
    if (isr & ADC_ISR_AWD1) {
 8006688:	f015 0f80 	tst.w	r5, #128	; 0x80
 800668c:	d12e      	bne.n	80066ec <adc_lld_serve_interrupt+0x7c>
    if (isr & ADC_ISR_AWD2) {
 800668e:	f415 7f80 	tst.w	r5, #256	; 0x100
 8006692:	d154      	bne.n	800673e <adc_lld_serve_interrupt+0xce>
    if (isr & ADC_ISR_AWD3) {
 8006694:	f415 7f00 	tst.w	r5, #512	; 0x200
 8006698:	d17a      	bne.n	8006790 <adc_lld_serve_interrupt+0x120>
}
 800669a:	bd38      	pop	{r3, r4, r5, pc}
      _adc_isr_error_code(adcp, ADC_ERR_OVERFLOW);
 800669c:	f7ff ffd8 	bl	8006650 <adc_lld_stop_conversion>
 80066a0:	6923      	ldr	r3, [r4, #16]
 80066a2:	689a      	ldr	r2, [r3, #8]
 80066a4:	b1ea      	cbz	r2, 80066e2 <adc_lld_serve_interrupt+0x72>
 80066a6:	2205      	movs	r2, #5
 80066a8:	7022      	strb	r2, [r4, #0]
 80066aa:	689b      	ldr	r3, [r3, #8]
 80066ac:	2101      	movs	r1, #1
 80066ae:	4620      	mov	r0, r4
 80066b0:	4798      	blx	r3
 80066b2:	7823      	ldrb	r3, [r4, #0]
 80066b4:	2b05      	cmp	r3, #5
 80066b6:	bf04      	itt	eq
 80066b8:	2302      	moveq	r3, #2
 80066ba:	7023      	strbeq	r3, [r4, #0]
 80066bc:	2300      	movs	r3, #0
 80066be:	6123      	str	r3, [r4, #16]
 80066c0:	2320      	movs	r3, #32
 80066c2:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80066c6:	f7ff fd2b 	bl	8006120 <_dbg_check_lock_from_isr>
 80066ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80066ce:	f104 0014 	add.w	r0, r4, #20
 80066d2:	f7ff fcb5 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80066d6:	f7ff fd0b 	bl	80060f0 <_dbg_check_unlock_from_isr>
 80066da:	2300      	movs	r3, #0
 80066dc:	f383 8811 	msr	BASEPRI, r3
 80066e0:	e7d2      	b.n	8006688 <adc_lld_serve_interrupt+0x18>
 80066e2:	2302      	movs	r3, #2
 80066e4:	7023      	strb	r3, [r4, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	6123      	str	r3, [r4, #16]
 80066ea:	e7e9      	b.n	80066c0 <adc_lld_serve_interrupt+0x50>
      _adc_isr_error_code(adcp, ADC_ERR_AWD1);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff ffaf 	bl	8006650 <adc_lld_stop_conversion>
 80066f2:	6923      	ldr	r3, [r4, #16]
 80066f4:	689a      	ldr	r2, [r3, #8]
 80066f6:	b1ea      	cbz	r2, 8006734 <adc_lld_serve_interrupt+0xc4>
 80066f8:	2205      	movs	r2, #5
 80066fa:	7022      	strb	r2, [r4, #0]
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	2102      	movs	r1, #2
 8006700:	4620      	mov	r0, r4
 8006702:	4798      	blx	r3
 8006704:	7823      	ldrb	r3, [r4, #0]
 8006706:	2b05      	cmp	r3, #5
 8006708:	bf04      	itt	eq
 800670a:	2302      	moveq	r3, #2
 800670c:	7023      	strbeq	r3, [r4, #0]
 800670e:	2300      	movs	r3, #0
 8006710:	6123      	str	r3, [r4, #16]
 8006712:	2320      	movs	r3, #32
 8006714:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8006718:	f7ff fd02 	bl	8006120 <_dbg_check_lock_from_isr>
 800671c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006720:	f104 0014 	add.w	r0, r4, #20
 8006724:	f7ff fc8c 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8006728:	f7ff fce2 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800672c:	2300      	movs	r3, #0
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	e7ac      	b.n	800668e <adc_lld_serve_interrupt+0x1e>
 8006734:	2302      	movs	r3, #2
 8006736:	7023      	strb	r3, [r4, #0]
 8006738:	2300      	movs	r3, #0
 800673a:	6123      	str	r3, [r4, #16]
 800673c:	e7e9      	b.n	8006712 <adc_lld_serve_interrupt+0xa2>
      _adc_isr_error_code(adcp, ADC_ERR_AWD2);
 800673e:	4620      	mov	r0, r4
 8006740:	f7ff ff86 	bl	8006650 <adc_lld_stop_conversion>
 8006744:	6923      	ldr	r3, [r4, #16]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	b1ea      	cbz	r2, 8006786 <adc_lld_serve_interrupt+0x116>
 800674a:	2205      	movs	r2, #5
 800674c:	7022      	strb	r2, [r4, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2103      	movs	r1, #3
 8006752:	4620      	mov	r0, r4
 8006754:	4798      	blx	r3
 8006756:	7823      	ldrb	r3, [r4, #0]
 8006758:	2b05      	cmp	r3, #5
 800675a:	bf04      	itt	eq
 800675c:	2302      	moveq	r3, #2
 800675e:	7023      	strbeq	r3, [r4, #0]
 8006760:	2300      	movs	r3, #0
 8006762:	6123      	str	r3, [r4, #16]
 8006764:	2320      	movs	r3, #32
 8006766:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800676a:	f7ff fcd9 	bl	8006120 <_dbg_check_lock_from_isr>
 800676e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006772:	f104 0014 	add.w	r0, r4, #20
 8006776:	f7ff fc63 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 800677a:	f7ff fcb9 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800677e:	2300      	movs	r3, #0
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	e786      	b.n	8006694 <adc_lld_serve_interrupt+0x24>
 8006786:	2302      	movs	r3, #2
 8006788:	7023      	strb	r3, [r4, #0]
 800678a:	2300      	movs	r3, #0
 800678c:	6123      	str	r3, [r4, #16]
 800678e:	e7e9      	b.n	8006764 <adc_lld_serve_interrupt+0xf4>
      _adc_isr_error_code(adcp, ADC_ERR_AWD3);
 8006790:	4620      	mov	r0, r4
 8006792:	f7ff ff5d 	bl	8006650 <adc_lld_stop_conversion>
 8006796:	6923      	ldr	r3, [r4, #16]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	b1ea      	cbz	r2, 80067d8 <adc_lld_serve_interrupt+0x168>
 800679c:	2205      	movs	r2, #5
 800679e:	7022      	strb	r2, [r4, #0]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2104      	movs	r1, #4
 80067a4:	4620      	mov	r0, r4
 80067a6:	4798      	blx	r3
 80067a8:	7823      	ldrb	r3, [r4, #0]
 80067aa:	2b05      	cmp	r3, #5
 80067ac:	bf04      	itt	eq
 80067ae:	2302      	moveq	r3, #2
 80067b0:	7023      	strbeq	r3, [r4, #0]
 80067b2:	2300      	movs	r3, #0
 80067b4:	6123      	str	r3, [r4, #16]
 80067b6:	2320      	movs	r3, #32
 80067b8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80067bc:	f7ff fcb0 	bl	8006120 <_dbg_check_lock_from_isr>
 80067c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80067c4:	f104 0014 	add.w	r0, r4, #20
 80067c8:	f7ff fc3a 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80067cc:	f7ff fc90 	bl	80060f0 <_dbg_check_unlock_from_isr>
 80067d0:	2300      	movs	r3, #0
 80067d2:	f383 8811 	msr	BASEPRI, r3
 80067d6:	e760      	b.n	800669a <adc_lld_serve_interrupt+0x2a>
 80067d8:	2302      	movs	r3, #2
 80067da:	7023      	strb	r3, [r4, #0]
 80067dc:	2300      	movs	r3, #0
 80067de:	6123      	str	r3, [r4, #16]
 80067e0:	e7e9      	b.n	80067b6 <adc_lld_serve_interrupt+0x146>
 80067e2:	bf00      	nop
	...

080067f0 <adc_lld_serve_dma_interrupt>:
static void adc_lld_serve_dma_interrupt(ADCDriver *adcp, uint32_t flags) {
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4604      	mov	r4, r0
  if ((flags & (STM32_DMA_ISR_TEIF | STM32_DMA_ISR_DMEIF)) != 0) {
 80067f4:	f011 0f08 	tst.w	r1, #8
 80067f8:	d117      	bne.n	800682a <adc_lld_serve_dma_interrupt+0x3a>
    if (adcp->grpp != NULL) {
 80067fa:	6903      	ldr	r3, [r0, #16]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d036      	beq.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
      if ((flags & STM32_DMA_ISR_TCIF) != 0) {
 8006800:	f011 0f02 	tst.w	r1, #2
 8006804:	d065      	beq.n	80068d2 <adc_lld_serve_dma_interrupt+0xe2>
        _adc_isr_full_code(adcp);
 8006806:	781a      	ldrb	r2, [r3, #0]
 8006808:	2a00      	cmp	r2, #0
 800680a:	d039      	beq.n	8006880 <adc_lld_serve_dma_interrupt+0x90>
 800680c:	685d      	ldr	r5, [r3, #4]
 800680e:	b375      	cbz	r5, 800686e <adc_lld_serve_dma_interrupt+0x7e>
 8006810:	68c2      	ldr	r2, [r0, #12]
 8006812:	2a01      	cmp	r2, #1
 8006814:	d931      	bls.n	800687a <adc_lld_serve_dma_interrupt+0x8a>
 8006816:	8859      	ldrh	r1, [r3, #2]
 8006818:	f022 0001 	bic.w	r0, r2, #1
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	0852      	lsrs	r2, r2, #1
 8006820:	fb00 3101 	mla	r1, r0, r1, r3
 8006824:	4620      	mov	r0, r4
 8006826:	47a8      	blx	r5
 8006828:	e021      	b.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 800682a:	f7ff ff11 	bl	8006650 <adc_lld_stop_conversion>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	689a      	ldr	r2, [r3, #8]
 8006832:	b1ea      	cbz	r2, 8006870 <adc_lld_serve_dma_interrupt+0x80>
 8006834:	2205      	movs	r2, #5
 8006836:	7022      	strb	r2, [r4, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	2100      	movs	r1, #0
 800683c:	4620      	mov	r0, r4
 800683e:	4798      	blx	r3
 8006840:	7823      	ldrb	r3, [r4, #0]
 8006842:	2b05      	cmp	r3, #5
 8006844:	bf04      	itt	eq
 8006846:	2302      	moveq	r3, #2
 8006848:	7023      	strbeq	r3, [r4, #0]
 800684a:	2300      	movs	r3, #0
 800684c:	6123      	str	r3, [r4, #16]
 800684e:	2320      	movs	r3, #32
 8006850:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 8006854:	f7ff fc64 	bl	8006120 <_dbg_check_lock_from_isr>
 8006858:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800685c:	f104 0014 	add.w	r0, r4, #20
 8006860:	f7ff fbee 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 8006864:	f7ff fc44 	bl	80060f0 <_dbg_check_unlock_from_isr>
 8006868:	2300      	movs	r3, #0
 800686a:	f383 8811 	msr	BASEPRI, r3
}
 800686e:	bd38      	pop	{r3, r4, r5, pc}
    _adc_isr_error_code(adcp, ADC_ERR_DMAFAILURE);
 8006870:	2302      	movs	r3, #2
 8006872:	7023      	strb	r3, [r4, #0]
 8006874:	2300      	movs	r3, #0
 8006876:	6123      	str	r3, [r4, #16]
 8006878:	e7e9      	b.n	800684e <adc_lld_serve_dma_interrupt+0x5e>
        _adc_isr_full_code(adcp);
 800687a:	6881      	ldr	r1, [r0, #8]
 800687c:	47a8      	blx	r5
 800687e:	e7f6      	b.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
 8006880:	f7ff fee6 	bl	8006650 <adc_lld_stop_conversion>
 8006884:	6923      	ldr	r3, [r4, #16]
 8006886:	685a      	ldr	r2, [r3, #4]
 8006888:	b1f2      	cbz	r2, 80068c8 <adc_lld_serve_dma_interrupt+0xd8>
 800688a:	2204      	movs	r2, #4
 800688c:	7022      	strb	r2, [r4, #0]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	68e2      	ldr	r2, [r4, #12]
 8006892:	68a1      	ldr	r1, [r4, #8]
 8006894:	4620      	mov	r0, r4
 8006896:	4798      	blx	r3
 8006898:	7823      	ldrb	r3, [r4, #0]
 800689a:	2b04      	cmp	r3, #4
 800689c:	d00f      	beq.n	80068be <adc_lld_serve_dma_interrupt+0xce>
 800689e:	2320      	movs	r3, #32
 80068a0:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 80068a4:	f7ff fc3c 	bl	8006120 <_dbg_check_lock_from_isr>
 80068a8:	2100      	movs	r1, #0
 80068aa:	f104 0014 	add.w	r0, r4, #20
 80068ae:	f7ff fbc7 	bl	8006040 <chThdResumeI>
  _dbg_check_unlock_from_isr();
 80068b2:	f7ff fc1d 	bl	80060f0 <_dbg_check_unlock_from_isr>
 80068b6:	2300      	movs	r3, #0
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	e7d7      	b.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
 80068be:	2302      	movs	r3, #2
 80068c0:	7023      	strb	r3, [r4, #0]
 80068c2:	2300      	movs	r3, #0
 80068c4:	6123      	str	r3, [r4, #16]
 80068c6:	e7ea      	b.n	800689e <adc_lld_serve_dma_interrupt+0xae>
 80068c8:	2302      	movs	r3, #2
 80068ca:	7023      	strb	r3, [r4, #0]
 80068cc:	2300      	movs	r3, #0
 80068ce:	6123      	str	r3, [r4, #16]
 80068d0:	e7e5      	b.n	800689e <adc_lld_serve_dma_interrupt+0xae>
      else if ((flags & STM32_DMA_ISR_HTIF) != 0) {
 80068d2:	f011 0f04 	tst.w	r1, #4
 80068d6:	d0ca      	beq.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
        _adc_isr_half_code(adcp);
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0c7      	beq.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
 80068de:	68c2      	ldr	r2, [r0, #12]
 80068e0:	0852      	lsrs	r2, r2, #1
 80068e2:	6881      	ldr	r1, [r0, #8]
 80068e4:	4798      	blx	r3
 80068e6:	e7c2      	b.n	800686e <adc_lld_serve_dma_interrupt+0x7e>
	...

080068f0 <nvicEnableVector>:
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80068f0:	0109      	lsls	r1, r1, #4
 80068f2:	b2c9      	uxtb	r1, r1
 80068f4:	f100 4360 	add.w	r3, r0, #3758096384	; 0xe0000000
 80068f8:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
 80068fc:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8006900:	f000 021f 	and.w	r2, r0, #31
 8006904:	2301      	movs	r3, #1
 8006906:	4093      	lsls	r3, r2
 8006908:	0940      	lsrs	r0, r0, #5
 800690a:	0080      	lsls	r0, r0, #2
 800690c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8006910:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8006914:	f8c0 3180 	str.w	r3, [r0, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8006918:	6003      	str	r3, [r0, #0]
}
 800691a:	4770      	bx	lr
 800691c:	0000      	movs	r0, r0
	...

08006920 <dmaStreamAllocate>:
                       void *param) {
 8006920:	b570      	push	{r4, r5, r6, lr}
  osalDbgCheck(dmastp != NULL);
 8006922:	2800      	cmp	r0, #0
 8006924:	d03e      	beq.n	80069a4 <dmaStreamAllocate+0x84>
 8006926:	4604      	mov	r4, r0
  if ((dma.streams_mask & (1U << dmastp->selfindex)) != 0U)
 8006928:	4823      	ldr	r0, [pc, #140]	; (80069b8 <dmaStreamAllocate+0x98>)
 800692a:	6805      	ldr	r5, [r0, #0]
 800692c:	7c66      	ldrb	r6, [r4, #17]
 800692e:	2001      	movs	r0, #1
 8006930:	40b0      	lsls	r0, r6
 8006932:	4228      	tst	r0, r5
 8006934:	d13d      	bne.n	80069b2 <dmaStreamAllocate+0x92>
  _stm32_dma_isr_redir[dmastp->selfindex].dma_func  = func;
 8006936:	4821      	ldr	r0, [pc, #132]	; (80069bc <dmaStreamAllocate+0x9c>)
 8006938:	f840 2036 	str.w	r2, [r0, r6, lsl #3]
  _stm32_dma_isr_redir[dmastp->selfindex].dma_param = param;
 800693c:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8006940:	6073      	str	r3, [r6, #4]
  if ((dma.streams_mask & STM32_DMA1_STREAMS_MASK) == 0U) {
 8006942:	f015 0f7f 	tst.w	r5, #127	; 0x7f
 8006946:	d104      	bne.n	8006952 <dmaStreamAllocate+0x32>
    rccEnableDMA1(true);
 8006948:	481d      	ldr	r0, [pc, #116]	; (80069c0 <dmaStreamAllocate+0xa0>)
 800694a:	6943      	ldr	r3, [r0, #20]
 800694c:	f043 0301 	orr.w	r3, r3, #1
 8006950:	6143      	str	r3, [r0, #20]
  if ((dma.streams_mask & STM32_DMA2_STREAMS_MASK) == 0U) {
 8006952:	f415 6f78 	tst.w	r5, #3968	; 0xf80
 8006956:	d104      	bne.n	8006962 <dmaStreamAllocate+0x42>
    rccEnableDMA2(true);
 8006958:	4819      	ldr	r0, [pc, #100]	; (80069c0 <dmaStreamAllocate+0xa0>)
 800695a:	6943      	ldr	r3, [r0, #20]
 800695c:	f043 0302 	orr.w	r3, r3, #2
 8006960:	6143      	str	r3, [r0, #20]
  dmaStreamDisable(dmastp);
 8006962:	6860      	ldr	r0, [r4, #4]
 8006964:	6803      	ldr	r3, [r0, #0]
 8006966:	f023 030f 	bic.w	r3, r3, #15
 800696a:	6003      	str	r3, [r0, #0]
 800696c:	6820      	ldr	r0, [r4, #0]
 800696e:	7c26      	ldrb	r6, [r4, #16]
 8006970:	230e      	movs	r3, #14
 8006972:	40b3      	lsls	r3, r6
 8006974:	6043      	str	r3, [r0, #4]
  dmastp->channel->CCR = STM32_DMA_CCR_RESET_VALUE;
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	2000      	movs	r0, #0
 800697a:	6018      	str	r0, [r3, #0]
  if (func != NULL) {
 800697c:	b152      	cbz	r2, 8006994 <dmaStreamAllocate+0x74>
    if ((dma.isr_mask & dmastp->cmask) == 0U) {
 800697e:	4b0e      	ldr	r3, [pc, #56]	; (80069b8 <dmaStreamAllocate+0x98>)
 8006980:	685e      	ldr	r6, [r3, #4]
 8006982:	68a3      	ldr	r3, [r4, #8]
 8006984:	421e      	tst	r6, r3
 8006986:	d010      	beq.n	80069aa <dmaStreamAllocate+0x8a>
    dma.isr_mask |= (1U << dmastp->selfindex);
 8006988:	7c62      	ldrb	r2, [r4, #17]
 800698a:	2301      	movs	r3, #1
 800698c:	4093      	lsls	r3, r2
 800698e:	4333      	orrs	r3, r6
 8006990:	4a09      	ldr	r2, [pc, #36]	; (80069b8 <dmaStreamAllocate+0x98>)
 8006992:	6053      	str	r3, [r2, #4]
  dma.streams_mask |= (1U << dmastp->selfindex);
 8006994:	7c62      	ldrb	r2, [r4, #17]
 8006996:	2301      	movs	r3, #1
 8006998:	4093      	lsls	r3, r2
 800699a:	431d      	orrs	r5, r3
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <dmaStreamAllocate+0x98>)
 800699e:	601d      	str	r5, [r3, #0]
  return false;
 80069a0:	2000      	movs	r0, #0
}
 80069a2:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgCheck(dmastp != NULL);
 80069a4:	4807      	ldr	r0, [pc, #28]	; (80069c4 <dmaStreamAllocate+0xa4>)
 80069a6:	f7ff f9eb 	bl	8005d80 <chSysHalt>
      nvicEnableVector(dmastp->vector, priority);
 80069aa:	7ca0      	ldrb	r0, [r4, #18]
 80069ac:	f7ff ffa0 	bl	80068f0 <nvicEnableVector>
 80069b0:	e7ea      	b.n	8006988 <dmaStreamAllocate+0x68>
    return true;
 80069b2:	2001      	movs	r0, #1
 80069b4:	e7f5      	b.n	80069a2 <dmaStreamAllocate+0x82>
 80069b6:	bf00      	nop
 80069b8:	20002034 	.word	0x20002034
 80069bc:	20001570 	.word	0x20001570
 80069c0:	40021000 	.word	0x40021000
 80069c4:	0800b4ac 	.word	0x0800b4ac
	...

080069d0 <_ctl>:
static msg_t _ctl(void *ip, unsigned int operation, void *arg) {
 80069d0:	b508      	push	{r3, lr}
  osalDbgCheck(sdp != NULL);
 80069d2:	b130      	cbz	r0, 80069e2 <_ctl+0x12>
  switch (operation) {
 80069d4:	b141      	cbz	r1, 80069e8 <_ctl+0x18>
 80069d6:	2901      	cmp	r1, #1
 80069d8:	d109      	bne.n	80069ee <_ctl+0x1e>
    osalDbgCheck(arg == NULL);
 80069da:	b142      	cbz	r2, 80069ee <_ctl+0x1e>
 80069dc:	4805      	ldr	r0, [pc, #20]	; (80069f4 <_ctl+0x24>)
 80069de:	f7ff f9cf 	bl	8005d80 <chSysHalt>
  osalDbgCheck(sdp != NULL);
 80069e2:	4804      	ldr	r0, [pc, #16]	; (80069f4 <_ctl+0x24>)
 80069e4:	f7ff f9cc 	bl	8005d80 <chSysHalt>
    osalDbgAssert(false, "invalid CTL operation");
 80069e8:	4802      	ldr	r0, [pc, #8]	; (80069f4 <_ctl+0x24>)
 80069ea:	f7ff f9c9 	bl	8005d80 <chSysHalt>
}
 80069ee:	2000      	movs	r0, #0
 80069f0:	bd08      	pop	{r3, pc}
 80069f2:	bf00      	nop
 80069f4:	0800b3d8 	.word	0x0800b3d8
	...

08006a00 <adcObjectInit>:
 *
 * @param[out] adcp     pointer to the @p ADCDriver object
 *
 * @init
 */
void adcObjectInit(ADCDriver *adcp) {
 8006a00:	b508      	push	{r3, lr}

  adcp->state    = ADC_STOP;
 8006a02:	2301      	movs	r3, #1
 8006a04:	7003      	strb	r3, [r0, #0]
  adcp->config   = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	6043      	str	r3, [r0, #4]
  adcp->samples  = NULL;
 8006a0a:	6083      	str	r3, [r0, #8]
  adcp->depth    = 0;
 8006a0c:	60c3      	str	r3, [r0, #12]
  adcp->grpp     = NULL;
 8006a0e:	6103      	str	r3, [r0, #16]
#if ADC_USE_WAIT == TRUE
  adcp->thread   = NULL;
 8006a10:	6143      	str	r3, [r0, #20]
 * @init
 */
static inline void osalMutexObjectInit(mutex_t *mp) {

#if CH_CFG_USE_MUTEXES
  chMtxObjectInit(mp);
 8006a12:	3018      	adds	r0, #24
 8006a14:	f7ff f9d4 	bl	8005dc0 <chMtxObjectInit>
  osalMutexObjectInit(&adcp->mutex);
#endif
#if defined(ADC_DRIVER_EXT_INIT_HOOK)
  ADC_DRIVER_EXT_INIT_HOOK(adcp);
#endif
}
 8006a18:	bd08      	pop	{r3, pc}
 8006a1a:	bf00      	nop
 8006a1c:	0000      	movs	r0, r0
	...

08006a20 <stSetAlarm>:
 *
 * @param[in] abstime   the time to be set for the next alarm
 *
 * @api
 */
void stSetAlarm(systime_t abstime) {
 8006a20:	b508      	push	{r3, lr}
 *
 * @notapi
 */
static inline bool st_lld_is_alarm_active(void) {

  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 8006a22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a26:	68db      	ldr	r3, [r3, #12]

  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8006a28:	f013 0f02 	tst.w	r3, #2
 8006a2c:	d003      	beq.n	8006a36 <stSetAlarm+0x16>
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 8006a2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006a32:	6358      	str	r0, [r3, #52]	; 0x34

  st_lld_set_alarm(abstime);
}
 8006a34:	bd08      	pop	{r3, pc}
  osalDbgAssert(stIsAlarmActive() != false, "not active");
 8006a36:	4801      	ldr	r0, [pc, #4]	; (8006a3c <stSetAlarm+0x1c>)
 8006a38:	f7ff f9a2 	bl	8005d80 <chSysHalt>
 8006a3c:	0800b30c 	.word	0x0800b30c

08006a40 <fillTemp>:
    pt100temp = (sqrt(pt100temp) + z1) / z4;
    return pt100temp;
}


void fillTemp(char* metric,float temp,int temp_num){
 8006a40:	b530      	push	{r4, r5, lr}
 8006a42:	b083      	sub	sp, #12
 8006a44:	4604      	mov	r4, r0
 8006a46:	460d      	mov	r5, r1
  if ((abs(temp) >100) || (isnan(temp)==1))
 8006a48:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006a4c:	ee17 3a90 	vmov	r3, s15
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	bfb8      	it	lt
 8006a54:	425b      	neglt	r3, r3
 8006a56:	2b64      	cmp	r3, #100	; 0x64
 8006a58:	dc11      	bgt.n	8006a7e <fillTemp+0x3e>
 8006a5a:	eeb4 0a40 	vcmp.f32	s0, s0
 8006a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a62:	d60c      	bvs.n	8006a7e <fillTemp+0x3e>
	sprintf(metric,"T%d: N/C",temp_num);
    else
	sprintf(metric,"T%d: %3.0fc",temp_num,temp);	    
 8006a64:	ee10 0a10 	vmov	r0, s0
 8006a68:	f7f9 fed8 	bl	800081c <__aeabi_f2d>
 8006a6c:	e9cd 0100 	strd	r0, r1, [sp]
 8006a70:	462a      	mov	r2, r5
 8006a72:	4906      	ldr	r1, [pc, #24]	; (8006a8c <fillTemp+0x4c>)
 8006a74:	4620      	mov	r0, r4
 8006a76:	f7fa fcd9 	bl	800142c <sprintf>
}
 8006a7a:	b003      	add	sp, #12
 8006a7c:	bd30      	pop	{r4, r5, pc}
	sprintf(metric,"T%d: N/C",temp_num);
 8006a7e:	462a      	mov	r2, r5
 8006a80:	4903      	ldr	r1, [pc, #12]	; (8006a90 <fillTemp+0x50>)
 8006a82:	4620      	mov	r0, r4
 8006a84:	f7fa fcd2 	bl	800142c <sprintf>
 8006a88:	e7f7      	b.n	8006a7a <fillTemp+0x3a>
 8006a8a:	bf00      	nop
 8006a8c:	0800b6e0 	.word	0x0800b6e0
 8006a90:	0800b6d4 	.word	0x0800b6d4
	...

08006aa0 <clear_oled>:
{
 8006aa0:	b508      	push	{r3, lr}
    memset(&vbuf,0x00,4*128); // I set the clear to be 0x11 instead of 0x00
 8006aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	4801      	ldr	r0, [pc, #4]	; (8006ab0 <clear_oled+0x10>)
 8006aaa:	f7fa fc57 	bl	800135c <memset>
}
 8006aae:	bd08      	pop	{r3, pc}
 8006ab0:	2000265c 	.word	0x2000265c
	...

08006ac0 <oled_draw_string>:
{
 8006ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	9001      	str	r0, [sp, #4]
 8006ac8:	4688      	mov	r8, r1
 8006aca:	4616      	mov	r6, r2
 8006acc:	ea4f 1ac1 	mov.w	sl, r1, lsl #7
 8006ad0:	2500      	movs	r5, #0
 8006ad2:	4f15      	ldr	r7, [pc, #84]	; (8006b28 <oled_draw_string+0x68>)
 8006ad4:	f8df b05c 	ldr.w	fp, [pc, #92]	; 8006b34 <oled_draw_string+0x74>
 8006ad8:	f1a7 09f8 	sub.w	r9, r7, #248	; 0xf8
 8006adc:	e000      	b.n	8006ae0 <oled_draw_string+0x20>
 8006ade:	3501      	adds	r5, #1
 8006ae0:	b2ec      	uxtb	r4, r5
  for (j=0;j<(strlen(text));j++)
 8006ae2:	4630      	mov	r0, r6
 8006ae4:	f7fa fccc 	bl	8001480 <strlen>
 8006ae8:	42a0      	cmp	r0, r4
 8006aea:	d91a      	bls.n	8006b22 <oled_draw_string+0x62>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	18e3      	adds	r3, r4, r3
 8006af0:	00db      	lsls	r3, r3, #3
 8006af2:	b2db      	uxtb	r3, r3
    oled_current_column = (x*8);
 8006af4:	4a0d      	ldr	r2, [pc, #52]	; (8006b2c <oled_draw_string+0x6c>)
 8006af6:	7013      	strb	r3, [r2, #0]
    oled_current_row = (y);
 8006af8:	4a0d      	ldr	r2, [pc, #52]	; (8006b30 <oled_draw_string+0x70>)
 8006afa:	f882 8000 	strb.w	r8, [r2]
 8006afe:	5d30      	ldrb	r0, [r6, r4]
 8006b00:	f100 5200 	add.w	r2, r0, #536870912	; 0x20000000
 8006b04:	3a20      	subs	r2, #32
 8006b06:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8006b0a:	4453      	add	r3, sl
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	445b      	add	r3, fp
 8006b10:	eb09 00c0 	add.w	r0, r9, r0, lsl #3
	  vbuf[oled_current_row+j][oled_current_column+i] = tiny_font[a-32][i*tiny_font_rows_char+j];
 8006b14:	f812 1b01 	ldrb.w	r1, [r2], #1
 8006b18:	f803 1f01 	strb.w	r1, [r3, #1]!
    for (i=0; i<tiny_font_cols; i++)
 8006b1c:	4282      	cmp	r2, r0
 8006b1e:	d1f9      	bne.n	8006b14 <oled_draw_string+0x54>
 8006b20:	e7dd      	b.n	8006ade <oled_draw_string+0x1e>
}
 8006b22:	b003      	add	sp, #12
 8006b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b28:	0800d1b4 	.word	0x0800d1b4
 8006b2c:	200020bd 	.word	0x200020bd
 8006b30:	200020be 	.word	0x200020be
 8006b34:	2000265c 	.word	0x2000265c
	...

08006b40 <chprintf>:
 * @param[in] chp       pointer to a @p BaseSequentialStream implementing object
 * @param[in] fmt       formatting string
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8006b40:	b40e      	push	{r1, r2, r3}
 8006b42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b46:	ed2d 8b02 	vpush	{d8}
 8006b4a:	b08e      	sub	sp, #56	; 0x38
 8006b4c:	4606      	mov	r6, r0
 8006b4e:	ab19      	add	r3, sp, #100	; 0x64
 8006b50:	f853 7b04 	ldr.w	r7, [r3], #4
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 8006b54:	930d      	str	r3, [sp, #52]	; 0x34
 8006b56:	469a      	mov	sl, r3
  int n = 0;
 8006b58:	f04f 0b00 	mov.w	fp, #0
    c = *fmt++;
 8006b5c:	1c7d      	adds	r5, r7, #1
 8006b5e:	7839      	ldrb	r1, [r7, #0]
    if (c == 0)
 8006b60:	2900      	cmp	r1, #0
 8006b62:	f000 81fc 	beq.w	8006f5e <chprintf+0x41e>
    if (c != '%') {
 8006b66:	2925      	cmp	r1, #37	; 0x25
 8006b68:	d007      	beq.n	8006b7a <chprintf+0x3a>
      streamPut(chp, (uint8_t)c);
 8006b6a:	6833      	ldr	r3, [r6, #0]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	4630      	mov	r0, r6
 8006b70:	4798      	blx	r3
      n++;
 8006b72:	f10b 0b01 	add.w	fp, fp, #1
    c = *fmt++;
 8006b76:	462f      	mov	r7, r5
 8006b78:	e7f0      	b.n	8006b5c <chprintf+0x1c>
    if (*fmt == '-') {
 8006b7a:	787b      	ldrb	r3, [r7, #1]
 8006b7c:	2b2d      	cmp	r3, #45	; 0x2d
      fmt++;
 8006b7e:	bf06      	itte	eq
 8006b80:	1cbd      	addeq	r5, r7, #2
      left_align = TRUE;
 8006b82:	2301      	moveq	r3, #1
    left_align = FALSE;
 8006b84:	2300      	movne	r3, #0
 8006b86:	9301      	str	r3, [sp, #4]
    if (*fmt == '0') {
 8006b88:	782b      	ldrb	r3, [r5, #0]
 8006b8a:	2b30      	cmp	r3, #48	; 0x30
      fmt++;
 8006b8c:	bf0c      	ite	eq
 8006b8e:	3501      	addeq	r5, #1
    filler = ' ';
 8006b90:	2320      	movne	r3, #32
 8006b92:	9300      	str	r3, [sp, #0]
    width = 0;
 8006b94:	2400      	movs	r4, #0
 8006b96:	e003      	b.n	8006ba0 <chprintf+0x60>
      width = width * 10 + c;
 8006b98:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8006b9c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
      c = *fmt++;
 8006ba0:	f815 2b01 	ldrb.w	r2, [r5], #1
      if (c >= '0' && c <= '9')
 8006ba4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006ba8:	b2db      	uxtb	r3, r3
 8006baa:	2b09      	cmp	r3, #9
 8006bac:	d9f4      	bls.n	8006b98 <chprintf+0x58>
      else if (c == '*')
 8006bae:	2a2a      	cmp	r2, #42	; 0x2a
 8006bb0:	d104      	bne.n	8006bbc <chprintf+0x7c>
        c = va_arg(ap, int);
 8006bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8006bb6:	f10a 0a04 	add.w	sl, sl, #4
 8006bba:	e7ed      	b.n	8006b98 <chprintf+0x58>
    if (c == '.') {
 8006bbc:	2a2e      	cmp	r2, #46	; 0x2e
 8006bbe:	d044      	beq.n	8006c4a <chprintf+0x10a>
    precision = 0;
 8006bc0:	f04f 0900 	mov.w	r9, #0
    if (c == 'l' || c == 'L') {
 8006bc4:	f002 03df 	and.w	r3, r2, #223	; 0xdf
 8006bc8:	2b4c      	cmp	r3, #76	; 0x4c
 8006bca:	d053      	beq.n	8006c74 <chprintf+0x134>
      is_long = (c >= 'A') && (c <= 'Z');
 8006bcc:	f1a2 0341 	sub.w	r3, r2, #65	; 0x41
 8006bd0:	b2db      	uxtb	r3, r3
    switch (c) {
 8006bd2:	f1a2 0144 	sub.w	r1, r2, #68	; 0x44
 8006bd6:	2934      	cmp	r1, #52	; 0x34
 8006bd8:	f200 8181 	bhi.w	8006ede <chprintf+0x39e>
 8006bdc:	e8df f011 	tbh	[pc, r1, lsl #1]
 8006be0:	017f00c8 	.word	0x017f00c8
 8006be4:	017f017f 	.word	0x017f017f
 8006be8:	00c8017f 	.word	0x00c8017f
 8006bec:	017f017f 	.word	0x017f017f
 8006bf0:	017f017f 	.word	0x017f017f
 8006bf4:	0176017f 	.word	0x0176017f
 8006bf8:	017f017f 	.word	0x017f017f
 8006bfc:	017f017f 	.word	0x017f017f
 8006c00:	0143017f 	.word	0x0143017f
 8006c04:	017f017f 	.word	0x017f017f
 8006c08:	017f0179 	.word	0x017f0179
 8006c0c:	017f017f 	.word	0x017f017f
 8006c10:	017f017f 	.word	0x017f017f
 8006c14:	017f017f 	.word	0x017f017f
 8006c18:	017f017f 	.word	0x017f017f
 8006c1c:	008a017f 	.word	0x008a017f
 8006c20:	017f00c8 	.word	0x017f00c8
 8006c24:	017f00e6 	.word	0x017f00e6
 8006c28:	00c8017f 	.word	0x00c8017f
 8006c2c:	017f017f 	.word	0x017f017f
 8006c30:	017f017f 	.word	0x017f017f
 8006c34:	0176017f 	.word	0x0176017f
 8006c38:	017f017f 	.word	0x017f017f
 8006c3c:	0098017f 	.word	0x0098017f
 8006c40:	0143017f 	.word	0x0143017f
 8006c44:	017f017f 	.word	0x017f017f
 8006c48:	0179      	.short	0x0179
    precision = 0;
 8006c4a:	f04f 0900 	mov.w	r9, #0
 8006c4e:	e003      	b.n	8006c58 <chprintf+0x118>
        precision *= 10;
 8006c50:	eb09 0989 	add.w	r9, r9, r9, lsl #2
        precision += c;
 8006c54:	eb03 0949 	add.w	r9, r3, r9, lsl #1
        c = *fmt++;
 8006c58:	f815 2b01 	ldrb.w	r2, [r5], #1
        if (c >= '0' && c <= '9')
 8006c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006c60:	b2db      	uxtb	r3, r3
 8006c62:	2b09      	cmp	r3, #9
 8006c64:	d9f4      	bls.n	8006c50 <chprintf+0x110>
        else if (c == '*')
 8006c66:	2a2a      	cmp	r2, #42	; 0x2a
 8006c68:	d1ac      	bne.n	8006bc4 <chprintf+0x84>
          c = va_arg(ap, int);
 8006c6a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c6e:	f10a 0a04 	add.w	sl, sl, #4
 8006c72:	e7ed      	b.n	8006c50 <chprintf+0x110>
      if (*fmt)
 8006c74:	782b      	ldrb	r3, [r5, #0]
 8006c76:	b10b      	cbz	r3, 8006c7c <chprintf+0x13c>
        c = *fmt++;
 8006c78:	3501      	adds	r5, #1
 8006c7a:	461a      	mov	r2, r3
    switch (c) {
 8006c7c:	f1a2 0344 	sub.w	r3, r2, #68	; 0x44
 8006c80:	2b34      	cmp	r3, #52	; 0x34
 8006c82:	f200 812c 	bhi.w	8006ede <chprintf+0x39e>
 8006c86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006c8a:	007b      	.short	0x007b
 8006c8c:	012a012a 	.word	0x012a012a
 8006c90:	012a012a 	.word	0x012a012a
 8006c94:	012a007b 	.word	0x012a007b
 8006c98:	012a012a 	.word	0x012a012a
 8006c9c:	012a012a 	.word	0x012a012a
 8006ca0:	012a0121 	.word	0x012a0121
 8006ca4:	012a012a 	.word	0x012a012a
 8006ca8:	012a012a 	.word	0x012a012a
 8006cac:	012a00ee 	.word	0x012a00ee
 8006cb0:	0127012a 	.word	0x0127012a
 8006cb4:	012a012a 	.word	0x012a012a
 8006cb8:	012a012a 	.word	0x012a012a
 8006cbc:	012a012a 	.word	0x012a012a
 8006cc0:	012a012a 	.word	0x012a012a
 8006cc4:	012a012a 	.word	0x012a012a
 8006cc8:	007b0035 	.word	0x007b0035
 8006ccc:	0091012a 	.word	0x0091012a
 8006cd0:	012a012a 	.word	0x012a012a
 8006cd4:	012a007b 	.word	0x012a007b
 8006cd8:	012a012a 	.word	0x012a012a
 8006cdc:	012a012a 	.word	0x012a012a
 8006ce0:	012a0121 	.word	0x012a0121
 8006ce4:	012a012a 	.word	0x012a012a
 8006ce8:	012a0045 	.word	0x012a0045
 8006cec:	012a00ee 	.word	0x012a00ee
 8006cf0:	0127012a 	.word	0x0127012a
      *p++ = va_arg(ap, int);
 8006cf4:	f8da 3000 	ldr.w	r3, [sl]
 8006cf8:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006cfc:	f808 3d1c 	strb.w	r3, [r8, #-28]!
 8006d00:	462f      	mov	r7, r5
 8006d02:	f10a 0a04 	add.w	sl, sl, #4
      filler = ' ';
 8006d06:	2320      	movs	r3, #32
 8006d08:	9300      	str	r3, [sp, #0]
      *p++ = va_arg(ap, int);
 8006d0a:	f10d 001d 	add.w	r0, sp, #29
 8006d0e:	e0b6      	b.n	8006e7e <chprintf+0x33e>
    switch (c) {
 8006d10:	462f      	mov	r7, r5
 8006d12:	e000      	b.n	8006d16 <chprintf+0x1d6>
 8006d14:	462f      	mov	r7, r5
      if ((s = va_arg(ap, char *)) == 0)
 8006d16:	f10a 0204 	add.w	r2, sl, #4
 8006d1a:	f8da 8000 	ldr.w	r8, [sl]
 8006d1e:	f1b8 0f00 	cmp.w	r8, #0
 8006d22:	f000 8115 	beq.w	8006f50 <chprintf+0x410>
      if (precision == 0)
 8006d26:	f1b9 0f00 	cmp.w	r9, #0
 8006d2a:	f000 8105 	beq.w	8006f38 <chprintf+0x3f8>
      for (p = s; *p && (--precision >= 0); p++)
 8006d2e:	f898 3000 	ldrb.w	r3, [r8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f000 80db 	beq.w	8006eee <chprintf+0x3ae>
 8006d38:	f1b9 0901 	subs.w	r9, r9, #1
 8006d3c:	d413      	bmi.n	8006d66 <chprintf+0x226>
 8006d3e:	4640      	mov	r0, r8
 8006d40:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006d44:	b15b      	cbz	r3, 8006d5e <chprintf+0x21e>
 8006d46:	f1b9 0901 	subs.w	r9, r9, #1
 8006d4a:	d5f9      	bpl.n	8006d40 <chprintf+0x200>
      if ((s = va_arg(ap, char *)) == 0)
 8006d4c:	4692      	mov	sl, r2
      filler = ' ';
 8006d4e:	2320      	movs	r3, #32
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	e094      	b.n	8006e7e <chprintf+0x33e>
        s = "(null)";
 8006d54:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8006f78 <chprintf+0x438>
      for (p = s; *p && (--precision >= 0); p++)
 8006d58:	f647 79fe 	movw	r9, #32766	; 0x7ffe
 8006d5c:	e7ef      	b.n	8006d3e <chprintf+0x1fe>
      if ((s = va_arg(ap, char *)) == 0)
 8006d5e:	4692      	mov	sl, r2
      filler = ' ';
 8006d60:	2320      	movs	r3, #32
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	e08b      	b.n	8006e7e <chprintf+0x33e>
      if ((s = va_arg(ap, char *)) == 0)
 8006d66:	4692      	mov	sl, r2
      for (p = s; *p && (--precision >= 0); p++)
 8006d68:	4640      	mov	r0, r8
      filler = ' ';
 8006d6a:	2320      	movs	r3, #32
 8006d6c:	9300      	str	r3, [sp, #0]
 8006d6e:	e086      	b.n	8006e7e <chprintf+0x33e>
      if (is_long)
 8006d70:	2b19      	cmp	r3, #25
 8006d72:	d905      	bls.n	8006d80 <chprintf+0x240>
        l = va_arg(ap, int);
 8006d74:	f8da 1000 	ldr.w	r1, [sl]
 8006d78:	462f      	mov	r7, r5
 8006d7a:	f10a 0a04 	add.w	sl, sl, #4
 8006d7e:	e004      	b.n	8006d8a <chprintf+0x24a>
        l = va_arg(ap, long);
 8006d80:	f8da 1000 	ldr.w	r1, [sl]
 8006d84:	462f      	mov	r7, r5
 8006d86:	f10a 0a04 	add.w	sl, sl, #4
      if (l < 0) {
 8006d8a:	2900      	cmp	r1, #0
 8006d8c:	db07      	blt.n	8006d9e <chprintf+0x25e>
    p = tmpbuf;
 8006d8e:	a807      	add	r0, sp, #28
  return long_to_string_with_divisor(p, num, radix, 0);
 8006d90:	2300      	movs	r3, #0
 8006d92:	220a      	movs	r2, #10
 8006d94:	f7fe ff1c 	bl	8005bd0 <long_to_string_with_divisor>
    s = tmpbuf;
 8006d98:	f10d 081c 	add.w	r8, sp, #28
 8006d9c:	e06f      	b.n	8006e7e <chprintf+0x33e>
        *p++ = '-';
 8006d9e:	232d      	movs	r3, #45	; 0x2d
 8006da0:	f88d 301c 	strb.w	r3, [sp, #28]
        l = -l;
 8006da4:	4249      	negs	r1, r1
        *p++ = '-';
 8006da6:	f10d 001d 	add.w	r0, sp, #29
 8006daa:	e7f1      	b.n	8006d90 <chprintf+0x250>
      f = (float) va_arg(ap, double);
 8006dac:	f10a 0307 	add.w	r3, sl, #7
 8006db0:	f023 0307 	bic.w	r3, r3, #7
 8006db4:	f103 0a08 	add.w	sl, r3, #8
 8006db8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006dbc:	f7fa f85e 	bl	8000e7c <__aeabi_d2f>
 8006dc0:	ee08 0a10 	vmov	s16, r0
      if (f < 0) {
 8006dc4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006dc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dcc:	d443      	bmi.n	8006e56 <chprintf+0x316>
    p = tmpbuf;
 8006dce:	af07      	add	r7, sp, #28
      p = ftoa(p, f, precision);
 8006dd0:	ee18 0a10 	vmov	r0, s16
 8006dd4:	f7f9 fd22 	bl	800081c <__aeabi_f2d>
 8006dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if ((precision == 0) || (precision > FLOAT_PRECISION))
 8006ddc:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
    precision = FLOAT_PRECISION;
 8006de0:	2b09      	cmp	r3, #9
 8006de2:	bf34      	ite	cc
 8006de4:	464b      	movcc	r3, r9
 8006de6:	2309      	movcs	r3, #9
  precision = pow10[precision - 1];
 8006de8:	3b01      	subs	r3, #1
 8006dea:	4a61      	ldr	r2, [pc, #388]	; (8006f70 <chprintf+0x430>)
 8006dec:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
  l = (long)num;
 8006df0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006df4:	edcd 7a02 	vstr	s15, [sp, #8]
  p = long_to_string_with_divisor(p, l, 10, 0);
 8006df8:	2300      	movs	r3, #0
 8006dfa:	220a      	movs	r2, #10
 8006dfc:	ee17 1a90 	vmov	r1, s15
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7fe fee5 	bl	8005bd0 <long_to_string_with_divisor>
  *p++ = '.';
 8006e06:	4680      	mov	r8, r0
 8006e08:	232e      	movs	r3, #46	; 0x2e
 8006e0a:	f808 3b01 	strb.w	r3, [r8], #1
  l = (long)((num - l) * precision);
 8006e0e:	9802      	ldr	r0, [sp, #8]
 8006e10:	f7f9 fcf2 	bl	80007f8 <__aeabi_i2d>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e1c:	f7f9 fb9e 	bl	800055c <__aeabi_dsub>
 8006e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e24:	4648      	mov	r0, r9
 8006e26:	f7f9 fcd7 	bl	80007d8 <__aeabi_ui2d>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fd4b 	bl	80008cc <__aeabi_dmul>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e36:	4b4f      	ldr	r3, [pc, #316]	; (8006f74 <chprintf+0x434>)
 8006e38:	fba3 3709 	umull	r3, r7, r3, r9
 8006e3c:	08ff      	lsrs	r7, r7, #3
  l = (long)((num - l) * precision);
 8006e3e:	f7f9 fff5 	bl	8000e2c <__aeabi_d2iz>
  return long_to_string_with_divisor(p, l, 10, precision / 10);
 8006e42:	463b      	mov	r3, r7
 8006e44:	220a      	movs	r2, #10
 8006e46:	4601      	mov	r1, r0
 8006e48:	4640      	mov	r0, r8
 8006e4a:	f7fe fec1 	bl	8005bd0 <long_to_string_with_divisor>
 8006e4e:	462f      	mov	r7, r5
    s = tmpbuf;
 8006e50:	f10d 081c 	add.w	r8, sp, #28
 8006e54:	e013      	b.n	8006e7e <chprintf+0x33e>
        *p++ = '-';
 8006e56:	232d      	movs	r3, #45	; 0x2d
 8006e58:	f88d 301c 	strb.w	r3, [sp, #28]
        f = -f;
 8006e5c:	eeb1 8a48 	vneg.f32	s16, s16
        *p++ = '-';
 8006e60:	f10d 071d 	add.w	r7, sp, #29
 8006e64:	e7b4      	b.n	8006dd0 <chprintf+0x290>
    case 'U':
 8006e66:	462f      	mov	r7, r5
      c = 10;
 8006e68:	220a      	movs	r2, #10
        l = va_arg(ap, unsigned int);
 8006e6a:	f8da 1000 	ldr.w	r1, [sl]
 8006e6e:	f10a 0a04 	add.w	sl, sl, #4
  return long_to_string_with_divisor(p, num, radix, 0);
 8006e72:	2300      	movs	r3, #0
 8006e74:	a807      	add	r0, sp, #28
 8006e76:	f7fe feab 	bl	8005bd0 <long_to_string_with_divisor>
    s = tmpbuf;
 8006e7a:	f10d 081c 	add.w	r8, sp, #28
    i = (int)(p - s);
 8006e7e:	eba0 0508 	sub.w	r5, r0, r8
    if ((width -= i) < 0)
 8006e82:	1b64      	subs	r4, r4, r5
 8006e84:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    if (left_align == FALSE)
 8006e88:	9b01      	ldr	r3, [sp, #4]
 8006e8a:	b92b      	cbnz	r3, 8006e98 <chprintf+0x358>
      width = -width;
 8006e8c:	f1c4 0900 	rsb	r9, r4, #0
    if (width < 0) {
 8006e90:	f1b9 0f00 	cmp.w	r9, #0
 8006e94:	db30      	blt.n	8006ef8 <chprintf+0x3b8>
      width = -width;
 8006e96:	464c      	mov	r4, r9
    while (--i >= 0) {
 8006e98:	2d01      	cmp	r5, #1
 8006e9a:	d40a      	bmi.n	8006eb2 <chprintf+0x372>
 8006e9c:	46a9      	mov	r9, r5
 8006e9e:	4445      	add	r5, r8
      streamPut(chp, (uint8_t)*s++);
 8006ea0:	6833      	ldr	r3, [r6, #0]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	4798      	blx	r3
    while (--i >= 0) {
 8006eac:	45a8      	cmp	r8, r5
 8006eae:	d1f7      	bne.n	8006ea0 <chprintf+0x360>
 8006eb0:	44cb      	add	fp, r9
    while (width) {
 8006eb2:	2c00      	cmp	r4, #0
 8006eb4:	f43f ae52 	beq.w	8006b5c <chprintf+0x1c>
 8006eb8:	4625      	mov	r5, r4
      streamPut(chp, (uint8_t)filler);
 8006eba:	6833      	ldr	r3, [r6, #0]
 8006ebc:	68db      	ldr	r3, [r3, #12]
 8006ebe:	9900      	ldr	r1, [sp, #0]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	4798      	blx	r3
    while (width) {
 8006ec4:	3d01      	subs	r5, #1
 8006ec6:	d1f8      	bne.n	8006eba <chprintf+0x37a>
 8006ec8:	44a3      	add	fp, r4
 8006eca:	e647      	b.n	8006b5c <chprintf+0x1c>
    case 'O':
 8006ecc:	462f      	mov	r7, r5
      c = 8;
 8006ece:	2208      	movs	r2, #8
 8006ed0:	e7cb      	b.n	8006e6a <chprintf+0x32a>
    switch (c) {
 8006ed2:	462f      	mov	r7, r5
      c = 16;
 8006ed4:	2210      	movs	r2, #16
 8006ed6:	e7c8      	b.n	8006e6a <chprintf+0x32a>
    switch (c) {
 8006ed8:	462f      	mov	r7, r5
      c = 16;
 8006eda:	2210      	movs	r2, #16
 8006edc:	e7c5      	b.n	8006e6a <chprintf+0x32a>
      *p++ = c;
 8006ede:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8006ee2:	f808 2d1c 	strb.w	r2, [r8, #-28]!
 8006ee6:	462f      	mov	r7, r5
 8006ee8:	f10d 001d 	add.w	r0, sp, #29
 8006eec:	e7c7      	b.n	8006e7e <chprintf+0x33e>
      if ((s = va_arg(ap, char *)) == 0)
 8006eee:	4692      	mov	sl, r2
      for (p = s; *p && (--precision >= 0); p++)
 8006ef0:	4640      	mov	r0, r8
      filler = ' ';
 8006ef2:	2320      	movs	r3, #32
 8006ef4:	9300      	str	r3, [sp, #0]
 8006ef6:	e7c2      	b.n	8006e7e <chprintf+0x33e>
      if (*s == '-' && filler == '0') {
 8006ef8:	f898 3000 	ldrb.w	r3, [r8]
 8006efc:	2b2d      	cmp	r3, #45	; 0x2d
 8006efe:	d00d      	beq.n	8006f1c <chprintf+0x3dc>
        streamPut(chp, (uint8_t)filler);
 8006f00:	6833      	ldr	r3, [r6, #0]
 8006f02:	68db      	ldr	r3, [r3, #12]
 8006f04:	9900      	ldr	r1, [sp, #0]
 8006f06:	4630      	mov	r0, r6
 8006f08:	4798      	blx	r3
      } while (++width != 0);
 8006f0a:	f119 0901 	adds.w	r9, r9, #1
 8006f0e:	d1f7      	bne.n	8006f00 <chprintf+0x3c0>
 8006f10:	44a3      	add	fp, r4
    while (--i >= 0) {
 8006f12:	2d01      	cmp	r5, #1
 8006f14:	f53f ae22 	bmi.w	8006b5c <chprintf+0x1c>
      } while (++width != 0);
 8006f18:	464c      	mov	r4, r9
 8006f1a:	e7bf      	b.n	8006e9c <chprintf+0x35c>
      if (*s == '-' && filler == '0') {
 8006f1c:	9b00      	ldr	r3, [sp, #0]
 8006f1e:	2b30      	cmp	r3, #48	; 0x30
 8006f20:	d1ee      	bne.n	8006f00 <chprintf+0x3c0>
        streamPut(chp, (uint8_t)*s++);
 8006f22:	f108 0801 	add.w	r8, r8, #1
 8006f26:	6833      	ldr	r3, [r6, #0]
 8006f28:	68db      	ldr	r3, [r3, #12]
 8006f2a:	212d      	movs	r1, #45	; 0x2d
 8006f2c:	4630      	mov	r0, r6
 8006f2e:	4798      	blx	r3
        n++;
 8006f30:	f10b 0b01 	add.w	fp, fp, #1
        i--;
 8006f34:	3d01      	subs	r5, #1
 8006f36:	e7e3      	b.n	8006f00 <chprintf+0x3c0>
      for (p = s; *p && (--precision >= 0); p++)
 8006f38:	f898 3000 	ldrb.w	r3, [r8]
 8006f3c:	f647 79fe 	movw	r9, #32766	; 0x7ffe
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	f47f aefc 	bne.w	8006d3e <chprintf+0x1fe>
      if ((s = va_arg(ap, char *)) == 0)
 8006f46:	4692      	mov	sl, r2
 8006f48:	4640      	mov	r0, r8
      filler = ' ';
 8006f4a:	2320      	movs	r3, #32
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	e796      	b.n	8006e7e <chprintf+0x33e>
      if (precision == 0)
 8006f50:	f1b9 0f00 	cmp.w	r9, #0
 8006f54:	f43f aefe 	beq.w	8006d54 <chprintf+0x214>
        s = "(null)";
 8006f58:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8006f78 <chprintf+0x438>
 8006f5c:	e6e7      	b.n	8006d2e <chprintf+0x1ee>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 8006f5e:	4658      	mov	r0, fp
 8006f60:	b00e      	add	sp, #56	; 0x38
 8006f62:	ecbd 8b02 	vpop	{d8}
 8006f66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f6a:	b003      	add	sp, #12
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	0800d0dc 	.word	0x0800d0dc
 8006f74:	cccccccd 	.word	0xcccccccd
 8006f78:	0800b6b4 	.word	0x0800b6b4
 8006f7c:	00000000 	.word	0x00000000

08006f80 <_port_irq_epilogue>:
 8006f80:	2320      	movs	r3, #32
 8006f82:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8006f86:	4b12      	ldr	r3, [pc, #72]	; (8006fd0 <_port_irq_epilogue+0x50>)
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006f8e:	d103      	bne.n	8006f98 <_port_irq_epilogue+0x18>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8006f96:	4770      	bx	lr
{
#if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr) || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 8006f98:	eef1 3a10 	vmrs	r3, fpscr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8006f9c:	f3ef 8309 	mrs	r3, PSP
    ctxp->xpsr = (regarm_t)0x01000000;
 8006fa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006fa4:	f843 2c4c 	str.w	r2, [r3, #-76]
    ctxp->fpscr = (regarm_t)FPU->FPDSCR;
 8006fa8:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <_port_irq_epilogue+0x54>)
 8006faa:	68d2      	ldr	r2, [r2, #12]
 8006fac:	f843 2c08 	str.w	r2, [r3, #-8]
    ctxp--;
 8006fb0:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8006fb4:	f382 8809 	msr	PSP, r2
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8006fb8:	4a07      	ldr	r2, [pc, #28]	; (8006fd8 <_port_irq_epilogue+0x58>)
 8006fba:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 8006fbc:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 8006fbe:	6889      	ldr	r1, [r1, #8]
 8006fc0:	6892      	ldr	r2, [r2, #8]
 8006fc2:	4291      	cmp	r1, r2
      ctxp->pc = (regarm_t)_port_switch_from_isr;
 8006fc4:	bf8c      	ite	hi
 8006fc6:	4a05      	ldrhi	r2, [pc, #20]	; (8006fdc <_port_irq_epilogue+0x5c>)
      ctxp->pc = (regarm_t)_port_exit_from_isr;
 8006fc8:	4a05      	ldrls	r2, [pc, #20]	; (8006fe0 <_port_irq_epilogue+0x60>)
 8006fca:	f843 2c50 	str.w	r2, [r3, #-80]
 8006fce:	4770      	bx	lr
 8006fd0:	e000ed00 	.word	0xe000ed00
 8006fd4:	e000ef30 	.word	0xe000ef30
 8006fd8:	200015d8 	.word	0x200015d8
 8006fdc:	080002f5 	.word	0x080002f5
 8006fe0:	08000300 	.word	0x08000300
	...

08006ff0 <chSchRescheduleS>:
void chSchRescheduleS(void) {
 8006ff0:	b538      	push	{r3, r4, r5, lr}
  chDbgCheckClassS();
 8006ff2:	f7fe fef5 	bl	8005de0 <chDbgCheckClassS>
 *
 * @iclass
 */
static inline bool chSchIsRescRequiredI(void) {

  chDbgCheckClassI();
 8006ff6:	f7fe ff03 	bl	8005e00 <chDbgCheckClassI>

  return firstprio(&ch.rlist.queue) > currp->prio;
 8006ffa:	4a13      	ldr	r2, [pc, #76]	; (8007048 <chSchRescheduleS+0x58>)
 8006ffc:	6813      	ldr	r3, [r2, #0]
 8006ffe:	6990      	ldr	r0, [r2, #24]
  if (chSchIsRescRequiredI()) {
 8007000:	6899      	ldr	r1, [r3, #8]
 8007002:	6882      	ldr	r2, [r0, #8]
 8007004:	4291      	cmp	r1, r2
 8007006:	d800      	bhi.n	800700a <chSchRescheduleS+0x1a>
}
 8007008:	bd38      	pop	{r3, r4, r5, pc}
  tqp->next             = tp->queue.next;
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	4c0e      	ldr	r4, [pc, #56]	; (8007048 <chSchRescheduleS+0x58>)
 800700e:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8007010:	6054      	str	r4, [r2, #4]
 */
void chSchDoRescheduleAhead(void) {
  thread_t *otp = currp;

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 8007012:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2020 	strb.w	r2, [r3, #32]
  if (otp->prio == IDLEPRIO) {
    CH_CFG_IDLE_LEAVE_HOOK();
  }

  /* Placing in ready list ahead of peers.*/
  otp = chSchReadyAheadI(otp);
 800701a:	f7fe ff39 	bl	8005e90 <chSchReadyAheadI>
 800701e:	4605      	mov	r5, r0

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8007020:	4601      	mov	r1, r0
 8007022:	69a0      	ldr	r0, [r4, #24]
 8007024:	f7fe fe8c 	bl	8005d40 <_trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8007028:	f3ef 8309 	mrs	r3, PSP
 800702c:	3b64      	subs	r3, #100	; 0x64
 800702e:	69ea      	ldr	r2, [r5, #28]
 8007030:	429a      	cmp	r2, r3
 8007032:	d805      	bhi.n	8007040 <chSchRescheduleS+0x50>
 8007034:	4629      	mov	r1, r5
 8007036:	4b04      	ldr	r3, [pc, #16]	; (8007048 <chSchRescheduleS+0x58>)
 8007038:	6998      	ldr	r0, [r3, #24]
 800703a:	f7f9 f945 	bl	80002c8 <_port_switch>
 800703e:	e7e3      	b.n	8007008 <chSchRescheduleS+0x18>
 8007040:	4802      	ldr	r0, [pc, #8]	; (800704c <chSchRescheduleS+0x5c>)
 8007042:	f7fe fe9d 	bl	8005d80 <chSysHalt>
 8007046:	bf00      	nop
 8007048:	200015d8 	.word	0x200015d8
 800704c:	0800b684 	.word	0x0800b684

08007050 <chSchWakeupS>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 8007050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007052:	4604      	mov	r4, r0
 8007054:	460f      	mov	r7, r1
  thread_t *otp = currp;
 8007056:	4d19      	ldr	r5, [pc, #100]	; (80070bc <chSchWakeupS+0x6c>)
 8007058:	69ae      	ldr	r6, [r5, #24]
  chDbgCheckClassS();
 800705a:	f7fe fec1 	bl	8005de0 <chDbgCheckClassS>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800705e:	682b      	ldr	r3, [r5, #0]
 8007060:	42ab      	cmp	r3, r5
 8007062:	d003      	beq.n	800706c <chSchWakeupS+0x1c>
 8007064:	68b2      	ldr	r2, [r6, #8]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	429a      	cmp	r2, r3
 800706a:	d31c      	bcc.n	80070a6 <chSchWakeupS+0x56>
  ntp->u.rdymsg = msg;
 800706c:	6267      	str	r7, [r4, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 800706e:	68a2      	ldr	r2, [r4, #8]
 8007070:	68b3      	ldr	r3, [r6, #8]
 8007072:	429a      	cmp	r2, r3
 8007074:	d91a      	bls.n	80070ac <chSchWakeupS+0x5c>
    otp = chSchReadyI(otp);
 8007076:	4630      	mov	r0, r6
 8007078:	f7fe ff32 	bl	8005ee0 <chSchReadyI>
 800707c:	4605      	mov	r5, r0
    currp = ntp;
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <chSchWakeupS+0x6c>)
 8007080:	619c      	str	r4, [r3, #24]
    ntp->state = CH_STATE_CURRENT;
 8007082:	2301      	movs	r3, #1
 8007084:	f884 3020 	strb.w	r3, [r4, #32]
    chSysSwitch(ntp, otp);
 8007088:	4601      	mov	r1, r0
 800708a:	4620      	mov	r0, r4
 800708c:	f7fe fe58 	bl	8005d40 <_trace_switch>
 8007090:	f3ef 8309 	mrs	r3, PSP
 8007094:	3b64      	subs	r3, #100	; 0x64
 8007096:	69ea      	ldr	r2, [r5, #28]
 8007098:	429a      	cmp	r2, r3
 800709a:	d80b      	bhi.n	80070b4 <chSchWakeupS+0x64>
 800709c:	4629      	mov	r1, r5
 800709e:	4620      	mov	r0, r4
 80070a0:	f7f9 f912 	bl	80002c8 <_port_switch>
}
 80070a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80070a6:	4806      	ldr	r0, [pc, #24]	; (80070c0 <chSchWakeupS+0x70>)
 80070a8:	f7fe fe6a 	bl	8005d80 <chSysHalt>
    (void) chSchReadyI(ntp);
 80070ac:	4620      	mov	r0, r4
 80070ae:	f7fe ff17 	bl	8005ee0 <chSchReadyI>
 80070b2:	e7f7      	b.n	80070a4 <chSchWakeupS+0x54>
    chSysSwitch(ntp, otp);
 80070b4:	4803      	ldr	r0, [pc, #12]	; (80070c4 <chSchWakeupS+0x74>)
 80070b6:	f7fe fe63 	bl	8005d80 <chSysHalt>
 80070ba:	bf00      	nop
 80070bc:	200015d8 	.word	0x200015d8
 80070c0:	0800b238 	.word	0x0800b238
 80070c4:	0800b684 	.word	0x0800b684
	...

080070d0 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 80070d0:	b570      	push	{r4, r5, r6, lr}
 80070d2:	4606      	mov	r6, r0
  thread_t *otp = currp;
 80070d4:	4c0f      	ldr	r4, [pc, #60]	; (8007114 <chSchGoSleepS+0x44>)
 80070d6:	69a5      	ldr	r5, [r4, #24]
  chDbgCheckClassS();
 80070d8:	f7fe fe82 	bl	8005de0 <chDbgCheckClassS>
  otp->state = newstate;
 80070dc:	f885 6020 	strb.w	r6, [r5, #32]
  thread_t *tp = tqp->next;
 80070e0:	6820      	ldr	r0, [r4, #0]
  tqp->next             = tp->queue.next;
 80070e2:	6803      	ldr	r3, [r0, #0]
 80070e4:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80070e6:	605c      	str	r4, [r3, #4]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80070e8:	61a0      	str	r0, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f880 3020 	strb.w	r3, [r0, #32]
  chSysSwitch(currp, otp);
 80070f0:	4629      	mov	r1, r5
 80070f2:	f7fe fe25 	bl	8005d40 <_trace_switch>
 80070f6:	f3ef 8309 	mrs	r3, PSP
 80070fa:	3b64      	subs	r3, #100	; 0x64
 80070fc:	69ea      	ldr	r2, [r5, #28]
 80070fe:	429a      	cmp	r2, r3
 8007100:	d805      	bhi.n	800710e <chSchGoSleepS+0x3e>
 8007102:	4629      	mov	r1, r5
 8007104:	4b03      	ldr	r3, [pc, #12]	; (8007114 <chSchGoSleepS+0x44>)
 8007106:	6998      	ldr	r0, [r3, #24]
 8007108:	f7f9 f8de 	bl	80002c8 <_port_switch>
}
 800710c:	bd70      	pop	{r4, r5, r6, pc}
  chSysSwitch(currp, otp);
 800710e:	4802      	ldr	r0, [pc, #8]	; (8007118 <chSchGoSleepS+0x48>)
 8007110:	f7fe fe36 	bl	8005d80 <chSysHalt>
 8007114:	200015d8 	.word	0x200015d8
 8007118:	0800b684 	.word	0x0800b684
 800711c:	00000000 	.word	0x00000000

08007120 <chSchGoSleepTimeoutS>:
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	4605      	mov	r5, r0
 8007126:	460c      	mov	r4, r1
  chDbgCheckClassS();
 8007128:	f7fe fe5a 	bl	8005de0 <chDbgCheckClassS>
  if (TIME_INFINITE != timeout) {
 800712c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007130:	f000 80a1 	beq.w	8007276 <chSchGoSleepTimeoutS+0x156>
void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
                vtfunc_t vtfunc, void *par) {
  virtual_timer_t *p;
  sysinterval_t delta;

  chDbgCheckClassI();
 8007134:	f7fe fe64 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 8007138:	b914      	cbnz	r4, 8007140 <chSchGoSleepTimeoutS+0x20>
 800713a:	4853      	ldr	r0, [pc, #332]	; (8007288 <chSchGoSleepTimeoutS+0x168>)
 800713c:	f7fe fe20 	bl	8005d80 <chSysHalt>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8007140:	4b52      	ldr	r3, [pc, #328]	; (800728c <chSchGoSleepTimeoutS+0x16c>)

  vtp->par = par;
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	9205      	str	r2, [sp, #20]
  vtp->func = vtfunc;
 8007146:	4a52      	ldr	r2, [pc, #328]	; (8007290 <chSchGoSleepTimeoutS+0x170>)
 8007148:	9204      	str	r2, [sp, #16]
  return (systime_t)STM32_ST_TIM->CNT;
 800714a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800714e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007150:	2c02      	cmp	r4, #2
 8007152:	bf38      	it	cc
 8007154:	2402      	movcc	r4, #2
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8007156:	f853 6f1c 	ldr.w	r6, [r3, #28]!
 800715a:	429e      	cmp	r6, r3
 800715c:	d017      	beq.n	800718e <chSchGoSleepTimeoutS+0x6e>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 800715e:	4b4b      	ldr	r3, [pc, #300]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 8007160:	6a98      	ldr	r0, [r3, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 8007162:	1a13      	subs	r3, r2, r0

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 8007164:	191c      	adds	r4, r3, r4
 8007166:	d32d      	bcc.n	80071c4 <chSchGoSleepTimeoutS+0xa4>
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 8007168:	68b3      	ldr	r3, [r6, #8]
 800716a:	1ae4      	subs	r4, r4, r3
      p = p->next;
 800716c:	6836      	ldr	r6, [r6, #0]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 800716e:	68b3      	ldr	r3, [r6, #8]
 8007170:	429c      	cmp	r4, r3
 8007172:	d92e      	bls.n	80071d2 <chSchGoSleepTimeoutS+0xb2>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");
 8007174:	aa01      	add	r2, sp, #4
 8007176:	4296      	cmp	r6, r2
 8007178:	d006      	beq.n	8007188 <chSchGoSleepTimeoutS+0x68>

    delta -= p->delta;
 800717a:	1ae4      	subs	r4, r4, r3
    p = p->next;
 800717c:	6836      	ldr	r6, [r6, #0]
  while (p->delta < delta) {
 800717e:	68b3      	ldr	r3, [r6, #8]
 8007180:	429c      	cmp	r4, r3
 8007182:	d926      	bls.n	80071d2 <chSchGoSleepTimeoutS+0xb2>
    chDbgAssert(p != vtp, "timer already armed");
 8007184:	4296      	cmp	r6, r2
 8007186:	d1f8      	bne.n	800717a <chSchGoSleepTimeoutS+0x5a>
 8007188:	483f      	ldr	r0, [pc, #252]	; (8007288 <chSchGoSleepTimeoutS+0x168>)
 800718a:	f7fe fdf9 	bl	8005d80 <chSysHalt>
      ch.vtlist.lasttime = now;
 800718e:	4b3f      	ldr	r3, [pc, #252]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 8007190:	629a      	str	r2, [r3, #40]	; 0x28
      ch.vtlist.next = vtp;
 8007192:	a901      	add	r1, sp, #4
 8007194:	61d9      	str	r1, [r3, #28]
      ch.vtlist.prev = vtp;
 8007196:	6219      	str	r1, [r3, #32]
      vtp->next = (virtual_timer_t *)&ch.vtlist;
 8007198:	331c      	adds	r3, #28
 800719a:	9301      	str	r3, [sp, #4]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800719c:	9302      	str	r3, [sp, #8]
      vtp->delta = delay;
 800719e:	9403      	str	r4, [sp, #12]
  return (bool)((STM32_ST_TIM->DIER & STM32_TIM_DIER_CC1IE) != 0);
 80071a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071a4:	68db      	ldr	r3, [r3, #12]
  osalDbgAssert(stIsAlarmActive() == false, "already active");
 80071a6:	f013 0f02 	tst.w	r3, #2
 80071aa:	d108      	bne.n	80071be <chSchGoSleepTimeoutS+0x9e>
  return systime + (systime_t)interval;
 80071ac:	4414      	add	r4, r2
  STM32_ST_TIM->CCR[0] = (uint32_t)time;
 80071ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80071b2:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 80071b4:	2200      	movs	r2, #0
 80071b6:	611a      	str	r2, [r3, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 80071b8:	2202      	movs	r2, #2
 80071ba:	60da      	str	r2, [r3, #12]
 80071bc:	e017      	b.n	80071ee <chSchGoSleepTimeoutS+0xce>
 80071be:	4835      	ldr	r0, [pc, #212]	; (8007294 <chSchGoSleepTimeoutS+0x174>)
 80071c0:	f7fe fdde 	bl	8005d80 <chSysHalt>
    else if (delta < p->delta) {
 80071c4:	68b3      	ldr	r3, [r6, #8]
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d2d1      	bcs.n	800716e <chSchGoSleepTimeoutS+0x4e>
 *
 * @notapi
 */
static inline void port_timer_set_alarm(systime_t time) {

  stSetAlarm(time);
 80071ca:	4420      	add	r0, r4
 80071cc:	f7ff fc28 	bl	8006a20 <stSetAlarm>
 80071d0:	e7cd      	b.n	800716e <chSchGoSleepTimeoutS+0x4e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
 80071d2:	9601      	str	r6, [sp, #4]
  vtp->prev = vtp->next->prev;
 80071d4:	6872      	ldr	r2, [r6, #4]
 80071d6:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 80071d8:	ab01      	add	r3, sp, #4
 80071da:	6013      	str	r3, [r2, #0]
  p->prev = vtp;
 80071dc:	6073      	str	r3, [r6, #4]
  vtp->delta = delta;
 80071de:	9403      	str	r4, [sp, #12]

  /* Calculate new delta for the following entry.*/
  p->delta -= delta;
 80071e0:	68b3      	ldr	r3, [r6, #8]
 80071e2:	1b1c      	subs	r4, r3, r4
 80071e4:	60b4      	str	r4, [r6, #8]

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80071e6:	4b29      	ldr	r3, [pc, #164]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 80071e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071ec:	625a      	str	r2, [r3, #36]	; 0x24
    chSchGoSleepS(newstate);
 80071ee:	4628      	mov	r0, r5
 80071f0:	f7ff ff6e 	bl	80070d0 <chSchGoSleepS>
 *
 * @iclass
 */
static inline bool chVTIsArmedI(const virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80071f4:	f7fe fe04 	bl	8005e00 <chDbgCheckClassI>
    if (chVTIsArmedI(&vt)) {
 80071f8:	9b04      	ldr	r3, [sp, #16]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d03e      	beq.n	800727c <chSchGoSleepTimeoutS+0x15c>
 *
 * @iclass
 */
void chVTDoResetI(virtual_timer_t *vtp) {

  chDbgCheckClassI();
 80071fe:	f7fe fdff 	bl	8005e00 <chDbgCheckClassI>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 8007202:	4b22      	ldr	r3, [pc, #136]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	ab01      	add	r3, sp, #4
 8007208:	429a      	cmp	r2, r3
 800720a:	d00f      	beq.n	800722c <chSchGoSleepTimeoutS+0x10c>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 800720c:	9b02      	ldr	r3, [sp, #8]
 800720e:	9a01      	ldr	r2, [sp, #4]
 8007210:	601a      	str	r2, [r3, #0]
    vtp->next->prev = vtp->prev;
 8007212:	9b01      	ldr	r3, [sp, #4]
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	605a      	str	r2, [r3, #4]
    vtp->func = NULL;
 8007218:	2200      	movs	r2, #0
 800721a:	9204      	str	r2, [sp, #16]

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 800721c:	4a1e      	ldr	r2, [pc, #120]	; (8007298 <chSchGoSleepTimeoutS+0x178>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d02c      	beq.n	800727c <chSchGoSleepTimeoutS+0x15c>
      vtp->next->delta += vtp->delta;
 8007222:	689a      	ldr	r2, [r3, #8]
 8007224:	9903      	ldr	r1, [sp, #12]
 8007226:	440a      	add	r2, r1
 8007228:	609a      	str	r2, [r3, #8]
 800722a:	e027      	b.n	800727c <chSchGoSleepTimeoutS+0x15c>

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 800722c:	9901      	ldr	r1, [sp, #4]
 800722e:	4a17      	ldr	r2, [pc, #92]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 8007230:	4613      	mov	r3, r2
 8007232:	f843 1f1c 	str.w	r1, [r3, #28]!
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8007236:	604b      	str	r3, [r1, #4]
  vtp->func = NULL;
 8007238:	2100      	movs	r1, #0
 800723a:	9104      	str	r1, [sp, #16]

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800723c:	69d2      	ldr	r2, [r2, #28]
 800723e:	429a      	cmp	r2, r3
 8007240:	d015      	beq.n	800726e <chSchGoSleepTimeoutS+0x14e>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8007242:	6893      	ldr	r3, [r2, #8]
 8007244:	9903      	ldr	r1, [sp, #12]
 8007246:	440b      	add	r3, r1
 8007248:	6093      	str	r3, [r2, #8]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800724a:	4a10      	ldr	r2, [pc, #64]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 800724c:	6a90      	ldr	r0, [r2, #40]	; 0x28
  return (systime_t)STM32_ST_TIM->CNT;
 800724e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8007254:	1a1b      	subs	r3, r3, r0

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8007256:	69d2      	ldr	r2, [r2, #28]
 8007258:	6892      	ldr	r2, [r2, #8]
 800725a:	4293      	cmp	r3, r2
 800725c:	d20e      	bcs.n	800727c <chSchGoSleepTimeoutS+0x15c>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800725e:	1ad1      	subs	r1, r2, r3

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8007260:	2901      	cmp	r1, #1
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8007262:	bf98      	it	ls
 8007264:	1c9a      	addls	r2, r3, #2
 8007266:	4410      	add	r0, r2
 8007268:	f7ff fbda 	bl	8006a20 <stSetAlarm>
 800726c:	e006      	b.n	800727c <chSchGoSleepTimeoutS+0x15c>
  STM32_ST_TIM->DIER = 0;
 800726e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007272:	60d9      	str	r1, [r3, #12]
 8007274:	e002      	b.n	800727c <chSchGoSleepTimeoutS+0x15c>
    chSchGoSleepS(newstate);
 8007276:	4628      	mov	r0, r5
 8007278:	f7ff ff2a 	bl	80070d0 <chSchGoSleepS>
  return currp->u.rdymsg;
 800727c:	4b03      	ldr	r3, [pc, #12]	; (800728c <chSchGoSleepTimeoutS+0x16c>)
 800727e:	699b      	ldr	r3, [r3, #24]
}
 8007280:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8007282:	b006      	add	sp, #24
 8007284:	bd70      	pop	{r4, r5, r6, pc}
 8007286:	bf00      	nop
 8007288:	0800b17c 	.word	0x0800b17c
 800728c:	200015d8 	.word	0x200015d8
 8007290:	08006151 	.word	0x08006151
 8007294:	0800b2cc 	.word	0x0800b2cc
 8007298:	200015f4 	.word	0x200015f4
 800729c:	00000000 	.word	0x00000000

080072a0 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 80072a0:	b159      	cbz	r1, 80072ba <chThdEnqueueTimeoutS+0x1a>
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 80072a2:	b508      	push	{r3, lr}
  queue_insert(currp, tqp);
 80072a4:	4b06      	ldr	r3, [pc, #24]	; (80072c0 <chThdEnqueueTimeoutS+0x20>)
 80072a6:	699b      	ldr	r3, [r3, #24]
  tp->queue.next             = (thread_t *)tqp;
 80072a8:	6018      	str	r0, [r3, #0]
  tp->queue.prev             = tqp->prev;
 80072aa:	6842      	ldr	r2, [r0, #4]
 80072ac:	605a      	str	r2, [r3, #4]
  tp->queue.prev->queue.next = tp;
 80072ae:	6013      	str	r3, [r2, #0]
  tqp->prev                  = tp;
 80072b0:	6043      	str	r3, [r0, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80072b2:	2004      	movs	r0, #4
 80072b4:	f7ff ff34 	bl	8007120 <chSchGoSleepTimeoutS>
}
 80072b8:	bd08      	pop	{r3, pc}
    return MSG_TIMEOUT;
 80072ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80072be:	4770      	bx	lr
 80072c0:	200015d8 	.word	0x200015d8
	...

080072d0 <chThdSuspendTimeoutS>:
msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 80072d0:	b508      	push	{r3, lr}
  return ch.rlist.current;
 80072d2:	4b08      	ldr	r3, [pc, #32]	; (80072f4 <chThdSuspendTimeoutS+0x24>)
 80072d4:	699b      	ldr	r3, [r3, #24]
  chDbgAssert(*trp == NULL, "not NULL");
 80072d6:	6802      	ldr	r2, [r0, #0]
 80072d8:	b112      	cbz	r2, 80072e0 <chThdSuspendTimeoutS+0x10>
 80072da:	4807      	ldr	r0, [pc, #28]	; (80072f8 <chThdSuspendTimeoutS+0x28>)
 80072dc:	f7fe fd50 	bl	8005d80 <chSysHalt>
  if (TIME_IMMEDIATE == timeout) {
 80072e0:	b129      	cbz	r1, 80072ee <chThdSuspendTimeoutS+0x1e>
  *trp = tp;
 80072e2:	6003      	str	r3, [r0, #0]
  tp->u.wttrp = trp;
 80072e4:	6258      	str	r0, [r3, #36]	; 0x24
  return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 80072e6:	2003      	movs	r0, #3
 80072e8:	f7ff ff1a 	bl	8007120 <chSchGoSleepTimeoutS>
}
 80072ec:	bd08      	pop	{r3, pc}
    return MSG_TIMEOUT;
 80072ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072f2:	e7fb      	b.n	80072ec <chThdSuspendTimeoutS+0x1c>
 80072f4:	200015d8 	.word	0x200015d8
 80072f8:	0800b288 	.word	0x0800b288
 80072fc:	00000000 	.word	0x00000000

08007300 <SVC_Handler>:
  FPU->FPCCR &= ~FPU_FPCCR_LSPACT_Msk;
 8007300:	4a06      	ldr	r2, [pc, #24]	; (800731c <SVC_Handler+0x1c>)
 8007302:	6853      	ldr	r3, [r2, #4]
 8007304:	f023 0301 	bic.w	r3, r3, #1
 8007308:	6053      	str	r3, [r2, #4]
 800730a:	f3ef 8309 	mrs	r3, PSP
  ctxp++;
 800730e:	3368      	adds	r3, #104	; 0x68
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8007310:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8007314:	2300      	movs	r3, #0
 8007316:	f383 8811 	msr	BASEPRI, r3
}
 800731a:	4770      	bx	lr
 800731c:	e000ef30 	.word	0xe000ef30

08007320 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 8007320:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8007322:	4c10      	ldr	r4, [pc, #64]	; (8007364 <chSchDoReschedule+0x44>)
 8007324:	69a0      	ldr	r0, [r4, #24]
  thread_t *tp = tqp->next;
 8007326:	6823      	ldr	r3, [r4, #0]
  tqp->next             = tp->queue.next;
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	6022      	str	r2, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 800732c:	6054      	str	r4, [r2, #4]

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
 800732e:	61a3      	str	r3, [r4, #24]
  currp->state = CH_STATE_CURRENT;
 8007330:	2201      	movs	r2, #1
 8007332:	f883 2020 	strb.w	r2, [r3, #32]
    otp = chSchReadyAheadI(otp);
  }
#else /* !(CH_CFG_TIME_QUANTUM > 0) */
  /* If the round-robin mechanism is disabled then the thread goes always
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
 8007336:	f7fe fdab 	bl	8005e90 <chSchReadyAheadI>
 800733a:	4605      	mov	r5, r0
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 800733c:	4601      	mov	r1, r0
 800733e:	69a0      	ldr	r0, [r4, #24]
 8007340:	f7fe fcfe 	bl	8005d40 <_trace_switch>
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8007344:	f3ef 8309 	mrs	r3, PSP
 8007348:	3b64      	subs	r3, #100	; 0x64
 800734a:	69ea      	ldr	r2, [r5, #28]
 800734c:	429a      	cmp	r2, r3
 800734e:	d805      	bhi.n	800735c <chSchDoReschedule+0x3c>
 8007350:	4629      	mov	r1, r5
 8007352:	4b04      	ldr	r3, [pc, #16]	; (8007364 <chSchDoReschedule+0x44>)
 8007354:	6998      	ldr	r0, [r3, #24]
 8007356:	f7f8 ffb7 	bl	80002c8 <_port_switch>
}
 800735a:	bd38      	pop	{r3, r4, r5, pc}
  chSysSwitch(currp, otp);
 800735c:	4802      	ldr	r0, [pc, #8]	; (8007368 <chSchDoReschedule+0x48>)
 800735e:	f7fe fd0f 	bl	8005d80 <chSysHalt>
 8007362:	bf00      	nop
 8007364:	200015d8 	.word	0x200015d8
 8007368:	0800b684 	.word	0x0800b684
 800736c:	00000000 	.word	0x00000000

08007370 <_dbg_check_unlock>:
void _dbg_check_unlock(void) {
 8007370:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt <= (cnt_t)0)) {
 8007372:	4b07      	ldr	r3, [pc, #28]	; (8007390 <_dbg_check_unlock+0x20>)
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	b93b      	cbnz	r3, 8007388 <_dbg_check_unlock+0x18>
 8007378:	4b05      	ldr	r3, [pc, #20]	; (8007390 <_dbg_check_unlock+0x20>)
 800737a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800737c:	2b00      	cmp	r3, #0
 800737e:	dd03      	ble.n	8007388 <_dbg_check_unlock+0x18>
  _dbg_leave_lock();
 8007380:	4b03      	ldr	r3, [pc, #12]	; (8007390 <_dbg_check_unlock+0x20>)
 8007382:	2200      	movs	r2, #0
 8007384:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007386:	bd08      	pop	{r3, pc}
    chSysHalt("SV#5");
 8007388:	4802      	ldr	r0, [pc, #8]	; (8007394 <_dbg_check_unlock+0x24>)
 800738a:	f7fe fcf9 	bl	8005d80 <chSysHalt>
 800738e:	bf00      	nop
 8007390:	200015d8 	.word	0x200015d8
 8007394:	0800b51c 	.word	0x0800b51c
	...

080073a0 <chSysUnlock.lto_priv.7>:
static inline void chSysUnlock(void) {
 80073a0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 80073a2:	f7ff ffe5 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80073a6:	4b08      	ldr	r3, [pc, #32]	; (80073c8 <chSysUnlock.lto_priv.7+0x28>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d004      	beq.n	80073b8 <chSysUnlock.lto_priv.7+0x18>
 80073ae:	699b      	ldr	r3, [r3, #24]
 80073b0:	6899      	ldr	r1, [r3, #8]
 80073b2:	6893      	ldr	r3, [r2, #8]
 80073b4:	4299      	cmp	r1, r3
 80073b6:	d303      	bcc.n	80073c0 <chSysUnlock.lto_priv.7+0x20>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80073b8:	2300      	movs	r3, #0
 80073ba:	f383 8811 	msr	BASEPRI, r3
}
 80073be:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80073c0:	4802      	ldr	r0, [pc, #8]	; (80073cc <chSysUnlock.lto_priv.7+0x2c>)
 80073c2:	f7fe fcdd 	bl	8005d80 <chSysHalt>
 80073c6:	bf00      	nop
 80073c8:	200015d8 	.word	0x200015d8
 80073cc:	0800b0e0 	.word	0x0800b0e0

080073d0 <chSysUnlock.lto_priv.4>:
static inline void chSysUnlock(void) {
 80073d0:	b508      	push	{r3, lr}
  _dbg_check_unlock();
 80073d2:	f7ff ffcd 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80073d6:	4b08      	ldr	r3, [pc, #32]	; (80073f8 <chSysUnlock.lto_priv.4+0x28>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d004      	beq.n	80073e8 <chSysUnlock.lto_priv.4+0x18>
 80073de:	699b      	ldr	r3, [r3, #24]
 80073e0:	6899      	ldr	r1, [r3, #8]
 80073e2:	6893      	ldr	r3, [r2, #8]
 80073e4:	4299      	cmp	r1, r3
 80073e6:	d303      	bcc.n	80073f0 <chSysUnlock.lto_priv.4+0x20>
 80073e8:	2300      	movs	r3, #0
 80073ea:	f383 8811 	msr	BASEPRI, r3
}
 80073ee:	bd08      	pop	{r3, pc}
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80073f0:	4802      	ldr	r0, [pc, #8]	; (80073fc <chSysUnlock.lto_priv.4+0x2c>)
 80073f2:	f7fe fcc5 	bl	8005d80 <chSysHalt>
 80073f6:	bf00      	nop
 80073f8:	200015d8 	.word	0x200015d8
 80073fc:	0800b0bc 	.word	0x0800b0bc

08007400 <_dbg_check_lock>:
void _dbg_check_lock(void) {
 8007400:	b508      	push	{r3, lr}
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <_dbg_check_lock+0x1c>)
 8007404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007406:	b913      	cbnz	r3, 800740e <_dbg_check_lock+0xe>
 8007408:	4b04      	ldr	r3, [pc, #16]	; (800741c <_dbg_check_lock+0x1c>)
 800740a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800740c:	b113      	cbz	r3, 8007414 <_dbg_check_lock+0x14>
    chSysHalt("SV#4");
 800740e:	4804      	ldr	r0, [pc, #16]	; (8007420 <_dbg_check_lock+0x20>)
 8007410:	f7fe fcb6 	bl	8005d80 <chSysHalt>
  _dbg_enter_lock();
 8007414:	4b01      	ldr	r3, [pc, #4]	; (800741c <_dbg_check_lock+0x1c>)
 8007416:	2201      	movs	r2, #1
 8007418:	635a      	str	r2, [r3, #52]	; 0x34
}
 800741a:	bd08      	pop	{r3, pc}
 800741c:	200015d8 	.word	0x200015d8
 8007420:	0800b50c 	.word	0x0800b50c
	...

08007430 <chCoreAllocAlignedWithOffset>:
 *
 * @api
 */
void *chCoreAllocAlignedWithOffset(size_t size,
                                   unsigned align,
                                   size_t offset) {
 8007430:	b570      	push	{r4, r5, r6, lr}
 8007432:	4604      	mov	r4, r0
 8007434:	460d      	mov	r5, r1
 8007436:	4616      	mov	r6, r2
 8007438:	2320      	movs	r3, #32
 800743a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800743e:	f7ff ffdf 	bl	8007400 <_dbg_check_lock>
  void *p;

  chSysLock();
  p = chCoreAllocAlignedWithOffsetI(size, align, offset);
 8007442:	4632      	mov	r2, r6
 8007444:	4629      	mov	r1, r5
 8007446:	4620      	mov	r0, r4
 8007448:	f7fe fcf2 	bl	8005e30 <chCoreAllocAlignedWithOffsetI>
 800744c:	4604      	mov	r4, r0
  _dbg_check_unlock();
 800744e:	f7ff ff8f 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007452:	4b08      	ldr	r3, [pc, #32]	; (8007474 <chCoreAllocAlignedWithOffset+0x44>)
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d004      	beq.n	8007464 <chCoreAllocAlignedWithOffset+0x34>
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	6899      	ldr	r1, [r3, #8]
 800745e:	6893      	ldr	r3, [r2, #8]
 8007460:	4299      	cmp	r1, r3
 8007462:	d304      	bcc.n	800746e <chCoreAllocAlignedWithOffset+0x3e>
 8007464:	2300      	movs	r3, #0
 8007466:	f383 8811 	msr	BASEPRI, r3
  chSysUnlock();

  return p;
}
 800746a:	4620      	mov	r0, r4
 800746c:	bd70      	pop	{r4, r5, r6, pc}
 800746e:	4802      	ldr	r0, [pc, #8]	; (8007478 <chCoreAllocAlignedWithOffset+0x48>)
 8007470:	f7fe fc86 	bl	8005d80 <chSysHalt>
 8007474:	200015d8 	.word	0x200015d8
 8007478:	0800b104 	.word	0x0800b104
 800747c:	00000000 	.word	0x00000000

08007480 <_sbrk_r>:

/***************************************************************************/

__attribute__((used))
caddr_t _sbrk_r(struct _reent *r, int incr)
{
 8007480:	b510      	push	{r4, lr}
 8007482:	4604      	mov	r4, r0
#if CH_CFG_USE_MEMCORE
  void *p;

  chDbgCheck(incr >= 0);
 8007484:	1e08      	subs	r0, r1, #0
 8007486:	db07      	blt.n	8007498 <_sbrk_r+0x18>
 *
 * @api
 */
static inline void *chCoreAlloc(size_t size) {

  return chCoreAllocAlignedWithOffset(size, PORT_NATURAL_ALIGN, 0U);
 8007488:	2200      	movs	r2, #0
 800748a:	2104      	movs	r1, #4
 800748c:	f7ff ffd0 	bl	8007430 <chCoreAllocAlignedWithOffset>

  p = chCoreAlloc((size_t)incr);
  if (p == NULL) {
 8007490:	4603      	mov	r3, r0
 8007492:	b120      	cbz	r0, 800749e <_sbrk_r+0x1e>
#else
  (void)incr;
  __errno_r(r) = ENOMEM;
  return (caddr_t)-1;
#endif
}
 8007494:	4618      	mov	r0, r3
 8007496:	bd10      	pop	{r4, pc}
  chDbgCheck(incr >= 0);
 8007498:	4803      	ldr	r0, [pc, #12]	; (80074a8 <_sbrk_r+0x28>)
 800749a:	f7fe fc71 	bl	8005d80 <chSysHalt>
    __errno_r(r) = ENOMEM;
 800749e:	230c      	movs	r3, #12
 80074a0:	6023      	str	r3, [r4, #0]
    return (caddr_t)-1;
 80074a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074a6:	e7f5      	b.n	8007494 <_sbrk_r+0x14>
 80074a8:	0800b4d4 	.word	0x0800b4d4
 80074ac:	00000000 	.word	0x00000000

080074b0 <chMBFetchTimeout>:
 * @retval MSG_RESET    if the mailbox has been reset.
 * @retval MSG_TIMEOUT  if the operation has timed out.
 *
 * @api
 */
msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 80074b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074b4:	4604      	mov	r4, r0
 80074b6:	4688      	mov	r8, r1
 80074b8:	4615      	mov	r5, r2
 80074ba:	2320      	movs	r3, #32
 80074bc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80074c0:	f7ff ff9e 	bl	8007400 <_dbg_check_lock>
 * @sclass
 */
msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
  msg_t rdymsg;

  chDbgCheckClassS();
 80074c4:	f7fe fc8c 	bl	8005de0 <chDbgCheckClassS>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 80074c8:	b194      	cbz	r4, 80074f0 <chMBFetchTimeout+0x40>
 80074ca:	f1b8 0f00 	cmp.w	r8, #0
 80074ce:	d00f      	beq.n	80074f0 <chMBFetchTimeout+0x40>

      return MSG_OK;
    }

    /* No message in the queue, waiting for a message to become available.*/
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 80074d0:	f104 0720 	add.w	r7, r4, #32
    if (mbp->reset) {
 80074d4:	7d23      	ldrb	r3, [r4, #20]
 80074d6:	bb33      	cbnz	r3, 8007526 <chMBFetchTimeout+0x76>
 *
 * @iclass
 */
static inline size_t chMBGetUsedCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 80074d8:	f7fe fc92 	bl	8005e00 <chDbgCheckClassI>
    if (chMBGetUsedCountI(mbp) > (size_t)0) {
 80074dc:	6923      	ldr	r3, [r4, #16]
 80074de:	b953      	cbnz	r3, 80074f6 <chMBFetchTimeout+0x46>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 80074e0:	4629      	mov	r1, r5
 80074e2:	4638      	mov	r0, r7
 80074e4:	f7ff fedc 	bl	80072a0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 80074e8:	4606      	mov	r6, r0
 80074ea:	2800      	cmp	r0, #0
 80074ec:	d0f2      	beq.n	80074d4 <chMBFetchTimeout+0x24>
 80074ee:	e01c      	b.n	800752a <chMBFetchTimeout+0x7a>
  chDbgCheck((mbp != NULL) && (msgp != NULL));
 80074f0:	4818      	ldr	r0, [pc, #96]	; (8007554 <chMBFetchTimeout+0xa4>)
 80074f2:	f7fe fc45 	bl	8005d80 <chSysHalt>
      *msgp = *mbp->rdptr++;
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	1d1a      	adds	r2, r3, #4
 80074fa:	60e2      	str	r2, [r4, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f8c8 3000 	str.w	r3, [r8]
      if (mbp->rdptr >= mbp->top) {
 8007502:	68e2      	ldr	r2, [r4, #12]
 8007504:	6863      	ldr	r3, [r4, #4]
 8007506:	429a      	cmp	r2, r3
        mbp->rdptr = mbp->buffer;
 8007508:	bf24      	itt	cs
 800750a:	6823      	ldrcs	r3, [r4, #0]
 800750c:	60e3      	strcs	r3, [r4, #12]
      mbp->cnt--;
 800750e:	6923      	ldr	r3, [r4, #16]
 8007510:	3b01      	subs	r3, #1
 8007512:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qw, MSG_OK);
 8007514:	2100      	movs	r1, #0
 8007516:	f104 0018 	add.w	r0, r4, #24
 800751a:	f7fe fd51 	bl	8005fc0 <chThdDequeueNextI>
      chSchRescheduleS();
 800751e:	f7ff fd67 	bl	8006ff0 <chSchRescheduleS>
      return MSG_OK;
 8007522:	2600      	movs	r6, #0
 8007524:	e001      	b.n	800752a <chMBFetchTimeout+0x7a>
      return MSG_RESET;
 8007526:	f06f 0601 	mvn.w	r6, #1
  _dbg_check_unlock();
 800752a:	f7ff ff21 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800752e:	4b0a      	ldr	r3, [pc, #40]	; (8007558 <chMBFetchTimeout+0xa8>)
 8007530:	681a      	ldr	r2, [r3, #0]
 8007532:	429a      	cmp	r2, r3
 8007534:	d004      	beq.n	8007540 <chMBFetchTimeout+0x90>
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	6899      	ldr	r1, [r3, #8]
 800753a:	6893      	ldr	r3, [r2, #8]
 800753c:	4299      	cmp	r1, r3
 800753e:	d305      	bcc.n	800754c <chMBFetchTimeout+0x9c>
 8007540:	2300      	movs	r3, #0
 8007542:	f383 8811 	msr	BASEPRI, r3
}
 8007546:	4630      	mov	r0, r6
 8007548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800754c:	4803      	ldr	r0, [pc, #12]	; (800755c <chMBFetchTimeout+0xac>)
 800754e:	f7fe fc17 	bl	8005d80 <chSysHalt>
 8007552:	bf00      	nop
 8007554:	0800b268 	.word	0x0800b268
 8007558:	200015d8 	.word	0x200015d8
 800755c:	0800b0f8 	.word	0x0800b0f8

08007560 <chMBPostTimeout>:
msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 8007560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007564:	4604      	mov	r4, r0
 8007566:	460f      	mov	r7, r1
 8007568:	4615      	mov	r5, r2
 800756a:	2320      	movs	r3, #32
 800756c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007570:	f7ff ff46 	bl	8007400 <_dbg_check_lock>
  chDbgCheckClassS();
 8007574:	f7fe fc34 	bl	8005de0 <chDbgCheckClassS>
  chDbgCheck(mbp != NULL);
 8007578:	b1b4      	cbz	r4, 80075a8 <chMBPostTimeout+0x48>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 800757a:	f104 0618 	add.w	r6, r4, #24
    if (mbp->reset) {
 800757e:	7d23      	ldrb	r3, [r4, #20]
 8007580:	bb63      	cbnz	r3, 80075dc <chMBPostTimeout+0x7c>
 *
 * @iclass
 */
static inline size_t chMBGetFreeCountI(const mailbox_t *mbp) {

  chDbgCheckClassI();
 8007582:	f7fe fc3d 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheckClassI();
 8007586:	f7fe fc3b 	bl	8005e00 <chDbgCheckClassI>
  return (size_t)(mbp->top - mbp->buffer);
 800758a:	6863      	ldr	r3, [r4, #4]
 800758c:	6822      	ldr	r2, [r4, #0]
 800758e:	1a9b      	subs	r3, r3, r2
    if (chMBGetFreeCountI(mbp) > (size_t)0) {
 8007590:	6922      	ldr	r2, [r4, #16]
 8007592:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8007596:	d10a      	bne.n	80075ae <chMBPostTimeout+0x4e>
    rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 8007598:	4629      	mov	r1, r5
 800759a:	4630      	mov	r0, r6
 800759c:	f7ff fe80 	bl	80072a0 <chThdEnqueueTimeoutS>
  } while (rdymsg == MSG_OK);
 80075a0:	4680      	mov	r8, r0
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d0eb      	beq.n	800757e <chMBPostTimeout+0x1e>
 80075a6:	e01b      	b.n	80075e0 <chMBPostTimeout+0x80>
  chDbgCheck(mbp != NULL);
 80075a8:	4817      	ldr	r0, [pc, #92]	; (8007608 <chMBPostTimeout+0xa8>)
 80075aa:	f7fe fbe9 	bl	8005d80 <chSysHalt>
      *mbp->wrptr++ = msg;
 80075ae:	68a3      	ldr	r3, [r4, #8]
 80075b0:	1d1a      	adds	r2, r3, #4
 80075b2:	60a2      	str	r2, [r4, #8]
 80075b4:	601f      	str	r7, [r3, #0]
      if (mbp->wrptr >= mbp->top) {
 80075b6:	68a2      	ldr	r2, [r4, #8]
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	429a      	cmp	r2, r3
        mbp->wrptr = mbp->buffer;
 80075bc:	bf24      	itt	cs
 80075be:	6823      	ldrcs	r3, [r4, #0]
 80075c0:	60a3      	strcs	r3, [r4, #8]
      mbp->cnt++;
 80075c2:	6923      	ldr	r3, [r4, #16]
 80075c4:	3301      	adds	r3, #1
 80075c6:	6123      	str	r3, [r4, #16]
      chThdDequeueNextI(&mbp->qr, MSG_OK);
 80075c8:	2100      	movs	r1, #0
 80075ca:	f104 0020 	add.w	r0, r4, #32
 80075ce:	f7fe fcf7 	bl	8005fc0 <chThdDequeueNextI>
      chSchRescheduleS();
 80075d2:	f7ff fd0d 	bl	8006ff0 <chSchRescheduleS>
      return MSG_OK;
 80075d6:	f04f 0800 	mov.w	r8, #0
 80075da:	e001      	b.n	80075e0 <chMBPostTimeout+0x80>
      return MSG_RESET;
 80075dc:	f06f 0801 	mvn.w	r8, #1
  _dbg_check_unlock();
 80075e0:	f7ff fec6 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80075e4:	4b09      	ldr	r3, [pc, #36]	; (800760c <chMBPostTimeout+0xac>)
 80075e6:	681a      	ldr	r2, [r3, #0]
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d004      	beq.n	80075f6 <chMBPostTimeout+0x96>
 80075ec:	699b      	ldr	r3, [r3, #24]
 80075ee:	6899      	ldr	r1, [r3, #8]
 80075f0:	6893      	ldr	r3, [r2, #8]
 80075f2:	4299      	cmp	r1, r3
 80075f4:	d305      	bcc.n	8007602 <chMBPostTimeout+0xa2>
 80075f6:	2300      	movs	r3, #0
 80075f8:	f383 8811 	msr	BASEPRI, r3
}
 80075fc:	4640      	mov	r0, r8
 80075fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007602:	4803      	ldr	r0, [pc, #12]	; (8007610 <chMBPostTimeout+0xb0>)
 8007604:	f7fe fbbc 	bl	8005d80 <chSysHalt>
 8007608:	0800b1c8 	.word	0x0800b1c8
 800760c:	200015d8 	.word	0x200015d8
 8007610:	0800b0f8 	.word	0x0800b0f8
	...

08007620 <chRegFindThreadByWorkingArea>:
 * @return              A pointer to the found thread.
 * @retval NULL         if a matching thread has not been found.
 *
 * @api
 */
thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa) {
 8007620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007624:	b083      	sub	sp, #12
 8007626:	4607      	mov	r7, r0
 8007628:	2320      	movs	r3, #32
 800762a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800762e:	f7ff fee7 	bl	8007400 <_dbg_check_lock>
  tp = ch.rlist.newer;
 8007632:	4cbb      	ldr	r4, [pc, #748]	; (8007920 <chRegFindThreadByWorkingArea+0x300>)
 8007634:	f8d4 9010 	ldr.w	r9, [r4, #16]
  tp->refs++;
 8007638:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 800763c:	3301      	adds	r3, #1
 800763e:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
  _dbg_check_unlock();
 8007642:	f7ff fe95 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007646:	6823      	ldr	r3, [r4, #0]
 8007648:	42a3      	cmp	r3, r4
 800764a:	d004      	beq.n	8007656 <chRegFindThreadByWorkingArea+0x36>
 800764c:	69a2      	ldr	r2, [r4, #24]
 800764e:	6892      	ldr	r2, [r2, #8]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	429a      	cmp	r2, r3
 8007654:	d348      	bcc.n	80076e8 <chRegFindThreadByWorkingArea+0xc8>
 8007656:	2300      	movs	r3, #0
 8007658:	f383 8811 	msr	BASEPRI, r3
 800765c:	2620      	movs	r6, #32
  if (ntp == (thread_t *)&ch.rlist) {
 800765e:	4cb0      	ldr	r4, [pc, #704]	; (8007920 <chRegFindThreadByWorkingArea+0x300>)
    ntp = NULL;
 8007660:	4698      	mov	r8, r3
  thread_t *ctp;

  /* Scanning registry.*/
  ctp = chRegFirstThread();
  do {
    if (chThdGetWorkingAreaX(ctp) == wa) {
 8007662:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007666:	42bb      	cmp	r3, r7
 8007668:	d03a      	beq.n	80076e0 <chRegFindThreadByWorkingArea+0xc0>
 800766a:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 800766e:	f7ff fec7 	bl	8007400 <_dbg_check_lock>
  ntp = tp->newer;
 8007672:	f8d9 5010 	ldr.w	r5, [r9, #16]
  if (ntp == (thread_t *)&ch.rlist) {
 8007676:	42a5      	cmp	r5, r4
 8007678:	d03c      	beq.n	80076f4 <chRegFindThreadByWorkingArea+0xd4>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 800767a:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 800767e:	2bff      	cmp	r3, #255	; 0xff
 8007680:	d035      	beq.n	80076ee <chRegFindThreadByWorkingArea+0xce>
    ntp->refs++;
 8007682:	3301      	adds	r3, #1
 8007684:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
  _dbg_check_unlock();
 8007688:	f7ff fe72 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	42a3      	cmp	r3, r4
 8007690:	d004      	beq.n	800769c <chRegFindThreadByWorkingArea+0x7c>
 8007692:	69a2      	ldr	r2, [r4, #24]
 8007694:	6892      	ldr	r2, [r2, #8]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	429a      	cmp	r2, r3
 800769a:	d32d      	bcc.n	80076f8 <chRegFindThreadByWorkingArea+0xd8>
 800769c:	f388 8811 	msr	BASEPRI, r8
 80076a0:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 80076a4:	f7ff feac 	bl	8007400 <_dbg_check_lock>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80076a8:	f899 3022 	ldrb.w	r3, [r9, #34]	; 0x22
 80076ac:	b33b      	cbz	r3, 80076fe <chRegFindThreadByWorkingArea+0xde>
  tp->refs--;
 80076ae:	3b01      	subs	r3, #1
 80076b0:	f889 3022 	strb.w	r3, [r9, #34]	; 0x22
  if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 80076b4:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80076b8:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80076bc:	2b0f      	cmp	r3, #15
 80076be:	d021      	beq.n	8007704 <chRegFindThreadByWorkingArea+0xe4>
  _dbg_check_unlock();
 80076c0:	f7ff fe56 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	42a3      	cmp	r3, r4
 80076c8:	d005      	beq.n	80076d6 <chRegFindThreadByWorkingArea+0xb6>
 80076ca:	69a2      	ldr	r2, [r4, #24]
 80076cc:	6892      	ldr	r2, [r2, #8]
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	f0c0 81d3 	bcc.w	8007a7c <chRegFindThreadByWorkingArea+0x45c>
 80076d6:	f388 8811 	msr	BASEPRI, r8
      return ctp;
    }
    ctp = chRegNextThread(ctp);
 80076da:	46a9      	mov	r9, r5
  } while (ctp != NULL);
 80076dc:	2d00      	cmp	r5, #0
 80076de:	d1c0      	bne.n	8007662 <chRegFindThreadByWorkingArea+0x42>

  return NULL;
}
 80076e0:	4648      	mov	r0, r9
 80076e2:	b003      	add	sp, #12
 80076e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076e8:	488e      	ldr	r0, [pc, #568]	; (8007924 <chRegFindThreadByWorkingArea+0x304>)
 80076ea:	f7fe fb49 	bl	8005d80 <chSysHalt>
    chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 80076ee:	488e      	ldr	r0, [pc, #568]	; (8007928 <chRegFindThreadByWorkingArea+0x308>)
 80076f0:	f7fe fb46 	bl	8005d80 <chSysHalt>
    ntp = NULL;
 80076f4:	4645      	mov	r5, r8
 80076f6:	e7c7      	b.n	8007688 <chRegFindThreadByWorkingArea+0x68>
 80076f8:	488a      	ldr	r0, [pc, #552]	; (8007924 <chRegFindThreadByWorkingArea+0x304>)
 80076fa:	f7fe fb41 	bl	8005d80 <chSysHalt>
  chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 80076fe:	488b      	ldr	r0, [pc, #556]	; (800792c <chRegFindThreadByWorkingArea+0x30c>)
 8007700:	f7fe fb3e 	bl	8005d80 <chSysHalt>
    REG_REMOVE(tp);
 8007704:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007708:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800770c:	611a      	str	r2, [r3, #16]
 800770e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007712:	f8d9 2014 	ldr.w	r2, [r9, #20]
 8007716:	615a      	str	r2, [r3, #20]
  _dbg_check_unlock();
 8007718:	f7ff fe2a 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800771c:	6823      	ldr	r3, [r4, #0]
 800771e:	42a3      	cmp	r3, r4
 8007720:	d004      	beq.n	800772c <chRegFindThreadByWorkingArea+0x10c>
 8007722:	69a2      	ldr	r2, [r4, #24]
 8007724:	6892      	ldr	r2, [r2, #8]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	429a      	cmp	r2, r3
 800772a:	d336      	bcc.n	800779a <chRegFindThreadByWorkingArea+0x17a>
 800772c:	f388 8811 	msr	BASEPRI, r8
    switch (tp->flags & CH_FLAG_MODE_MASK) {
 8007730:	f899 3021 	ldrb.w	r3, [r9, #33]	; 0x21
 8007734:	f003 0303 	and.w	r3, r3, #3
 8007738:	2b01      	cmp	r3, #1
 800773a:	d031      	beq.n	80077a0 <chRegFindThreadByWorkingArea+0x180>
 800773c:	2b02      	cmp	r3, #2
 800773e:	d1cc      	bne.n	80076da <chRegFindThreadByWorkingArea+0xba>
      chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 8007740:	f8d9 a040 	ldr.w	sl, [r9, #64]	; 0x40
  return tp->wabase;
 8007744:	f8d9 901c 	ldr.w	r9, [r9, #28]
 8007748:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 800774c:	f7ff fe58 	bl	8007400 <_dbg_check_lock>
 * @iclass
 */
void chPoolFreeI(memory_pool_t *mp, void *objp) {
  struct pool_header *php = objp;

  chDbgCheckClassI();
 8007750:	f7fe fb56 	bl	8005e00 <chDbgCheckClassI>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8007754:	f1ba 0f00 	cmp.w	sl, #0
 8007758:	f000 8187 	beq.w	8007a6a <chRegFindThreadByWorkingArea+0x44a>
 800775c:	f1b9 0f00 	cmp.w	r9, #0
 8007760:	f000 8183 	beq.w	8007a6a <chRegFindThreadByWorkingArea+0x44a>

  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8007764:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007768:	3b01      	subs	r3, #1
 800776a:	ea19 0f03 	tst.w	r9, r3
 800776e:	f040 817f 	bne.w	8007a70 <chRegFindThreadByWorkingArea+0x450>
              "unaligned object");

  php->next = mp->next;
 8007772:	f8da 3000 	ldr.w	r3, [sl]
 8007776:	f8c9 3000 	str.w	r3, [r9]
  mp->next = php;
 800777a:	f8ca 9000 	str.w	r9, [sl]
  _dbg_check_unlock();
 800777e:	f7ff fdf7 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	42a3      	cmp	r3, r4
 8007786:	d005      	beq.n	8007794 <chRegFindThreadByWorkingArea+0x174>
 8007788:	69a2      	ldr	r2, [r4, #24]
 800778a:	6892      	ldr	r2, [r2, #8]
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	429a      	cmp	r2, r3
 8007790:	f0c0 8171 	bcc.w	8007a76 <chRegFindThreadByWorkingArea+0x456>
 8007794:	f388 8811 	msr	BASEPRI, r8
 8007798:	e79f      	b.n	80076da <chRegFindThreadByWorkingArea+0xba>
 800779a:	4865      	ldr	r0, [pc, #404]	; (8007930 <chRegFindThreadByWorkingArea+0x310>)
 800779c:	f7fe faf0 	bl	8005d80 <chSysHalt>
 80077a0:	f8d9 901c 	ldr.w	r9, [r9, #28]
 */
void chHeapFree(void *p) {
  heap_header_t *qp, *hp;
  memory_heap_t *heapp;

  chDbgCheck((p != NULL) && MEM_IS_ALIGNED(p, CH_HEAP_ALIGNMENT));
 80077a4:	f1b9 0f00 	cmp.w	r9, #0
 80077a8:	d002      	beq.n	80077b0 <chRegFindThreadByWorkingArea+0x190>
 80077aa:	f019 0f07 	tst.w	r9, #7
 80077ae:	d002      	beq.n	80077b6 <chRegFindThreadByWorkingArea+0x196>
 80077b0:	4860      	ldr	r0, [pc, #384]	; (8007934 <chRegFindThreadByWorkingArea+0x314>)
 80077b2:	f7fe fae5 	bl	8005d80 <chSysHalt>

  /*lint -save -e9087 [11.3] Safe cast.*/
  hp = (heap_header_t *)p - 1U;
  /*lint -restore*/
  heapp = H_HEAP(hp);
 80077b6:	f859 2c08 	ldr.w	r2, [r9, #-8]
 80077ba:	9200      	str	r2, [sp, #0]
  qp = &heapp->header;

  /* Size is converted in number of elementary allocation units.*/
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80077bc:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80077c0:	3307      	adds	r3, #7
                               CH_HEAP_ALIGNMENT) / CH_HEAP_ALIGNMENT;
 80077c2:	08db      	lsrs	r3, r3, #3
  H_PAGES(hp) = MEM_ALIGN_NEXT(H_SIZE(hp),
 80077c4:	f849 3c04 	str.w	r3, [r9, #-4]

  /* Taking heap mutex/semaphore.*/
  H_LOCK(heapp);
 80077c8:	f102 0b0c 	add.w	fp, r2, #12
 80077cc:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 80077d0:	f7ff fe16 	bl	8007400 <_dbg_check_lock>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @sclass
 */
void chMtxLockS(mutex_t *mp) {
  thread_t *ctp = currp;
 80077d4:	f8d4 a018 	ldr.w	sl, [r4, #24]

  chDbgCheckClassS();
 80077d8:	f7fe fb02 	bl	8005de0 <chDbgCheckClassS>
  chDbgCheck(mp != NULL);
 80077dc:	f1bb 0f00 	cmp.w	fp, #0
 80077e0:	d01b      	beq.n	800781a <chRegFindThreadByWorkingArea+0x1fa>

  /* Is the mutex already locked? */
  if (mp->owner != NULL) {
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	6958      	ldr	r0, [r3, #20]
 80077e6:	2800      	cmp	r0, #0
 80077e8:	d079      	beq.n	80078de <chRegFindThreadByWorkingArea+0x2be>
         priority of the running thread requesting the mutex.*/
      thread_t *tp = mp->owner;

      /* Does the running thread have higher priority than the mutex
         owning thread? */
      while (tp->prio < ctp->prio) {
 80077ea:	f8da 3008 	ldr.w	r3, [sl, #8]
 80077ee:	6882      	ldr	r2, [r0, #8]
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d908      	bls.n	8007806 <chRegFindThreadByWorkingArea+0x1e6>
        /* Make priority of thread tp match the running thread's priority.*/
        tp->prio = ctp->prio;
 80077f4:	6083      	str	r3, [r0, #8]

        /* The following states need priority queues reordering.*/
        switch (tp->state) {
 80077f6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80077fa:	2b06      	cmp	r3, #6
 80077fc:	d010      	beq.n	8007820 <chRegFindThreadByWorkingArea+0x200>
 80077fe:	2b07      	cmp	r3, #7
 8007800:	d02a      	beq.n	8007858 <chRegFindThreadByWorkingArea+0x238>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d042      	beq.n	800788c <chRegFindThreadByWorkingArea+0x26c>
  thread_t *cp = (thread_t *)tqp;
 8007806:	465b      	mov	r3, fp
    cp = cp->queue.next;
 8007808:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800780a:	459b      	cmp	fp, r3
 800780c:	d04a      	beq.n	80078a4 <chRegFindThreadByWorkingArea+0x284>
 800780e:	6899      	ldr	r1, [r3, #8]
 8007810:	f8da 2008 	ldr.w	r2, [sl, #8]
 8007814:	4291      	cmp	r1, r2
 8007816:	d2f7      	bcs.n	8007808 <chRegFindThreadByWorkingArea+0x1e8>
 8007818:	e045      	b.n	80078a6 <chRegFindThreadByWorkingArea+0x286>
  chDbgCheck(mp != NULL);
 800781a:	4847      	ldr	r0, [pc, #284]	; (8007938 <chRegFindThreadByWorkingArea+0x318>)
 800781c:	f7fe fab0 	bl	8005d80 <chSysHalt>
  tp->queue.prev->queue.next = tp->queue.next;
 8007820:	6843      	ldr	r3, [r0, #4]
 8007822:	6802      	ldr	r2, [r0, #0]
 8007824:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8007826:	6803      	ldr	r3, [r0, #0]
 8007828:	6842      	ldr	r2, [r0, #4]
 800782a:	605a      	str	r2, [r3, #4]
        case CH_STATE_WTMTX:
          /* Re-enqueues the mutex owner with its new priority.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 800782c:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8007830:	4663      	mov	r3, ip
    cp = cp->queue.next;
 8007832:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 8007834:	459c      	cmp	ip, r3
 8007836:	d004      	beq.n	8007842 <chRegFindThreadByWorkingArea+0x222>
 8007838:	689a      	ldr	r2, [r3, #8]
 800783a:	6881      	ldr	r1, [r0, #8]
 800783c:	428a      	cmp	r2, r1
 800783e:	d2f8      	bcs.n	8007832 <chRegFindThreadByWorkingArea+0x212>
    cp = cp->queue.next;
 8007840:	469c      	mov	ip, r3
  tp->queue.next             = cp;
 8007842:	f8c0 c000 	str.w	ip, [r0]
  tp->queue.prev             = cp->queue.prev;
 8007846:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800784a:	6043      	str	r3, [r0, #4]
  tp->queue.prev->queue.next = tp;
 800784c:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 800784e:	f8cc 0004 	str.w	r0, [ip, #4]
          tp = tp->u.wtmtxp->owner;
 8007852:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007854:	6898      	ldr	r0, [r3, #8]
 8007856:	e7c8      	b.n	80077ea <chRegFindThreadByWorkingArea+0x1ca>
  tp->queue.prev->queue.next = tp->queue.next;
 8007858:	6843      	ldr	r3, [r0, #4]
 800785a:	6802      	ldr	r2, [r0, #0]
 800785c:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 800785e:	6803      	ldr	r3, [r0, #0]
 8007860:	6842      	ldr	r2, [r0, #4]
 8007862:	605a      	str	r2, [r3, #4]
#endif
#if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
        case CH_STATE_SNDMSGQ:
#endif
          /* Re-enqueues tp with its new priority on the queue.*/
          queue_prio_insert(queue_dequeue(tp), &tp->u.wtmtxp->queue);
 8007864:	f8d0 c024 	ldr.w	ip, [r0, #36]	; 0x24
  thread_t *cp = (thread_t *)tqp;
 8007868:	4663      	mov	r3, ip
    cp = cp->queue.next;
 800786a:	681b      	ldr	r3, [r3, #0]
  } while ((cp != (thread_t *)tqp) && (cp->prio >= tp->prio));
 800786c:	459c      	cmp	ip, r3
 800786e:	d004      	beq.n	800787a <chRegFindThreadByWorkingArea+0x25a>
 8007870:	689a      	ldr	r2, [r3, #8]
 8007872:	6881      	ldr	r1, [r0, #8]
 8007874:	428a      	cmp	r2, r1
 8007876:	d2f8      	bcs.n	800786a <chRegFindThreadByWorkingArea+0x24a>
    cp = cp->queue.next;
 8007878:	469c      	mov	ip, r3
  tp->queue.next             = cp;
 800787a:	f8c0 c000 	str.w	ip, [r0]
  tp->queue.prev             = cp->queue.prev;
 800787e:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8007882:	6043      	str	r3, [r0, #4]
  tp->queue.prev->queue.next = tp;
 8007884:	6018      	str	r0, [r3, #0]
  cp->queue.prev             = tp;
 8007886:	f8cc 0004 	str.w	r0, [ip, #4]
 800788a:	e7bc      	b.n	8007806 <chRegFindThreadByWorkingArea+0x1e6>
          break;
#endif
        case CH_STATE_READY:
#if CH_DBG_ENABLE_ASSERTS == TRUE
          /* Prevents an assertion in chSchReadyI().*/
          tp->state = CH_STATE_CURRENT;
 800788c:	2301      	movs	r3, #1
 800788e:	f880 3020 	strb.w	r3, [r0, #32]
  tp->queue.prev->queue.next = tp->queue.next;
 8007892:	6843      	ldr	r3, [r0, #4]
 8007894:	6802      	ldr	r2, [r0, #0]
 8007896:	601a      	str	r2, [r3, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8007898:	6803      	ldr	r3, [r0, #0]
 800789a:	6842      	ldr	r2, [r0, #4]
 800789c:	605a      	str	r2, [r3, #4]
#endif
          /* Re-enqueues tp with its new priority on the ready list.*/
          (void) chSchReadyI(queue_dequeue(tp));
 800789e:	f7fe fb1f 	bl	8005ee0 <chSchReadyI>
 80078a2:	e7b0      	b.n	8007806 <chRegFindThreadByWorkingArea+0x1e6>
    cp = cp->queue.next;
 80078a4:	465b      	mov	r3, fp
  tp->queue.next             = cp;
 80078a6:	f8ca 3000 	str.w	r3, [sl]
  tp->queue.prev             = cp->queue.prev;
 80078aa:	685a      	ldr	r2, [r3, #4]
 80078ac:	f8ca 2004 	str.w	r2, [sl, #4]
  tp->queue.prev->queue.next = tp;
 80078b0:	f8c2 a000 	str.w	sl, [r2]
  cp->queue.prev             = tp;
 80078b4:	f8c3 a004 	str.w	sl, [r3, #4]
        break;
      }

      /* Sleep on the mutex.*/
      queue_prio_insert(ctp, &mp->queue);
      ctp->u.wtmtxp = mp;
 80078b8:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
      chSchGoSleepS(CH_STATE_WTMTX);
 80078bc:	2006      	movs	r0, #6
 80078be:	f7ff fc07 	bl	80070d0 <chSchGoSleepS>

      /* It is assumed that the thread performing the unlock operation assigns
         the mutex to this thread.*/
      chDbgAssert(mp->owner == ctp, "not owner");
 80078c2:	9b00      	ldr	r3, [sp, #0]
 80078c4:	695b      	ldr	r3, [r3, #20]
 80078c6:	459a      	cmp	sl, r3
 80078c8:	d002      	beq.n	80078d0 <chRegFindThreadByWorkingArea+0x2b0>
 80078ca:	481b      	ldr	r0, [pc, #108]	; (8007938 <chRegFindThreadByWorkingArea+0x318>)
 80078cc:	f7fe fa58 	bl	8005d80 <chSysHalt>
      chDbgAssert(ctp->mtxlist == mp, "not owned");
 80078d0:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80078d4:	459b      	cmp	fp, r3
 80078d6:	d00a      	beq.n	80078ee <chRegFindThreadByWorkingArea+0x2ce>
 80078d8:	4817      	ldr	r0, [pc, #92]	; (8007938 <chRegFindThreadByWorkingArea+0x318>)
 80078da:	f7fe fa51 	bl	8005d80 <chSysHalt>
    chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");

    mp->cnt++;
#endif
    /* It was not owned, inserted in the owned mutexes list.*/
    mp->owner = ctp;
 80078de:	9a00      	ldr	r2, [sp, #0]
 80078e0:	f8c2 a014 	str.w	sl, [r2, #20]
    mp->next = ctp->mtxlist;
 80078e4:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 80078e8:	6193      	str	r3, [r2, #24]
    ctp->mtxlist = mp;
 80078ea:	f8ca b038 	str.w	fp, [sl, #56]	; 0x38
  _dbg_check_unlock();
 80078ee:	f7ff fd3f 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	42a3      	cmp	r3, r4
 80078f6:	d004      	beq.n	8007902 <chRegFindThreadByWorkingArea+0x2e2>
 80078f8:	69a2      	ldr	r2, [r4, #24]
 80078fa:	6892      	ldr	r2, [r2, #8]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	429a      	cmp	r2, r3
 8007900:	d307      	bcc.n	8007912 <chRegFindThreadByWorkingArea+0x2f2>
  hp = (heap_header_t *)p - 1U;
 8007902:	f1a9 0208 	sub.w	r2, r9, #8
  qp = &heapp->header;
 8007906:	9b00      	ldr	r3, [sp, #0]
 8007908:	1d18      	adds	r0, r3, #4
 800790a:	f388 8811 	msr	BASEPRI, r8
 800790e:	4603      	mov	r3, r0
 8007910:	e01b      	b.n	800794a <chRegFindThreadByWorkingArea+0x32a>
 8007912:	480a      	ldr	r0, [pc, #40]	; (800793c <chRegFindThreadByWorkingArea+0x31c>)
 8007914:	f7fe fa34 	bl	8005d80 <chSysHalt>

  while (true) {
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 8007918:	4806      	ldr	r0, [pc, #24]	; (8007934 <chRegFindThreadByWorkingArea+0x314>)
 800791a:	f7fe fa31 	bl	8005d80 <chSysHalt>
 800791e:	bf00      	nop
 8007920:	200015d8 	.word	0x200015d8
 8007924:	0800b154 	.word	0x0800b154
 8007928:	0800b2b0 	.word	0x0800b2b0
 800792c:	0800b258 	.word	0x0800b258
 8007930:	0800b0e0 	.word	0x0800b0e0
 8007934:	0800b20c 	.word	0x0800b20c
 8007938:	0800b188 	.word	0x0800b188
 800793c:	0800b0ec 	.word	0x0800b0ec

    if (((qp == &heapp->header) || (hp > qp)) &&
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007940:	6819      	ldr	r1, [r3, #0]
    if (((qp == &heapp->header) || (hp > qp)) &&
 8007942:	b179      	cbz	r1, 8007964 <chRegFindThreadByWorkingArea+0x344>
        ((H_NEXT(qp) == NULL) || (hp < H_NEXT(qp)))) {
 8007944:	428a      	cmp	r2, r1
 8007946:	d30d      	bcc.n	8007964 <chRegFindThreadByWorkingArea+0x344>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
        H_NEXT(qp) = H_NEXT(hp);
      }
      break;
    }
    qp = H_NEXT(qp);
 8007948:	681b      	ldr	r3, [r3, #0]
    chDbgAssert((hp < qp) || (hp >= H_LIMIT(qp)), "within free block");
 800794a:	429a      	cmp	r2, r3
 800794c:	d305      	bcc.n	800795a <chRegFindThreadByWorkingArea+0x33a>
 800794e:	6859      	ldr	r1, [r3, #4]
 8007950:	3101      	adds	r1, #1
 8007952:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007956:	428a      	cmp	r2, r1
 8007958:	d3de      	bcc.n	8007918 <chRegFindThreadByWorkingArea+0x2f8>
    if (((qp == &heapp->header) || (hp > qp)) &&
 800795a:	4298      	cmp	r0, r3
 800795c:	d0f0      	beq.n	8007940 <chRegFindThreadByWorkingArea+0x320>
 800795e:	429a      	cmp	r2, r3
 8007960:	d9f2      	bls.n	8007948 <chRegFindThreadByWorkingArea+0x328>
 8007962:	e7ed      	b.n	8007940 <chRegFindThreadByWorkingArea+0x320>
      H_NEXT(hp) = H_NEXT(qp);
 8007964:	f849 1c08 	str.w	r1, [r9, #-8]
      H_NEXT(qp) = hp;
 8007968:	601a      	str	r2, [r3, #0]
      if (H_LIMIT(hp) == H_NEXT(hp)) {
 800796a:	f859 1c04 	ldr.w	r1, [r9, #-4]
 800796e:	3101      	adds	r1, #1
 8007970:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8007974:	f859 0c08 	ldr.w	r0, [r9, #-8]
 8007978:	4584      	cmp	ip, r0
 800797a:	d014      	beq.n	80079a6 <chRegFindThreadByWorkingArea+0x386>
      if ((H_LIMIT(qp) == hp)) {
 800797c:	6858      	ldr	r0, [r3, #4]
 800797e:	1c41      	adds	r1, r0, #1
 8007980:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8007984:	428a      	cmp	r2, r1
 8007986:	d018      	beq.n	80079ba <chRegFindThreadByWorkingArea+0x39a>
 * @param[in] mp        pointer to the @p mutex_t structure
 *
 * @api
 */
void chMtxUnlock(mutex_t *mp) {
  thread_t *ctp = currp;
 8007988:	f8d4 a018 	ldr.w	sl, [r4, #24]
 800798c:	f386 8811 	msr	BASEPRI, r6
  _dbg_check_lock();
 8007990:	f7ff fd36 	bl	8007400 <_dbg_check_lock>

  chDbgCheck(mp != NULL);

  chSysLock();

  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 8007994:	f8da 3038 	ldr.w	r3, [sl, #56]	; 0x38
 8007998:	b1c3      	cbz	r3, 80079cc <chRegFindThreadByWorkingArea+0x3ac>
  chDbgAssert(ctp->mtxlist->owner == ctp, "ownership failure");
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	4592      	cmp	sl, r2
 800799e:	d018      	beq.n	80079d2 <chRegFindThreadByWorkingArea+0x3b2>
 80079a0:	4838      	ldr	r0, [pc, #224]	; (8007a84 <chRegFindThreadByWorkingArea+0x464>)
 80079a2:	f7fe f9ed 	bl	8005d80 <chSysHalt>
        H_PAGES(hp) += H_PAGES(H_NEXT(hp)) + 1U;
 80079a6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80079aa:	4408      	add	r0, r1
 80079ac:	f849 0c04 	str.w	r0, [r9, #-4]
        H_NEXT(hp) = H_NEXT(H_NEXT(hp));
 80079b0:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
 80079b4:	f849 1c08 	str.w	r1, [r9, #-8]
 80079b8:	e7e0      	b.n	800797c <chRegFindThreadByWorkingArea+0x35c>
        H_PAGES(qp) += H_PAGES(hp) + 1U;
 80079ba:	f859 2c04 	ldr.w	r2, [r9, #-4]
 80079be:	3201      	adds	r2, #1
 80079c0:	4402      	add	r2, r0
 80079c2:	605a      	str	r2, [r3, #4]
        H_NEXT(qp) = H_NEXT(hp);
 80079c4:	f859 2c08 	ldr.w	r2, [r9, #-8]
 80079c8:	601a      	str	r2, [r3, #0]
 80079ca:	e7dd      	b.n	8007988 <chRegFindThreadByWorkingArea+0x368>
  chDbgAssert(ctp->mtxlist != NULL, "owned mutexes list empty");
 80079cc:	482d      	ldr	r0, [pc, #180]	; (8007a84 <chRegFindThreadByWorkingArea+0x464>)
 80079ce:	f7fe f9d7 	bl	8005d80 <chSysHalt>
  chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");

  if (--mp->cnt == (cnt_t)0) {
#endif

    chDbgAssert(ctp->mtxlist == mp, "not next in list");
 80079d2:	459b      	cmp	fp, r3
 80079d4:	d002      	beq.n	80079dc <chRegFindThreadByWorkingArea+0x3bc>
 80079d6:	482b      	ldr	r0, [pc, #172]	; (8007a84 <chRegFindThreadByWorkingArea+0x464>)
 80079d8:	f7fe f9d2 	bl	8005d80 <chSysHalt>

    /* Removes the top mutex from the thread's owned mutexes list and marks
       it as not owned. Note, it is assumed to be the same mutex passed as
       parameter of this function.*/
    ctp->mtxlist = mp->next;
 80079dc:	9b00      	ldr	r3, [sp, #0]
 80079de:	f8d3 9018 	ldr.w	r9, [r3, #24]
 80079e2:	f8ca 9038 	str.w	r9, [sl, #56]	; 0x38
 * @deprecated
 * @sclass
 */
static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {

  chDbgCheckClassS();
 80079e6:	f7fe f9fb 	bl	8005de0 <chDbgCheckClassS>

    /* If a thread is waiting on the mutex then the fun part begins.*/
    if (chMtxQueueNotEmptyS(mp)) {
 80079ea:	9b00      	ldr	r3, [sp, #0]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	459b      	cmp	fp, r3
 80079f0:	d034      	beq.n	8007a5c <chRegFindThreadByWorkingArea+0x43c>
      thread_t *tp;

      /* Recalculates the optimal thread priority by scanning the owned
         mutexes list.*/
      tprio_t newprio = ctp->realprio;
 80079f2:	f8da 303c 	ldr.w	r3, [sl, #60]	; 0x3c
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	e001      	b.n	80079fe <chRegFindThreadByWorkingArea+0x3de>
           final priority will have at least that priority.*/
        if (chMtxQueueNotEmptyS(lmp) &&
            (lmp->queue.next->prio > newprio)) {
          newprio = lmp->queue.next->prio;
        }
        lmp = lmp->next;
 80079fa:	f8d9 900c 	ldr.w	r9, [r9, #12]
      while (lmp != NULL) {
 80079fe:	f1b9 0f00 	cmp.w	r9, #0
 8007a02:	d00c      	beq.n	8007a1e <chRegFindThreadByWorkingArea+0x3fe>
 8007a04:	f7fe f9ec 	bl	8005de0 <chDbgCheckClassS>
  return (bool)(tqp->next != (const thread_t *)tqp);
 8007a08:	f8d9 3000 	ldr.w	r3, [r9]
        if (chMtxQueueNotEmptyS(lmp) &&
 8007a0c:	4599      	cmp	r9, r3
 8007a0e:	d0f4      	beq.n	80079fa <chRegFindThreadByWorkingArea+0x3da>
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	9a01      	ldr	r2, [sp, #4]
 8007a14:	429a      	cmp	r2, r3
 8007a16:	bf38      	it	cc
 8007a18:	461a      	movcc	r2, r3
 8007a1a:	9201      	str	r2, [sp, #4]
 8007a1c:	e7ed      	b.n	80079fa <chRegFindThreadByWorkingArea+0x3da>
      }

      /* Assigns to the current thread the highest priority among all the
         waiting threads.*/
      ctp->prio = newprio;
 8007a1e:	9b01      	ldr	r3, [sp, #4]
 8007a20:	f8ca 3008 	str.w	r3, [sl, #8]
  thread_t *tp = tqp->next;
 8007a24:	9a00      	ldr	r2, [sp, #0]
 8007a26:	68d0      	ldr	r0, [r2, #12]
  tqp->next             = tp->queue.next;
 8007a28:	6803      	ldr	r3, [r0, #0]
 8007a2a:	60d3      	str	r3, [r2, #12]
  tqp->next->queue.prev = (thread_t *)tqp;
 8007a2c:	f8c3 b004 	str.w	fp, [r3, #4]
         assigns the mutex to it.*/
#if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
      mp->cnt = (cnt_t)1;
#endif
      tp = queue_fifo_remove(&mp->queue);
      mp->owner = tp;
 8007a30:	6150      	str	r0, [r2, #20]
      mp->next = tp->mtxlist;
 8007a32:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8007a34:	6193      	str	r3, [r2, #24]
      tp->mtxlist = mp;
 8007a36:	f8c0 b038 	str.w	fp, [r0, #56]	; 0x38

      /* Note, not using chSchWakeupS() becuase that function expects the
         current thread to have the higher or equal priority than the ones
         in the ready list. This is not necessarily true here because we
         just changed priority.*/
      (void) chSchReadyI(tp);
 8007a3a:	f7fe fa51 	bl	8005ee0 <chSchReadyI>
      chSchRescheduleS();
 8007a3e:	f7ff fad7 	bl	8006ff0 <chSchRescheduleS>
  _dbg_check_unlock();
 8007a42:	f7ff fc95 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	42a3      	cmp	r3, r4
 8007a4a:	d004      	beq.n	8007a56 <chRegFindThreadByWorkingArea+0x436>
 8007a4c:	69a2      	ldr	r2, [r4, #24]
 8007a4e:	6892      	ldr	r2, [r2, #8]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d306      	bcc.n	8007a64 <chRegFindThreadByWorkingArea+0x444>
 8007a56:	f388 8811 	msr	BASEPRI, r8
 8007a5a:	e63e      	b.n	80076da <chRegFindThreadByWorkingArea+0xba>
    }
    else {
      mp->owner = NULL;
 8007a5c:	9b00      	ldr	r3, [sp, #0]
 8007a5e:	f8c3 8014 	str.w	r8, [r3, #20]
 8007a62:	e7ee      	b.n	8007a42 <chRegFindThreadByWorkingArea+0x422>
 8007a64:	4808      	ldr	r0, [pc, #32]	; (8007a88 <chRegFindThreadByWorkingArea+0x468>)
 8007a66:	f7fe f98b 	bl	8005d80 <chSysHalt>
  chDbgCheck((mp != NULL) && (objp != NULL));
 8007a6a:	4808      	ldr	r0, [pc, #32]	; (8007a8c <chRegFindThreadByWorkingArea+0x46c>)
 8007a6c:	f7fe f988 	bl	8005d80 <chSysHalt>
  chDbgAssert(((size_t)objp & MEM_ALIGN_MASK(mp->align)) == 0U,
 8007a70:	4806      	ldr	r0, [pc, #24]	; (8007a8c <chRegFindThreadByWorkingArea+0x46c>)
 8007a72:	f7fe f985 	bl	8005d80 <chSysHalt>
 8007a76:	4806      	ldr	r0, [pc, #24]	; (8007a90 <chRegFindThreadByWorkingArea+0x470>)
 8007a78:	f7fe f982 	bl	8005d80 <chSysHalt>
 8007a7c:	4805      	ldr	r0, [pc, #20]	; (8007a94 <chRegFindThreadByWorkingArea+0x474>)
 8007a7e:	f7fe f97f 	bl	8005d80 <chSysHalt>
 8007a82:	bf00      	nop
 8007a84:	0800b218 	.word	0x0800b218
 8007a88:	0800b0ec 	.word	0x0800b0ec
 8007a8c:	0800b1e8 	.word	0x0800b1e8
 8007a90:	0800b110 	.word	0x0800b110
 8007a94:	0800b0e0 	.word	0x0800b0e0
	...

08007aa0 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8007aa0:	b510      	push	{r4, lr}
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007aaa:	f7ff fca9 	bl	8007400 <_dbg_check_lock>
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8007aae:	b194      	cbz	r4, 8007ad6 <chThdSleep+0x36>
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	2008      	movs	r0, #8
 8007ab4:	f7ff fb34 	bl	8007120 <chSchGoSleepTimeoutS>
  _dbg_check_unlock();
 8007ab8:	f7ff fc5a 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007abc:	4b09      	ldr	r3, [pc, #36]	; (8007ae4 <chThdSleep+0x44>)
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d004      	beq.n	8007ace <chThdSleep+0x2e>
 8007ac4:	699b      	ldr	r3, [r3, #24]
 8007ac6:	6899      	ldr	r1, [r3, #8]
 8007ac8:	6893      	ldr	r3, [r2, #8]
 8007aca:	4299      	cmp	r1, r3
 8007acc:	d306      	bcc.n	8007adc <chThdSleep+0x3c>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	f383 8811 	msr	BASEPRI, r3
}
 8007ad4:	bd10      	pop	{r4, pc}
  chDbgCheck(ticks != TIME_IMMEDIATE);
 8007ad6:	4804      	ldr	r0, [pc, #16]	; (8007ae8 <chThdSleep+0x48>)
 8007ad8:	f7fe f952 	bl	8005d80 <chSysHalt>
 8007adc:	4803      	ldr	r0, [pc, #12]	; (8007aec <chThdSleep+0x4c>)
 8007ade:	f7fe f94f 	bl	8005d80 <chSysHalt>
 8007ae2:	bf00      	nop
 8007ae4:	200015d8 	.word	0x200015d8
 8007ae8:	0800b128 	.word	0x0800b128
 8007aec:	0800b0e0 	.word	0x0800b0e0

08007af0 <Thread1>:
static THD_FUNCTION(Thread1, arg) {
 8007af0:	b580      	push	{r7, lr}
      trigger = palReadPad(GPIOC,6);
 8007af2:	4c19      	ldr	r4, [pc, #100]	; (8007b58 <Thread1+0x68>)
	      rainHistory[0] += 1;
 8007af4:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8007b60 <Thread1+0x70>
	      lifetimeRain += 0.01;
 8007af8:	a715      	add	r7, pc, #84	; (adr r7, 8007b50 <Thread1+0x60>)
 8007afa:	e9d7 6700 	ldrd	r6, r7, [r7]
 8007afe:	e002      	b.n	8007b06 <Thread1+0x16>
      chThdSleepMilliseconds(10); // loop 
 8007b00:	2064      	movs	r0, #100	; 0x64
 8007b02:	f7ff ffcd 	bl	8007aa0 <chThdSleep>
      trigger = palReadPad(GPIOC,6);
 8007b06:	6923      	ldr	r3, [r4, #16]
      if (trigger == 0)
 8007b08:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b0c:	d1f8      	bne.n	8007b00 <Thread1+0x10>
	      rainHistory[0] += 1;
 8007b0e:	f898 3000 	ldrb.w	r3, [r8]
 8007b12:	3301      	adds	r3, #1
 8007b14:	f888 3000 	strb.w	r3, [r8]
	      lifetimeRain += 0.01;
 8007b18:	4d10      	ldr	r5, [pc, #64]	; (8007b5c <Thread1+0x6c>)
 8007b1a:	6828      	ldr	r0, [r5, #0]
 8007b1c:	f7f8 fe7e 	bl	800081c <__aeabi_f2d>
 8007b20:	4632      	mov	r2, r6
 8007b22:	463b      	mov	r3, r7
 8007b24:	f7f8 fd1c 	bl	8000560 <__adddf3>
 8007b28:	f7f9 f9a8 	bl	8000e7c <__aeabi_d2f>
 8007b2c:	6028      	str	r0, [r5, #0]
	      chThdSleepMilliseconds(250); // debounce
 8007b2e:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8007b32:	f7ff ffb5 	bl	8007aa0 <chThdSleep>
	      while (palReadPad(GPIOC,6)==0)
 8007b36:	6923      	ldr	r3, [r4, #16]
 8007b38:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b3c:	d1e0      	bne.n	8007b00 <Thread1+0x10>
		  chThdSleepMilliseconds(10); // wait till clear
 8007b3e:	2564      	movs	r5, #100	; 0x64
 8007b40:	4628      	mov	r0, r5
 8007b42:	f7ff ffad 	bl	8007aa0 <chThdSleep>
	      while (palReadPad(GPIOC,6)==0)
 8007b46:	6923      	ldr	r3, [r4, #16]
 8007b48:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007b4c:	d0f8      	beq.n	8007b40 <Thread1+0x50>
 8007b4e:	e7d7      	b.n	8007b00 <Thread1+0x10>
 8007b50:	47ae147b 	.word	0x47ae147b
 8007b54:	3f847ae1 	.word	0x3f847ae1
 8007b58:	48000800 	.word	0x48000800
 8007b5c:	2000204c 	.word	0x2000204c
 8007b60:	200020d4 	.word	0x200020d4
	...

08007b70 <Thread6>:
static THD_FUNCTION(Thread6, arg) {
 8007b70:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 8007b74:	4d1a      	ldr	r5, [pc, #104]	; (8007be0 <Thread6+0x70>)
 8007b76:	f105 060a 	add.w	r6, r5, #10
    chprintf((BaseSequentialStream*)&SD1,"rainTotal %d \r\n",rainTotal);
 8007b7a:	4f1a      	ldr	r7, [pc, #104]	; (8007be4 <Thread6+0x74>)
    return (rainTotal/100.0)*6.0;
 8007b7c:	f04f 0800 	mov.w	r8, #0
 8007b80:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8007bf4 <Thread6+0x84>
 8007b84:	f04f 0a00 	mov.w	sl, #0
 8007b88:	f8df b06c 	ldr.w	fp, [pc, #108]	; 8007bf8 <Thread6+0x88>
 8007b8c:	e004      	b.n	8007b98 <Thread6+0x28>
	    rainHistory[0] = 0;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	702b      	strb	r3, [r5, #0]
	    chThdSleepMilliseconds(1000*60); // sleep for a minute
 8007b92:	4815      	ldr	r0, [pc, #84]	; (8007be8 <Thread6+0x78>)
 8007b94:	f7ff ff84 	bl	8007aa0 <chThdSleep>
static THD_FUNCTION(Thread6, arg) {
 8007b98:	462b      	mov	r3, r5
    rainTotal = 0;
 8007b9a:	2400      	movs	r4, #0
	rainTotal += rainHistory[x];
 8007b9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007ba0:	4414      	add	r4, r2
    for (x=0;x<10;x++)
 8007ba2:	42b3      	cmp	r3, r6
 8007ba4:	d1fa      	bne.n	8007b9c <Thread6+0x2c>
    chprintf((BaseSequentialStream*)&SD1,"rainTotal %d \r\n",rainTotal);
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	4910      	ldr	r1, [pc, #64]	; (8007bec <Thread6+0x7c>)
 8007baa:	4638      	mov	r0, r7
 8007bac:	f7fe ffc8 	bl	8006b40 <chprintf>
    return (rainTotal/100.0)*6.0;
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	f7f8 fe21 	bl	80007f8 <__aeabi_i2d>
 8007bb6:	4642      	mov	r2, r8
 8007bb8:	464b      	mov	r3, r9
 8007bba:	f7f8 ffb1 	bl	8000b20 <__aeabi_ddiv>
 8007bbe:	4652      	mov	r2, sl
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	f7f8 fe83 	bl	80008cc <__aeabi_dmul>
 8007bc6:	f7f9 f959 	bl	8000e7c <__aeabi_d2f>
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <Thread6+0x80>)
 8007bcc:	6018      	str	r0, [r3, #0]
 8007bce:	f105 0309 	add.w	r3, r5, #9
		rainHistory[9-x] = rainHistory[8-x];
 8007bd2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bd6:	705a      	strb	r2, [r3, #1]
	    for (x=0;x<9;x++)		  
 8007bd8:	42ab      	cmp	r3, r5
 8007bda:	d1fa      	bne.n	8007bd2 <Thread6+0x62>
 8007bdc:	e7d7      	b.n	8007b8e <Thread6+0x1e>
 8007bde:	bf00      	nop
 8007be0:	200020d4 	.word	0x200020d4
 8007be4:	20001414 	.word	0x20001414
 8007be8:	000927c0 	.word	0x000927c0
 8007bec:	0800b084 	.word	0x0800b084
 8007bf0:	200020e0 	.word	0x200020e0
 8007bf4:	40590000 	.word	0x40590000
 8007bf8:	40180000 	.word	0x40180000
 8007bfc:	00000000 	.word	0x00000000

08007c00 <Thread7>:
static THD_FUNCTION(Thread7, arg) {
 8007c00:	b580      	push	{r7, lr}
	    currentvalue = lifetimeRain*100;
 8007c02:	4f10      	ldr	r7, [pc, #64]	; (8007c44 <Thread7+0x44>)
 8007c04:	ed9f 8a10 	vldr	s16, [pc, #64]	; 8007c48 <Thread7+0x48>
	    chThdSleepMilliseconds(1000*60*60); // sleep for an hour
 8007c08:	4e10      	ldr	r6, [pc, #64]	; (8007c4c <Thread7+0x4c>)
 8007c0a:	e002      	b.n	8007c12 <Thread7+0x12>
 8007c0c:	4630      	mov	r0, r6
 8007c0e:	f7ff ff47 	bl	8007aa0 <chThdSleep>
	    currentvalue = lifetimeRain*100;
 8007c12:	edd7 7a00 	vldr	s15, [r7]
 8007c16:	ee67 7a88 	vmul.f32	s15, s15, s16
 8007c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c1e:	ee17 3a90 	vmov	r3, s15
 8007c22:	b29c      	uxth	r4, r3
	    savedvalue = *flash2;
 8007c24:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <Thread7+0x50>)
	    if (currentvalue != savedvalue)
 8007c26:	881b      	ldrh	r3, [r3, #0]
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d0ef      	beq.n	8007c0c <Thread7+0xc>
		    write_flash(currentvalue,flash2);
 8007c2c:	4d08      	ldr	r5, [pc, #32]	; (8007c50 <Thread7+0x50>)
 8007c2e:	4629      	mov	r1, r5
 8007c30:	4620      	mov	r0, r4
 8007c32:	f7fd ff95 	bl	8005b60 <write_flash>
		    chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,%d,%d\r\n",currentvalue,*flash2);
 8007c36:	882b      	ldrh	r3, [r5, #0]
 8007c38:	4622      	mov	r2, r4
 8007c3a:	4906      	ldr	r1, [pc, #24]	; (8007c54 <Thread7+0x54>)
 8007c3c:	4806      	ldr	r0, [pc, #24]	; (8007c58 <Thread7+0x58>)
 8007c3e:	f7fe ff7f 	bl	8006b40 <chprintf>
 8007c42:	e7e3      	b.n	8007c0c <Thread7+0xc>
 8007c44:	2000204c 	.word	0x2000204c
 8007c48:	42c80000 	.word	0x42c80000
 8007c4c:	02255100 	.word	0x02255100
 8007c50:	0803e800 	.word	0x0803e800
 8007c54:	0800b094 	.word	0x0800b094
 8007c58:	20001414 	.word	0x20001414
 8007c5c:	00000000 	.word	0x00000000

08007c60 <Thread5>:
static THD_FUNCTION(Thread5, arg) {
 8007c60:	b500      	push	{lr}
 8007c62:	b083      	sub	sp, #12
	    chMBFetchTimeout(&RxMbx2,&rxRow,TIME_INFINITE);
 8007c64:	4e07      	ldr	r6, [pc, #28]	; (8007c84 <Thread5+0x24>)
	    palSetPad(GPIOE,1);
 8007c66:	4d08      	ldr	r5, [pc, #32]	; (8007c88 <Thread5+0x28>)
	    chMBFetchTimeout(&RxMbx2,&rxRow,TIME_INFINITE);
 8007c68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c6c:	a901      	add	r1, sp, #4
 8007c6e:	4630      	mov	r0, r6
 8007c70:	f7ff fc1e 	bl	80074b0 <chMBFetchTimeout>
	    palSetPad(GPIOE,1);
 8007c74:	2402      	movs	r4, #2
 8007c76:	832c      	strh	r4, [r5, #24]
	    chThdSleepMilliseconds(5);
 8007c78:	2032      	movs	r0, #50	; 0x32
 8007c7a:	f7ff ff11 	bl	8007aa0 <chThdSleep>
	    palClearPad(GPIOE,1);
 8007c7e:	836c      	strh	r4, [r5, #26]
 8007c80:	e7f2      	b.n	8007c68 <Thread5+0x8>
 8007c82:	bf00      	nop
 8007c84:	20001324 	.word	0x20001324
 8007c88:	48001000 	.word	0x48001000
 8007c8c:	00000000 	.word	0x00000000

08007c90 <adcerrorcallback>:
static void adcerrorcallback(ADCDriver *adcp, adcerror_t err) {
 8007c90:	b508      	push	{r3, lr}
    chprintf((BaseSequentialStream*)&SD1,string);
 8007c92:	4904      	ldr	r1, [pc, #16]	; (8007ca4 <adcerrorcallback+0x14>)
 8007c94:	4804      	ldr	r0, [pc, #16]	; (8007ca8 <adcerrorcallback+0x18>)
 8007c96:	f7fe ff53 	bl	8006b40 <chprintf>
    chThdSleepMilliseconds(100);
 8007c9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007c9e:	f7ff feff 	bl	8007aa0 <chThdSleep>
}
 8007ca2:	bd08      	pop	{r3, pc}
 8007ca4:	6f722121 	.word	0x6f722121
 8007ca8:	20001414 	.word	0x20001414
 8007cac:	00000000 	.word	0x00000000

08007cb0 <chThdExit>:
void chThdExit(msg_t msg) {
 8007cb0:	b508      	push	{r3, lr}
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	2320      	movs	r3, #32
 8007cb6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007cba:	f7ff fba1 	bl	8007400 <_dbg_check_lock>
  thread_t *tp = currp;
 8007cbe:	4b11      	ldr	r3, [pc, #68]	; (8007d04 <chThdExit+0x54>)
 8007cc0:	699c      	ldr	r4, [r3, #24]
  tp->u.exitcode = msg;
 8007cc2:	6265      	str	r5, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8007cc4:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
 8007cc8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007cca:	4285      	cmp	r5, r0
 8007ccc:	d006      	beq.n	8007cdc <chThdExit+0x2c>
  tlp->next = tp->queue.next;
 8007cce:	6803      	ldr	r3, [r0, #0]
 8007cd0:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 8007cd2:	f7fe f905 	bl	8005ee0 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 8007cd6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 8007cd8:	42a8      	cmp	r0, r5
 8007cda:	d1f8      	bne.n	8007cce <chThdExit+0x1e>
  if ((tp->refs == (trefs_t)0) &&
 8007cdc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8007ce0:	b953      	cbnz	r3, 8007cf8 <chThdExit+0x48>
 8007ce2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8007ce6:	f013 0f03 	tst.w	r3, #3
 8007cea:	d105      	bne.n	8007cf8 <chThdExit+0x48>
    REG_REMOVE(tp);
 8007cec:	6963      	ldr	r3, [r4, #20]
 8007cee:	6922      	ldr	r2, [r4, #16]
 8007cf0:	611a      	str	r2, [r3, #16]
 8007cf2:	6923      	ldr	r3, [r4, #16]
 8007cf4:	6962      	ldr	r2, [r4, #20]
 8007cf6:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 8007cf8:	200f      	movs	r0, #15
 8007cfa:	f7ff f9e9 	bl	80070d0 <chSchGoSleepS>
  chDbgAssert(false, "zombies apocalypse");
 8007cfe:	4802      	ldr	r0, [pc, #8]	; (8007d08 <chThdExit+0x58>)
 8007d00:	f7fe f83e 	bl	8005d80 <chSysHalt>
 8007d04:	200015d8 	.word	0x200015d8
 8007d08:	0800b27c 	.word	0x0800b27c
 8007d0c:	00000000 	.word	0x00000000

08007d10 <chThdCreateStatic>:
                            tprio_t prio, tfunc_t pf, void *arg) {
 8007d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  chDbgCheck((wsp != NULL) &&
 8007d12:	b1a8      	cbz	r0, 8007d40 <chThdCreateStatic+0x30>
 8007d14:	460c      	mov	r4, r1
 8007d16:	4616      	mov	r6, r2
 8007d18:	461f      	mov	r7, r3
 8007d1a:	4605      	mov	r5, r0
 8007d1c:	f010 0f07 	tst.w	r0, #7
 8007d20:	d10e      	bne.n	8007d40 <chThdCreateStatic+0x30>
 8007d22:	f5b1 7fa8 	cmp.w	r1, #336	; 0x150
 8007d26:	d30b      	bcc.n	8007d40 <chThdCreateStatic+0x30>
 8007d28:	f011 0f07 	tst.w	r1, #7
 8007d2c:	d108      	bne.n	8007d40 <chThdCreateStatic+0x30>
 8007d2e:	2aff      	cmp	r2, #255	; 0xff
 8007d30:	d806      	bhi.n	8007d40 <chThdCreateStatic+0x30>
 8007d32:	b12b      	cbz	r3, 8007d40 <chThdCreateStatic+0x30>
  chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 8007d34:	f7ff fc74 	bl	8007620 <chRegFindThreadByWorkingArea>
 8007d38:	b128      	cbz	r0, 8007d46 <chThdCreateStatic+0x36>
 8007d3a:	4822      	ldr	r0, [pc, #136]	; (8007dc4 <chThdCreateStatic+0xb4>)
 8007d3c:	f7fe f820 	bl	8005d80 <chSysHalt>
  chDbgCheck((wsp != NULL) &&
 8007d40:	4820      	ldr	r0, [pc, #128]	; (8007dc4 <chThdCreateStatic+0xb4>)
 8007d42:	f7fe f81d 	bl	8005d80 <chSysHalt>
  _thread_memfill((uint8_t *)wsp,
 8007d46:	192a      	adds	r2, r5, r4
 8007d48:	462b      	mov	r3, r5
    *startp++ = v;
 8007d4a:	2155      	movs	r1, #85	; 0x55
 8007d4c:	e001      	b.n	8007d52 <chThdCreateStatic+0x42>
 8007d4e:	f803 1b01 	strb.w	r1, [r3], #1
  while (startp < endp) {
 8007d52:	429a      	cmp	r2, r3
 8007d54:	d8fb      	bhi.n	8007d4e <chThdCreateStatic+0x3e>
 8007d56:	2320      	movs	r3, #32
 8007d58:	f383 8811 	msr	BASEPRI, r3
 8007d5c:	f7ff fb50 	bl	8007400 <_dbg_check_lock>
  tp = (thread_t *)((uint8_t *)wsp + size -
 8007d60:	3c48      	subs	r4, #72	; 0x48
 8007d62:	442c      	add	r4, r5
  tp->wabase = (stkalign_t *)wsp;
 8007d64:	61e5      	str	r5, [r4, #28]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8007d66:	f1a4 0364 	sub.w	r3, r4, #100	; 0x64
 8007d6a:	60e3      	str	r3, [r4, #12]
 8007d6c:	f844 7c24 	str.w	r7, [r4, #-36]
 8007d70:	9b06      	ldr	r3, [sp, #24]
 8007d72:	f844 3c20 	str.w	r3, [r4, #-32]
 8007d76:	4b14      	ldr	r3, [pc, #80]	; (8007dc8 <chThdCreateStatic+0xb8>)
 8007d78:	f844 3c04 	str.w	r3, [r4, #-4]
  tp->prio      = prio;
 8007d7c:	60a6      	str	r6, [r4, #8]
  tp->state     = CH_STATE_WTSTART;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	f884 3020 	strb.w	r3, [r4, #32]
  tp->flags     = CH_FLAG_MODE_STATIC;
 8007d84:	2100      	movs	r1, #0
 8007d86:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
  tp->realprio  = prio;
 8007d8a:	63e6      	str	r6, [r4, #60]	; 0x3c
  tp->mtxlist   = NULL;
 8007d8c:	63a1      	str	r1, [r4, #56]	; 0x38
  tp->epending  = (eventmask_t)0;
 8007d8e:	6361      	str	r1, [r4, #52]	; 0x34
  tp->refs      = (trefs_t)1;
 8007d90:	2301      	movs	r3, #1
 8007d92:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
  tp->name      = name;
 8007d96:	4b0d      	ldr	r3, [pc, #52]	; (8007dcc <chThdCreateStatic+0xbc>)
 8007d98:	61a3      	str	r3, [r4, #24]
  REG_INSERT(tp);
 8007d9a:	4b0d      	ldr	r3, [pc, #52]	; (8007dd0 <chThdCreateStatic+0xc0>)
 8007d9c:	6123      	str	r3, [r4, #16]
 8007d9e:	695a      	ldr	r2, [r3, #20]
 8007da0:	6162      	str	r2, [r4, #20]
 8007da2:	6114      	str	r4, [r2, #16]
 8007da4:	615c      	str	r4, [r3, #20]
  list_init(&tp->waiting);
 8007da6:	f104 0328 	add.w	r3, r4, #40	; 0x28
  tlp->next = (thread_t *)tlp;
 8007daa:	62a3      	str	r3, [r4, #40]	; 0x28
  queue_init(&tp->msgqueue);
 8007dac:	f104 032c 	add.w	r3, r4, #44	; 0x2c
  tqp->next = (thread_t *)tqp;
 8007db0:	62e3      	str	r3, [r4, #44]	; 0x2c
  tqp->prev = (thread_t *)tqp;
 8007db2:	6323      	str	r3, [r4, #48]	; 0x30
  chSchWakeupS(tp, MSG_OK);
 8007db4:	4620      	mov	r0, r4
 8007db6:	f7ff f94b 	bl	8007050 <chSchWakeupS>
  chSysUnlock();
 8007dba:	f7ff faf1 	bl	80073a0 <chSysUnlock.lto_priv.7>
}
 8007dbe:	4620      	mov	r0, r4
 8007dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	0800b224 	.word	0x0800b224
 8007dc8:	080002e1 	.word	0x080002e1
 8007dcc:	0800b694 	.word	0x0800b694
 8007dd0:	200015d8 	.word	0x200015d8
	...

08007de0 <wdgReset>:
 *
 * @param[in] wdgp      pointer to the @p WDGDriver object
 *
 * @api
 */
void wdgReset(WDGDriver *wdgp) {
 8007de0:	b510      	push	{r4, lr}

  osalDbgCheck(wdgp != NULL);
 8007de2:	b158      	cbz	r0, 8007dfc <wdgReset+0x1c>
 8007de4:	4604      	mov	r4, r0
 8007de6:	2320      	movs	r3, #32
 8007de8:	f383 8811 	msr	BASEPRI, r3
 8007dec:	f7ff fb08 	bl	8007400 <_dbg_check_lock>

  osalSysLock();
  osalDbgAssert(wdgp->state == WDG_READY, "not ready");
 8007df0:	7823      	ldrb	r3, [r4, #0]
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d005      	beq.n	8007e02 <wdgReset+0x22>
 8007df6:	480e      	ldr	r0, [pc, #56]	; (8007e30 <wdgReset+0x50>)
 8007df8:	f7fd ffc2 	bl	8005d80 <chSysHalt>
  osalDbgCheck(wdgp != NULL);
 8007dfc:	480c      	ldr	r0, [pc, #48]	; (8007e30 <wdgReset+0x50>)
 8007dfe:	f7fd ffbf 	bl	8005d80 <chSysHalt>
 *
 * @notapi
 */
void wdg_lld_reset(WDGDriver * wdgp) {

  wdgp->wdg->KR = KR_KEY_RELOAD;
 8007e02:	68a3      	ldr	r3, [r4, #8]
 8007e04:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007e08:	601a      	str	r2, [r3, #0]
  _dbg_check_unlock();
 8007e0a:	f7ff fab1 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007e0e:	4b09      	ldr	r3, [pc, #36]	; (8007e34 <wdgReset+0x54>)
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d004      	beq.n	8007e20 <wdgReset+0x40>
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	6899      	ldr	r1, [r3, #8]
 8007e1a:	6893      	ldr	r3, [r2, #8]
 8007e1c:	4299      	cmp	r1, r3
 8007e1e:	d303      	bcc.n	8007e28 <wdgReset+0x48>
 8007e20:	2300      	movs	r3, #0
 8007e22:	f383 8811 	msr	BASEPRI, r3
  wdgResetI(wdgp);
  osalSysUnlock();
}
 8007e26:	bd10      	pop	{r4, pc}
 8007e28:	4803      	ldr	r0, [pc, #12]	; (8007e38 <wdgReset+0x58>)
 8007e2a:	f7fd ffa9 	bl	8005d80 <chSysHalt>
 8007e2e:	bf00      	nop
 8007e30:	0800b328 	.word	0x0800b328
 8007e34:	200015d8 	.word	0x200015d8
 8007e38:	0800b0d4 	.word	0x0800b0d4
 8007e3c:	00000000 	.word	0x00000000

08007e40 <feedWatchdog>:


void feedWatchdog(){
 8007e40:	b508      	push	{r3, lr}
    if (!reset)
 8007e42:	4b04      	ldr	r3, [pc, #16]	; (8007e54 <feedWatchdog+0x14>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	b103      	cbz	r3, 8007e4a <feedWatchdog+0xa>
	wdgReset(&WDGD1);
}
 8007e48:	bd08      	pop	{r3, pc}
	wdgReset(&WDGD1);
 8007e4a:	4803      	ldr	r0, [pc, #12]	; (8007e58 <feedWatchdog+0x18>)
 8007e4c:	f7ff ffc8 	bl	8007de0 <wdgReset>
 8007e50:	e7fa      	b.n	8007e48 <feedWatchdog+0x8>
 8007e52:	bf00      	nop
 8007e54:	200020e4 	.word	0x200020e4
 8007e58:	20001564 	.word	0x20001564
 8007e5c:	00000000 	.word	0x00000000

08007e60 <spiSend>:
 * @param[in] n         number of words to send
 * @param[in] txbuf     the pointer to the transmit buffer
 *
 * @api
 */
void spiSend(SPIDriver *spip, size_t n, const void *txbuf) {
 8007e60:	b570      	push	{r4, r5, r6, lr}

  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8007e62:	b1a8      	cbz	r0, 8007e90 <spiSend+0x30>
 8007e64:	460d      	mov	r5, r1
 8007e66:	4616      	mov	r6, r2
 8007e68:	4604      	mov	r4, r0
 8007e6a:	b189      	cbz	r1, 8007e90 <spiSend+0x30>
 8007e6c:	b182      	cbz	r2, 8007e90 <spiSend+0x30>
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8007e6e:	6843      	ldr	r3, [r0, #4]
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	b113      	cbz	r3, 8007e7a <spiSend+0x1a>
 8007e74:	f011 0f01 	tst.w	r1, #1
 8007e78:	d10d      	bne.n	8007e96 <spiSend+0x36>
 8007e7a:	2320      	movs	r3, #32
 8007e7c:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007e80:	f7ff fabe 	bl	8007400 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007e84:	7823      	ldrb	r3, [r4, #0]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d008      	beq.n	8007e9c <spiSend+0x3c>
 8007e8a:	4826      	ldr	r0, [pc, #152]	; (8007f24 <spiSend+0xc4>)
 8007e8c:	f7fd ff78 	bl	8005d80 <chSysHalt>
  osalDbgCheck((spip != NULL) && (n > 0U) && (txbuf != NULL));
 8007e90:	4824      	ldr	r0, [pc, #144]	; (8007f24 <spiSend+0xc4>)
 8007e92:	f7fd ff75 	bl	8005d80 <chSysHalt>
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8007e96:	4823      	ldr	r0, [pc, #140]	; (8007f24 <spiSend+0xc4>)
 8007e98:	f7fd ff72 	bl	8005d80 <chSysHalt>
  spiStartSendI(spip, n, txbuf);
 8007e9c:	2303      	movs	r3, #3
 8007e9e:	7023      	strb	r3, [r4, #0]
 *
 * @notapi
 */
void spi_lld_send(SPIDriver *spip, size_t n, const void *txbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8007ea0:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8007ea4:	d237      	bcs.n	8007f16 <spiSend+0xb6>

  dmaStreamSetMemory0(spip->dmarx, &dummyrx);
 8007ea6:	6a23      	ldr	r3, [r4, #32]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	4a1f      	ldr	r2, [pc, #124]	; (8007f28 <spiSend+0xc8>)
 8007eac:	60da      	str	r2, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8007eae:	6a23      	ldr	r3, [r4, #32]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode);
 8007eb4:	6a23      	ldr	r3, [r4, #32]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007eba:	601a      	str	r2, [r3, #0]

  dmaStreamSetMemory0(spip->dmatx, txbuf);
 8007ebc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	60de      	str	r6, [r3, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8007ec2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	605d      	str	r5, [r3, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode | STM32_DMA_CR_MINC);
 8007ec8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007eca:	685a      	ldr	r2, [r3, #4]
 8007ecc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ed2:	6013      	str	r3, [r2, #0]

  dmaStreamEnable(spip->dmarx);
 8007ed4:	6a23      	ldr	r3, [r4, #32]
 8007ed6:	685a      	ldr	r2, [r3, #4]
 8007ed8:	6813      	ldr	r3, [r2, #0]
 8007eda:	f043 0301 	orr.w	r3, r3, #1
 8007ede:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 8007ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ee2:	685a      	ldr	r2, [r3, #4]
 8007ee4:	6813      	ldr	r3, [r2, #0]
 8007ee6:	f043 0301 	orr.w	r3, r3, #1
 8007eea:	6013      	str	r3, [r2, #0]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 8007eec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007ef0:	f104 0008 	add.w	r0, r4, #8
 8007ef4:	f7ff f9ec 	bl	80072d0 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8007ef8:	f7ff fa3a 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007efc:	4b0b      	ldr	r3, [pc, #44]	; (8007f2c <spiSend+0xcc>)
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d004      	beq.n	8007f0e <spiSend+0xae>
 8007f04:	699b      	ldr	r3, [r3, #24]
 8007f06:	6899      	ldr	r1, [r3, #8]
 8007f08:	6893      	ldr	r3, [r2, #8]
 8007f0a:	4299      	cmp	r1, r3
 8007f0c:	d306      	bcc.n	8007f1c <spiSend+0xbc>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f383 8811 	msr	BASEPRI, r3
  (void) osalThreadSuspendS(&spip->thread);
  osalSysUnlock();
}
 8007f14:	bd70      	pop	{r4, r5, r6, pc}
  osalDbgAssert(n < 65536, "unsupported DMA transfer size");
 8007f16:	4806      	ldr	r0, [pc, #24]	; (8007f30 <spiSend+0xd0>)
 8007f18:	f7fd ff32 	bl	8005d80 <chSysHalt>
 8007f1c:	4805      	ldr	r0, [pc, #20]	; (8007f34 <spiSend+0xd4>)
 8007f1e:	f7fd ff2f 	bl	8005d80 <chSysHalt>
 8007f22:	bf00      	nop
 8007f24:	0800b48c 	.word	0x0800b48c
 8007f28:	2000203c 	.word	0x2000203c
 8007f2c:	200015d8 	.word	0x200015d8
 8007f30:	0800b3e0 	.word	0x0800b3e0
 8007f34:	0800b0c8 	.word	0x0800b0c8
	...

08007f40 <spiUnselect>:
void spiUnselect(SPIDriver *spip) {
 8007f40:	b510      	push	{r4, lr}
  osalDbgCheck(spip != NULL);
 8007f42:	b158      	cbz	r0, 8007f5c <spiUnselect+0x1c>
 8007f44:	4604      	mov	r4, r0
 8007f46:	2320      	movs	r3, #32
 8007f48:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007f4c:	f7ff fa58 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007f50:	7823      	ldrb	r3, [r4, #0]
 8007f52:	2b02      	cmp	r3, #2
 8007f54:	d005      	beq.n	8007f62 <spiUnselect+0x22>
 8007f56:	480f      	ldr	r0, [pc, #60]	; (8007f94 <spiUnselect+0x54>)
 8007f58:	f7fd ff12 	bl	8005d80 <chSysHalt>
  osalDbgCheck(spip != NULL);
 8007f5c:	480d      	ldr	r0, [pc, #52]	; (8007f94 <spiUnselect+0x54>)
 8007f5e:	f7fd ff0f 	bl	8005d80 <chSysHalt>
  spiUnselectI(spip);
 8007f62:	6863      	ldr	r3, [r4, #4]
 8007f64:	689a      	ldr	r2, [r3, #8]
 8007f66:	68d9      	ldr	r1, [r3, #12]
 8007f68:	2301      	movs	r3, #1
 8007f6a:	408b      	lsls	r3, r1
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	8313      	strh	r3, [r2, #24]
  _dbg_check_unlock();
 8007f70:	f7ff f9fe 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007f74:	4b08      	ldr	r3, [pc, #32]	; (8007f98 <spiUnselect+0x58>)
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d004      	beq.n	8007f86 <spiUnselect+0x46>
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	6899      	ldr	r1, [r3, #8]
 8007f80:	6893      	ldr	r3, [r2, #8]
 8007f82:	4299      	cmp	r1, r3
 8007f84:	d303      	bcc.n	8007f8e <spiUnselect+0x4e>
 8007f86:	2300      	movs	r3, #0
 8007f88:	f383 8811 	msr	BASEPRI, r3
}
 8007f8c:	bd10      	pop	{r4, pc}
 8007f8e:	4803      	ldr	r0, [pc, #12]	; (8007f9c <spiUnselect+0x5c>)
 8007f90:	f7fd fef6 	bl	8005d80 <chSysHalt>
 8007f94:	0800b368 	.word	0x0800b368
 8007f98:	200015d8 	.word	0x200015d8
 8007f9c:	0800b0c8 	.word	0x0800b0c8

08007fa0 <spiSelect>:
void spiSelect(SPIDriver *spip) {
 8007fa0:	b510      	push	{r4, lr}
  osalDbgCheck(spip != NULL);
 8007fa2:	b158      	cbz	r0, 8007fbc <spiSelect+0x1c>
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8007fac:	f7ff fa28 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 8007fb0:	7823      	ldrb	r3, [r4, #0]
 8007fb2:	2b02      	cmp	r3, #2
 8007fb4:	d005      	beq.n	8007fc2 <spiSelect+0x22>
 8007fb6:	480f      	ldr	r0, [pc, #60]	; (8007ff4 <spiSelect+0x54>)
 8007fb8:	f7fd fee2 	bl	8005d80 <chSysHalt>
  osalDbgCheck(spip != NULL);
 8007fbc:	480d      	ldr	r0, [pc, #52]	; (8007ff4 <spiSelect+0x54>)
 8007fbe:	f7fd fedf 	bl	8005d80 <chSysHalt>
  spiSelectI(spip);
 8007fc2:	6863      	ldr	r3, [r4, #4]
 8007fc4:	689a      	ldr	r2, [r3, #8]
 8007fc6:	68d9      	ldr	r1, [r3, #12]
 8007fc8:	2301      	movs	r3, #1
 8007fca:	408b      	lsls	r3, r1
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	8353      	strh	r3, [r2, #26]
  _dbg_check_unlock();
 8007fd0:	f7ff f9ce 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8007fd4:	4b08      	ldr	r3, [pc, #32]	; (8007ff8 <spiSelect+0x58>)
 8007fd6:	681a      	ldr	r2, [r3, #0]
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d004      	beq.n	8007fe6 <spiSelect+0x46>
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	6899      	ldr	r1, [r3, #8]
 8007fe0:	6893      	ldr	r3, [r2, #8]
 8007fe2:	4299      	cmp	r1, r3
 8007fe4:	d303      	bcc.n	8007fee <spiSelect+0x4e>
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f383 8811 	msr	BASEPRI, r3
}
 8007fec:	bd10      	pop	{r4, pc}
 8007fee:	4803      	ldr	r0, [pc, #12]	; (8007ffc <spiSelect+0x5c>)
 8007ff0:	f7fd fec6 	bl	8005d80 <chSysHalt>
 8007ff4:	0800b340 	.word	0x0800b340
 8007ff8:	200015d8 	.word	0x200015d8
 8007ffc:	0800b0c8 	.word	0x0800b0c8

08008000 <spiStop>:
void spiStop(SPIDriver *spip) {
 8008000:	b510      	push	{r4, lr}
  osalDbgCheck(spip != NULL);
 8008002:	b168      	cbz	r0, 8008020 <spiStop+0x20>
 8008004:	4604      	mov	r4, r0
 8008006:	2320      	movs	r3, #32
 8008008:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800800c:	f7ff f9f8 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 8008010:	7822      	ldrb	r2, [r4, #0]
 8008012:	1e53      	subs	r3, r2, #1
 8008014:	b2db      	uxtb	r3, r3
 8008016:	2b01      	cmp	r3, #1
 8008018:	d905      	bls.n	8008026 <spiStop+0x26>
 800801a:	4824      	ldr	r0, [pc, #144]	; (80080ac <spiStop+0xac>)
 800801c:	f7fd feb0 	bl	8005d80 <chSysHalt>
  osalDbgCheck(spip != NULL);
 8008020:	4822      	ldr	r0, [pc, #136]	; (80080ac <spiStop+0xac>)
 8008022:	f7fd fead 	bl	8005d80 <chSysHalt>
  if (spip->state == SPI_READY) {
 8008026:	2a02      	cmp	r2, #2
 8008028:	d012      	beq.n	8008050 <spiStop+0x50>
  spip->config = NULL;
 800802a:	2300      	movs	r3, #0
 800802c:	6063      	str	r3, [r4, #4]
  spip->state  = SPI_STOP;
 800802e:	2301      	movs	r3, #1
 8008030:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8008032:	f7ff f99d 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008036:	4b1e      	ldr	r3, [pc, #120]	; (80080b0 <spiStop+0xb0>)
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	429a      	cmp	r2, r3
 800803c:	d004      	beq.n	8008048 <spiStop+0x48>
 800803e:	699b      	ldr	r3, [r3, #24]
 8008040:	6899      	ldr	r1, [r3, #8]
 8008042:	6893      	ldr	r3, [r2, #8]
 8008044:	4299      	cmp	r1, r3
 8008046:	d32e      	bcc.n	80080a6 <spiStop+0xa6>
 8008048:	2300      	movs	r3, #0
 800804a:	f383 8811 	msr	BASEPRI, r3
}
 800804e:	bd10      	pop	{r4, pc}
    spip->spi->CR1 &= ~SPI_CR1_SPE;
 8008050:	69e2      	ldr	r2, [r4, #28]
 8008052:	6813      	ldr	r3, [r2, #0]
 8008054:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008058:	6013      	str	r3, [r2, #0]
    spip->spi->CR1  = 0;
 800805a:	69e2      	ldr	r2, [r4, #28]
 800805c:	2300      	movs	r3, #0
 800805e:	6013      	str	r3, [r2, #0]
    spip->spi->CR2  = 0;
 8008060:	69e2      	ldr	r2, [r4, #28]
 8008062:	6053      	str	r3, [r2, #4]
    dmaStreamRelease(spip->dmarx);
 8008064:	6a20      	ldr	r0, [r4, #32]
 8008066:	f7fe fa8b 	bl	8006580 <dmaStreamRelease>
    dmaStreamRelease(spip->dmatx);
 800806a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800806c:	f7fe fa88 	bl	8006580 <dmaStreamRelease>
    if (&SPID1 == spip)
 8008070:	4b10      	ldr	r3, [pc, #64]	; (80080b4 <spiStop+0xb4>)
 8008072:	429c      	cmp	r4, r3
 8008074:	d00b      	beq.n	800808e <spiStop+0x8e>
    if (&SPID2 == spip)
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <spiStop+0xb8>)
 8008078:	429c      	cmp	r4, r3
 800807a:	d00e      	beq.n	800809a <spiStop+0x9a>
    if (&SPID3 == spip)
 800807c:	4b0f      	ldr	r3, [pc, #60]	; (80080bc <spiStop+0xbc>)
 800807e:	429c      	cmp	r4, r3
 8008080:	d1d3      	bne.n	800802a <spiStop+0x2a>
      rccDisableSPI3();
 8008082:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <spiStop+0xc0>)
 8008084:	69d3      	ldr	r3, [r2, #28]
 8008086:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800808a:	61d3      	str	r3, [r2, #28]
 800808c:	e7cd      	b.n	800802a <spiStop+0x2a>
      rccDisableSPI1();
 800808e:	4a0c      	ldr	r2, [pc, #48]	; (80080c0 <spiStop+0xc0>)
 8008090:	6993      	ldr	r3, [r2, #24]
 8008092:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008096:	6193      	str	r3, [r2, #24]
 8008098:	e7c7      	b.n	800802a <spiStop+0x2a>
      rccDisableSPI2();
 800809a:	4a09      	ldr	r2, [pc, #36]	; (80080c0 <spiStop+0xc0>)
 800809c:	69d3      	ldr	r3, [r2, #28]
 800809e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80080a2:	61d3      	str	r3, [r2, #28]
 80080a4:	e7c1      	b.n	800802a <spiStop+0x2a>
 80080a6:	4807      	ldr	r0, [pc, #28]	; (80080c4 <spiStop+0xc4>)
 80080a8:	f7fd fe6a 	bl	8005d80 <chSysHalt>
 80080ac:	0800b320 	.word	0x0800b320
 80080b0:	200015d8 	.word	0x200015d8
 80080b4:	200014d4 	.word	0x200014d4
 80080b8:	20001504 	.word	0x20001504
 80080bc:	20001534 	.word	0x20001534
 80080c0:	40021000 	.word	0x40021000
 80080c4:	0800b0c8 	.word	0x0800b0c8
	...

080080d0 <spiStart>:
void spiStart(SPIDriver *spip, const SPIConfig *config) {
 80080d0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck((spip != NULL) && (config != NULL));
 80080d2:	b178      	cbz	r0, 80080f4 <spiStart+0x24>
 80080d4:	460d      	mov	r5, r1
 80080d6:	4604      	mov	r4, r0
 80080d8:	b161      	cbz	r1, 80080f4 <spiStart+0x24>
 80080da:	2320      	movs	r3, #32
 80080dc:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80080e0:	f7ff f98e 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((spip->state == SPI_STOP) || (spip->state == SPI_READY),
 80080e4:	7822      	ldrb	r2, [r4, #0]
 80080e6:	1e53      	subs	r3, r2, #1
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b01      	cmp	r3, #1
 80080ec:	d905      	bls.n	80080fa <spiStart+0x2a>
 80080ee:	4865      	ldr	r0, [pc, #404]	; (8008284 <spiStart+0x1b4>)
 80080f0:	f7fd fe46 	bl	8005d80 <chSysHalt>
  osalDbgCheck((spip != NULL) && (config != NULL));
 80080f4:	4863      	ldr	r0, [pc, #396]	; (8008284 <spiStart+0x1b4>)
 80080f6:	f7fd fe43 	bl	8005d80 <chSysHalt>
  spip->config = config;
 80080fa:	6065      	str	r5, [r4, #4]
  if (spip->state == SPI_STOP) {
 80080fc:	2a01      	cmp	r2, #1
 80080fe:	d045      	beq.n	800818c <spiStart+0xbc>
  ds = spip->config->cr2 & SPI_CR2_DS;
 8008100:	6863      	ldr	r3, [r4, #4]
  if (!ds || (ds <= (SPI_CR2_DS_2 | SPI_CR2_DS_1 | SPI_CR2_DS_0))) {
 8008102:	8a5b      	ldrh	r3, [r3, #18]
 8008104:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800810c:	f200 80a0 	bhi.w	8008250 <spiStart+0x180>
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008110:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008112:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008116:	62a3      	str	r3, [r4, #40]	; 0x28
                      STM32_DMA_CR_PSIZE_BYTE | STM32_DMA_CR_MSIZE_BYTE;
 8008118:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800811a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800811e:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (spip->config->circular) {
 8008120:	6863      	ldr	r3, [r4, #4]
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	f040 80a0 	bne.w	800826a <spiStart+0x19a>
    spip->rxdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800812a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800812c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008130:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode &= ~(STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8008132:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008138:	62e3      	str	r3, [r4, #44]	; 0x2c
  spip->spi->CR1 &= ~SPI_CR1_SPE;
 800813a:	69e2      	ldr	r2, [r4, #28]
 800813c:	6813      	ldr	r3, [r2, #0]
 800813e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008142:	6013      	str	r3, [r2, #0]
  spip->spi->CR1  = spip->config->cr1 | SPI_CR1_MSTR;
 8008144:	69e2      	ldr	r2, [r4, #28]
 8008146:	6863      	ldr	r3, [r4, #4]
 8008148:	8a1b      	ldrh	r3, [r3, #16]
 800814a:	f043 0304 	orr.w	r3, r3, #4
 800814e:	6013      	str	r3, [r2, #0]
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 8008150:	69e2      	ldr	r2, [r4, #28]
 8008152:	6863      	ldr	r3, [r4, #4]
                    SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN;
 8008154:	8a5b      	ldrh	r3, [r3, #18]
 8008156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800815a:	f043 0307 	orr.w	r3, r3, #7
  spip->spi->CR2  = spip->config->cr2 | SPI_CR2_FRXTH | SPI_CR2_SSOE |
 800815e:	6053      	str	r3, [r2, #4]
  spip->spi->CR1 |= SPI_CR1_SPE;
 8008160:	69e2      	ldr	r2, [r4, #28]
 8008162:	6813      	ldr	r3, [r2, #0]
 8008164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008168:	6013      	str	r3, [r2, #0]
  spip->state = SPI_READY;
 800816a:	2302      	movs	r3, #2
 800816c:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 800816e:	f7ff f8ff 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008172:	4b45      	ldr	r3, [pc, #276]	; (8008288 <spiStart+0x1b8>)
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d004      	beq.n	8008184 <spiStart+0xb4>
 800817a:	699b      	ldr	r3, [r3, #24]
 800817c:	6899      	ldr	r1, [r3, #8]
 800817e:	6893      	ldr	r3, [r2, #8]
 8008180:	4299      	cmp	r1, r3
 8008182:	d37b      	bcc.n	800827c <spiStart+0x1ac>
 8008184:	2300      	movs	r3, #0
 8008186:	f383 8811 	msr	BASEPRI, r3
}
 800818a:	bd38      	pop	{r3, r4, r5, pc}
    if (&SPID1 == spip) {
 800818c:	4b3f      	ldr	r3, [pc, #252]	; (800828c <spiStart+0x1bc>)
 800818e:	429c      	cmp	r4, r3
 8008190:	d010      	beq.n	80081b4 <spiStart+0xe4>
    if (&SPID2 == spip) {
 8008192:	4b3f      	ldr	r3, [pc, #252]	; (8008290 <spiStart+0x1c0>)
 8008194:	429c      	cmp	r4, r3
 8008196:	d027      	beq.n	80081e8 <spiStart+0x118>
    if (&SPID3 == spip) {
 8008198:	4b3e      	ldr	r3, [pc, #248]	; (8008294 <spiStart+0x1c4>)
 800819a:	429c      	cmp	r4, r3
 800819c:	d03e      	beq.n	800821c <spiStart+0x14c>
    dmaStreamSetPeripheral(spip->dmarx, &spip->spi->DR);
 800819e:	6a23      	ldr	r3, [r4, #32]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	69e3      	ldr	r3, [r4, #28]
 80081a4:	330c      	adds	r3, #12
 80081a6:	6093      	str	r3, [r2, #8]
    dmaStreamSetPeripheral(spip->dmatx, &spip->spi->DR);
 80081a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80081aa:	685a      	ldr	r2, [r3, #4]
 80081ac:	69e3      	ldr	r3, [r4, #28]
 80081ae:	330c      	adds	r3, #12
 80081b0:	6093      	str	r3, [r2, #8]
 80081b2:	e7a5      	b.n	8008100 <spiStart+0x30>
      b = dmaStreamAllocate(spip->dmarx,
 80081b4:	4a38      	ldr	r2, [pc, #224]	; (8008298 <spiStart+0x1c8>)
 80081b6:	210a      	movs	r1, #10
 80081b8:	6a18      	ldr	r0, [r3, #32]
 80081ba:	f7fe fbb1 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80081be:	b968      	cbnz	r0, 80081dc <spiStart+0x10c>
      b = dmaStreamAllocate(spip->dmatx,
 80081c0:	4832      	ldr	r0, [pc, #200]	; (800828c <spiStart+0x1bc>)
 80081c2:	4603      	mov	r3, r0
 80081c4:	4a35      	ldr	r2, [pc, #212]	; (800829c <spiStart+0x1cc>)
 80081c6:	210a      	movs	r1, #10
 80081c8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80081ca:	f7fe fba9 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80081ce:	b940      	cbnz	r0, 80081e2 <spiStart+0x112>
      rccEnableSPI1(true);
 80081d0:	4a33      	ldr	r2, [pc, #204]	; (80082a0 <spiStart+0x1d0>)
 80081d2:	6993      	ldr	r3, [r2, #24]
 80081d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80081d8:	6193      	str	r3, [r2, #24]
 80081da:	e7e0      	b.n	800819e <spiStart+0xce>
      osalDbgAssert(!b, "stream already allocated");
 80081dc:	4831      	ldr	r0, [pc, #196]	; (80082a4 <spiStart+0x1d4>)
 80081de:	f7fd fdcf 	bl	8005d80 <chSysHalt>
      osalDbgAssert(!b, "stream already allocated");
 80081e2:	4830      	ldr	r0, [pc, #192]	; (80082a4 <spiStart+0x1d4>)
 80081e4:	f7fd fdcc 	bl	8005d80 <chSysHalt>
      b = dmaStreamAllocate(spip->dmarx,
 80081e8:	4a2b      	ldr	r2, [pc, #172]	; (8008298 <spiStart+0x1c8>)
 80081ea:	210a      	movs	r1, #10
 80081ec:	6a18      	ldr	r0, [r3, #32]
 80081ee:	f7fe fb97 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80081f2:	b968      	cbnz	r0, 8008210 <spiStart+0x140>
      b = dmaStreamAllocate(spip->dmatx,
 80081f4:	4826      	ldr	r0, [pc, #152]	; (8008290 <spiStart+0x1c0>)
 80081f6:	4603      	mov	r3, r0
 80081f8:	4a28      	ldr	r2, [pc, #160]	; (800829c <spiStart+0x1cc>)
 80081fa:	210a      	movs	r1, #10
 80081fc:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80081fe:	f7fe fb8f 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 8008202:	b940      	cbnz	r0, 8008216 <spiStart+0x146>
      rccEnableSPI2(true);
 8008204:	4a26      	ldr	r2, [pc, #152]	; (80082a0 <spiStart+0x1d0>)
 8008206:	69d3      	ldr	r3, [r2, #28]
 8008208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800820c:	61d3      	str	r3, [r2, #28]
 800820e:	e7c6      	b.n	800819e <spiStart+0xce>
      osalDbgAssert(!b, "stream already allocated");
 8008210:	4824      	ldr	r0, [pc, #144]	; (80082a4 <spiStart+0x1d4>)
 8008212:	f7fd fdb5 	bl	8005d80 <chSysHalt>
      osalDbgAssert(!b, "stream already allocated");
 8008216:	4823      	ldr	r0, [pc, #140]	; (80082a4 <spiStart+0x1d4>)
 8008218:	f7fd fdb2 	bl	8005d80 <chSysHalt>
      b = dmaStreamAllocate(spip->dmarx,
 800821c:	4a1e      	ldr	r2, [pc, #120]	; (8008298 <spiStart+0x1c8>)
 800821e:	210a      	movs	r1, #10
 8008220:	6a18      	ldr	r0, [r3, #32]
 8008222:	f7fe fb7d 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 8008226:	b968      	cbnz	r0, 8008244 <spiStart+0x174>
      b = dmaStreamAllocate(spip->dmatx,
 8008228:	481a      	ldr	r0, [pc, #104]	; (8008294 <spiStart+0x1c4>)
 800822a:	4603      	mov	r3, r0
 800822c:	4a1b      	ldr	r2, [pc, #108]	; (800829c <spiStart+0x1cc>)
 800822e:	210a      	movs	r1, #10
 8008230:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8008232:	f7fe fb75 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 8008236:	b940      	cbnz	r0, 800824a <spiStart+0x17a>
      rccEnableSPI3(true);
 8008238:	4a19      	ldr	r2, [pc, #100]	; (80082a0 <spiStart+0x1d0>)
 800823a:	69d3      	ldr	r3, [r2, #28]
 800823c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008240:	61d3      	str	r3, [r2, #28]
 8008242:	e7ac      	b.n	800819e <spiStart+0xce>
      osalDbgAssert(!b, "stream already allocated");
 8008244:	4817      	ldr	r0, [pc, #92]	; (80082a4 <spiStart+0x1d4>)
 8008246:	f7fd fd9b 	bl	8005d80 <chSysHalt>
      osalDbgAssert(!b, "stream already allocated");
 800824a:	4816      	ldr	r0, [pc, #88]	; (80082a4 <spiStart+0x1d4>)
 800824c:	f7fd fd98 	bl	8005d80 <chSysHalt>
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008252:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008256:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    spip->rxdmamode = (spip->rxdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800825a:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 800825c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800825e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
                      STM32_DMA_CR_PSIZE_HWORD | STM32_DMA_CR_MSIZE_HWORD;
 8008262:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    spip->txdmamode = (spip->txdmamode & ~STM32_DMA_CR_SIZE_MASK) |
 8008266:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008268:	e75a      	b.n	8008120 <spiStart+0x50>
    spip->rxdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 800826a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800826c:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8008270:	62a3      	str	r3, [r4, #40]	; 0x28
    spip->txdmamode |= (STM32_DMA_CR_CIRC | STM32_DMA_CR_HTIE);
 8008272:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008274:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 8008278:	62e3      	str	r3, [r4, #44]	; 0x2c
 800827a:	e75e      	b.n	800813a <spiStart+0x6a>
 800827c:	480a      	ldr	r0, [pc, #40]	; (80082a8 <spiStart+0x1d8>)
 800827e:	f7fd fd7f 	bl	8005d80 <chSysHalt>
 8008282:	bf00      	nop
 8008284:	0800b300 	.word	0x0800b300
 8008288:	200015d8 	.word	0x200015d8
 800828c:	200014d4 	.word	0x200014d4
 8008290:	20001504 	.word	0x20001504
 8008294:	20001534 	.word	0x20001534
 8008298:	080063e1 	.word	0x080063e1
 800829c:	080063c1 	.word	0x080063c1
 80082a0:	40021000 	.word	0x40021000
 80082a4:	0800b358 	.word	0x0800b358
 80082a8:	0800b0c8 	.word	0x0800b0c8
 80082ac:	00000000 	.word	0x00000000

080082b0 <Thread2>:
static THD_FUNCTION(Thread2, arg) {
 80082b0:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 80082b4:	4b34      	ldr	r3, [pc, #208]	; (8008388 <Thread2+0xd8>)
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	4a34      	ldr	r2, [pc, #208]	; (800838c <Thread2+0xdc>)
 80082ba:	619a      	str	r2, [r3, #24]
  chprintf((BaseSequentialStream*)&SD1,"Start Update\r\n");
 80082bc:	4934      	ldr	r1, [pc, #208]	; (8008390 <Thread2+0xe0>)
 80082be:	4835      	ldr	r0, [pc, #212]	; (8008394 <Thread2+0xe4>)
 80082c0:	f7fe fc3e 	bl	8006b40 <chprintf>
      palSetPad(GPIOB,DC);
 80082c4:	f44f 4880 	mov.w	r8, #16384	; 0x4000
 80082c8:	4f33      	ldr	r7, [pc, #204]	; (8008398 <Thread2+0xe8>)
 80082ca:	f207 16ff 	addw	r6, r7, #511	; 0x1ff
	    vbuf2[3-x][127-y] = 0xff;
 80082ce:	25ff      	movs	r5, #255	; 0xff
 80082d0:	e042      	b.n	8008358 <Thread2+0xa8>
	    vbuf2[3-x][127-y] = transpose(vbuf[x][y]);
 80082d2:	f89c 2000 	ldrb.w	r2, [ip]
  newchar = newchar | ((in & 0x01) << 7);
 80082d6:	01d3      	lsls	r3, r2, #7
 80082d8:	ea43 11d2 	orr.w	r1, r3, r2, lsr #7
  newchar = newchar | ((in & 0x40) >> 5);
 80082dc:	1153      	asrs	r3, r2, #5
 80082de:	f003 0302 	and.w	r3, r3, #2
  newchar = newchar | ((in & 0x01) << 7);
 80082e2:	430b      	orrs	r3, r1
  newchar = newchar | ((in & 0x20) >> 3);
 80082e4:	10d1      	asrs	r1, r2, #3
 80082e6:	f001 0104 	and.w	r1, r1, #4
  newchar = newchar | ((in & 0x01) << 7);
 80082ea:	430b      	orrs	r3, r1
  newchar = newchar | ((in & 0x10) >> 1);
 80082ec:	1051      	asrs	r1, r2, #1
 80082ee:	f001 0108 	and.w	r1, r1, #8
  newchar = newchar | ((in & 0x01) << 7);
 80082f2:	430b      	orrs	r3, r1
  newchar = newchar | ((in & 0x08) << 1);
 80082f4:	0051      	lsls	r1, r2, #1
 80082f6:	f001 0110 	and.w	r1, r1, #16
  newchar = newchar | ((in & 0x01) << 7);
 80082fa:	430b      	orrs	r3, r1
  newchar = newchar | ((in & 0x04) << 3);
 80082fc:	00d1      	lsls	r1, r2, #3
 80082fe:	f001 0120 	and.w	r1, r1, #32
  newchar = newchar | ((in & 0x01) << 7);
 8008302:	430b      	orrs	r3, r1
  newchar = newchar | ((in & 0x02) << 5);
 8008304:	0152      	lsls	r2, r2, #5
 8008306:	f002 0240 	and.w	r2, r2, #64	; 0x40
  newchar = newchar | ((in & 0x01) << 7);
 800830a:	431a      	orrs	r2, r3
	    vbuf2[3-x][127-y] = transpose(vbuf[x][y]);
 800830c:	7002      	strb	r2, [r0, #0]
 800830e:	3801      	subs	r0, #1
 8008310:	f10c 0c01 	add.w	ip, ip, #1
	for (y=0;y<128;y++)
 8008314:	4570      	cmp	r0, lr
 8008316:	d003      	beq.n	8008320 <Thread2+0x70>
	  if (blink==0)
 8008318:	2c00      	cmp	r4, #0
 800831a:	d1da      	bne.n	80082d2 <Thread2+0x22>
	    vbuf2[3-x][127-y] = 0xff;
 800831c:	7005      	strb	r5, [r0, #0]
 800831e:	e7f6      	b.n	800830e <Thread2+0x5e>
 8008320:	f1a9 0980 	sub.w	r9, r9, #128	; 0x80
      for (x=0;x<4;x++)
 8008324:	f519 7f00 	cmn.w	r9, #512	; 0x200
 8008328:	d006      	beq.n	8008338 <Thread2+0x88>
 800832a:	eb06 0009 	add.w	r0, r6, r9
 800832e:	ebab 0c09 	sub.w	ip, fp, r9
 8008332:	eb0a 0e09 	add.w	lr, sl, r9
 8008336:	e7ef      	b.n	8008318 <Thread2+0x68>
      spiSend(&SPID2,128*4,&vbuf2);
 8008338:	4c18      	ldr	r4, [pc, #96]	; (800839c <Thread2+0xec>)
 800833a:	463a      	mov	r2, r7
 800833c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008340:	4620      	mov	r0, r4
 8008342:	f7ff fd8d 	bl	8007e60 <spiSend>
      spiUnselect(&SPID2);
 8008346:	4620      	mov	r0, r4
 8008348:	f7ff fdfa 	bl	8007f40 <spiUnselect>
      spiStop(&SPID2);
 800834c:	4620      	mov	r0, r4
 800834e:	f7ff fe57 	bl	8008000 <spiStop>
      chThdSleepMilliseconds(1);
 8008352:	200a      	movs	r0, #10
 8008354:	f7ff fba4 	bl	8007aa0 <chThdSleep>
      blink = palReadPad(GPIOC,6);
 8008358:	4b11      	ldr	r3, [pc, #68]	; (80083a0 <Thread2+0xf0>)
 800835a:	691c      	ldr	r4, [r3, #16]
 800835c:	f004 0440 	and.w	r4, r4, #64	; 0x40
      palSetPad(GPIOB,DC);
 8008360:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008364:	f8a3 8018 	strh.w	r8, [r3, #24]
      spiStart(&SPID2,&std_spicfg3);
 8008368:	f8df 9030 	ldr.w	r9, [pc, #48]	; 800839c <Thread2+0xec>
 800836c:	490d      	ldr	r1, [pc, #52]	; (80083a4 <Thread2+0xf4>)
 800836e:	4648      	mov	r0, r9
 8008370:	f7ff feae 	bl	80080d0 <spiStart>
      spiSelect(&SPID2);
 8008374:	4648      	mov	r0, r9
 8008376:	f7ff fe13 	bl	8007fa0 <spiSelect>
 800837a:	f04f 0900 	mov.w	r9, #0
 800837e:	f8df b028 	ldr.w	fp, [pc, #40]	; 80083a8 <Thread2+0xf8>
 8008382:	f207 1a7f 	addw	sl, r7, #383	; 0x17f
 8008386:	e7d0      	b.n	800832a <Thread2+0x7a>
 8008388:	200015d8 	.word	0x200015d8
 800838c:	0800afe4 	.word	0x0800afe4
 8008390:	0800aff4 	.word	0x0800aff4
 8008394:	20001414 	.word	0x20001414
 8008398:	2000285c 	.word	0x2000285c
 800839c:	20001504 	.word	0x20001504
 80083a0:	48000800 	.word	0x48000800
 80083a4:	0800d1a0 	.word	0x0800d1a0
 80083a8:	2000265c 	.word	0x2000265c
 80083ac:	00000000 	.word	0x00000000

080083b0 <get_temp>:
float get_temp(device){
 80083b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    palClearPad(GPIOC,cp);
 80083b4:	f04f 0801 	mov.w	r8, #1
 80083b8:	fa08 f000 	lsl.w	r0, r8, r0
 80083bc:	b285      	uxth	r5, r0
 80083be:	4f66      	ldr	r7, [pc, #408]	; (8008558 <get_temp+0x1a8>)
 80083c0:	837d      	strh	r5, [r7, #26]
    spiStart(&SPID3,&std_spicfg0);
 80083c2:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8008580 <get_temp+0x1d0>
 80083c6:	4c65      	ldr	r4, [pc, #404]	; (800855c <get_temp+0x1ac>)
 80083c8:	4649      	mov	r1, r9
 80083ca:	4620      	mov	r0, r4
 80083cc:	f7ff fe80 	bl	80080d0 <spiStart>
    spiSelect(&SPID3);
 80083d0:	4620      	mov	r0, r4
 80083d2:	f7ff fde5 	bl	8007fa0 <spiSelect>
    txbuf[0] = location;
 80083d6:	4e62      	ldr	r6, [pc, #392]	; (8008560 <get_temp+0x1b0>)
 80083d8:	2380      	movs	r3, #128	; 0x80
 80083da:	7033      	strb	r3, [r6, #0]
    txbuf[1] = data;
 80083dc:	23d0      	movs	r3, #208	; 0xd0
 80083de:	7073      	strb	r3, [r6, #1]
    spiSend(&SPID3,2,&txbuf);
 80083e0:	4632      	mov	r2, r6
 80083e2:	2102      	movs	r1, #2
 80083e4:	4620      	mov	r0, r4
 80083e6:	f7ff fd3b 	bl	8007e60 <spiSend>
    spiUnselect(&SPID3);
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff fda8 	bl	8007f40 <spiUnselect>
    spiStop(&SPID3);
 80083f0:	4620      	mov	r0, r4
 80083f2:	f7ff fe05 	bl	8008000 <spiStop>
    palSetPad(GPIOC,cp);
 80083f6:	833d      	strh	r5, [r7, #24]
    palClearPad(GPIOC,cp);
 80083f8:	837d      	strh	r5, [r7, #26]
    spiStart(&SPID3,&std_spicfg0);
 80083fa:	4649      	mov	r1, r9
 80083fc:	4620      	mov	r0, r4
 80083fe:	f7ff fe67 	bl	80080d0 <spiStart>
    spiSelect(&SPID3);
 8008402:	4620      	mov	r0, r4
 8008404:	f7ff fdcc 	bl	8007fa0 <spiSelect>
    txbuf[0] = location;
 8008408:	2300      	movs	r3, #0
 800840a:	7033      	strb	r3, [r6, #0]
    spiSend(&SPID3,1,&txbuf);
 800840c:	4632      	mov	r2, r6
 800840e:	4641      	mov	r1, r8
 8008410:	4620      	mov	r0, r4
 8008412:	f7ff fd25 	bl	8007e60 <spiSend>
 */
void spiReceive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgCheck((spip != NULL) && (n > 0U) && (rxbuf != NULL));
#if SPI_SUPPORTS_CIRCULAR
  osalDbgCheck((spip->config->circular == false) || ((n & 1U) == 0U));
 8008416:	6863      	ldr	r3, [r4, #4]
 8008418:	781b      	ldrb	r3, [r3, #0]
 800841a:	b113      	cbz	r3, 8008422 <get_temp+0x72>
 800841c:	4851      	ldr	r0, [pc, #324]	; (8008564 <get_temp+0x1b4>)
 800841e:	f7fd fcaf 	bl	8005d80 <chSysHalt>
 8008422:	2320      	movs	r3, #32
 8008424:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8008428:	f7fe ffea 	bl	8007400 <_dbg_check_lock>
#endif

  osalSysLock();
  osalDbgAssert(spip->state == SPI_READY, "not ready");
 800842c:	4b4b      	ldr	r3, [pc, #300]	; (800855c <get_temp+0x1ac>)
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	2b02      	cmp	r3, #2
 8008432:	d002      	beq.n	800843a <get_temp+0x8a>
 8008434:	484b      	ldr	r0, [pc, #300]	; (8008564 <get_temp+0x1b4>)
 8008436:	f7fd fca3 	bl	8005d80 <chSysHalt>
  spiStartReceiveI(spip, n, rxbuf);
 800843a:	4848      	ldr	r0, [pc, #288]	; (800855c <get_temp+0x1ac>)
 800843c:	2303      	movs	r3, #3
 800843e:	7003      	strb	r3, [r0, #0]
 */
void spi_lld_receive(SPIDriver *spip, size_t n, void *rxbuf) {

  osalDbgAssert(n < 65536, "unsupported DMA transfer size");

  dmaStreamSetMemory0(spip->dmarx, rxbuf);
 8008440:	6a02      	ldr	r2, [r0, #32]
 8008442:	6852      	ldr	r2, [r2, #4]
 8008444:	4948      	ldr	r1, [pc, #288]	; (8008568 <get_temp+0x1b8>)
 8008446:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmarx, n);
 8008448:	6a02      	ldr	r2, [r0, #32]
 800844a:	6852      	ldr	r2, [r2, #4]
 800844c:	6053      	str	r3, [r2, #4]
  dmaStreamSetMode(spip->dmarx, spip->rxdmamode | STM32_DMA_CR_MINC);
 800844e:	6a02      	ldr	r2, [r0, #32]
 8008450:	6851      	ldr	r1, [r2, #4]
 8008452:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008454:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008458:	600a      	str	r2, [r1, #0]

  dmaStreamSetMemory0(spip->dmatx, &dummytx);
 800845a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800845c:	6852      	ldr	r2, [r2, #4]
 800845e:	4943      	ldr	r1, [pc, #268]	; (800856c <get_temp+0x1bc>)
 8008460:	60d1      	str	r1, [r2, #12]
  dmaStreamSetTransactionSize(spip->dmatx, n);
 8008462:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8008464:	6852      	ldr	r2, [r2, #4]
 8008466:	6053      	str	r3, [r2, #4]
  dmaStreamSetMode(spip->dmatx, spip->txdmamode);
 8008468:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 800846e:	601a      	str	r2, [r3, #0]

  dmaStreamEnable(spip->dmarx);
 8008470:	6a03      	ldr	r3, [r0, #32]
 8008472:	685a      	ldr	r2, [r3, #4]
 8008474:	6813      	ldr	r3, [r2, #0]
 8008476:	f043 0301 	orr.w	r3, r3, #1
 800847a:	6013      	str	r3, [r2, #0]
  dmaStreamEnable(spip->dmatx);
 800847c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	6813      	ldr	r3, [r2, #0]
 8008482:	f043 0301 	orr.w	r3, r3, #1
 8008486:	6013      	str	r3, [r2, #0]
 8008488:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800848c:	3008      	adds	r0, #8
 800848e:	f7fe ff1f 	bl	80072d0 <chThdSuspendTimeoutS>
  _dbg_check_unlock();
 8008492:	f7fe ff6d 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008496:	4b36      	ldr	r3, [pc, #216]	; (8008570 <get_temp+0x1c0>)
 8008498:	681a      	ldr	r2, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d004      	beq.n	80084a8 <get_temp+0xf8>
 800849e:	699b      	ldr	r3, [r3, #24]
 80084a0:	6899      	ldr	r1, [r3, #8]
 80084a2:	6893      	ldr	r3, [r2, #8]
 80084a4:	4299      	cmp	r1, r3
 80084a6:	d348      	bcc.n	800853a <get_temp+0x18a>
 80084a8:	2300      	movs	r3, #0
 80084aa:	f383 8811 	msr	BASEPRI, r3
    spiUnselect(&SPID3);
 80084ae:	4c2b      	ldr	r4, [pc, #172]	; (800855c <get_temp+0x1ac>)
 80084b0:	4620      	mov	r0, r4
 80084b2:	f7ff fd45 	bl	8007f40 <spiUnselect>
    spiStop(&SPID3);
 80084b6:	4620      	mov	r0, r4
 80084b8:	f7ff fda2 	bl	8008000 <spiStop>
    palSetPad(GPIOC,cp);
 80084bc:	4b26      	ldr	r3, [pc, #152]	; (8008558 <get_temp+0x1a8>)
 80084be:	831d      	strh	r5, [r3, #24]
    hsb = rxbuf[1];
 80084c0:	4b29      	ldr	r3, [pc, #164]	; (8008568 <get_temp+0x1b8>)
    result = (hsb << 8) + lsb;
 80084c2:	785a      	ldrb	r2, [r3, #1]
 80084c4:	7898      	ldrb	r0, [r3, #2]
 80084c6:	eb00 2002 	add.w	r0, r0, r2, lsl #8
    result = (result*430.0) / 32768.0;	  
 80084ca:	ee07 0a90 	vmov	s15, r0
 80084ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084d2:	ee17 0a90 	vmov	r0, s15
 80084d6:	f7f8 f9a1 	bl	800081c <__aeabi_f2d>
 80084da:	a319      	add	r3, pc, #100	; (adr r3, 8008540 <get_temp+0x190>)
 80084dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084e0:	f7f8 f9f4 	bl	80008cc <__aeabi_dmul>
 80084e4:	2200      	movs	r2, #0
 80084e6:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80084ea:	f7f8 f9ef 	bl	80008cc <__aeabi_dmul>
 80084ee:	f7f8 fcc5 	bl	8000e7c <__aeabi_d2f>
    pt100temp = z2 + (z3 * result);
 80084f2:	eddf 7a20 	vldr	s15, [pc, #128]	; 8008574 <get_temp+0x1c4>
 80084f6:	ee07 0a10 	vmov	s14, r0
 80084fa:	ee67 7a27 	vmul.f32	s15, s14, s15
    pt100temp = (sqrt(pt100temp) + z1) / z4;
 80084fe:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8008578 <get_temp+0x1c8>
 8008502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008506:	ee17 0a90 	vmov	r0, s15
 800850a:	f7f8 f987 	bl	800081c <__aeabi_f2d>
 800850e:	ec41 0b10 	vmov	d0, r0, r1
 8008512:	f7f7 fef7 	bl	8000304 <sqrt>
 8008516:	a30c      	add	r3, pc, #48	; (adr r3, 8008548 <get_temp+0x198>)
 8008518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800851c:	ec51 0b10 	vmov	r0, r1, d0
 8008520:	f7f8 f81c 	bl	800055c <__aeabi_dsub>
 8008524:	a30a      	add	r3, pc, #40	; (adr r3, 8008550 <get_temp+0x1a0>)
 8008526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800852a:	f7f8 faf9 	bl	8000b20 <__aeabi_ddiv>
 800852e:	f7f8 fca5 	bl	8000e7c <__aeabi_d2f>
}
 8008532:	ee00 0a10 	vmov	s0, r0
 8008536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800853a:	4810      	ldr	r0, [pc, #64]	; (800857c <get_temp+0x1cc>)
 800853c:	f7fd fc20 	bl	8005d80 <chSysHalt>
 8008540:	00000000 	.word	0x00000000
 8008544:	407ae000 	.word	0x407ae000
 8008548:	40000000 	.word	0x40000000
 800854c:	3f700226 	.word	0x3f700226
 8008550:	e0000000 	.word	0xe0000000
 8008554:	beb360af 	.word	0xbeb360af
 8008558:	48000800 	.word	0x48000800
 800855c:	20001534 	.word	0x20001534
 8008560:	20002658 	.word	0x20002658
 8008564:	0800b4a0 	.word	0x0800b4a0
 8008568:	200024f0 	.word	0x200024f0
 800856c:	0800b6d0 	.word	0x0800b6d0
 8008570:	200015d8 	.word	0x200015d8
 8008574:	b2c66d70 	.word	0xb2c66d70
 8008578:	37938317 	.word	0x37938317
 800857c:	0800b0c8 	.word	0x0800b0c8
 8008580:	0800d18c 	.word	0x0800d18c
	...

08008590 <write_oled_command>:
{
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4605      	mov	r5, r0
    palClearPad(GPIOB,DC);
 8008594:	4b0c      	ldr	r3, [pc, #48]	; (80085c8 <write_oled_command+0x38>)
 8008596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800859a:	835a      	strh	r2, [r3, #26]
  spiStart(&SPID2,&std_spicfg3);
 800859c:	4c0b      	ldr	r4, [pc, #44]	; (80085cc <write_oled_command+0x3c>)
 800859e:	490c      	ldr	r1, [pc, #48]	; (80085d0 <write_oled_command+0x40>)
 80085a0:	4620      	mov	r0, r4
 80085a2:	f7ff fd95 	bl	80080d0 <spiStart>
  spiSelect(&SPID2);
 80085a6:	4620      	mov	r0, r4
 80085a8:	f7ff fcfa 	bl	8007fa0 <spiSelect>
  txbuf[0] = location;
 80085ac:	4a09      	ldr	r2, [pc, #36]	; (80085d4 <write_oled_command+0x44>)
 80085ae:	7015      	strb	r5, [r2, #0]
  spiSend(&SPID2,1,&txbuf);
 80085b0:	2101      	movs	r1, #1
 80085b2:	4620      	mov	r0, r4
 80085b4:	f7ff fc54 	bl	8007e60 <spiSend>
  spiUnselect(&SPID2);
 80085b8:	4620      	mov	r0, r4
 80085ba:	f7ff fcc1 	bl	8007f40 <spiUnselect>
  spiStop(&SPID2);
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff fd1e 	bl	8008000 <spiStop>
}
 80085c4:	bd38      	pop	{r3, r4, r5, pc}
 80085c6:	bf00      	nop
 80085c8:	48000400 	.word	0x48000400
 80085cc:	20001504 	.word	0x20001504
 80085d0:	0800d1a0 	.word	0x0800d1a0
 80085d4:	20002658 	.word	0x20002658
	...

080085e0 <sdStart>:
void sdStart(SerialDriver *sdp, const SerialConfig *config) {
 80085e0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(sdp != NULL);
 80085e2:	b170      	cbz	r0, 8008602 <sdStart+0x22>
 80085e4:	460c      	mov	r4, r1
 80085e6:	4605      	mov	r5, r0
 80085e8:	2320      	movs	r3, #32
 80085ea:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80085ee:	f7fe ff07 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80085f2:	7a2a      	ldrb	r2, [r5, #8]
 80085f4:	1e53      	subs	r3, r2, #1
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	d905      	bls.n	8008608 <sdStart+0x28>
 80085fc:	4829      	ldr	r0, [pc, #164]	; (80086a4 <sdStart+0xc4>)
 80085fe:	f7fd fbbf 	bl	8005d80 <chSysHalt>
  osalDbgCheck(sdp != NULL);
 8008602:	4828      	ldr	r0, [pc, #160]	; (80086a4 <sdStart+0xc4>)
 8008604:	f7fd fbbc 	bl	8005d80 <chSysHalt>
 * @notapi
 */
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;
 8008608:	4b27      	ldr	r3, [pc, #156]	; (80086a8 <sdStart+0xc8>)
 800860a:	2c00      	cmp	r4, #0
 800860c:	bf08      	it	eq
 800860e:	461c      	moveq	r4, r3

  if (sdp->state == SD_STOP) {
 8008610:	2a01      	cmp	r2, #1
 8008612:	d024      	beq.n	800865e <sdStart+0x7e>
  USART_TypeDef *u = sdp->usart;
 8008614:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  u->BRR = (uint32_t)(sdp->clock / config->speed);
 8008616:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8008618:	6821      	ldr	r1, [r4, #0]
 800861a:	fbb2 f2f1 	udiv	r2, r2, r1
 800861e:	60da      	str	r2, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8008620:	68a2      	ldr	r2, [r4, #8]
 8008622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008626:	605a      	str	r2, [r3, #4]
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8008628:	68e2      	ldr	r2, [r4, #12]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	609a      	str	r2, [r3, #8]
                         USART_CR1_RXNEIE | USART_CR1_TE |
 8008630:	6862      	ldr	r2, [r4, #4]
 8008632:	f442 7296 	orr.w	r2, r2, #300	; 0x12c
 8008636:	f042 0201 	orr.w	r2, r2, #1
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800863a:	601a      	str	r2, [r3, #0]
  u->ICR = 0xFFFFFFFFU;
 800863c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008640:	621a      	str	r2, [r3, #32]
  if ((config->cr1 & USART_CR1_PCE) != 0U) {
 8008642:	6863      	ldr	r3, [r4, #4]
 8008644:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8008648:	d023      	beq.n	8008692 <sdStart+0xb2>
    switch (config->cr1 & (USART_CR1_M_1 | USART_CR1_M_0)) {
 800864a:	f013 2310 	ands.w	r3, r3, #268439552	; 0x10001000
 800864e:	d018      	beq.n	8008682 <sdStart+0xa2>
 8008650:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008654:	d019      	beq.n	800868a <sdStart+0xaa>
      sdp->rxmask = 0xFF;
 8008656:	23ff      	movs	r3, #255	; 0xff
 8008658:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
 800865c:	e01c      	b.n	8008698 <sdStart+0xb8>
#if STM32_SERIAL_USE_USART1
    if (&SD1 == sdp) {
 800865e:	4b13      	ldr	r3, [pc, #76]	; (80086ac <sdStart+0xcc>)
 8008660:	429d      	cmp	r5, r3
 8008662:	d008      	beq.n	8008676 <sdStart+0x96>
      rccEnableUSART1(true);
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
 8008664:	4b12      	ldr	r3, [pc, #72]	; (80086b0 <sdStart+0xd0>)
 8008666:	429d      	cmp	r5, r3
 8008668:	d1d4      	bne.n	8008614 <sdStart+0x34>
      rccEnableUSART2(true);
 800866a:	4a12      	ldr	r2, [pc, #72]	; (80086b4 <sdStart+0xd4>)
 800866c:	69d3      	ldr	r3, [r2, #28]
 800866e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008672:	61d3      	str	r3, [r2, #28]
 8008674:	e7ce      	b.n	8008614 <sdStart+0x34>
      rccEnableUSART1(true);
 8008676:	4a0f      	ldr	r2, [pc, #60]	; (80086b4 <sdStart+0xd4>)
 8008678:	6993      	ldr	r3, [r2, #24]
 800867a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800867e:	6193      	str	r3, [r2, #24]
 8008680:	e7c8      	b.n	8008614 <sdStart+0x34>
      sdp->rxmask = 0x7F;
 8008682:	237f      	movs	r3, #127	; 0x7f
 8008684:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
 8008688:	e006      	b.n	8008698 <sdStart+0xb8>
      sdp->rxmask = 0x3F;
 800868a:	233f      	movs	r3, #63	; 0x3f
 800868c:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
 8008690:	e002      	b.n	8008698 <sdStart+0xb8>
    sdp->rxmask = 0xFF;
 8008692:	23ff      	movs	r3, #255	; 0xff
 8008694:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
  sdp->state = SD_READY;
 8008698:	2302      	movs	r3, #2
 800869a:	722b      	strb	r3, [r5, #8]
  chSysUnlock();
 800869c:	f7fe fe98 	bl	80073d0 <chSysUnlock.lto_priv.4>
}
 80086a0:	bd38      	pop	{r3, r4, r5, pc}
 80086a2:	bf00      	nop
 80086a4:	0800b438 	.word	0x0800b438
 80086a8:	0800b6c0 	.word	0x0800b6c0
 80086ac:	20001414 	.word	0x20001414
 80086b0:	20001474 	.word	0x20001474
 80086b4:	40021000 	.word	0x40021000
	...

080086c0 <adcConvert>:
 * @api
 */
msg_t adcConvert(ADCDriver *adcp,
                 const ADCConversionGroup *grpp,
                 adcsample_t *samples,
                 size_t depth) {
 80086c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086c2:	4604      	mov	r4, r0
 80086c4:	460d      	mov	r5, r1
 80086c6:	4617      	mov	r7, r2
 80086c8:	461e      	mov	r6, r3
 80086ca:	2320      	movs	r3, #32
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f7fe fe96 	bl	8007400 <_dbg_check_lock>
  msg_t msg;

  osalSysLock();
  osalDbgAssert(adcp->thread == NULL, "already waiting");
 80086d4:	6963      	ldr	r3, [r4, #20]
 80086d6:	b113      	cbz	r3, 80086de <adcConvert+0x1e>
 80086d8:	4840      	ldr	r0, [pc, #256]	; (80087dc <adcConvert+0x11c>)
 80086da:	f7fd fb51 	bl	8005d80 <chSysHalt>
  osalDbgCheckClassI();
 80086de:	f7fd fb8f 	bl	8005e00 <chDbgCheckClassI>
  osalDbgCheck((adcp != NULL) && (grpp != NULL) && (samples != NULL) &&
 80086e2:	b13c      	cbz	r4, 80086f4 <adcConvert+0x34>
 80086e4:	b135      	cbz	r5, 80086f4 <adcConvert+0x34>
 80086e6:	b12f      	cbz	r7, 80086f4 <adcConvert+0x34>
 80086e8:	b126      	cbz	r6, 80086f4 <adcConvert+0x34>
 80086ea:	2e01      	cmp	r6, #1
 80086ec:	d005      	beq.n	80086fa <adcConvert+0x3a>
 80086ee:	f016 0f01 	tst.w	r6, #1
 80086f2:	d002      	beq.n	80086fa <adcConvert+0x3a>
 80086f4:	483a      	ldr	r0, [pc, #232]	; (80087e0 <adcConvert+0x120>)
 80086f6:	f7fd fb43 	bl	8005d80 <chSysHalt>
  osalDbgAssert((adcp->state == ADC_READY) ||
 80086fa:	7823      	ldrb	r3, [r4, #0]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d006      	beq.n	800870e <adcConvert+0x4e>
 8008700:	3b04      	subs	r3, #4
 8008702:	b2db      	uxtb	r3, r3
 8008704:	2b01      	cmp	r3, #1
 8008706:	d902      	bls.n	800870e <adcConvert+0x4e>
 8008708:	4835      	ldr	r0, [pc, #212]	; (80087e0 <adcConvert+0x120>)
 800870a:	f7fd fb39 	bl	8005d80 <chSysHalt>
  adcp->samples  = samples;
 800870e:	60a7      	str	r7, [r4, #8]
  adcp->depth    = depth;
 8008710:	60e6      	str	r6, [r4, #12]
  adcp->grpp     = grpp;
 8008712:	6125      	str	r5, [r4, #16]
  adcp->state    = ADC_ACTIVE;
 8008714:	2303      	movs	r3, #3
 8008716:	7023      	strb	r3, [r4, #0]
  dmamode = adcp->dmamode;
 8008718:	6b61      	ldr	r1, [r4, #52]	; 0x34
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
 800871a:	68ea      	ldr	r2, [r5, #12]
  if (grpp->circular) {
 800871c:	782b      	ldrb	r3, [r5, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d056      	beq.n	80087d0 <adcConvert+0x110>
    cfgr |= ADC_CFGR_DMACFG_CIRCULAR;
 8008722:	f042 0203 	orr.w	r2, r2, #3
    if (adcp->depth > 1) {
 8008726:	2e01      	cmp	r6, #1
    dmamode |= STM32_DMA_CR_CIRC;
 8008728:	bf94      	ite	ls
 800872a:	f041 0120 	orrls.w	r1, r1, #32
      dmamode |= STM32_DMA_CR_HTIE;
 800872e:	f041 0124 	orrhi.w	r1, r1, #36	; 0x24
  dmaStreamSetMemory0(adcp->dmastp, adcp->samples);
 8008732:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60df      	str	r7, [r3, #12]
  dmaStreamSetTransactionSize(adcp->dmastp, (uint32_t)grpp->num_channels *
 8008738:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800873a:	6858      	ldr	r0, [r3, #4]
 800873c:	886e      	ldrh	r6, [r5, #2]
 800873e:	68e3      	ldr	r3, [r4, #12]
 8008740:	fb03 f306 	mul.w	r3, r3, r6
 8008744:	6043      	str	r3, [r0, #4]
  dmaStreamSetMode(adcp->dmastp, dmamode);
 8008746:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	6019      	str	r1, [r3, #0]
  dmaStreamEnable(adcp->dmastp);
 800874c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800874e:	6859      	ldr	r1, [r3, #4]
 8008750:	680b      	ldr	r3, [r1, #0]
 8008752:	f043 0301 	orr.w	r3, r3, #1
 8008756:	600b      	str	r3, [r1, #0]
  adcp->adcm->ISR   = adcp->adcm->ISR;
 8008758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800875a:	6819      	ldr	r1, [r3, #0]
 800875c:	6019      	str	r1, [r3, #0]
  adcp->adcm->IER   = ADC_IER_OVR | ADC_IER_AWD1;
 800875e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008760:	2190      	movs	r1, #144	; 0x90
 8008762:	6059      	str	r1, [r3, #4]
  adcp->adcm->TR1   = grpp->tr1;
 8008764:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008766:	6929      	ldr	r1, [r5, #16]
 8008768:	6219      	str	r1, [r3, #32]
  adcp->adcm->SMPR1 = grpp->smpr[0];
 800876a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800876c:	6969      	ldr	r1, [r5, #20]
 800876e:	6159      	str	r1, [r3, #20]
  adcp->adcm->SMPR2 = grpp->smpr[1];
 8008770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008772:	69a9      	ldr	r1, [r5, #24]
 8008774:	6199      	str	r1, [r3, #24]
  adcp->adcm->SQR1  = grpp->sqr[0] | ADC_SQR1_NUM_CH(grpp->num_channels);
 8008776:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8008778:	886b      	ldrh	r3, [r5, #2]
 800877a:	3b01      	subs	r3, #1
 800877c:	69e8      	ldr	r0, [r5, #28]
 800877e:	4303      	orrs	r3, r0
 8008780:	630b      	str	r3, [r1, #48]	; 0x30
  adcp->adcm->SQR2  = grpp->sqr[1];
 8008782:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008784:	6a29      	ldr	r1, [r5, #32]
 8008786:	6359      	str	r1, [r3, #52]	; 0x34
  adcp->adcm->SQR3  = grpp->sqr[2];
 8008788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800878a:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800878c:	6399      	str	r1, [r3, #56]	; 0x38
  adcp->adcm->SQR4  = grpp->sqr[3];
 800878e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008790:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8008792:	63d9      	str	r1, [r3, #60]	; 0x3c
  adcp->adcm->CFGR  = cfgr;
 8008794:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008796:	60da      	str	r2, [r3, #12]
  adcp->adcm->CR   |= ADC_CR_ADSTART;
 8008798:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800879a:	6893      	ldr	r3, [r2, #8]
 800879c:	f043 0304 	orr.w	r3, r3, #4
 80087a0:	6093      	str	r3, [r2, #8]
  return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 80087a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80087a6:	f104 0014 	add.w	r0, r4, #20
 80087aa:	f7fe fd91 	bl	80072d0 <chThdSuspendTimeoutS>
 80087ae:	4604      	mov	r4, r0
  _dbg_check_unlock();
 80087b0:	f7fe fdde 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80087b4:	4b0b      	ldr	r3, [pc, #44]	; (80087e4 <adcConvert+0x124>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d004      	beq.n	80087c6 <adcConvert+0x106>
 80087bc:	699b      	ldr	r3, [r3, #24]
 80087be:	6899      	ldr	r1, [r3, #8]
 80087c0:	6893      	ldr	r3, [r2, #8]
 80087c2:	4299      	cmp	r1, r3
 80087c4:	d307      	bcc.n	80087d6 <adcConvert+0x116>
 80087c6:	2300      	movs	r3, #0
 80087c8:	f383 8811 	msr	BASEPRI, r3
  adcStartConversionI(adcp, grpp, samples, depth);
  msg = osalThreadSuspendS(&adcp->thread);
  osalSysUnlock();
  return msg;
}
 80087cc:	4620      	mov	r0, r4
 80087ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cfgr    = grpp->cfgr | ADC_CFGR_DMAEN;
 80087d0:	f042 0201 	orr.w	r2, r2, #1
 80087d4:	e7ad      	b.n	8008732 <adcConvert+0x72>
 80087d6:	4804      	ldr	r0, [pc, #16]	; (80087e8 <adcConvert+0x128>)
 80087d8:	f7fd fad2 	bl	8005d80 <chSysHalt>
 80087dc:	0800b3cc 	.word	0x0800b3cc
 80087e0:	0800b374 	.word	0x0800b374
 80087e4:	200015d8 	.word	0x200015d8
 80087e8:	0800b0b0 	.word	0x0800b0b0
 80087ec:	00000000 	.word	0x00000000

080087f0 <adcStart>:
void adcStart(ADCDriver *adcp, const ADCConfig *config) {
 80087f0:	b538      	push	{r3, r4, r5, lr}
  osalDbgCheck(adcp != NULL);
 80087f2:	b170      	cbz	r0, 8008812 <adcStart+0x22>
 80087f4:	460d      	mov	r5, r1
 80087f6:	4604      	mov	r4, r0
 80087f8:	2320      	movs	r3, #32
 80087fa:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80087fe:	f7fe fdff 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 8008802:	7822      	ldrb	r2, [r4, #0]
 8008804:	1e53      	subs	r3, r2, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d905      	bls.n	8008818 <adcStart+0x28>
 800880c:	4858      	ldr	r0, [pc, #352]	; (8008970 <adcStart+0x180>)
 800880e:	f7fd fab7 	bl	8005d80 <chSysHalt>
  osalDbgCheck(adcp != NULL);
 8008812:	4857      	ldr	r0, [pc, #348]	; (8008970 <adcStart+0x180>)
 8008814:	f7fd fab4 	bl	8005d80 <chSysHalt>
  if (adcp->config == NULL) {
 8008818:	b1a5      	cbz	r5, 8008844 <adcStart+0x54>
  adcp->config = config;
 800881a:	6065      	str	r5, [r4, #4]
  if (adcp->state == ADC_STOP) {
 800881c:	2a01      	cmp	r2, #1
 800881e:	d014      	beq.n	800884a <adcStart+0x5a>
  adcp->state = ADC_READY;
 8008820:	2302      	movs	r3, #2
 8008822:	7023      	strb	r3, [r4, #0]
  _dbg_check_unlock();
 8008824:	f7fe fda4 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8008828:	4b52      	ldr	r3, [pc, #328]	; (8008974 <adcStart+0x184>)
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	429a      	cmp	r2, r3
 800882e:	d005      	beq.n	800883c <adcStart+0x4c>
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	6899      	ldr	r1, [r3, #8]
 8008834:	6893      	ldr	r3, [r2, #8]
 8008836:	4299      	cmp	r1, r3
 8008838:	f0c0 8096 	bcc.w	8008968 <adcStart+0x178>
 800883c:	2300      	movs	r3, #0
 800883e:	f383 8811 	msr	BASEPRI, r3
}
 8008842:	bd38      	pop	{r3, r4, r5, pc}
    adcp->config = &default_config;
 8008844:	4b4c      	ldr	r3, [pc, #304]	; (8008978 <adcStart+0x188>)
 8008846:	6063      	str	r3, [r4, #4]
 8008848:	e7e8      	b.n	800881c <adcStart+0x2c>
    if (&ADCD1 == adcp) {
 800884a:	4b4c      	ldr	r3, [pc, #304]	; (800897c <adcStart+0x18c>)
 800884c:	429c      	cmp	r4, r3
 800884e:	d038      	beq.n	80088c2 <adcStart+0xd2>
    if (&ADCD2 == adcp) {
 8008850:	4b4b      	ldr	r3, [pc, #300]	; (8008980 <adcStart+0x190>)
 8008852:	429c      	cmp	r4, r3
 8008854:	d049      	beq.n	80088ea <adcStart+0xfa>
    if (&ADCD3 == adcp) {
 8008856:	4b4b      	ldr	r3, [pc, #300]	; (8008984 <adcStart+0x194>)
 8008858:	429c      	cmp	r4, r3
 800885a:	d05a      	beq.n	8008912 <adcStart+0x122>
    if (&ADCD4 == adcp) {
 800885c:	4b4a      	ldr	r3, [pc, #296]	; (8008988 <adcStart+0x198>)
 800885e:	429c      	cmp	r4, r3
 8008860:	d06b      	beq.n	800893a <adcStart+0x14a>
    dmaStreamSetPeripheral(adcp->dmastp, &adcp->adcm->DR);
 8008862:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008868:	3340      	adds	r3, #64	; 0x40
 800886a:	6093      	str	r3, [r2, #8]
    adcp->adcm->DIFSEL = adcp->config->difsel;
 800886c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800886e:	6862      	ldr	r2, [r4, #4]
 8008870:	6812      	ldr	r2, [r2, #0]
 8008872:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
 8008876:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008878:	2200      	movs	r2, #0
 800887a:	609a      	str	r2, [r3, #8]
  adcp->adcm->CR = ADC_CR_ADVREGEN_0;
 800887c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800887e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008882:	609a      	str	r2, [r3, #8]
 8008884:	4b41      	ldr	r3, [pc, #260]	; (800898c <adcStart+0x19c>)
 8008886:	6859      	ldr	r1, [r3, #4]
 8008888:	461a      	mov	r2, r3
 800888a:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)((cnt - start) < (end - start));
 800888c:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 800888e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8008892:	d3fa      	bcc.n	800888a <adcStart+0x9a>
  osalDbgAssert(adcp->adcm->CR == ADC_CR_ADVREGEN_0, "invalid register state");
 8008894:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008896:	689a      	ldr	r2, [r3, #8]
 8008898:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 800889c:	d161      	bne.n	8008962 <adcStart+0x172>
  adcp->adcm->CR |= ADC_CR_ADCAL;
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088a4:	609a      	str	r2, [r3, #8]
  while ((adcp->adcm->CR & ADC_CR_ADCAL) != 0)
 80088a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80088a8:	6893      	ldr	r3, [r2, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dbfc      	blt.n	80088a8 <adcStart+0xb8>
  adcp->adcm->CR |= ADC_CR_ADEN;
 80088ae:	6893      	ldr	r3, [r2, #8]
 80088b0:	f043 0301 	orr.w	r3, r3, #1
 80088b4:	6093      	str	r3, [r2, #8]
  while ((adcp->adcm->ISR & ADC_ISR_ADRD) == 0)
 80088b6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80088b8:	6813      	ldr	r3, [r2, #0]
 80088ba:	f013 0f01 	tst.w	r3, #1
 80088be:	d0fb      	beq.n	80088b8 <adcStart+0xc8>
 80088c0:	e7ae      	b.n	8008820 <adcStart+0x30>
      b = dmaStreamAllocate(adcp->dmastp,
 80088c2:	4a33      	ldr	r2, [pc, #204]	; (8008990 <adcStart+0x1a0>)
 80088c4:	2105      	movs	r1, #5
 80088c6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088c8:	f7fe f82a 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80088cc:	b950      	cbnz	r0, 80088e4 <adcStart+0xf4>
      clkmask |= (1 << 0);
 80088ce:	4a31      	ldr	r2, [pc, #196]	; (8008994 <adcStart+0x1a4>)
 80088d0:	6813      	ldr	r3, [r2, #0]
 80088d2:	f043 0301 	orr.w	r3, r3, #1
 80088d6:	6013      	str	r3, [r2, #0]
      rccEnableADC12(true);
 80088d8:	4a2f      	ldr	r2, [pc, #188]	; (8008998 <adcStart+0x1a8>)
 80088da:	6953      	ldr	r3, [r2, #20]
 80088dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088e0:	6153      	str	r3, [r2, #20]
 80088e2:	e7bb      	b.n	800885c <adcStart+0x6c>
      osalDbgAssert(!b, "stream already allocated");
 80088e4:	482d      	ldr	r0, [pc, #180]	; (800899c <adcStart+0x1ac>)
 80088e6:	f7fd fa4b 	bl	8005d80 <chSysHalt>
      b = dmaStreamAllocate(adcp->dmastp,
 80088ea:	4a29      	ldr	r2, [pc, #164]	; (8008990 <adcStart+0x1a0>)
 80088ec:	2105      	movs	r1, #5
 80088ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80088f0:	f7fe f816 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 80088f4:	b950      	cbnz	r0, 800890c <adcStart+0x11c>
      clkmask |= (1 << 1);
 80088f6:	4a27      	ldr	r2, [pc, #156]	; (8008994 <adcStart+0x1a4>)
 80088f8:	6813      	ldr	r3, [r2, #0]
 80088fa:	f043 0302 	orr.w	r3, r3, #2
 80088fe:	6013      	str	r3, [r2, #0]
      rccEnableADC12(true);
 8008900:	4a25      	ldr	r2, [pc, #148]	; (8008998 <adcStart+0x1a8>)
 8008902:	6953      	ldr	r3, [r2, #20]
 8008904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008908:	6153      	str	r3, [r2, #20]
 800890a:	e7aa      	b.n	8008862 <adcStart+0x72>
      osalDbgAssert(!b, "stream already allocated");
 800890c:	4823      	ldr	r0, [pc, #140]	; (800899c <adcStart+0x1ac>)
 800890e:	f7fd fa37 	bl	8005d80 <chSysHalt>
      b = dmaStreamAllocate(adcp->dmastp,
 8008912:	4a1f      	ldr	r2, [pc, #124]	; (8008990 <adcStart+0x1a0>)
 8008914:	2105      	movs	r1, #5
 8008916:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008918:	f7fe f802 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 800891c:	b950      	cbnz	r0, 8008934 <adcStart+0x144>
      clkmask |= (1 << 2);
 800891e:	4a1d      	ldr	r2, [pc, #116]	; (8008994 <adcStart+0x1a4>)
 8008920:	6813      	ldr	r3, [r2, #0]
 8008922:	f043 0304 	orr.w	r3, r3, #4
 8008926:	6013      	str	r3, [r2, #0]
      rccEnableADC34(true);
 8008928:	4a1b      	ldr	r2, [pc, #108]	; (8008998 <adcStart+0x1a8>)
 800892a:	6953      	ldr	r3, [r2, #20]
 800892c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008930:	6153      	str	r3, [r2, #20]
 8008932:	e796      	b.n	8008862 <adcStart+0x72>
      osalDbgAssert(!b, "stream already allocated");
 8008934:	4819      	ldr	r0, [pc, #100]	; (800899c <adcStart+0x1ac>)
 8008936:	f7fd fa23 	bl	8005d80 <chSysHalt>
      b = dmaStreamAllocate(adcp->dmastp,
 800893a:	4a15      	ldr	r2, [pc, #84]	; (8008990 <adcStart+0x1a0>)
 800893c:	2105      	movs	r1, #5
 800893e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008940:	f7fd ffee 	bl	8006920 <dmaStreamAllocate>
      osalDbgAssert(!b, "stream already allocated");
 8008944:	b950      	cbnz	r0, 800895c <adcStart+0x16c>
      clkmask |= (1 << 3);
 8008946:	4a13      	ldr	r2, [pc, #76]	; (8008994 <adcStart+0x1a4>)
 8008948:	6813      	ldr	r3, [r2, #0]
 800894a:	f043 0308 	orr.w	r3, r3, #8
 800894e:	6013      	str	r3, [r2, #0]
      rccEnableADC34(true);
 8008950:	4a11      	ldr	r2, [pc, #68]	; (8008998 <adcStart+0x1a8>)
 8008952:	6953      	ldr	r3, [r2, #20]
 8008954:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008958:	6153      	str	r3, [r2, #20]
 800895a:	e782      	b.n	8008862 <adcStart+0x72>
      osalDbgAssert(!b, "stream already allocated");
 800895c:	480f      	ldr	r0, [pc, #60]	; (800899c <adcStart+0x1ac>)
 800895e:	f7fd fa0f 	bl	8005d80 <chSysHalt>
  osalDbgAssert(adcp->adcm->CR == ADC_CR_ADVREGEN_0, "invalid register state");
 8008962:	480f      	ldr	r0, [pc, #60]	; (80089a0 <adcStart+0x1b0>)
 8008964:	f7fd fa0c 	bl	8005d80 <chSysHalt>
 8008968:	480e      	ldr	r0, [pc, #56]	; (80089a4 <adcStart+0x1b4>)
 800896a:	f7fd fa09 	bl	8005d80 <chSysHalt>
 800896e:	bf00      	nop
 8008970:	0800b2f4 	.word	0x0800b2f4
 8008974:	200015d8 	.word	0x200015d8
 8008978:	0800b6bc 	.word	0x0800b6bc
 800897c:	2000121c 	.word	0x2000121c
 8008980:	20001254 	.word	0x20001254
 8008984:	2000128c 	.word	0x2000128c
 8008988:	200012c4 	.word	0x200012c4
 800898c:	e0001000 	.word	0xe0001000
 8008990:	080067f1 	.word	0x080067f1
 8008994:	20002010 	.word	0x20002010
 8008998:	40021000 	.word	0x40021000
 800899c:	0800b470 	.word	0x0800b470
 80089a0:	0800b388 	.word	0x0800b388
 80089a4:	0800b0b0 	.word	0x0800b0b0
	...

080089b0 <main>:
	sdStart(&SD2, &uartCfg3);
    else
	sdStart(&SD2, &uartCfg2);
}

int main(void) {
 80089b0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80089b4:	b089      	sub	sp, #36	; 0x24
void hal_lld_init(void) {

  /* Reset of all peripherals.
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB(~STM32_GPIO_EN_MASK);
 80089b6:	4bb6      	ldr	r3, [pc, #728]	; (8008c90 <main+0x2e0>)
 80089b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80089ba:	f462 02fc 	orn	r2, r2, #8257536	; 0x7e0000
 80089be:	629a      	str	r2, [r3, #40]	; 0x28
 80089c0:	2200      	movs	r2, #0
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  rccResetAPB1(0xFFFFFFFF);
 80089c4:	6919      	ldr	r1, [r3, #16]
 80089c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80089ca:	6119      	str	r1, [r3, #16]
 80089cc:	611a      	str	r2, [r3, #16]
  rccResetAPB2(0xFFFFFFFF);
 80089ce:	68d8      	ldr	r0, [r3, #12]
 80089d0:	60d9      	str	r1, [r3, #12]
 80089d2:	60da      	str	r2, [r3, #12]

  /* PWR clock enabled.*/
  rccEnablePWRInterface(true);
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80089da:	61da      	str	r2, [r3, #28]
  PWR->CR |= PWR_CR_DBP;
 80089dc:	49ad      	ldr	r1, [pc, #692]	; (8008c94 <main+0x2e4>)
 80089de:	680a      	ldr	r2, [r1, #0]
 80089e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80089e4:	600a      	str	r2, [r1, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL){
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80089ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80089f0:	d005      	beq.n	80089fe <main+0x4e>
    RCC->BDCR = RCC_BDCR_BDRST;
 80089f2:	4ba7      	ldr	r3, [pc, #668]	; (8008c90 <main+0x2e0>)
 80089f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80089f8:	621a      	str	r2, [r3, #32]
    RCC->BDCR = 0;
 80089fa:	2200      	movs	r2, #0
 80089fc:	621a      	str	r2, [r3, #32]
  if ((RCC->BDCR & RCC_BDCR_RTCEN) == 0) {
 80089fe:	4ba4      	ldr	r3, [pc, #656]	; (8008c90 <main+0x2e0>)
 8008a00:	6a1b      	ldr	r3, [r3, #32]
 8008a02:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8008a06:	d108      	bne.n	8008a1a <main+0x6a>
    RCC->BDCR |= STM32_RTCSEL;
 8008a08:	4ba1      	ldr	r3, [pc, #644]	; (8008c90 <main+0x2e0>)
 8008a0a:	6a1a      	ldr	r2, [r3, #32]
 8008a0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a10:	621a      	str	r2, [r3, #32]
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8008a12:	6a1a      	ldr	r2, [r3, #32]
 8008a14:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a18:	621a      	str	r2, [r3, #32]
  dma.streams_mask = 0U;
 8008a1a:	4a9f      	ldr	r2, [pc, #636]	; (8008c98 <main+0x2e8>)
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	6013      	str	r3, [r2, #0]
  dma.isr_mask = 0U;
 8008a20:	6053      	str	r3, [r2, #4]
 8008a22:	4a9e      	ldr	r2, [pc, #632]	; (8008c9c <main+0x2ec>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 8008a24:	4619      	mov	r1, r3
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8008a26:	4c9e      	ldr	r4, [pc, #632]	; (8008ca0 <main+0x2f0>)
    _stm32_dma_streams[i].channel->CCR = 0U;
 8008a28:	6850      	ldr	r0, [r2, #4]
 8008a2a:	6001      	str	r1, [r0, #0]
    _stm32_dma_isr_redir[i].dma_func = NULL;
 8008a2c:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
  for (i = 0; i < STM32_DMA_STREAMS; i++) {
 8008a30:	3301      	adds	r3, #1
 8008a32:	3214      	adds	r2, #20
 8008a34:	2b0c      	cmp	r3, #12
 8008a36:	d1f7      	bne.n	8008a28 <main+0x78>
  DMA1->IFCR = 0xFFFFFFFFU;
 8008a38:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8008a3c:	4b99      	ldr	r3, [pc, #612]	; (8008ca4 <main+0x2f4>)
 8008a3e:	f8c3 9004 	str.w	r9, [r3, #4]
  DMA2->IFCR = 0xFFFFFFFFU;
 8008a42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a46:	f8c3 9004 	str.w	r9, [r3, #4]
 * @notapi
 */
void irqInit(void) {

#if HAL_USE_PAL
  nvicEnableVector(EXTI0_IRQn, STM32_IRQ_EXTI0_PRIORITY);
 8008a4a:	2106      	movs	r1, #6
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	f7fd ff4f 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI1_IRQn, STM32_IRQ_EXTI1_PRIORITY);
 8008a52:	2106      	movs	r1, #6
 8008a54:	2007      	movs	r0, #7
 8008a56:	f7fd ff4b 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI2_TSC_IRQn, STM32_IRQ_EXTI2_PRIORITY);
 8008a5a:	2106      	movs	r1, #6
 8008a5c:	2008      	movs	r0, #8
 8008a5e:	f7fd ff47 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI3_IRQn, STM32_IRQ_EXTI3_PRIORITY);
 8008a62:	2106      	movs	r1, #6
 8008a64:	2009      	movs	r0, #9
 8008a66:	f7fd ff43 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI4_IRQn, STM32_IRQ_EXTI4_PRIORITY);
 8008a6a:	2106      	movs	r1, #6
 8008a6c:	200a      	movs	r0, #10
 8008a6e:	f7fd ff3f 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI9_5_IRQn, STM32_IRQ_EXTI5_9_PRIORITY);
 8008a72:	2106      	movs	r1, #6
 8008a74:	2017      	movs	r0, #23
 8008a76:	f7fd ff3b 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(EXTI15_10_IRQn, STM32_IRQ_EXTI10_15_PRIORITY);
 8008a7a:	2106      	movs	r1, #6
 8008a7c:	2028      	movs	r0, #40	; 0x28
 8008a7e:	f7fd ff37 	bl	80068f0 <nvicEnableVector>
  PWR->CR |= PWR_CR_PVDE | (STM32_PLS & STM32_PLS_MASK);
#endif /* STM32_PVD_ENABLE */

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB2(RCC_APB2ENR_SYSCFGEN, true);
 8008a82:	4d83      	ldr	r5, [pc, #524]	; (8008c90 <main+0x2e0>)
 8008a84:	69ab      	ldr	r3, [r5, #24]
 8008a86:	f043 0301 	orr.w	r3, r3, #1
 8008a8a:	61ab      	str	r3, [r5, #24]

#if STM32_HAS_USB
  /* USB IRQ relocated to not conflict with CAN.*/
  SYSCFG->CFGR1 |= SYSCFG_CFGR1_USB_IT_RMP;
 8008a8c:	4a86      	ldr	r2, [pc, #536]	; (8008ca8 <main+0x2f8>)
 8008a8e:	6813      	ldr	r3, [r2, #0]
 8008a90:	f043 0320 	orr.w	r3, r3, #32
 8008a94:	6013      	str	r3, [r2, #0]
  clkmask = 0;
 8008a96:	2400      	movs	r4, #0
 8008a98:	4b84      	ldr	r3, [pc, #528]	; (8008cac <main+0x2fc>)
 8008a9a:	601c      	str	r4, [r3, #0]
  adcObjectInit(&ADCD1);
 8008a9c:	4f84      	ldr	r7, [pc, #528]	; (8008cb0 <main+0x300>)
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7fd ffae 	bl	8006a00 <adcObjectInit>
  ADCD1.adcc = ADC1_2_COMMON;
 8008aa4:	f8df b264 	ldr.w	fp, [pc, #612]	; 8008d0c <main+0x35c>
 8008aa8:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
  ADCD1.adcm    = ADC1;
 8008aac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8008ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  ADCD1.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC1_DMA_STREAM);
 8008ab2:	4e7a      	ldr	r6, [pc, #488]	; (8008c9c <main+0x2ec>)
 8008ab4:	633e      	str	r6, [r7, #48]	; 0x30
  ADCD1.dmamode = ADC_DMA_SIZE |
 8008ab6:	f242 588a 	movw	r8, #9610	; 0x258a
 8008aba:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  adcObjectInit(&ADCD2);
 8008abe:	4f7d      	ldr	r7, [pc, #500]	; (8008cb4 <main+0x304>)
 8008ac0:	4638      	mov	r0, r7
 8008ac2:	f7fd ff9d 	bl	8006a00 <adcObjectInit>
  ADCD2.adcc = ADC1_2_COMMON;
 8008ac6:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
  ADCD2.adcm    = ADC2;
 8008aca:	4b7b      	ldr	r3, [pc, #492]	; (8008cb8 <main+0x308>)
 8008acc:	62bb      	str	r3, [r7, #40]	; 0x28
  ADCD2.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC2_DMA_STREAM);
 8008ace:	f106 038c 	add.w	r3, r6, #140	; 0x8c
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
  ADCD2.dmamode = ADC_DMA_SIZE |
 8008ad4:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  adcObjectInit(&ADCD3);
 8008ad8:	4f78      	ldr	r7, [pc, #480]	; (8008cbc <main+0x30c>)
 8008ada:	4638      	mov	r0, r7
 8008adc:	f7fd ff90 	bl	8006a00 <adcObjectInit>
  ADCD3.adcc = ADC3_4_COMMON;
 8008ae0:	f8df a22c 	ldr.w	sl, [pc, #556]	; 8008d10 <main+0x360>
 8008ae4:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
  ADCD3.adcm    = ADC3;
 8008ae8:	4b75      	ldr	r3, [pc, #468]	; (8008cc0 <main+0x310>)
 8008aea:	62bb      	str	r3, [r7, #40]	; 0x28
  ADCD3.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC3_DMA_STREAM);
 8008aec:	f106 03dc 	add.w	r3, r6, #220	; 0xdc
 8008af0:	633b      	str	r3, [r7, #48]	; 0x30
  ADCD3.dmamode = ADC_DMA_SIZE |
 8008af2:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  adcObjectInit(&ADCD4);
 8008af6:	4f73      	ldr	r7, [pc, #460]	; (8008cc4 <main+0x314>)
 8008af8:	4638      	mov	r0, r7
 8008afa:	f7fd ff81 	bl	8006a00 <adcObjectInit>
  ADCD4.adcc = ADC3_4_COMMON;
 8008afe:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
  ADCD4.adcm    = ADC4;
 8008b02:	4b71      	ldr	r3, [pc, #452]	; (8008cc8 <main+0x318>)
 8008b04:	62bb      	str	r3, [r7, #40]	; 0x28
  ADCD4.dmastp  = STM32_DMA_STREAM(STM32_ADC_ADC4_DMA_STREAM);
 8008b06:	f106 02a0 	add.w	r2, r6, #160	; 0xa0
 8008b0a:	633a      	str	r2, [r7, #48]	; 0x30
  ADCD4.dmamode = ADC_DMA_SIZE |
 8008b0c:	f8c7 8034 	str.w	r8, [r7, #52]	; 0x34
  nvicEnableVector(STM32_ADC1_NUMBER, STM32_ADC_ADC12_IRQ_PRIORITY);
 8008b10:	2105      	movs	r1, #5
 8008b12:	2012      	movs	r0, #18
 8008b14:	f7fd feec 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(STM32_ADC3_NUMBER, STM32_ADC_ADC3_IRQ_PRIORITY);
 8008b18:	2105      	movs	r1, #5
 8008b1a:	202f      	movs	r0, #47	; 0x2f
 8008b1c:	f7fd fee8 	bl	80068f0 <nvicEnableVector>
  nvicEnableVector(STM32_ADC4_NUMBER, STM32_ADC_ADC3_IRQ_PRIORITY);
 8008b20:	2105      	movs	r1, #5
 8008b22:	203d      	movs	r0, #61	; 0x3d
 8008b24:	f7fd fee4 	bl	80068f0 <nvicEnableVector>
  rccEnableADC12(true);
 8008b28:	696b      	ldr	r3, [r5, #20]
 8008b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b2e:	616b      	str	r3, [r5, #20]
  rccResetADC12();
 8008b30:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b36:	62ab      	str	r3, [r5, #40]	; 0x28
 8008b38:	62ac      	str	r4, [r5, #40]	; 0x28
  ADC1_2_COMMON->CCR = STM32_ADC_ADC12_CLOCK_MODE | ADC_DMA_MDMA;
 8008b3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b3e:	f8cb 2008 	str.w	r2, [fp, #8]
  rccDisableADC12();
 8008b42:	696b      	ldr	r3, [r5, #20]
 8008b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008b48:	616b      	str	r3, [r5, #20]
  rccEnableADC34(true);
 8008b4a:	696b      	ldr	r3, [r5, #20]
 8008b4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b50:	616b      	str	r3, [r5, #20]
  rccResetADC34();
 8008b52:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008b54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b58:	62ab      	str	r3, [r5, #40]	; 0x28
 8008b5a:	62ac      	str	r4, [r5, #40]	; 0x28
  ADC3_4_COMMON->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8008b5c:	f8ca 2008 	str.w	r2, [sl, #8]
  rccDisableADC34();
 8008b60:	696b      	ldr	r3, [r5, #20]
 8008b62:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008b66:	616b      	str	r3, [r5, #20]
  sdp->vmt = &vmt;
 8008b68:	4b58      	ldr	r3, [pc, #352]	; (8008ccc <main+0x31c>)
 8008b6a:	4f59      	ldr	r7, [pc, #356]	; (8008cd0 <main+0x320>)
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	f842 7b04 	str.w	r7, [r2], #4
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8008b72:	605a      	str	r2, [r3, #4]
  sdp->state = SD_STOP;
 8008b74:	f04f 0801 	mov.w	r8, #1
 8008b78:	f883 8008 	strb.w	r8, [r3, #8]
  tqp->next = (thread_t *)tqp;
 8008b7c:	f103 020c 	add.w	r2, r3, #12
 8008b80:	60da      	str	r2, [r3, #12]
  tqp->prev = (thread_t *)tqp;
 8008b82:	611a      	str	r2, [r3, #16]
  iqp->q_counter = 0;
 8008b84:	615c      	str	r4, [r3, #20]
  iqp->q_buffer  = bp;
 8008b86:	4a53      	ldr	r2, [pc, #332]	; (8008cd4 <main+0x324>)
 8008b88:	619a      	str	r2, [r3, #24]
  iqp->q_rdptr   = bp;
 8008b8a:	625a      	str	r2, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8008b8c:	621a      	str	r2, [r3, #32]
  iqp->q_top     = bp + size;
 8008b8e:	3210      	adds	r2, #16
 8008b90:	61da      	str	r2, [r3, #28]
  iqp->q_notify  = infy;
 8008b92:	629c      	str	r4, [r3, #40]	; 0x28
  iqp->q_link    = link;
 8008b94:	62db      	str	r3, [r3, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8008b96:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8008b9c:	635a      	str	r2, [r3, #52]	; 0x34
  oqp->q_counter = size;
 8008b9e:	f04f 0a10 	mov.w	sl, #16
 8008ba2:	f8c3 a038 	str.w	sl, [r3, #56]	; 0x38
  oqp->q_buffer  = bp;
 8008ba6:	4a4c      	ldr	r2, [pc, #304]	; (8008cd8 <main+0x328>)
 8008ba8:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8008baa:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8008bac:	645a      	str	r2, [r3, #68]	; 0x44
  oqp->q_top     = bp + size;
 8008bae:	4452      	add	r2, sl
 8008bb0:	641a      	str	r2, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8008bb2:	4a4a      	ldr	r2, [pc, #296]	; (8008cdc <main+0x32c>)
 8008bb4:	64da      	str	r2, [r3, #76]	; 0x4c
  oqp->q_link    = link;
 8008bb6:	651b      	str	r3, [r3, #80]	; 0x50
  SD1.usart = USART1;
 8008bb8:	4a49      	ldr	r2, [pc, #292]	; (8008ce0 <main+0x330>)
 8008bba:	655a      	str	r2, [r3, #84]	; 0x54
  SD1.clock = STM32_USART1CLK;
 8008bbc:	f8df b154 	ldr.w	fp, [pc, #340]	; 8008d14 <main+0x364>
 8008bc0:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
  nvicEnableVector(STM32_USART1_NUMBER, STM32_SERIAL_USART1_PRIORITY);
 8008bc4:	210c      	movs	r1, #12
 8008bc6:	2025      	movs	r0, #37	; 0x25
 8008bc8:	f7fd fe92 	bl	80068f0 <nvicEnableVector>
  sdp->vmt = &vmt;
 8008bcc:	4b45      	ldr	r3, [pc, #276]	; (8008ce4 <main+0x334>)
 8008bce:	461a      	mov	r2, r3
 8008bd0:	f842 7b04 	str.w	r7, [r2], #4
 8008bd4:	605a      	str	r2, [r3, #4]
  sdp->state = SD_STOP;
 8008bd6:	f883 8008 	strb.w	r8, [r3, #8]
  tqp->next = (thread_t *)tqp;
 8008bda:	f103 020c 	add.w	r2, r3, #12
 8008bde:	60da      	str	r2, [r3, #12]
  tqp->prev = (thread_t *)tqp;
 8008be0:	611a      	str	r2, [r3, #16]
  iqp->q_counter = 0;
 8008be2:	615c      	str	r4, [r3, #20]
  iqp->q_buffer  = bp;
 8008be4:	4a40      	ldr	r2, [pc, #256]	; (8008ce8 <main+0x338>)
 8008be6:	619a      	str	r2, [r3, #24]
  iqp->q_rdptr   = bp;
 8008be8:	625a      	str	r2, [r3, #36]	; 0x24
  iqp->q_wrptr   = bp;
 8008bea:	621a      	str	r2, [r3, #32]
  iqp->q_top     = bp + size;
 8008bec:	4452      	add	r2, sl
 8008bee:	61da      	str	r2, [r3, #28]
  iqp->q_notify  = infy;
 8008bf0:	629c      	str	r4, [r3, #40]	; 0x28
  iqp->q_link    = link;
 8008bf2:	62db      	str	r3, [r3, #44]	; 0x2c
  tqp->next = (thread_t *)tqp;
 8008bf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008bf8:	631a      	str	r2, [r3, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 8008bfa:	635a      	str	r2, [r3, #52]	; 0x34
  oqp->q_counter = size;
 8008bfc:	f8c3 a038 	str.w	sl, [r3, #56]	; 0x38
  oqp->q_buffer  = bp;
 8008c00:	4a3a      	ldr	r2, [pc, #232]	; (8008cec <main+0x33c>)
 8008c02:	63da      	str	r2, [r3, #60]	; 0x3c
  oqp->q_rdptr   = bp;
 8008c04:	649a      	str	r2, [r3, #72]	; 0x48
  oqp->q_wrptr   = bp;
 8008c06:	645a      	str	r2, [r3, #68]	; 0x44
  oqp->q_top     = bp + size;
 8008c08:	4452      	add	r2, sl
 8008c0a:	641a      	str	r2, [r3, #64]	; 0x40
  oqp->q_notify  = onfy;
 8008c0c:	4a38      	ldr	r2, [pc, #224]	; (8008cf0 <main+0x340>)
 8008c0e:	64da      	str	r2, [r3, #76]	; 0x4c
  oqp->q_link    = link;
 8008c10:	651b      	str	r3, [r3, #80]	; 0x50
  SD2.usart = USART2;
 8008c12:	4a38      	ldr	r2, [pc, #224]	; (8008cf4 <main+0x344>)
 8008c14:	655a      	str	r2, [r3, #84]	; 0x54
  SD2.clock = STM32_USART2CLK;
 8008c16:	f8c3 b058 	str.w	fp, [r3, #88]	; 0x58
  nvicEnableVector(STM32_USART2_NUMBER, STM32_SERIAL_USART2_PRIORITY);
 8008c1a:	210c      	movs	r1, #12
 8008c1c:	2026      	movs	r0, #38	; 0x26
 8008c1e:	f7fd fe67 	bl	80068f0 <nvicEnableVector>
  spip->state = SPI_STOP;
 8008c22:	4f35      	ldr	r7, [pc, #212]	; (8008cf8 <main+0x348>)
 8008c24:	f887 8000 	strb.w	r8, [r7]
  spip->config = NULL;
 8008c28:	607c      	str	r4, [r7, #4]
  spip->thread = NULL;
 8008c2a:	60bc      	str	r4, [r7, #8]
  chMtxObjectInit(mp);
 8008c2c:	f107 000c 	add.w	r0, r7, #12
 8008c30:	f7fd f8c6 	bl	8005dc0 <chMtxObjectInit>
  SPID1.spi       = SPI1;
 8008c34:	4b31      	ldr	r3, [pc, #196]	; (8008cfc <main+0x34c>)
 8008c36:	61fb      	str	r3, [r7, #28]
  SPID1.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI1_RX_DMA_STREAM);
 8008c38:	f106 0314 	add.w	r3, r6, #20
 8008c3c:	623b      	str	r3, [r7, #32]
  SPID1.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI1_TX_DMA_STREAM);
 8008c3e:	f106 0328 	add.w	r3, r6, #40	; 0x28
 8008c42:	627b      	str	r3, [r7, #36]	; 0x24
  SPID1.rxdmamode = STM32_DMA_CR_CHSEL(SPI1_RX_DMA_CHANNEL) |
 8008c44:	f241 0b0a 	movw	fp, #4106	; 0x100a
 8008c48:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  SPID1.txdmamode = STM32_DMA_CR_CHSEL(SPI1_TX_DMA_CHANNEL) |
 8008c4c:	f241 0a18 	movw	sl, #4120	; 0x1018
 8008c50:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
  spip->state = SPI_STOP;
 8008c54:	4f2a      	ldr	r7, [pc, #168]	; (8008d00 <main+0x350>)
 8008c56:	f887 8000 	strb.w	r8, [r7]
  spip->config = NULL;
 8008c5a:	607c      	str	r4, [r7, #4]
  spip->thread = NULL;
 8008c5c:	60bc      	str	r4, [r7, #8]
 8008c5e:	f107 000c 	add.w	r0, r7, #12
 8008c62:	f7fd f8ad 	bl	8005dc0 <chMtxObjectInit>
  SPID2.spi       = SPI2;
 8008c66:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <main+0x354>)
 8008c68:	61fb      	str	r3, [r7, #28]
  SPID2.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI2_RX_DMA_STREAM);
 8008c6a:	f106 033c 	add.w	r3, r6, #60	; 0x3c
 8008c6e:	623b      	str	r3, [r7, #32]
  SPID2.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI2_TX_DMA_STREAM);
 8008c70:	3650      	adds	r6, #80	; 0x50
 8008c72:	627e      	str	r6, [r7, #36]	; 0x24
  SPID2.rxdmamode = STM32_DMA_CR_CHSEL(SPI2_RX_DMA_CHANNEL) |
 8008c74:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
  SPID2.txdmamode = STM32_DMA_CR_CHSEL(SPI2_TX_DMA_CHANNEL) |
 8008c78:	f8c7 a02c 	str.w	sl, [r7, #44]	; 0x2c
  spip->state = SPI_STOP;
 8008c7c:	4e22      	ldr	r6, [pc, #136]	; (8008d08 <main+0x358>)
 8008c7e:	f886 8000 	strb.w	r8, [r6]
  spip->config = NULL;
 8008c82:	6074      	str	r4, [r6, #4]
  spip->thread = NULL;
 8008c84:	60b4      	str	r4, [r6, #8]
 8008c86:	f106 000c 	add.w	r0, r6, #12
 8008c8a:	f7fd f899 	bl	8005dc0 <chMtxObjectInit>
 8008c8e:	e043      	b.n	8008d18 <main+0x368>
 8008c90:	40021000 	.word	0x40021000
 8008c94:	40007000 	.word	0x40007000
 8008c98:	20002034 	.word	0x20002034
 8008c9c:	0800b52c 	.word	0x0800b52c
 8008ca0:	20001570 	.word	0x20001570
 8008ca4:	40020000 	.word	0x40020000
 8008ca8:	40010000 	.word	0x40010000
 8008cac:	20002010 	.word	0x20002010
 8008cb0:	2000121c 	.word	0x2000121c
 8008cb4:	20001254 	.word	0x20001254
 8008cb8:	50000100 	.word	0x50000100
 8008cbc:	2000128c 	.word	0x2000128c
 8008cc0:	50000400 	.word	0x50000400
 8008cc4:	200012c4 	.word	0x200012c4
 8008cc8:	50000500 	.word	0x50000500
 8008ccc:	20001414 	.word	0x20001414
 8008cd0:	0800d4ac 	.word	0x0800d4ac
 8008cd4:	20002508 	.word	0x20002508
 8008cd8:	20002528 	.word	0x20002528
 8008cdc:	08005b01 	.word	0x08005b01
 8008ce0:	40013800 	.word	0x40013800
 8008ce4:	20001474 	.word	0x20001474
 8008ce8:	20002518 	.word	0x20002518
 8008cec:	20002538 	.word	0x20002538
 8008cf0:	08005b11 	.word	0x08005b11
 8008cf4:	40004400 	.word	0x40004400
 8008cf8:	200014d4 	.word	0x200014d4
 8008cfc:	40013000 	.word	0x40013000
 8008d00:	20001504 	.word	0x20001504
 8008d04:	40003800 	.word	0x40003800
 8008d08:	20001534 	.word	0x20001534
 8008d0c:	50000300 	.word	0x50000300
 8008d10:	50000700 	.word	0x50000700
 8008d14:	0112a880 	.word	0x0112a880
  SPID3.spi       = SPI3;
 8008d18:	4b9f      	ldr	r3, [pc, #636]	; (8008f98 <main+0x5e8>)
 8008d1a:	61f3      	str	r3, [r6, #28]
  SPID3.dmarx     = STM32_DMA_STREAM(STM32_SPI_SPI3_RX_DMA_STREAM);
 8008d1c:	4b9f      	ldr	r3, [pc, #636]	; (8008f9c <main+0x5ec>)
 8008d1e:	6233      	str	r3, [r6, #32]
  SPID3.dmatx     = STM32_DMA_STREAM(STM32_SPI_SPI3_TX_DMA_STREAM);
 8008d20:	f103 0214 	add.w	r2, r3, #20
 8008d24:	6272      	str	r2, [r6, #36]	; 0x24
  SPID3.rxdmamode = STM32_DMA_CR_CHSEL(SPI3_RX_DMA_CHANNEL) |
 8008d26:	f8c6 b028 	str.w	fp, [r6, #40]	; 0x28
  SPID3.txdmamode = STM32_DMA_CR_CHSEL(SPI3_TX_DMA_CHANNEL) |
 8008d2a:	f8c6 a02c 	str.w	sl, [r6, #44]	; 0x2c
  WDGD1.state = WDG_STOP;
 8008d2e:	4b9c      	ldr	r3, [pc, #624]	; (8008fa0 <main+0x5f0>)
 8008d30:	f883 8000 	strb.w	r8, [r3]
  WDGD1.wdg   = IWDG;
 8008d34:	4a9b      	ldr	r2, [pc, #620]	; (8008fa4 <main+0x5f4>)
 8008d36:	609a      	str	r2, [r3, #8]

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8008d38:	69eb      	ldr	r3, [r5, #28]
 8008d3a:	ea43 0308 	orr.w	r3, r3, r8
 8008d3e:	61eb      	str	r3, [r5, #28]

  /* Enabling the stop mode during debug for this timer.*/
  ST_ENABLE_STOP();
 8008d40:	4a99      	ldr	r2, [pc, #612]	; (8008fa8 <main+0x5f8>)
 8008d42:	6893      	ldr	r3, [r2, #8]
 8008d44:	ea43 0308 	orr.w	r3, r3, r8
 8008d48:	6093      	str	r3, [r2, #8]

  /* Initializing the counter in free running mode.*/
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8008d4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d4e:	f640 620f 	movw	r2, #3599	; 0xe0f
 8008d52:	629a      	str	r2, [r3, #40]	; 0x28
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8008d54:	f8c3 902c 	str.w	r9, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8008d58:	619c      	str	r4, [r3, #24]
  STM32_ST_TIM->CCR[0] = 0;
 8008d5a:	635c      	str	r4, [r3, #52]	; 0x34
  STM32_ST_TIM->DIER   = 0;
 8008d5c:	60dc      	str	r4, [r3, #12]
  STM32_ST_TIM->CR2    = 0;
 8008d5e:	605c      	str	r4, [r3, #4]
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8008d60:	f8c3 8014 	str.w	r8, [r3, #20]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 8008d64:	f8c3 8000 	str.w	r8, [r3]

  /* IRQ enabled.*/
  nvicEnableVector(ST_NUMBER, STM32_ST_IRQ_PRIORITY);
 8008d68:	2108      	movs	r1, #8
 8008d6a:	201c      	movs	r0, #28
 8008d6c:	f7fd fdc0 	bl	80068f0 <nvicEnableVector>
  tqp->next = (thread_t *)tqp;
 8008d70:	4b8e      	ldr	r3, [pc, #568]	; (8008fac <main+0x5fc>)
 8008d72:	601b      	str	r3, [r3, #0]
  tqp->prev = (thread_t *)tqp;
 8008d74:	605b      	str	r3, [r3, #4]
  ch.rlist.prio = NOPRIO;
 8008d76:	609c      	str	r4, [r3, #8]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 8008d78:	611b      	str	r3, [r3, #16]
  ch.rlist.older = (thread_t *)&ch.rlist;
 8008d7a:	615b      	str	r3, [r3, #20]
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8008d7c:	f103 021c 	add.w	r2, r3, #28
 8008d80:	61da      	str	r2, [r3, #28]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 8008d82:	621a      	str	r2, [r3, #32]
  ch.vtlist.delta = (sysinterval_t)-1;
 8008d84:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  ch.vtlist.lasttime = (systime_t)0;
 8008d88:	629c      	str	r4, [r3, #40]	; 0x28
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8008d8a:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8008d8e:	871a      	strh	r2, [r3, #56]	; 0x38
  ch.dbg.trace_buffer.size      = CH_DBG_TRACE_BUFFER_SIZE;
 8008d90:	2280      	movs	r2, #128	; 0x80
 8008d92:	875a      	strh	r2, [r3, #58]	; 0x3a
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8008d94:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008d98:	63da      	str	r2, [r3, #60]	; 0x3c
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	1c62      	adds	r2, r4, #1
 8008d9e:	eb00 1302 	add.w	r3, r0, r2, lsl #4
 8008da2:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8008da6:	f36f 0102 	bfc	r1, #0, #3
 8008daa:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8008dae:	4614      	mov	r4, r2
 8008db0:	2a80      	cmp	r2, #128	; 0x80
 8008db2:	d1f3      	bne.n	8008d9c <main+0x3ec>
  ch.dbg.isr_cnt  = (cnt_t)0;
 8008db4:	4c7d      	ldr	r4, [pc, #500]	; (8008fac <main+0x5fc>)
 8008db6:	2600      	movs	r6, #0
 8008db8:	6326      	str	r6, [r4, #48]	; 0x30
  ch.dbg.lock_cnt = (cnt_t)0;
 8008dba:	6366      	str	r6, [r4, #52]	; 0x34
  ch.tm.offset = (rtcnt_t)0;
 8008dbc:	f8c4 6884 	str.w	r6, [r4, #2180]	; 0x884
  tmp->best       = (rtcnt_t)-1;
 8008dc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dc4:	9302      	str	r3, [sp, #8]
  tmp->worst      = (rtcnt_t)0;
 8008dc6:	9603      	str	r6, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8008dc8:	9604      	str	r6, [sp, #16]
  tmp->n          = (ucnt_t)0;
 8008dca:	9605      	str	r6, [sp, #20]
  tmp->cumulative = (rttime_t)0;
 8008dcc:	2200      	movs	r2, #0
 8008dce:	2300      	movs	r3, #0
 8008dd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  chTMStartMeasurementX(&tm);
 8008dd4:	a802      	add	r0, sp, #8
 8008dd6:	f7fc ff4b 	bl	8005c70 <chTMStartMeasurementX>
  chTMStopMeasurementX(&tm);
 8008dda:	a802      	add	r0, sp, #8
 8008ddc:	f7fc ff20 	bl	8005c20 <chTMStopMeasurementX>
  ch.tm.offset = tm.last;
 8008de0:	9b04      	ldr	r3, [sp, #16]
 8008de2:	f8c4 3884 	str.w	r3, [r4, #2180]	; 0x884
  ch_memcore.nextmem = __heap_base__;
 8008de6:	4b72      	ldr	r3, [pc, #456]	; (8008fb0 <main+0x600>)
 8008de8:	4a72      	ldr	r2, [pc, #456]	; (8008fb4 <main+0x604>)
 8008dea:	601a      	str	r2, [r3, #0]
  ch_memcore.endmem  = __heap_end__;
 8008dec:	4a72      	ldr	r2, [pc, #456]	; (8008fb8 <main+0x608>)
 8008dee:	605a      	str	r2, [r3, #4]
  default_heap.provider = chCoreAllocAlignedWithOffset;
 8008df0:	4872      	ldr	r0, [pc, #456]	; (8008fbc <main+0x60c>)
 8008df2:	4b73      	ldr	r3, [pc, #460]	; (8008fc0 <main+0x610>)
 8008df4:	6003      	str	r3, [r0, #0]
  H_NEXT(&default_heap.header) = NULL;
 8008df6:	6046      	str	r6, [r0, #4]
  H_PAGES(&default_heap.header) = 0;
 8008df8:	6086      	str	r6, [r0, #8]
  chMtxObjectInit(&default_heap.mtx);
 8008dfa:	300c      	adds	r0, #12
 8008dfc:	f7fc ffe0 	bl	8005dc0 <chMtxObjectInit>
 * @init
 */
void _factory_init(void) {

#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&ch_factory.mtx);
 8008e00:	4d70      	ldr	r5, [pc, #448]	; (8008fc4 <main+0x614>)
 8008e02:	4628      	mov	r0, r5
 8008e04:	f7fc ffdc 	bl	8005dc0 <chMtxObjectInit>
  dlp->next = (dyn_element_t *)dlp;
 8008e08:	f105 0310 	add.w	r3, r5, #16
 8008e0c:	612b      	str	r3, [r5, #16]
  mp->next = NULL;
 8008e0e:	616e      	str	r6, [r5, #20]
  mp->object_size = size;
 8008e10:	2314      	movs	r3, #20
 8008e12:	61ab      	str	r3, [r5, #24]
  mp->align = align;
 8008e14:	2204      	movs	r2, #4
 8008e16:	61ea      	str	r2, [r5, #28]
  mp->provider = provider;
 8008e18:	4b6b      	ldr	r3, [pc, #428]	; (8008fc8 <main+0x618>)
 8008e1a:	622b      	str	r3, [r5, #32]
 8008e1c:	f105 0124 	add.w	r1, r5, #36	; 0x24
 8008e20:	6269      	str	r1, [r5, #36]	; 0x24
 8008e22:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8008e26:	62a9      	str	r1, [r5, #40]	; 0x28
  mp->next = NULL;
 8008e28:	62ee      	str	r6, [r5, #44]	; 0x2c
  mp->object_size = size;
 8008e2a:	211c      	movs	r1, #28
 8008e2c:	6329      	str	r1, [r5, #48]	; 0x30
  mp->align = align;
 8008e2e:	636a      	str	r2, [r5, #52]	; 0x34
  mp->provider = provider;
 8008e30:	63ab      	str	r3, [r5, #56]	; 0x38
 8008e32:	f105 033c 	add.w	r3, r5, #60	; 0x3c
 8008e36:	63eb      	str	r3, [r5, #60]	; 0x3c
 8008e38:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8008e3c:	642b      	str	r3, [r5, #64]	; 0x40
  tp->prio      = prio;
 8008e3e:	2380      	movs	r3, #128	; 0x80
 8008e40:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
  tp->flags     = CH_FLAG_MODE_STATIC;
 8008e44:	f884 6861 	strb.w	r6, [r4, #2145]	; 0x861
  tp->realprio  = prio;
 8008e48:	f8c4 387c 	str.w	r3, [r4, #2172]	; 0x87c
  tp->mtxlist   = NULL;
 8008e4c:	f8c4 6878 	str.w	r6, [r4, #2168]	; 0x878
  tp->epending  = (eventmask_t)0;
 8008e50:	f8c4 6874 	str.w	r6, [r4, #2164]	; 0x874
  tp->refs      = (trefs_t)1;
 8008e54:	2201      	movs	r2, #1
 8008e56:	f884 2862 	strb.w	r2, [r4, #2146]	; 0x862
  tp->name      = name;
 8008e5a:	4b5c      	ldr	r3, [pc, #368]	; (8008fcc <main+0x61c>)
 8008e5c:	f8c4 3858 	str.w	r3, [r4, #2136]	; 0x858
  REG_INSERT(tp);
 8008e60:	f8c4 4850 	str.w	r4, [r4, #2128]	; 0x850
 8008e64:	6961      	ldr	r1, [r4, #20]
 8008e66:	f8c4 1854 	str.w	r1, [r4, #2132]	; 0x854
 8008e6a:	f504 6304 	add.w	r3, r4, #2112	; 0x840
 8008e6e:	610b      	str	r3, [r1, #16]
 8008e70:	6163      	str	r3, [r4, #20]
  tlp->next = (thread_t *)tlp;
 8008e72:	f604 0168 	addw	r1, r4, #2152	; 0x868
 8008e76:	f8c4 1868 	str.w	r1, [r4, #2152]	; 0x868
  tqp->next = (thread_t *)tqp;
 8008e7a:	f604 016c 	addw	r1, r4, #2156	; 0x86c
 8008e7e:	f8c4 186c 	str.w	r1, [r4, #2156]	; 0x86c
  tqp->prev = (thread_t *)tqp;
 8008e82:	f8c4 1870 	str.w	r1, [r4, #2160]	; 0x870
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8008e86:	61a3      	str	r3, [r4, #24]
    currp->wabase = &__main_thread_stack_base__;
 8008e88:	4b51      	ldr	r3, [pc, #324]	; (8008fd0 <main+0x620>)
 8008e8a:	f8c4 385c 	str.w	r3, [r4, #2140]	; 0x85c
  currp->state = CH_STATE_CURRENT;
 8008e8e:	f884 2860 	strb.w	r2, [r4, #2144]	; 0x860
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008e92:	4b50      	ldr	r3, [pc, #320]	; (8008fd4 <main+0x624>)
 8008e94:	68d9      	ldr	r1, [r3, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008e96:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8008e9a:	0409      	lsls	r1, r1, #16
 8008e9c:	0c09      	lsrs	r1, r1, #16
  reg_value  =  (reg_value                                   |
 8008e9e:	4a4e      	ldr	r2, [pc, #312]	; (8008fd8 <main+0x628>)
 8008ea0:	430a      	orrs	r2, r1
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8008ea2:	60da      	str	r2, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008ea4:	494d      	ldr	r1, [pc, #308]	; (8008fdc <main+0x62c>)
 8008ea6:	68ca      	ldr	r2, [r1, #12]
 8008ea8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8008eac:	60ca      	str	r2, [r1, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8008eae:	494c      	ldr	r1, [pc, #304]	; (8008fe0 <main+0x630>)
 8008eb0:	680a      	ldr	r2, [r1, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	600a      	str	r2, [r1, #0]
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008eb8:	2210      	movs	r2, #16
 8008eba:	77da      	strb	r2, [r3, #31]
 8008ebc:	2220      	movs	r2, #32
 8008ebe:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  if ((ch.dbg.isr_cnt != (cnt_t)0) || (ch.dbg.lock_cnt != (cnt_t)0)) {
 8008ec2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ec4:	b90b      	cbnz	r3, 8008eca <main+0x51a>
 8008ec6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ec8:	b113      	cbz	r3, 8008ed0 <main+0x520>
    chSysHalt("SV#3");
 8008eca:	4846      	ldr	r0, [pc, #280]	; (8008fe4 <main+0x634>)
 8008ecc:	f7fc ff58 	bl	8005d80 <chSysHalt>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	f383 8811 	msr	BASEPRI, r3
  __ASM volatile ("cpsie i" : : : "memory");
 8008ed6:	b662      	cpsie	i
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8008ed8:	4843      	ldr	r0, [pc, #268]	; (8008fe8 <main+0x638>)
 8008eda:	f7fe fba1 	bl	8007620 <chRegFindThreadByWorkingArea>
 8008ede:	b110      	cbz	r0, 8008ee6 <main+0x536>
 8008ee0:	4842      	ldr	r0, [pc, #264]	; (8008fec <main+0x63c>)
 8008ee2:	f7fc ff4d 	bl	8005d80 <chSysHalt>
 8008ee6:	4b40      	ldr	r3, [pc, #256]	; (8008fe8 <main+0x638>)
    *startp++ = v;
 8008ee8:	2155      	movs	r1, #85	; 0x55
  while (startp < endp) {
 8008eea:	f503 72b0 	add.w	r2, r3, #352	; 0x160
    *startp++ = v;
 8008eee:	f803 1b01 	strb.w	r1, [r3], #1
  while (startp < endp) {
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d1fb      	bne.n	8008eee <main+0x53e>
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8008ef6:	2420      	movs	r4, #32
 8008ef8:	f384 8811 	msr	BASEPRI, r4
  _dbg_check_lock();
 8008efc:	f7fe fa80 	bl	8007400 <_dbg_check_lock>
  chDbgCheckClassI();
 8008f00:	f7fc ff7e 	bl	8005e00 <chDbgCheckClassI>
  tp->wabase = tdp->wbase;
 8008f04:	4b38      	ldr	r3, [pc, #224]	; (8008fe8 <main+0x638>)
 8008f06:	f8c3 3134 	str.w	r3, [r3, #308]	; 0x134
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 8008f0a:	f103 02b4 	add.w	r2, r3, #180	; 0xb4
 8008f0e:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
 8008f12:	4a37      	ldr	r2, [pc, #220]	; (8008ff0 <main+0x640>)
 8008f14:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008f18:	2100      	movs	r1, #0
 8008f1a:	f8c3 10f8 	str.w	r1, [r3, #248]	; 0xf8
 8008f1e:	4a35      	ldr	r2, [pc, #212]	; (8008ff4 <main+0x644>)
 8008f20:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  tp->prio      = prio;
 8008f24:	2201      	movs	r2, #1
 8008f26:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  tp->state     = CH_STATE_WTSTART;
 8008f2a:	2002      	movs	r0, #2
 8008f2c:	f883 0138 	strb.w	r0, [r3, #312]	; 0x138
  tp->flags     = CH_FLAG_MODE_STATIC;
 8008f30:	f883 1139 	strb.w	r1, [r3, #313]	; 0x139
  tp->realprio  = prio;
 8008f34:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
  tp->mtxlist   = NULL;
 8008f38:	f8c3 1150 	str.w	r1, [r3, #336]	; 0x150
  tp->epending  = (eventmask_t)0;
 8008f3c:	f8c3 114c 	str.w	r1, [r3, #332]	; 0x14c
  tp->refs      = (trefs_t)1;
 8008f40:	f883 213a 	strb.w	r2, [r3, #314]	; 0x13a
  tp->name      = name;
 8008f44:	4a2c      	ldr	r2, [pc, #176]	; (8008ff8 <main+0x648>)
 8008f46:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
  REG_INSERT(tp);
 8008f4a:	4a18      	ldr	r2, [pc, #96]	; (8008fac <main+0x5fc>)
 8008f4c:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
 8008f50:	6955      	ldr	r5, [r2, #20]
 8008f52:	f8c3 512c 	str.w	r5, [r3, #300]	; 0x12c
 8008f56:	f503 708c 	add.w	r0, r3, #280	; 0x118
 8008f5a:	6128      	str	r0, [r5, #16]
 8008f5c:	6150      	str	r0, [r2, #20]
  tlp->next = (thread_t *)tlp;
 8008f5e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8008f62:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  tqp->next = (thread_t *)tqp;
 8008f66:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 8008f6a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  tqp->prev = (thread_t *)tqp;
 8008f6e:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  chSchWakeupS(tp, MSG_OK);
 8008f72:	f7fe f86d 	bl	8007050 <chSchWakeupS>
  chSysUnlock();
 8008f76:	f7fe fa13 	bl	80073a0 <chSysUnlock.lto_priv.7>
  halInit();
  chSysInit();
 

  
  palSetPad(GPIOB, 5);
 8008f7a:	4b20      	ldr	r3, [pc, #128]	; (8008ffc <main+0x64c>)
 8008f7c:	831c      	strh	r4, [r3, #24]
 8008f7e:	f384 8811 	msr	BASEPRI, r4
 8008f82:	f7fe fa3d 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((wdgp->state == WDG_STOP) || (wdgp->state == WDG_READY),
 8008f86:	4b06      	ldr	r3, [pc, #24]	; (8008fa0 <main+0x5f0>)
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d938      	bls.n	8009004 <main+0x654>
 8008f92:	481b      	ldr	r0, [pc, #108]	; (8009000 <main+0x650>)
 8008f94:	f7fc fef4 	bl	8005d80 <chSysHalt>
 8008f98:	40003c00 	.word	0x40003c00
 8008f9c:	0800b5b8 	.word	0x0800b5b8
 8008fa0:	20001564 	.word	0x20001564
 8008fa4:	40003000 	.word	0x40003000
 8008fa8:	e0042000 	.word	0xe0042000
 8008fac:	200015d8 	.word	0x200015d8
 8008fb0:	20002008 	.word	0x20002008
 8008fb4:	200041a0 	.word	0x200041a0
 8008fb8:	2000a000 	.word	0x2000a000
 8008fbc:	20002014 	.word	0x20002014
 8008fc0:	08007431 	.word	0x08007431
 8008fc4:	20001e60 	.word	0x20001e60
 8008fc8:	08005e81 	.word	0x08005e81
 8008fcc:	0800b69c 	.word	0x0800b69c
 8008fd0:	20000400 	.word	0x20000400
 8008fd4:	e000ed00 	.word	0xe000ed00
 8008fd8:	05fa0300 	.word	0x05fa0300
 8008fdc:	e000edf0 	.word	0xe000edf0
 8008fe0:	e0001000 	.word	0xe0001000
 8008fe4:	0800cf54 	.word	0x0800cf54
 8008fe8:	20001ea8 	.word	0x20001ea8
 8008fec:	0800b1dc 	.word	0x0800b1dc
 8008ff0:	080061c1 	.word	0x080061c1
 8008ff4:	080002e1 	.word	0x080002e1
 8008ff8:	0800cf5c 	.word	0x0800cf5c
 8008ffc:	48000400 	.word	0x48000400
 8009000:	0800b2dc 	.word	0x0800b2dc
  wdgp->config = config;
 8009004:	4bbc      	ldr	r3, [pc, #752]	; (80092f8 <main+0x948>)
 8009006:	4abd      	ldr	r2, [pc, #756]	; (80092fc <main+0x94c>)
 8009008:	605a      	str	r2, [r3, #4]
  wdgp->wdg->KR   = KR_KEY_ENABLE;
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	f64c 41cc 	movw	r1, #52428	; 0xcccc
 8009010:	6011      	str	r1, [r2, #0]
  wdgp->wdg->KR   = KR_KEY_WRITE;
 8009012:	689a      	ldr	r2, [r3, #8]
 8009014:	f245 5155 	movw	r1, #21845	; 0x5555
 8009018:	6011      	str	r1, [r2, #0]
  wdgp->wdg->PR   = wdgp->config->pr;
 800901a:	689a      	ldr	r2, [r3, #8]
 800901c:	6859      	ldr	r1, [r3, #4]
 800901e:	6809      	ldr	r1, [r1, #0]
 8009020:	6051      	str	r1, [r2, #4]
  wdgp->wdg->RLR  = wdgp->config->rlr;
 8009022:	685a      	ldr	r2, [r3, #4]
 8009024:	6899      	ldr	r1, [r3, #8]
 8009026:	6850      	ldr	r0, [r2, #4]
 8009028:	6088      	str	r0, [r1, #8]
  while (wdgp->wdg->SR != 0)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	68d9      	ldr	r1, [r3, #12]
 800902e:	2900      	cmp	r1, #0
 8009030:	d1fc      	bne.n	800902c <main+0x67c>
  wdgp->wdg->WINR = wdgp->config->winr;
 8009032:	6892      	ldr	r2, [r2, #8]
 8009034:	611a      	str	r2, [r3, #16]
  wdgp->state = WDG_READY;
 8009036:	4bb0      	ldr	r3, [pc, #704]	; (80092f8 <main+0x948>)
 8009038:	2202      	movs	r2, #2
 800903a:	701a      	strb	r2, [r3, #0]
  _dbg_check_unlock();
 800903c:	f7fe f998 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009040:	4aaf      	ldr	r2, [pc, #700]	; (8009300 <main+0x950>)
 8009042:	6813      	ldr	r3, [r2, #0]
 8009044:	4293      	cmp	r3, r2
 8009046:	d007      	beq.n	8009058 <main+0x6a8>
 8009048:	6992      	ldr	r2, [r2, #24]
 800904a:	6892      	ldr	r2, [r2, #8]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	429a      	cmp	r2, r3
 8009050:	d202      	bcs.n	8009058 <main+0x6a8>
 8009052:	48ac      	ldr	r0, [pc, #688]	; (8009304 <main+0x954>)
 8009054:	f7fc fe94 	bl	8005d80 <chSysHalt>
 8009058:	2400      	movs	r4, #0
 800905a:	f384 8811 	msr	BASEPRI, r4
  wdgStart(&WDGD1, &wdgcfg);
  wdgReset(&WDGD1);
 800905e:	48a6      	ldr	r0, [pc, #664]	; (80092f8 <main+0x948>)
 8009060:	f7fe febe 	bl	8007de0 <wdgReset>
  mbp->buffer = buf;
 8009064:	4ba8      	ldr	r3, [pc, #672]	; (8009308 <main+0x958>)
 8009066:	4aa9      	ldr	r2, [pc, #676]	; (800930c <main+0x95c>)
 8009068:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
 800906a:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
 800906c:	609a      	str	r2, [r3, #8]
  mbp->top    = &buf[n];
 800906e:	3264      	adds	r2, #100	; 0x64
 8009070:	605a      	str	r2, [r3, #4]
  mbp->cnt    = (size_t)0;
 8009072:	611c      	str	r4, [r3, #16]
  mbp->reset  = false;
 8009074:	751c      	strb	r4, [r3, #20]
  tqp->next = (thread_t *)tqp;
 8009076:	f103 0218 	add.w	r2, r3, #24
 800907a:	619a      	str	r2, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 800907c:	61da      	str	r2, [r3, #28]
  tqp->next = (thread_t *)tqp;
 800907e:	f103 0220 	add.w	r2, r3, #32
 8009082:	621a      	str	r2, [r3, #32]
  tqp->prev = (thread_t *)tqp;
 8009084:	625a      	str	r2, [r3, #36]	; 0x24
  mbp->buffer = buf;
 8009086:	4ba2      	ldr	r3, [pc, #648]	; (8009310 <main+0x960>)
 8009088:	4aa2      	ldr	r2, [pc, #648]	; (8009314 <main+0x964>)
 800908a:	601a      	str	r2, [r3, #0]
  mbp->rdptr  = buf;
 800908c:	60da      	str	r2, [r3, #12]
  mbp->wrptr  = buf;
 800908e:	609a      	str	r2, [r3, #8]
  mbp->top    = &buf[n];
 8009090:	3264      	adds	r2, #100	; 0x64
 8009092:	605a      	str	r2, [r3, #4]
  mbp->cnt    = (size_t)0;
 8009094:	611c      	str	r4, [r3, #16]
  mbp->reset  = false;
 8009096:	751c      	strb	r4, [r3, #20]
  tqp->next = (thread_t *)tqp;
 8009098:	f103 0218 	add.w	r2, r3, #24
 800909c:	619a      	str	r2, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 800909e:	61da      	str	r2, [r3, #28]
  tqp->next = (thread_t *)tqp;
 80090a0:	f103 0220 	add.w	r2, r3, #32
 80090a4:	621a      	str	r2, [r3, #32]
  tqp->prev = (thread_t *)tqp;
 80090a6:	625a      	str	r2, [r3, #36]	; 0x24
  chMBObjectInit(&RxMbx,&RxMbxBuff,MAILBOX_SIZE);
  chMBObjectInit(&RxMbx2,&RxMbxBuff2,MAILBOX_SIZE);
  adcStart(&ADCD1, NULL);
 80090a8:	4d9b      	ldr	r5, [pc, #620]	; (8009318 <main+0x968>)
 80090aa:	4621      	mov	r1, r4
 80090ac:	4628      	mov	r0, r5
 80090ae:	f7ff fb9f 	bl	80087f0 <adcStart>
  ADC12_COMMON->CCR |= ADC12_CCR_VREFEN;
 80090b2:	4a9a      	ldr	r2, [pc, #616]	; (800931c <main+0x96c>)
 80090b4:	6893      	ldr	r3, [r2, #8]
 80090b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090ba:	6093      	str	r3, [r2, #8]
  ADC34_COMMON->CCR |= ADC34_CCR_VREFEN;
 80090bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80090c0:	6893      	ldr	r3, [r2, #8]
 80090c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80090c6:	6093      	str	r3, [r2, #8]
 *
 * @notapi
 */
void adcSTM32EnableTS(ADCDriver *adcp) {

  adcp->adcc->CCR |= ADC_CCR_TSEN;
 80090c8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80090ca:	6893      	ldr	r3, [r2, #8]
 80090cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80090d0:	6093      	str	r3, [r2, #8]
  /*
   * SPI1 I/O pins setup.
   */


  palSetPadMode(GPIOD, 9, PAL_MODE_INPUT_ANALOG);
 80090d2:	4e93      	ldr	r6, [pc, #588]	; (8009320 <main+0x970>)
 80090d4:	2203      	movs	r2, #3
 80090d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80090da:	4630      	mov	r0, r6
 80090dc:	f7fd f9e0 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 10, PAL_MODE_OUTPUT_PUSHPULL);
 80090e0:	2201      	movs	r2, #1
 80090e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7fd f9da 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 11, PAL_MODE_INPUT_ANALOG);
 80090ec:	2203      	movs	r2, #3
 80090ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80090f2:	4630      	mov	r0, r6
 80090f4:	f7fd f9d4 	bl	80064a0 <_pal_lld_setgroupmode>
  
 
  palSetPadMode(GPIOD, 12, PAL_MODE_INPUT_ANALOG);
 80090f8:	2203      	movs	r2, #3
 80090fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80090fe:	4630      	mov	r0, r6
 8009100:	f7fd f9ce 	bl	80064a0 <_pal_lld_setgroupmode>
  
  palSetPadMode(GPIOD, 13, PAL_MODE_INPUT_ANALOG);
 8009104:	2203      	movs	r2, #3
 8009106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800910a:	4630      	mov	r0, r6
 800910c:	f7fd f9c8 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOD, 14, PAL_MODE_INPUT_ANALOG); // wind dir
 8009110:	2203      	movs	r2, #3
 8009112:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009116:	4630      	mov	r0, r6
 8009118:	f7fd f9c2 	bl	80064a0 <_pal_lld_setgroupmode>


  
  palSetPadMode(GPIOB, 6, PAL_MODE_ALTERNATE(7));    
 800911c:	4d81      	ldr	r5, [pc, #516]	; (8009324 <main+0x974>)
 800911e:	f240 3282 	movw	r2, #898	; 0x382
 8009122:	2140      	movs	r1, #64	; 0x40
 8009124:	4628      	mov	r0, r5
 8009126:	f7fd f9bb 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 7, PAL_MODE_ALTERNATE(7));
 800912a:	f240 3282 	movw	r2, #898	; 0x382
 800912e:	2180      	movs	r1, #128	; 0x80
 8009130:	4628      	mov	r0, r5
 8009132:	f7fd f9b5 	bl	80064a0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOA, 2, PAL_MODE_ALTERNATE(7));
 8009136:	f240 3282 	movw	r2, #898	; 0x382
 800913a:	2104      	movs	r1, #4
 800913c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009140:	f7fd f9ae 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOA, 3, PAL_MODE_ALTERNATE(7));
 8009144:	f240 3282 	movw	r2, #898	; 0x382
 8009148:	2108      	movs	r1, #8
 800914a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800914e:	f7fd f9a7 	bl	80064a0 <_pal_lld_setgroupmode>


  palSetPadMode(GPIOE, 0, PAL_MODE_OUTPUT_PUSHPULL);
 8009152:	4c75      	ldr	r4, [pc, #468]	; (8009328 <main+0x978>)
 8009154:	2201      	movs	r2, #1
 8009156:	4611      	mov	r1, r2
 8009158:	4620      	mov	r0, r4
 800915a:	f7fd f9a1 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOE, 1, PAL_MODE_OUTPUT_PUSHPULL);    
 800915e:	2201      	movs	r2, #1
 8009160:	2102      	movs	r1, #2
 8009162:	4620      	mov	r0, r4
 8009164:	f7fd f99c 	bl	80064a0 <_pal_lld_setgroupmode>


  
  // Temp SPI

  palSetPadMode(GPIOA, 1, PAL_MODE_OUTPUT_PUSHPULL); // tx/rx
 8009168:	2201      	movs	r2, #1
 800916a:	2102      	movs	r1, #2
 800916c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8009170:	f7fd f996 	bl	80064a0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOC, 0, PAL_MODE_OUTPUT_PUSHPULL); // rtd 0
 8009174:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8009178:	2201      	movs	r2, #1
 800917a:	4611      	mov	r1, r2
 800917c:	4620      	mov	r0, r4
 800917e:	f7fd f98f 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 1, PAL_MODE_OUTPUT_PUSHPULL); // rtd 1
 8009182:	2201      	movs	r2, #1
 8009184:	2102      	movs	r1, #2
 8009186:	4620      	mov	r0, r4
 8009188:	f7fd f98a 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 2, PAL_MODE_OUTPUT_PUSHPULL); // rtd 2
 800918c:	2201      	movs	r2, #1
 800918e:	2104      	movs	r1, #4
 8009190:	4620      	mov	r0, r4
 8009192:	f7fd f985 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 3, PAL_MODE_OUTPUT_PUSHPULL); // rtd 3 
 8009196:	2201      	movs	r2, #1
 8009198:	2108      	movs	r1, #8
 800919a:	4620      	mov	r0, r4
 800919c:	f7fd f980 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 4, PAL_MODE_OUTPUT_PUSHPULL); // rtd 4
 80091a0:	2201      	movs	r2, #1
 80091a2:	2110      	movs	r1, #16
 80091a4:	4620      	mov	r0, r4
 80091a6:	f7fd f97b 	bl	80064a0 <_pal_lld_setgroupmode>
  //palSetPadMode(GPIOC, 5, PAL_MODE_OUTPUT_PUSHPULL); // common line
  palSetPadMode(GPIOC, 6, PAL_MODE_INPUT_PULLUP); // raingauge
 80091aa:	2220      	movs	r2, #32
 80091ac:	2140      	movs	r1, #64	; 0x40
 80091ae:	4620      	mov	r0, r4
 80091b0:	f7fd f976 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 7, PAL_MODE_INPUT_PULLUP); // rain enabled
 80091b4:	2220      	movs	r2, #32
 80091b6:	2180      	movs	r1, #128	; 0x80
 80091b8:	4620      	mov	r0, r4
 80091ba:	f7fd f971 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPad(GPIOC,0);
 80091be:	2701      	movs	r7, #1
 80091c0:	8327      	strh	r7, [r4, #24]
  palClearPad(GPIOD,10);
 80091c2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091c6:	8371      	strh	r1, [r6, #26]
  palSetPad(GPIOC,1);
 80091c8:	2302      	movs	r3, #2
 80091ca:	8323      	strh	r3, [r4, #24]
  palSetPad(GPIOC,2);
 80091cc:	2304      	movs	r3, #4
 80091ce:	8323      	strh	r3, [r4, #24]
  palSetPad(GPIOC,3);
 80091d0:	2308      	movs	r3, #8
 80091d2:	8323      	strh	r3, [r4, #24]
  palSetPad(GPIOC,4);
 80091d4:	2310      	movs	r3, #16
 80091d6:	8323      	strh	r3, [r4, #24]
  //palSetPad(GPIOC,5);
  
  palSetPadMode(GPIOC, 10, PAL_MODE_ALTERNATE(6)); // SPI3 
 80091d8:	f240 3202 	movw	r2, #770	; 0x302
 80091dc:	4620      	mov	r0, r4
 80091de:	f7fd f95f 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 11, PAL_MODE_ALTERNATE(6));
 80091e2:	f240 3202 	movw	r2, #770	; 0x302
 80091e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091ea:	4620      	mov	r0, r4
 80091ec:	f7fd f958 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOC, 12, PAL_MODE_ALTERNATE(6));
 80091f0:	f240 3202 	movw	r2, #770	; 0x302
 80091f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7fd f951 	bl	80064a0 <_pal_lld_setgroupmode>
  
  palSetPadMode(GPIOB, 11, PAL_MODE_OUTPUT_PUSHPULL);                      // spi2
 80091fe:	463a      	mov	r2, r7
 8009200:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009204:	4628      	mov	r0, r5
 8009206:	f7fd f94b 	bl	80064a0 <_pal_lld_setgroupmode>

  palSetPadMode(GPIOB, 15, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST|PAL_MODE_INPUT_PULLUP);
 800920a:	f240 22ba 	movw	r2, #698	; 0x2ba
 800920e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009212:	4628      	mov	r0, r5
 8009214:	f7fd f944 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 13, PAL_MODE_ALTERNATE(5)|PAL_STM32_OSPEED_HIGHEST);
 8009218:	f240 229a 	movw	r2, #666	; 0x29a
 800921c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009220:	4628      	mov	r0, r5
 8009222:	f7fd f93d 	bl	80064a0 <_pal_lld_setgroupmode>


  
  palSetPadMode(GPIOB, 5, PAL_MODE_OUTPUT_PUSHPULL);
 8009226:	463a      	mov	r2, r7
 8009228:	2120      	movs	r1, #32
 800922a:	4628      	mov	r0, r5
 800922c:	f7fd f938 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 8, PAL_MODE_INPUT_PULLUP);
 8009230:	2220      	movs	r2, #32
 8009232:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009236:	4628      	mov	r0, r5
 8009238:	f7fd f932 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, 9, PAL_MODE_INPUT_PULLUP);
 800923c:	2220      	movs	r2, #32
 800923e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009242:	4628      	mov	r0, r5
 8009244:	f7fd f92c 	bl	80064a0 <_pal_lld_setgroupmode>
  sdStart(&SD1,&uartCfg);
 8009248:	4938      	ldr	r1, [pc, #224]	; (800932c <main+0x97c>)
 800924a:	4839      	ldr	r0, [pc, #228]	; (8009330 <main+0x980>)
 800924c:	f7ff f9c8 	bl	80085e0 <sdStart>

  



  if (*flash2 == 0xffff)
 8009250:	4b38      	ldr	r3, [pc, #224]	; (8009334 <main+0x984>)
 8009252:	881a      	ldrh	r2, [r3, #0]
 8009254:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009258:	429a      	cmp	r2, r3
 800925a:	d107      	bne.n	800926c <main+0x8bc>
      {
	  chprintf((BaseSequentialStream*)&SD1,"!!!writing flash,00\r\n");
 800925c:	4936      	ldr	r1, [pc, #216]	; (8009338 <main+0x988>)
 800925e:	4834      	ldr	r0, [pc, #208]	; (8009330 <main+0x980>)
 8009260:	f7fd fc6e 	bl	8006b40 <chprintf>
  	  write_flash(0,flash2);
 8009264:	4933      	ldr	r1, [pc, #204]	; (8009334 <main+0x984>)
 8009266:	2000      	movs	r0, #0
 8009268:	f7fc fc7a 	bl	8005b60 <write_flash>
      }
  
  lifetimeRain = *flash2/100.0;
 800926c:	4b31      	ldr	r3, [pc, #196]	; (8009334 <main+0x984>)
 800926e:	881c      	ldrh	r4, [r3, #0]
 8009270:	4620      	mov	r0, r4
 8009272:	f7f7 fac1 	bl	80007f8 <__aeabi_i2d>
 8009276:	2200      	movs	r2, #0
 8009278:	4b30      	ldr	r3, [pc, #192]	; (800933c <main+0x98c>)
 800927a:	f7f7 fc51 	bl	8000b20 <__aeabi_ddiv>
 800927e:	f7f7 fdfd 	bl	8000e7c <__aeabi_d2f>
 8009282:	4b2f      	ldr	r3, [pc, #188]	; (8009340 <main+0x990>)
 8009284:	6018      	str	r0, [r3, #0]
  chprintf((BaseSequentialStream*)&SD1,"--------Rain: %d\r\n",*flash2);
 8009286:	4622      	mov	r2, r4
 8009288:	492e      	ldr	r1, [pc, #184]	; (8009344 <main+0x994>)
 800928a:	4829      	ldr	r0, [pc, #164]	; (8009330 <main+0x980>)
 800928c:	f7fd fc58 	bl	8006b40 <chprintf>

  if (*flash1 == 0xffff){
 8009290:	4b2d      	ldr	r3, [pc, #180]	; (8009348 <main+0x998>)
 8009292:	881b      	ldrh	r3, [r3, #0]
 8009294:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009298:	4293      	cmp	r3, r2
 800929a:	d122      	bne.n	80092e2 <main+0x932>
      my_address = 60; // if flash hasn't been set up yet we default to
 800929c:	4e2b      	ldr	r6, [pc, #172]	; (800934c <main+0x99c>)
 800929e:	223c      	movs	r2, #60	; 0x3c
 80092a0:	7032      	strb	r2, [r6, #0]
                       // id 60, baud 9600
      baud_rate=0;
 80092a2:	2300      	movs	r3, #0
 80092a4:	492a      	ldr	r1, [pc, #168]	; (8009350 <main+0x9a0>)
 80092a6:	700b      	strb	r3, [r1, #0]
      chprintf((BaseSequentialStream*)&SD1,"Resetting Flash - I am # %d,%d\r\n",my_address,baud_rate);
 80092a8:	4c21      	ldr	r4, [pc, #132]	; (8009330 <main+0x980>)
 80092aa:	492a      	ldr	r1, [pc, #168]	; (8009354 <main+0x9a4>)
 80092ac:	4620      	mov	r0, r4
 80092ae:	f7fd fc47 	bl	8006b40 <chprintf>
      write_flash((my_address&0xff),flash1);
 80092b2:	4d25      	ldr	r5, [pc, #148]	; (8009348 <main+0x998>)
 80092b4:	4629      	mov	r1, r5
 80092b6:	7830      	ldrb	r0, [r6, #0]
 80092b8:	f7fc fc52 	bl	8005b60 <write_flash>
      chprintf((BaseSequentialStream*)&SD1,"ReadingFlash - I have # %x\r\n",*flash1);
 80092bc:	882a      	ldrh	r2, [r5, #0]
 80092be:	4926      	ldr	r1, [pc, #152]	; (8009358 <main+0x9a8>)
 80092c0:	4620      	mov	r0, r4
 80092c2:	f7fd fc3d 	bl	8006b40 <chprintf>
 80092c6:	2320      	movs	r3, #32
 80092c8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 80092cc:	f7fe f898 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
 80092d0:	4b22      	ldr	r3, [pc, #136]	; (800935c <main+0x9ac>)
 80092d2:	7a1a      	ldrb	r2, [r3, #8]
 80092d4:	1e53      	subs	r3, r2, #1
 80092d6:	b2db      	uxtb	r3, r3
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d947      	bls.n	800936c <main+0x9bc>
 80092dc:	4820      	ldr	r0, [pc, #128]	; (8009360 <main+0x9b0>)
 80092de:	f7fc fd4f 	bl	8005d80 <chSysHalt>
  }
  else{
      // flash has been written - use those values
      // init saved values in case we only choose to reset
      // just id or just address later.
      my_address = (*flash1) & 0xff;
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	4919      	ldr	r1, [pc, #100]	; (800934c <main+0x99c>)
 80092e6:	700a      	strb	r2, [r1, #0]
      save_address = my_address;
 80092e8:	491e      	ldr	r1, [pc, #120]	; (8009364 <main+0x9b4>)
 80092ea:	700a      	strb	r2, [r1, #0]
      baud_rate = ((*flash1) & 0xff00) >> 8;
 80092ec:	0a1b      	lsrs	r3, r3, #8
 80092ee:	4a18      	ldr	r2, [pc, #96]	; (8009350 <main+0x9a0>)
 80092f0:	7013      	strb	r3, [r2, #0]
      save_baud_rate = baud_rate;
 80092f2:	4a1d      	ldr	r2, [pc, #116]	; (8009368 <main+0x9b8>)
 80092f4:	7013      	strb	r3, [r2, #0]
 80092f6:	e7e6      	b.n	80092c6 <main+0x916>
 80092f8:	20001564 	.word	0x20001564
 80092fc:	0800d6d4 	.word	0x0800d6d4
 8009300:	200015d8 	.word	0x200015d8
 8009304:	0800b0d4 	.word	0x0800b0d4
 8009308:	200012fc 	.word	0x200012fc
 800930c:	2000134c 	.word	0x2000134c
 8009310:	20001324 	.word	0x20001324
 8009314:	200013b0 	.word	0x200013b0
 8009318:	2000121c 	.word	0x2000121c
 800931c:	50000300 	.word	0x50000300
 8009320:	48000c00 	.word	0x48000c00
 8009324:	48000400 	.word	0x48000400
 8009328:	48001000 	.word	0x48001000
 800932c:	200011b4 	.word	0x200011b4
 8009330:	20001414 	.word	0x20001414
 8009334:	0803e800 	.word	0x0803e800
 8009338:	0800cf64 	.word	0x0800cf64
 800933c:	40590000 	.word	0x40590000
 8009340:	2000204c 	.word	0x2000204c
 8009344:	0800cf7c 	.word	0x0800cf7c
 8009348:	0803f000 	.word	0x0803f000
 800934c:	200020bc 	.word	0x200020bc
 8009350:	200015d4 	.word	0x200015d4
 8009354:	0800cf90 	.word	0x0800cf90
 8009358:	0800cfb4 	.word	0x0800cfb4
 800935c:	20001474 	.word	0x20001474
 8009360:	0800b458 	.word	0x0800b458
 8009364:	20002504 	.word	0x20002504
 8009368:	20002505 	.word	0x20002505
 *
 * @notapi
 */
void sd_lld_stop(SerialDriver *sdp) {

  if (sdp->state == SD_READY) {
 800936c:	2a02      	cmp	r2, #2
 800936e:	d10d      	bne.n	800938c <main+0x9dc>
    /* UART is de-initialized then clocks are disabled.*/
    usart_deinit(sdp->usart);
 8009370:	4bc9      	ldr	r3, [pc, #804]	; (8009698 <main+0xce8>)
 8009372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  u->CR1 = 0;
 8009374:	2200      	movs	r2, #0
 8009376:	601a      	str	r2, [r3, #0]
  u->CR2 = 0;
 8009378:	605a      	str	r2, [r3, #4]
  u->CR3 = 0;
 800937a:	609a      	str	r2, [r3, #8]
      return;
    }
#endif
#if STM32_SERIAL_USE_USART2
    if (&SD2 == sdp) {
      rccDisableUSART2();
 800937c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8009380:	f502 3204 	add.w	r2, r2, #135168	; 0x21000
 8009384:	69d3      	ldr	r3, [r2, #28]
 8009386:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800938a:	61d3      	str	r3, [r2, #28]
  sdp->state = SD_STOP;
 800938c:	4cc2      	ldr	r4, [pc, #776]	; (8009698 <main+0xce8>)
 800938e:	2301      	movs	r3, #1
 8009390:	7223      	strb	r3, [r4, #8]
  osalDbgCheckClassI();
 8009392:	f7fc fd35 	bl	8005e00 <chDbgCheckClassI>
  oqp->q_rdptr = oqp->q_buffer;
 8009396:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8009398:	64a2      	str	r2, [r4, #72]	; 0x48
  oqp->q_wrptr = oqp->q_buffer;
 800939a:	6462      	str	r2, [r4, #68]	; 0x44
  oqp->q_counter = qSizeX(oqp);
 800939c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800939e:	1a9b      	subs	r3, r3, r2
 80093a0:	63a3      	str	r3, [r4, #56]	; 0x38
  chThdDequeueAllI(tqp, msg);
 80093a2:	f06f 0101 	mvn.w	r1, #1
 80093a6:	f104 0030 	add.w	r0, r4, #48	; 0x30
 80093aa:	f7fc fe21 	bl	8005ff0 <chThdDequeueAllI>
  osalDbgCheckClassI();
 80093ae:	f7fc fd27 	bl	8005e00 <chDbgCheckClassI>
  iqp->q_rdptr = iqp->q_buffer;
 80093b2:	69a3      	ldr	r3, [r4, #24]
 80093b4:	6263      	str	r3, [r4, #36]	; 0x24
  iqp->q_wrptr = iqp->q_buffer;
 80093b6:	6223      	str	r3, [r4, #32]
  iqp->q_counter = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	6163      	str	r3, [r4, #20]
 80093bc:	f06f 0101 	mvn.w	r1, #1
 80093c0:	f104 000c 	add.w	r0, r4, #12
 80093c4:	f7fc fe14 	bl	8005ff0 <chThdDequeueAllI>
  chSchRescheduleS();
 80093c8:	f7fd fe12 	bl	8006ff0 <chSchRescheduleS>
  chSysUnlock();
 80093cc:	f7fe f800 	bl	80073d0 <chSysUnlock.lto_priv.4>
    if (baud_rate == 1)
 80093d0:	4bb2      	ldr	r3, [pc, #712]	; (800969c <main+0xcec>)
 80093d2:	781d      	ldrb	r5, [r3, #0]
 80093d4:	2d01      	cmp	r5, #1
	sdStart(&SD2, &uartCfg3);
 80093d6:	bf07      	ittee	eq
 80093d8:	49b1      	ldreq	r1, [pc, #708]	; (80096a0 <main+0xcf0>)
 80093da:	4620      	moveq	r0, r4
	sdStart(&SD2, &uartCfg2);
 80093dc:	49b1      	ldrne	r1, [pc, #708]	; (80096a4 <main+0xcf4>)
 80093de:	48ae      	ldrne	r0, [pc, #696]	; (8009698 <main+0xce8>)
 80093e0:	f7ff f8fe 	bl	80085e0 <sdStart>
      



  restart_modbus();
  chprintf((BaseSequentialStream*)&SD1,"Hello World - I am # %d,%d\r\n",my_address,baud_rate);
 80093e4:	4cb0      	ldr	r4, [pc, #704]	; (80096a8 <main+0xcf8>)
 80093e6:	462b      	mov	r3, r5
 80093e8:	4ab0      	ldr	r2, [pc, #704]	; (80096ac <main+0xcfc>)
 80093ea:	7812      	ldrb	r2, [r2, #0]
 80093ec:	49b0      	ldr	r1, [pc, #704]	; (80096b0 <main+0xd00>)
 80093ee:	4620      	mov	r0, r4
 80093f0:	f7fd fba6 	bl	8006b40 <chprintf>
  palSetPad(GPIOE, 0);     // Enable TX Light
 80093f4:	4baf      	ldr	r3, [pc, #700]	; (80096b4 <main+0xd04>)
 80093f6:	2601      	movs	r6, #1
 80093f8:	831e      	strh	r6, [r3, #24]
  palSetPad(GPIOE, 1);     // Enbale RX Light
 80093fa:	2702      	movs	r7, #2
 80093fc:	831f      	strh	r7, [r3, #24]
  palSetPadMode(GPIOB, DC, PAL_MODE_OUTPUT_PUSHPULL);
 80093fe:	4dae      	ldr	r5, [pc, #696]	; (80096b8 <main+0xd08>)
 8009400:	4632      	mov	r2, r6
 8009402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009406:	4628      	mov	r0, r5
 8009408:	f7fd f84a 	bl	80064a0 <_pal_lld_setgroupmode>
  palSetPadMode(GPIOB, SPISELECT, PAL_MODE_OUTPUT_PUSHPULL);
 800940c:	4632      	mov	r2, r6
 800940e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009412:	4628      	mov	r0, r5
 8009414:	f7fd f844 	bl	80064a0 <_pal_lld_setgroupmode>
  palClearPad(GPIOB,SPISELECT);
 8009418:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800941c:	836b      	strh	r3, [r5, #26]



  init_spi();
  chprintf((BaseSequentialStream*)&SD1,"SPI init\r\n");
 800941e:	49a7      	ldr	r1, [pc, #668]	; (80096bc <main+0xd0c>)
 8009420:	4620      	mov	r0, r4
 8009422:	f7fd fb8d 	bl	8006b40 <chprintf>
      chprintf(&SD1,"do oled command A\r\n");
 8009426:	49a6      	ldr	r1, [pc, #664]	; (80096c0 <main+0xd10>)
 8009428:	4620      	mov	r0, r4
 800942a:	f7fd fb89 	bl	8006b40 <chprintf>
      chThdSleepMilliseconds(100);
 800942e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009432:	f7fe fb35 	bl	8007aa0 <chThdSleep>
      palSetPad(GPIOD,10);
 8009436:	4ba3      	ldr	r3, [pc, #652]	; (80096c4 <main+0xd14>)
 8009438:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800943c:	831a      	strh	r2, [r3, #24]
      chThdSleepMilliseconds(100);
 800943e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009442:	f7fe fb2d 	bl	8007aa0 <chThdSleep>
      	write_oled_command(0xAE);		//--Set Display off
 8009446:	20ae      	movs	r0, #174	; 0xae
 8009448:	f7ff f8a2 	bl	8008590 <write_oled_command>
	write_oled_command(0x00);		//--set low column address
 800944c:	2000      	movs	r0, #0
 800944e:	f7ff f89f 	bl	8008590 <write_oled_command>
	write_oled_command(0x10)		;//--set high column address
 8009452:	2010      	movs	r0, #16
 8009454:	f7ff f89c 	bl	8008590 <write_oled_command>
	write_oled_command(0x81);		//--set contrast control register
 8009458:	2081      	movs	r0, #129	; 0x81
 800945a:	f7ff f899 	bl	8008590 <write_oled_command>
	write_oled_command(0x7f);
 800945e:	207f      	movs	r0, #127	; 0x7f
 8009460:	f7ff f896 	bl	8008590 <write_oled_command>
	write_oled_command(0xA6);		//--set normal display
 8009464:	20a6      	movs	r0, #166	; 0xa6
 8009466:	f7ff f893 	bl	8008590 <write_oled_command>
	write_oled_command(0xa8);		//--set multiplex ratio(1 to 16)
 800946a:	20a8      	movs	r0, #168	; 0xa8
 800946c:	f7ff f890 	bl	8008590 <write_oled_command>
	write_oled_command(0x1f);		//--duty 1/32
 8009470:	201f      	movs	r0, #31
 8009472:	f7ff f88d 	bl	8008590 <write_oled_command>
	write_oled_command(0xd3);		//--set display offset
 8009476:	20d3      	movs	r0, #211	; 0xd3
 8009478:	f7ff f88a 	bl	8008590 <write_oled_command>
	write_oled_command(0x00);		//--not offset
 800947c:	2000      	movs	r0, #0
 800947e:	f7ff f887 	bl	8008590 <write_oled_command>
	write_oled_command(0xd5);		//--set display clock divide ratio/oscillator frequency
 8009482:	20d5      	movs	r0, #213	; 0xd5
 8009484:	f7ff f884 	bl	8008590 <write_oled_command>
	write_oled_command(0xf0);		//--set divide ratio
 8009488:	20f0      	movs	r0, #240	; 0xf0
 800948a:	f7ff f881 	bl	8008590 <write_oled_command>
	write_oled_command(0xd9);		//--set pre-charge period
 800948e:	20d9      	movs	r0, #217	; 0xd9
 8009490:	f7ff f87e 	bl	8008590 <write_oled_command>
	write_oled_command(0x22);
 8009494:	2022      	movs	r0, #34	; 0x22
 8009496:	f7ff f87b 	bl	8008590 <write_oled_command>
	write_oled_command(0x20);              // memory mode
 800949a:	2020      	movs	r0, #32
 800949c:	f7ff f878 	bl	8008590 <write_oled_command>
	write_oled_command(0x00);             // horizontal mode
 80094a0:	2000      	movs	r0, #0
 80094a2:	f7ff f875 	bl	8008590 <write_oled_command>
	write_oled_command(0xa0);		//--set segment re-map 95 to 0	
 80094a6:	20a0      	movs	r0, #160	; 0xa0
 80094a8:	f7ff f872 	bl	8008590 <write_oled_command>
	write_oled_command(0x22);
 80094ac:	2022      	movs	r0, #34	; 0x22
 80094ae:	f7ff f86f 	bl	8008590 <write_oled_command>
	write_oled_command(0x0);
 80094b2:	2000      	movs	r0, #0
 80094b4:	f7ff f86c 	bl	8008590 <write_oled_command>
	write_oled_command(0x3);
 80094b8:	2003      	movs	r0, #3
 80094ba:	f7ff f869 	bl	8008590 <write_oled_command>
	write_oled_command(0xda);		//--set com pins hardware configuration
 80094be:	20da      	movs	r0, #218	; 0xda
 80094c0:	f7ff f866 	bl	8008590 <write_oled_command>
	write_oled_command(0x02);		//disable left/right remap and set for sequential
 80094c4:	4638      	mov	r0, r7
 80094c6:	f7ff f863 	bl	8008590 <write_oled_command>
	write_oled_command(0xdb);		//--set vcomh
 80094ca:	20db      	movs	r0, #219	; 0xdb
 80094cc:	f7ff f860 	bl	8008590 <write_oled_command>
	write_oled_command(0x49);		//--0.83*vref
 80094d0:	2049      	movs	r0, #73	; 0x49
 80094d2:	f7ff f85d 	bl	8008590 <write_oled_command>
	write_oled_command(0x8d);		//--set DC-DC enable
 80094d6:	208d      	movs	r0, #141	; 0x8d
 80094d8:	f7ff f85a 	bl	8008590 <write_oled_command>
	write_oled_command(0x14);
 80094dc:	2014      	movs	r0, #20
 80094de:	f7ff f857 	bl	8008590 <write_oled_command>
	write_oled_command(0xAF);		//--turn on oled panel
 80094e2:	20af      	movs	r0, #175	; 0xaf
 80094e4:	f7ff f854 	bl	8008590 <write_oled_command>
  init_oled();
  clear_oled();
 80094e8:	f7fd fada 	bl	8006aa0 <clear_oled>
  chprintf((BaseSequentialStream*)&SD1,"OLED init\r\n");
 80094ec:	4976      	ldr	r1, [pc, #472]	; (80096c8 <main+0xd18>)
 80094ee:	4620      	mov	r0, r4
 80094f0:	f7fd fb26 	bl	8006b40 <chprintf>
  
  chThdCreateStatic(waThread2, sizeof(waThread2), NORMALPRIO, Thread2, NULL);
 80094f4:	2400      	movs	r4, #0
 80094f6:	9400      	str	r4, [sp, #0]
 80094f8:	4b74      	ldr	r3, [pc, #464]	; (80096cc <main+0xd1c>)
 80094fa:	2280      	movs	r2, #128	; 0x80
 80094fc:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009500:	4873      	ldr	r0, [pc, #460]	; (80096d0 <main+0xd20>)
 8009502:	f7fe fc05 	bl	8007d10 <chThdCreateStatic>

  
  feedWatchdog();
 8009506:	f7fe fc9b 	bl	8007e40 <feedWatchdog>
  clear_oled();
 800950a:	f7fd fac9 	bl	8006aa0 <clear_oled>
  oled_draw_string(0,0,"Helios ");
 800950e:	4a71      	ldr	r2, [pc, #452]	; (80096d4 <main+0xd24>)
 8009510:	4621      	mov	r1, r4
 8009512:	4620      	mov	r0, r4
 8009514:	f7fd fad4 	bl	8006ac0 <oled_draw_string>
  if (baud_rate == 1)
 8009518:	4b60      	ldr	r3, [pc, #384]	; (800969c <main+0xcec>)
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	42b3      	cmp	r3, r6
 800951e:	f040 810d 	bne.w	800973c <main+0xd8c>
      sprintf(text,"baud=19200 " );
 8009522:	4b6d      	ldr	r3, [pc, #436]	; (80096d8 <main+0xd28>)
 8009524:	4a6d      	ldr	r2, [pc, #436]	; (80096dc <main+0xd2c>)
 8009526:	ca07      	ldmia	r2, {r0, r1, r2}
 8009528:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  oled_draw_string(0,2,text);
 800952c:	4c6a      	ldr	r4, [pc, #424]	; (80096d8 <main+0xd28>)
 800952e:	4622      	mov	r2, r4
 8009530:	2102      	movs	r1, #2
 8009532:	2000      	movs	r0, #0
 8009534:	f7fd fac4 	bl	8006ac0 <oled_draw_string>
  sprintf(text,"id=%d ",my_address);
 8009538:	4b5c      	ldr	r3, [pc, #368]	; (80096ac <main+0xcfc>)
 800953a:	781a      	ldrb	r2, [r3, #0]
 800953c:	4968      	ldr	r1, [pc, #416]	; (80096e0 <main+0xd30>)
 800953e:	4620      	mov	r0, r4
 8009540:	f7f7 ff74 	bl	800142c <sprintf>
  oled_draw_string(0,3,text);
 8009544:	4622      	mov	r2, r4
 8009546:	2103      	movs	r1, #3
 8009548:	2000      	movs	r0, #0
 800954a:	f7fd fab9 	bl	8006ac0 <oled_draw_string>
  graphics_init();
  chThdSleepMilliseconds(1000);
 800954e:	f242 7010 	movw	r0, #10000	; 0x2710
 8009552:	f7fe faa5 	bl	8007aa0 <chThdSleep>
  palClearPad(GPIOA, 1);     // Recieve Enable RS485
 8009556:	2202      	movs	r2, #2
 8009558:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800955c:	835a      	strh	r2, [r3, #26]
  palClearPad(GPIOE, 0);     // Disable TX Light
 800955e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009562:	2101      	movs	r1, #1
 8009564:	8359      	strh	r1, [r3, #26]
  palClearPad(GPIOE, 1);     // Disable RX Light
 8009566:	835a      	strh	r2, [r3, #26]
  feedWatchdog();
 8009568:	f7fe fc6a 	bl	8007e40 <feedWatchdog>
  chThdSleepMilliseconds(1000);
 800956c:	f242 7010 	movw	r0, #10000	; 0x2710
 8009570:	f7fe fa96 	bl	8007aa0 <chThdSleep>
  feedWatchdog();
 8009574:	f7fe fc64 	bl	8007e40 <feedWatchdog>


  chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL);
 8009578:	2400      	movs	r4, #0
 800957a:	9400      	str	r4, [sp, #0]
 800957c:	4b59      	ldr	r3, [pc, #356]	; (80096e4 <main+0xd34>)
 800957e:	2280      	movs	r2, #128	; 0x80
 8009580:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009584:	4858      	ldr	r0, [pc, #352]	; (80096e8 <main+0xd38>)
 8009586:	f7fe fbc3 	bl	8007d10 <chThdCreateStatic>
  chThdCreateStatic(waThread6, sizeof(waThread6), NORMALPRIO, Thread6, NULL);
 800958a:	9400      	str	r4, [sp, #0]
 800958c:	4b57      	ldr	r3, [pc, #348]	; (80096ec <main+0xd3c>)
 800958e:	2280      	movs	r2, #128	; 0x80
 8009590:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8009594:	4856      	ldr	r0, [pc, #344]	; (80096f0 <main+0xd40>)
 8009596:	f7fe fbbb 	bl	8007d10 <chThdCreateStatic>
  chThdCreateStatic(waThread7, sizeof(waThread7), NORMALPRIO, Thread7, NULL);
 800959a:	9400      	str	r4, [sp, #0]
 800959c:	4b55      	ldr	r3, [pc, #340]	; (80096f4 <main+0xd44>)
 800959e:	2280      	movs	r2, #128	; 0x80
 80095a0:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 80095a4:	4854      	ldr	r0, [pc, #336]	; (80096f8 <main+0xd48>)
 80095a6:	f7fe fbb3 	bl	8007d10 <chThdCreateStatic>

  chprintf((BaseSequentialStream*)&SD1,"HelloA\r\n")  ;
 80095aa:	4d3f      	ldr	r5, [pc, #252]	; (80096a8 <main+0xcf8>)
 80095ac:	4953      	ldr	r1, [pc, #332]	; (80096fc <main+0xd4c>)
 80095ae:	4628      	mov	r0, r5
 80095b0:	f7fd fac6 	bl	8006b40 <chprintf>
  chThdCreateStatic(waThread3, sizeof(waThread3), NORMALPRIO, Thread3, NULL);
 80095b4:	9400      	str	r4, [sp, #0]
 80095b6:	4b52      	ldr	r3, [pc, #328]	; (8009700 <main+0xd50>)
 80095b8:	2280      	movs	r2, #128	; 0x80
 80095ba:	f44f 7154 	mov.w	r1, #848	; 0x350
 80095be:	4851      	ldr	r0, [pc, #324]	; (8009704 <main+0xd54>)
 80095c0:	f7fe fba6 	bl	8007d10 <chThdCreateStatic>
  chprintf((BaseSequentialStream*)&SD1,"HelloB\r\n")  ;
 80095c4:	4950      	ldr	r1, [pc, #320]	; (8009708 <main+0xd58>)
 80095c6:	4628      	mov	r0, r5
 80095c8:	f7fd faba 	bl	8006b40 <chprintf>
  chThdCreateStatic(waThread4, sizeof(waThread4), NORMALPRIO, Thread4, NULL);
 80095cc:	9400      	str	r4, [sp, #0]
 80095ce:	4b4f      	ldr	r3, [pc, #316]	; (800970c <main+0xd5c>)
 80095d0:	2280      	movs	r2, #128	; 0x80
 80095d2:	f44f 6115 	mov.w	r1, #2384	; 0x950
 80095d6:	484e      	ldr	r0, [pc, #312]	; (8009710 <main+0xd60>)
 80095d8:	f7fe fb9a 	bl	8007d10 <chThdCreateStatic>
  chprintf((BaseSequentialStream*)&SD1,"HelloC\r\n")  ;
 80095dc:	494d      	ldr	r1, [pc, #308]	; (8009714 <main+0xd64>)
 80095de:	4628      	mov	r0, r5
 80095e0:	f7fd faae 	bl	8006b40 <chprintf>
  chThdCreateStatic(waThread5, sizeof(waThread5), NORMALPRIO, Thread5, NULL);
 80095e4:	9400      	str	r4, [sp, #0]
 80095e6:	4b4c      	ldr	r3, [pc, #304]	; (8009718 <main+0xd68>)
 80095e8:	2280      	movs	r2, #128	; 0x80
 80095ea:	f44f 7154 	mov.w	r1, #848	; 0x350
 80095ee:	484b      	ldr	r0, [pc, #300]	; (800971c <main+0xd6c>)
 80095f0:	f7fe fb8e 	bl	8007d10 <chThdCreateStatic>
  float outsideTemp;
  float internalTemp;

  //Default OPAMP4 CSR 10880000
  
  OPAMP4->CSR = 0X8041;
 80095f4:	4b4a      	ldr	r3, [pc, #296]	; (8009720 <main+0xd70>)
 80095f6:	f248 0241 	movw	r2, #32833	; 0x8041
 80095fa:	601a      	str	r2, [r3, #0]
  //chprintf(&SD1,"Default OPAMP4 CSR %X\r\n",OPAMP4->CSR);

  irradiance3 = 0;
 80095fc:	4b49      	ldr	r3, [pc, #292]	; (8009724 <main+0xd74>)
 80095fe:	2200      	movs	r2, #0
 8009600:	601a      	str	r2, [r3, #0]
	  //chprintf((BaseSequentialStream*)&SD1,"ADC4 %d %d %d %d %d\r\n",samples2[0],samples2[1],samples2[2],samples2[3],samples2[4]);


	  

	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);
 8009602:	ed9f cb19 	vldr	d12, [pc, #100]	; 8009668 <main+0xcb8>
    return (rawread/4095.0)*vdd;
 8009606:	ed9f 8b1a 	vldr	d8, [pc, #104]	; 8009670 <main+0xcc0>

	  irradiance2 = calc_volts(VDD,samples2[3])/(8*.0002);
 800960a:	ed9f bb1b 	vldr	d11, [pc, #108]	; 8009678 <main+0xcc8>
	  //chprintf((BaseSequentialStream*)&SD1,"ADC1 %d %d %d\r\n",samples1[0],samples1[1],samples1[2]);
	  //chprintf((BaseSequentialStream*)&SD1,"Rain: %.2f Rate:%.2f\r\n",lifetimeRain,rainRate);


	  irradiance = calc_volts(VDD,samples2[4]);
	  if (irradiance < .01)
 800960e:	ed9f ab1c 	vldr	d10, [pc, #112]	; 8009680 <main+0xcd0>
	      irradiance = 0;
	  else
	      irradiance = irradiance2;
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 8009612:	ed9f 9b1d 	vldr	d9, [pc, #116]	; 8009688 <main+0xcd8>
 8009616:	ed9f db1e 	vldr	d13, [pc, #120]	; 8009690 <main+0xce0>
	  feedWatchdog();
 800961a:	f7fe fc11 	bl	8007e40 <feedWatchdog>
	  step = (step +1)%144;
 800961e:	4942      	ldr	r1, [pc, #264]	; (8009728 <main+0xd78>)
 8009620:	880b      	ldrh	r3, [r1, #0]
 8009622:	3301      	adds	r3, #1
 8009624:	2090      	movs	r0, #144	; 0x90
 8009626:	fb93 f2f0 	sdiv	r2, r3, r0
 800962a:	fb00 3312 	mls	r3, r0, r2, r3
 800962e:	800b      	strh	r3, [r1, #0]
	  adcStart(&ADCD4, NULL);
 8009630:	4c3e      	ldr	r4, [pc, #248]	; (800972c <main+0xd7c>)
 8009632:	2100      	movs	r1, #0
 8009634:	4620      	mov	r0, r4
 8009636:	f7ff f8db 	bl	80087f0 <adcStart>
	  adcConvert(&ADCD4, &adcgrpcfg2, samples2, ADC_GRP2_BUF_DEPTH);
 800963a:	2301      	movs	r3, #1
 800963c:	4a3c      	ldr	r2, [pc, #240]	; (8009730 <main+0xd80>)
 800963e:	493d      	ldr	r1, [pc, #244]	; (8009734 <main+0xd84>)
 8009640:	4620      	mov	r0, r4
 8009642:	f7ff f83d 	bl	80086c0 <adcConvert>
	  chThdSleepMilliseconds(100);
 8009646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800964a:	f7fe fa29 	bl	8007aa0 <chThdSleep>
 800964e:	2320      	movs	r3, #32
 8009650:	f383 8811 	msr	BASEPRI, r3
 8009654:	f7fd fed4 	bl	8007400 <_dbg_check_lock>
  osalDbgAssert((adcp->state == ADC_STOP) || (adcp->state == ADC_READY),
 8009658:	7822      	ldrb	r2, [r4, #0]
 800965a:	1e53      	subs	r3, r2, #1
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b01      	cmp	r3, #1
 8009660:	d975      	bls.n	800974e <main+0xd9e>
 8009662:	4835      	ldr	r0, [pc, #212]	; (8009738 <main+0xd88>)
 8009664:	f7fc fb8c 	bl	8005d80 <chSysHalt>
 8009668:	66666666 	.word	0x66666666
 800966c:	400a6666 	.word	0x400a6666
 8009670:	00000000 	.word	0x00000000
 8009674:	40affe00 	.word	0x40affe00
 8009678:	eb1c432d 	.word	0xeb1c432d
 800967c:	3f5a36e2 	.word	0x3f5a36e2
 8009680:	47ae147b 	.word	0x47ae147b
 8009684:	3f847ae1 	.word	0x3f847ae1
 8009688:	cccccccd 	.word	0xcccccccd
 800968c:	3feccccc 	.word	0x3feccccc
 8009690:	9999999a 	.word	0x9999999a
 8009694:	3fb99999 	.word	0x3fb99999
 8009698:	20001474 	.word	0x20001474
 800969c:	200015d4 	.word	0x200015d4
 80096a0:	200011d4 	.word	0x200011d4
 80096a4:	200011c4 	.word	0x200011c4
 80096a8:	20001414 	.word	0x20001414
 80096ac:	200020bc 	.word	0x200020bc
 80096b0:	0800cfd4 	.word	0x0800cfd4
 80096b4:	48001000 	.word	0x48001000
 80096b8:	48000400 	.word	0x48000400
 80096bc:	0800cff4 	.word	0x0800cff4
 80096c0:	0800d000 	.word	0x0800d000
 80096c4:	48000c00 	.word	0x48000c00
 80096c8:	0800d014 	.word	0x0800d014
 80096cc:	080082b1 	.word	0x080082b1
 80096d0:	20002c30 	.word	0x20002c30
 80096d4:	0800d020 	.word	0x0800d020
 80096d8:	20002558 	.word	0x20002558
 80096dc:	0800d028 	.word	0x0800d028
 80096e0:	0800d040 	.word	0x0800d040
 80096e4:	08007af1 	.word	0x08007af1
 80096e8:	20002a60 	.word	0x20002a60
 80096ec:	08007b71 	.word	0x08007b71
 80096f0:	20003df0 	.word	0x20003df0
 80096f4:	08007c01 	.word	0x08007c01
 80096f8:	20003fc0 	.word	0x20003fc0
 80096fc:	0800d048 	.word	0x0800d048
 8009700:	0800a4f1 	.word	0x0800a4f1
 8009704:	20002e00 	.word	0x20002e00
 8009708:	0800d054 	.word	0x0800d054
 800970c:	08009e71 	.word	0x08009e71
 8009710:	20003150 	.word	0x20003150
 8009714:	0800d060 	.word	0x0800d060
 8009718:	08007c61 	.word	0x08007c61
 800971c:	20003aa0 	.word	0x20003aa0
 8009720:	40010044 	.word	0x40010044
 8009724:	20002048 	.word	0x20002048
 8009728:	20002554 	.word	0x20002554
 800972c:	200012c4 	.word	0x200012c4
 8009730:	200024f8 	.word	0x200024f8
 8009734:	0800b648 	.word	0x0800b648
 8009738:	0800b318 	.word	0x0800b318
      sprintf(text,"baud=9600 ");
 800973c:	4a27      	ldr	r2, [pc, #156]	; (80097dc <main+0xe2c>)
 800973e:	4b28      	ldr	r3, [pc, #160]	; (80097e0 <main+0xe30>)
 8009740:	ca07      	ldmia	r2, {r0, r1, r2}
 8009742:	c303      	stmia	r3!, {r0, r1}
 8009744:	f823 2b02 	strh.w	r2, [r3], #2
 8009748:	0c12      	lsrs	r2, r2, #16
 800974a:	701a      	strb	r2, [r3, #0]
 800974c:	e6ee      	b.n	800952c <main+0xb7c>
  if (adcp->state == ADC_READY) {
 800974e:	2a02      	cmp	r2, #2
 8009750:	d130      	bne.n	80097b4 <main+0xe04>
    dmaStreamRelease(adcp->dmastp);
 8009752:	4c24      	ldr	r4, [pc, #144]	; (80097e4 <main+0xe34>)
 8009754:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8009756:	f7fc ff13 	bl	8006580 <dmaStreamRelease>
    adc_lld_stop_adc(adcp);
 800975a:	4620      	mov	r0, r4
 800975c:	f7fc ff68 	bl	8006630 <adc_lld_stop_adc>
  adcp->adcm->CR |= ADC_CR_ADDIS;
 8009760:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8009762:	6893      	ldr	r3, [r2, #8]
 8009764:	f043 0302 	orr.w	r3, r3, #2
 8009768:	6093      	str	r3, [r2, #8]
  while ((adcp->adcm->CR & ADC_CR_ADDIS) != 0)
 800976a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800976c:	689a      	ldr	r2, [r3, #8]
 800976e:	f012 0f02 	tst.w	r2, #2
 8009772:	d1fb      	bne.n	800976c <main+0xdbc>
  adcp->adcm->CR = 0;   /* RM 12.4.3.*/
 8009774:	2200      	movs	r2, #0
 8009776:	609a      	str	r2, [r3, #8]
  adcp->adcm->CR = ADC_CR_ADVREGEN_1;
 8009778:	4b1a      	ldr	r3, [pc, #104]	; (80097e4 <main+0xe34>)
 800977a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800977c:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8009780:	6091      	str	r1, [r2, #8]
      adcp->adcc->CCR = STM32_ADC_ADC34_CLOCK_MODE | ADC_DMA_MDMA;
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009788:	609a      	str	r2, [r3, #8]
      clkmask &= ~(1 << 3);
 800978a:	4a17      	ldr	r2, [pc, #92]	; (80097e8 <main+0xe38>)
 800978c:	6813      	ldr	r3, [r2, #0]
 800978e:	f023 0108 	bic.w	r1, r3, #8
 8009792:	6011      	str	r1, [r2, #0]
    if ((clkmask & 0x3) == 0) {
 8009794:	f013 0f03 	tst.w	r3, #3
 8009798:	d104      	bne.n	80097a4 <main+0xdf4>
      rccDisableADC12();
 800979a:	4914      	ldr	r1, [pc, #80]	; (80097ec <main+0xe3c>)
 800979c:	694a      	ldr	r2, [r1, #20]
 800979e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80097a2:	614a      	str	r2, [r1, #20]
    if ((clkmask & 0xC) == 0) {
 80097a4:	f013 0f04 	tst.w	r3, #4
 80097a8:	d104      	bne.n	80097b4 <main+0xe04>
      rccDisableADC34();
 80097aa:	4a10      	ldr	r2, [pc, #64]	; (80097ec <main+0xe3c>)
 80097ac:	6953      	ldr	r3, [r2, #20]
 80097ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80097b2:	6153      	str	r3, [r2, #20]
  adcp->config = NULL;
 80097b4:	4b0b      	ldr	r3, [pc, #44]	; (80097e4 <main+0xe34>)
 80097b6:	2200      	movs	r2, #0
 80097b8:	605a      	str	r2, [r3, #4]
  adcp->state  = ADC_STOP;
 80097ba:	2201      	movs	r2, #1
 80097bc:	701a      	strb	r2, [r3, #0]
  _dbg_check_unlock();
 80097be:	f7fd fdd7 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 80097c2:	4a0b      	ldr	r2, [pc, #44]	; (80097f0 <main+0xe40>)
 80097c4:	6813      	ldr	r3, [r2, #0]
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d016      	beq.n	80097f8 <main+0xe48>
 80097ca:	6992      	ldr	r2, [r2, #24]
 80097cc:	6892      	ldr	r2, [r2, #8]
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	429a      	cmp	r2, r3
 80097d2:	d211      	bcs.n	80097f8 <main+0xe48>
 80097d4:	4807      	ldr	r0, [pc, #28]	; (80097f4 <main+0xe44>)
 80097d6:	f7fc fad3 	bl	8005d80 <chSysHalt>
 80097da:	bf00      	nop
 80097dc:	0800d034 	.word	0x0800d034
 80097e0:	20002558 	.word	0x20002558
 80097e4:	200012c4 	.word	0x200012c4
 80097e8:	20002010 	.word	0x20002010
 80097ec:	40021000 	.word	0x40021000
 80097f0:	200015d8 	.word	0x200015d8
 80097f4:	0800b0b0 	.word	0x0800b0b0
 80097f8:	2300      	movs	r3, #0
 80097fa:	f383 8811 	msr	BASEPRI, r3
	  feedWatchdog();
 80097fe:	f7fe fb1f 	bl	8007e40 <feedWatchdog>
	  VDD = 3.3 * (*(uint16_t*)0x1FFFF7BA) / (samples2[1] * 1.0);
 8009802:	4bcf      	ldr	r3, [pc, #828]	; (8009b40 <main+0x1190>)
 8009804:	8818      	ldrh	r0, [r3, #0]
 8009806:	f7f6 fff7 	bl	80007f8 <__aeabi_i2d>
 800980a:	ec53 2b1c 	vmov	r2, r3, d12
 800980e:	f7f7 f85d 	bl	80008cc <__aeabi_dmul>
 8009812:	4604      	mov	r4, r0
 8009814:	460d      	mov	r5, r1
 8009816:	4ecb      	ldr	r6, [pc, #812]	; (8009b44 <main+0x1194>)
 8009818:	8870      	ldrh	r0, [r6, #2]
 800981a:	f7f6 ffed 	bl	80007f8 <__aeabi_i2d>
 800981e:	4602      	mov	r2, r0
 8009820:	460b      	mov	r3, r1
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f7 f97b 	bl	8000b20 <__aeabi_ddiv>
 800982a:	f7f7 fb27 	bl	8000e7c <__aeabi_d2f>
    return (rawread/4095.0)*vdd;
 800982e:	f7f6 fff5 	bl	800081c <__aeabi_f2d>
 8009832:	4604      	mov	r4, r0
 8009834:	460d      	mov	r5, r1
 8009836:	88f0      	ldrh	r0, [r6, #6]
 8009838:	f7f6 ffde 	bl	80007f8 <__aeabi_i2d>
 800983c:	ec53 2b18 	vmov	r2, r3, d8
 8009840:	f7f7 f96e 	bl	8000b20 <__aeabi_ddiv>
 8009844:	4622      	mov	r2, r4
 8009846:	462b      	mov	r3, r5
 8009848:	f7f7 f840 	bl	80008cc <__aeabi_dmul>
 800984c:	f7f7 fb16 	bl	8000e7c <__aeabi_d2f>
	  irradiance2 = calc_volts(VDD,samples2[3])/(8*.0002);
 8009850:	f7f6 ffe4 	bl	800081c <__aeabi_f2d>
 8009854:	ec53 2b1b 	vmov	r2, r3, d11
 8009858:	f7f7 f962 	bl	8000b20 <__aeabi_ddiv>
 800985c:	f7f7 fb0e 	bl	8000e7c <__aeabi_d2f>
 8009860:	4bb9      	ldr	r3, [pc, #740]	; (8009b48 <main+0x1198>)
 8009862:	6018      	str	r0, [r3, #0]
	  adcConvert(&ADCD1, &adcgrpcfg1, samples1, ADC_GRP1_BUF_DEPTH);
 8009864:	2301      	movs	r3, #1
 8009866:	4ab9      	ldr	r2, [pc, #740]	; (8009b4c <main+0x119c>)
 8009868:	49b9      	ldr	r1, [pc, #740]	; (8009b50 <main+0x11a0>)
 800986a:	48ba      	ldr	r0, [pc, #744]	; (8009b54 <main+0x11a4>)
 800986c:	f7fe ff28 	bl	80086c0 <adcConvert>
	  chThdSleepMilliseconds(100);
 8009870:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009874:	f7fe f914 	bl	8007aa0 <chThdSleep>
	  feedWatchdog();
 8009878:	f7fe fae2 	bl	8007e40 <feedWatchdog>
    return (rawread/4095.0)*vdd;
 800987c:	8930      	ldrh	r0, [r6, #8]
 800987e:	f7f6 ffbb 	bl	80007f8 <__aeabi_i2d>
 8009882:	ec53 2b18 	vmov	r2, r3, d8
 8009886:	f7f7 f94b 	bl	8000b20 <__aeabi_ddiv>
 800988a:	4622      	mov	r2, r4
 800988c:	462b      	mov	r3, r5
 800988e:	f7f7 f81d 	bl	80008cc <__aeabi_dmul>
 8009892:	f7f7 faf3 	bl	8000e7c <__aeabi_d2f>
	  if (irradiance < .01)
 8009896:	f7f6 ffc1 	bl	800081c <__aeabi_f2d>
 800989a:	ec53 2b1a 	vmov	r2, r3, d10
 800989e:	f7f7 fa87 	bl	8000db0 <__aeabi_dcmplt>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	f000 81b8 	beq.w	8009c18 <main+0x1268>
	      irradiance = 0;
 80098a8:	4bab      	ldr	r3, [pc, #684]	; (8009b58 <main+0x11a8>)
 80098aa:	2200      	movs	r2, #0
 80098ac:	601a      	str	r2, [r3, #0]
	  irradiance3 = irradiance3*.9 + irradiance*.1;    
 80098ae:	4eab      	ldr	r6, [pc, #684]	; (8009b5c <main+0x11ac>)
 80098b0:	6830      	ldr	r0, [r6, #0]
 80098b2:	f7f6 ffb3 	bl	800081c <__aeabi_f2d>
 80098b6:	ec53 2b19 	vmov	r2, r3, d9
 80098ba:	f7f7 f807 	bl	80008cc <__aeabi_dmul>
 80098be:	4680      	mov	r8, r0
 80098c0:	4689      	mov	r9, r1
 80098c2:	4ba5      	ldr	r3, [pc, #660]	; (8009b58 <main+0x11a8>)
 80098c4:	6818      	ldr	r0, [r3, #0]
 80098c6:	f7f6 ffa9 	bl	800081c <__aeabi_f2d>
 80098ca:	ec53 2b1d 	vmov	r2, r3, d13
 80098ce:	f7f6 fffd 	bl	80008cc <__aeabi_dmul>
 80098d2:	4602      	mov	r2, r0
 80098d4:	460b      	mov	r3, r1
 80098d6:	4640      	mov	r0, r8
 80098d8:	4649      	mov	r1, r9
 80098da:	f7f6 fe41 	bl	8000560 <__adddf3>
 80098de:	f7f7 facd 	bl	8000e7c <__aeabi_d2f>
 80098e2:	6030      	str	r0, [r6, #0]
	  amps = (calc_volts(VDD,samples2[2])/120.0);
 80098e4:	4e97      	ldr	r6, [pc, #604]	; (8009b44 <main+0x1194>)
    return (rawread/4095.0)*vdd;
 80098e6:	88b0      	ldrh	r0, [r6, #4]
 80098e8:	f7f6 ff86 	bl	80007f8 <__aeabi_i2d>
 80098ec:	ec53 2b18 	vmov	r2, r3, d8
 80098f0:	f7f7 f916 	bl	8000b20 <__aeabi_ddiv>
 80098f4:	4622      	mov	r2, r4
 80098f6:	462b      	mov	r3, r5
 80098f8:	f7f6 ffe8 	bl	80008cc <__aeabi_dmul>
 80098fc:	f7f7 fabe 	bl	8000e7c <__aeabi_d2f>
	  amps = (calc_volts(VDD,samples2[2])/120.0);
 8009900:	ed9f fa97 	vldr	s30, [pc, #604]	; 8009b60 <main+0x11b0>
 8009904:	ee07 0a90 	vmov	s15, r0
 8009908:	ee87 ea8f 	vdiv.f32	s28, s15, s30
 800990c:	4b95      	ldr	r3, [pc, #596]	; (8009b64 <main+0x11b4>)
 800990e:	ed83 ea00 	vstr	s28, [r3]
    return (rawread/4095.0)*vdd;
 8009912:	8970      	ldrh	r0, [r6, #10]
 8009914:	f7f6 ff70 	bl	80007f8 <__aeabi_i2d>
 8009918:	ec53 2b18 	vmov	r2, r3, d8
 800991c:	f7f7 f900 	bl	8000b20 <__aeabi_ddiv>
 8009920:	4622      	mov	r2, r4
 8009922:	462b      	mov	r3, r5
 8009924:	f7f6 ffd2 	bl	80008cc <__aeabi_dmul>
 8009928:	f7f7 faa8 	bl	8000e7c <__aeabi_d2f>
	  windamps = (calc_volts(VDD,samples2[5])/120.0);
 800992c:	ee07 0a90 	vmov	s15, r0
 8009930:	eec7 ea8f 	vdiv.f32	s29, s15, s30
 8009934:	4b8c      	ldr	r3, [pc, #560]	; (8009b68 <main+0x11b8>)
 8009936:	edc3 ea00 	vstr	s29, [r3]
	  windspeed = (amps-0.004)*(50.0/.016);
 800993a:	ee1e 0a10 	vmov	r0, s28
 800993e:	f7f6 ff6d 	bl	800081c <__aeabi_f2d>
 8009942:	a375      	add	r3, pc, #468	; (adr r3, 8009b18 <main+0x1168>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fe08 	bl	800055c <__aeabi_dsub>
 800994c:	a374      	add	r3, pc, #464	; (adr r3, 8009b20 <main+0x1170>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 ffbb 	bl	80008cc <__aeabi_dmul>
 8009956:	f7f7 fa91 	bl	8000e7c <__aeabi_d2f>
 800995a:	ee0e 0a10 	vmov	s28, r0
	  winddir = windamps*360.0/.02;
 800995e:	ee1e 0a90 	vmov	r0, s29
 8009962:	f7f6 ff5b 	bl	800081c <__aeabi_f2d>
 8009966:	2200      	movs	r2, #0
 8009968:	4b80      	ldr	r3, [pc, #512]	; (8009b6c <main+0x11bc>)
 800996a:	f7f6 ffaf 	bl	80008cc <__aeabi_dmul>
 800996e:	a36e      	add	r3, pc, #440	; (adr r3, 8009b28 <main+0x1178>)
 8009970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009974:	f7f7 f8d4 	bl	8000b20 <__aeabi_ddiv>
 8009978:	f7f7 fa80 	bl	8000e7c <__aeabi_d2f>
 800997c:	ee07 0a90 	vmov	s15, r0
 8009980:	4b7b      	ldr	r3, [pc, #492]	; (8009b70 <main+0x11c0>)
 8009982:	6018      	str	r0, [r3, #0]
	  if (winddir <0)
 8009984:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998c:	f140 8149 	bpl.w	8009c22 <main+0x1272>
	    winddir = 0;
 8009990:	2200      	movs	r2, #0
 8009992:	601a      	str	r2, [r3, #0]
    return (rawread/4095.0)*vdd;
 8009994:	4b6b      	ldr	r3, [pc, #428]	; (8009b44 <main+0x1194>)
 8009996:	8818      	ldrh	r0, [r3, #0]
 8009998:	f7f6 ff2e 	bl	80007f8 <__aeabi_i2d>
 800999c:	ec53 2b18 	vmov	r2, r3, d8
 80099a0:	f7f7 f8be 	bl	8000b20 <__aeabi_ddiv>
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	f7f6 ff90 	bl	80008cc <__aeabi_dmul>
 80099ac:	f7f7 fa66 	bl	8000e7c <__aeabi_d2f>
 80099b0:	4b70      	ldr	r3, [pc, #448]	; (8009b74 <main+0x11c4>)
 80099b2:	6018      	str	r0, [r3, #0]
	  if (winddir > 360.0)
	    winddir = 360;
	  opamp4 = calc_volts(VDD,samples2[3]);
	  snow = calc_volts(VDD,samples2[0]);
	  if (windspeed < 0.5)
 80099b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80099b8:	eeb4 eae7 	vcmpe.f32	s28, s15
 80099bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099c0:	f140 813b 	bpl.w	8009c3a <main+0x128a>
	      windspeed = 0;
 80099c4:	4b6c      	ldr	r3, [pc, #432]	; (8009b78 <main+0x11c8>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	601a      	str	r2, [r3, #0]
	  else
	    windspeed = windspeed*2.237;  //convert to MPH
	  windspeedout = windspeed;
          //chprintf((BaseSequentialStream*)&SD1,"irr: %.2f  inside: %.2f ,vdd: %.2f windV: %.4f %.2fmph  snow %.2fv \r\n",irradiance3,internalTemp,VDD,amps,windspeed,snow);
	  
	  pt100temp1 = get_temp(0);
 80099ca:	2000      	movs	r0, #0
 80099cc:	f7fe fcf0 	bl	80083b0 <get_temp>
 80099d0:	4b6a      	ldr	r3, [pc, #424]	; (8009b7c <main+0x11cc>)
 80099d2:	ed83 0a00 	vstr	s0, [r3]
	  pt100temp2 = get_temp(1);
 80099d6:	2001      	movs	r0, #1
 80099d8:	f7fe fcea 	bl	80083b0 <get_temp>
 80099dc:	4b68      	ldr	r3, [pc, #416]	; (8009b80 <main+0x11d0>)
 80099de:	ed83 0a00 	vstr	s0, [r3]
	  pt100temp3 = get_temp(2);
 80099e2:	2002      	movs	r0, #2
 80099e4:	f7fe fce4 	bl	80083b0 <get_temp>
 80099e8:	4b66      	ldr	r3, [pc, #408]	; (8009b84 <main+0x11d4>)
 80099ea:	ed83 0a00 	vstr	s0, [r3]
	  pt100temp4 = get_temp(3);
 80099ee:	2003      	movs	r0, #3
 80099f0:	f7fe fcde 	bl	80083b0 <get_temp>
 80099f4:	4b64      	ldr	r3, [pc, #400]	; (8009b88 <main+0x11d8>)
 80099f6:	ed83 0a00 	vstr	s0, [r3]
	  pt100temp5 = get_temp(4);
 80099fa:	2004      	movs	r0, #4
 80099fc:	f7fe fcd8 	bl	80083b0 <get_temp>
 8009a00:	4b62      	ldr	r3, [pc, #392]	; (8009b8c <main+0x11dc>)
 8009a02:	ed83 0a00 	vstr	s0, [r3]
	  sprintf(metrics[0],"Irr:%4.0f",irradiance3);
 8009a06:	4b55      	ldr	r3, [pc, #340]	; (8009b5c <main+0x11ac>)
 8009a08:	6818      	ldr	r0, [r3, #0]
 8009a0a:	f7f6 ff07 	bl	800081c <__aeabi_f2d>
 8009a0e:	4602      	mov	r2, r0
 8009a10:	460b      	mov	r3, r1
 8009a12:	495f      	ldr	r1, [pc, #380]	; (8009b90 <main+0x11e0>)
 8009a14:	485f      	ldr	r0, [pc, #380]	; (8009b94 <main+0x11e4>)
 8009a16:	f7f7 fd09 	bl	800142c <sprintf>
	  if (amps < 0.003)
 8009a1a:	4b52      	ldr	r3, [pc, #328]	; (8009b64 <main+0x11b4>)
 8009a1c:	6818      	ldr	r0, [r3, #0]
 8009a1e:	f7f6 fefd 	bl	800081c <__aeabi_f2d>
 8009a22:	a343      	add	r3, pc, #268	; (adr r3, 8009b30 <main+0x1180>)
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	f7f7 f9c2 	bl	8000db0 <__aeabi_dcmplt>
 8009a2c:	2800      	cmp	r0, #0
 8009a2e:	f000 8112 	beq.w	8009c56 <main+0x12a6>
	      sprintf(metrics[1],"Wnd: N/C");
 8009a32:	4a59      	ldr	r2, [pc, #356]	; (8009b98 <main+0x11e8>)
 8009a34:	4b59      	ldr	r3, [pc, #356]	; (8009b9c <main+0x11ec>)
 8009a36:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a38:	c303      	stmia	r3!, {r0, r1}
 8009a3a:	701a      	strb	r2, [r3, #0]
	  else
	      sprintf(metrics[1],"Wnd: %3.0f",windspeed);

	  if (windamps < 0.003)
 8009a3c:	4b4a      	ldr	r3, [pc, #296]	; (8009b68 <main+0x11b8>)
 8009a3e:	6818      	ldr	r0, [r3, #0]
 8009a40:	f7f6 feec 	bl	800081c <__aeabi_f2d>
 8009a44:	a33a      	add	r3, pc, #232	; (adr r3, 8009b30 <main+0x1180>)
 8009a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4a:	f7f7 f9b1 	bl	8000db0 <__aeabi_dcmplt>
 8009a4e:	2800      	cmp	r0, #0
 8009a50:	f000 810c 	beq.w	8009c6c <main+0x12bc>
	      sprintf(metrics[8],"wDi: N/C");
 8009a54:	4a52      	ldr	r2, [pc, #328]	; (8009ba0 <main+0x11f0>)
 8009a56:	4b53      	ldr	r3, [pc, #332]	; (8009ba4 <main+0x11f4>)
 8009a58:	ca07      	ldmia	r2, {r0, r1, r2}
 8009a5a:	c303      	stmia	r3!, {r0, r1}
 8009a5c:	701a      	strb	r2, [r3, #0]
	  else
	      sprintf(metrics[8],"wDi: %3.0f",winddir);
	  
	  fillTemp(metrics[2],pt100temp1,1);
 8009a5e:	4c4d      	ldr	r4, [pc, #308]	; (8009b94 <main+0x11e4>)
 8009a60:	2101      	movs	r1, #1
 8009a62:	4b46      	ldr	r3, [pc, #280]	; (8009b7c <main+0x11cc>)
 8009a64:	ed93 0a00 	vldr	s0, [r3]
 8009a68:	f104 0018 	add.w	r0, r4, #24
 8009a6c:	f7fc ffe8 	bl	8006a40 <fillTemp>
	  fillTemp(metrics[3],pt100temp2,2);
 8009a70:	2102      	movs	r1, #2
 8009a72:	4b43      	ldr	r3, [pc, #268]	; (8009b80 <main+0x11d0>)
 8009a74:	ed93 0a00 	vldr	s0, [r3]
 8009a78:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8009a7c:	f7fc ffe0 	bl	8006a40 <fillTemp>
	  fillTemp(metrics[4],pt100temp3,3);
 8009a80:	2103      	movs	r1, #3
 8009a82:	4b40      	ldr	r3, [pc, #256]	; (8009b84 <main+0x11d4>)
 8009a84:	ed93 0a00 	vldr	s0, [r3]
 8009a88:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8009a8c:	f7fc ffd8 	bl	8006a40 <fillTemp>
	  fillTemp(metrics[5],pt100temp4,4);
 8009a90:	2104      	movs	r1, #4
 8009a92:	4b3d      	ldr	r3, [pc, #244]	; (8009b88 <main+0x11d8>)
 8009a94:	ed93 0a00 	vldr	s0, [r3]
 8009a98:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8009a9c:	f7fc ffd0 	bl	8006a40 <fillTemp>
	  if (palReadPad(GPIOC,7) == 0)
 8009aa0:	4b41      	ldr	r3, [pc, #260]	; (8009ba8 <main+0x11f8>)
 8009aa2:	691b      	ldr	r3, [r3, #16]
 8009aa4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009aa8:	f040 80eb 	bne.w	8009c82 <main+0x12d2>
	      sprintf(metrics[6],"Rn: %3.1f",rainRate);
 8009aac:	4b3f      	ldr	r3, [pc, #252]	; (8009bac <main+0x11fc>)
 8009aae:	6818      	ldr	r0, [r3, #0]
 8009ab0:	f7f6 feb4 	bl	800081c <__aeabi_f2d>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	493d      	ldr	r1, [pc, #244]	; (8009bb0 <main+0x1200>)
 8009aba:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8009abe:	f7f7 fcb5 	bl	800142c <sprintf>
	  else
	      fillTemp(metrics[6],pt100temp5,5);
	  if (snow < .025){
 8009ac2:	4b2c      	ldr	r3, [pc, #176]	; (8009b74 <main+0x11c4>)
 8009ac4:	6818      	ldr	r0, [r3, #0]
 8009ac6:	f7f6 fea9 	bl	800081c <__aeabi_f2d>
 8009aca:	4604      	mov	r4, r0
 8009acc:	460d      	mov	r5, r1
 8009ace:	a31a      	add	r3, pc, #104	; (adr r3, 8009b38 <main+0x1188>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f7 f96c 	bl	8000db0 <__aeabi_dcmplt>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	f000 80da 	beq.w	8009c92 <main+0x12e2>
	      snowoutput = 2;
 8009ade:	4b35      	ldr	r3, [pc, #212]	; (8009bb4 <main+0x1204>)
 8009ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009ae4:	601a      	str	r2, [r3, #0]
	      sprintf(metrics[7], "Snw: N/C");
 8009ae6:	4a34      	ldr	r2, [pc, #208]	; (8009bb8 <main+0x1208>)
 8009ae8:	4b34      	ldr	r3, [pc, #208]	; (8009bbc <main+0x120c>)
 8009aea:	ca07      	ldmia	r2, {r0, r1, r2}
 8009aec:	c303      	stmia	r3!, {r0, r1}
 8009aee:	701a      	strb	r2, [r3, #0]
	  else{
	      snowoutput = 0;
	      sprintf(metrics[7], "Snw: F ");
	  }

	  displaymetric = step/16;
 8009af0:	4b33      	ldr	r3, [pc, #204]	; (8009bc0 <main+0x1210>)
 8009af2:	881c      	ldrh	r4, [r3, #0]
 8009af4:	4d33      	ldr	r5, [pc, #204]	; (8009bc4 <main+0x1214>)
 8009af6:	0923      	lsrs	r3, r4, #4
 8009af8:	602b      	str	r3, [r5, #0]
	  clear_oled();
 8009afa:	f7fc ffd1 	bl	8006aa0 <clear_oled>
	  //vbuf[2][0]=0xff;
	  //vbuf[2][2]=0xff;
	  
	  //shade_oled(0xf0);
	  //oled_hatch_screen();
	  chprintf((BaseSequentialStream*)&SD1,"%d %d, %x\r\n",step%4,step,vbuf[step%4][step]);
 8009afe:	f004 0203 	and.w	r2, r4, #3
 8009b02:	4b31      	ldr	r3, [pc, #196]	; (8009bc8 <main+0x1218>)
 8009b04:	eb03 13c2 	add.w	r3, r3, r2, lsl #7
 8009b08:	5d1b      	ldrb	r3, [r3, r4]
 8009b0a:	9300      	str	r3, [sp, #0]
 8009b0c:	4623      	mov	r3, r4
 8009b0e:	492f      	ldr	r1, [pc, #188]	; (8009bcc <main+0x121c>)
 8009b10:	482f      	ldr	r0, [pc, #188]	; (8009bd0 <main+0x1220>)
 8009b12:	f7fd f815 	bl	8006b40 <chprintf>
 8009b16:	e05d      	b.n	8009bd4 <main+0x1224>
 8009b18:	d2f1a9fc 	.word	0xd2f1a9fc
 8009b1c:	3f70624d 	.word	0x3f70624d
 8009b20:	00000000 	.word	0x00000000
 8009b24:	40a86a00 	.word	0x40a86a00
 8009b28:	47ae147b 	.word	0x47ae147b
 8009b2c:	3f947ae1 	.word	0x3f947ae1
 8009b30:	bc6a7efa 	.word	0xbc6a7efa
 8009b34:	3f689374 	.word	0x3f689374
 8009b38:	9999999a 	.word	0x9999999a
 8009b3c:	3f999999 	.word	0x3f999999
 8009b40:	1ffff7ba 	.word	0x1ffff7ba
 8009b44:	200024f8 	.word	0x200024f8
 8009b48:	20002044 	.word	0x20002044
 8009b4c:	200024f4 	.word	0x200024f4
 8009b50:	0800b61c 	.word	0x0800b61c
 8009b54:	2000121c 	.word	0x2000121c
 8009b58:	20002040 	.word	0x20002040
 8009b5c:	20002048 	.word	0x20002048
 8009b60:	42f00000 	.word	0x42f00000
 8009b64:	200015d0 	.word	0x200015d0
 8009b68:	20004190 	.word	0x20004190
 8009b6c:	40768000 	.word	0x40768000
 8009b70:	20004194 	.word	0x20004194
 8009b74:	2000254c 	.word	0x2000254c
 8009b78:	20004198 	.word	0x20004198
 8009b7c:	200020c0 	.word	0x200020c0
 8009b80:	200020c4 	.word	0x200020c4
 8009b84:	200020c8 	.word	0x200020c8
 8009b88:	200020cc 	.word	0x200020cc
 8009b8c:	200020d0 	.word	0x200020d0
 8009b90:	0800d06c 	.word	0x0800d06c
 8009b94:	20002050 	.word	0x20002050
 8009b98:	0800d078 	.word	0x0800d078
 8009b9c:	2000205c 	.word	0x2000205c
 8009ba0:	0800d090 	.word	0x0800d090
 8009ba4:	200020b0 	.word	0x200020b0
 8009ba8:	48000800 	.word	0x48000800
 8009bac:	200020e0 	.word	0x200020e0
 8009bb0:	0800d0a8 	.word	0x0800d0a8
 8009bb4:	20002550 	.word	0x20002550
 8009bb8:	0800d0b4 	.word	0x0800d0b4
 8009bbc:	200020a4 	.word	0x200020a4
 8009bc0:	20002554 	.word	0x20002554
 8009bc4:	20002030 	.word	0x20002030
 8009bc8:	2000265c 	.word	0x2000265c
 8009bcc:	0800d0d0 	.word	0x0800d0d0
 8009bd0:	20001414 	.word	0x20001414
	  oled_draw_big_string(0,0,metrics[displaymetric]);
 8009bd4:	682c      	ldr	r4, [r5, #0]
 8009bd6:	4b48      	ldr	r3, [pc, #288]	; (8009cf8 <main+0x1348>)
 8009bd8:	220c      	movs	r2, #12
 8009bda:	fb02 3404 	mla	r4, r2, r4, r3
 8009bde:	2500      	movs	r5, #0
    oled_current_column = (x*8);
 8009be0:	f8df b158 	ldr.w	fp, [pc, #344]	; 8009d3c <main+0x138c>
    oled_current_row = (y);
 8009be4:	f8df a158 	ldr.w	sl, [pc, #344]	; 8009d40 <main+0x1390>
 8009be8:	462f      	mov	r7, r5
 8009bea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8009d44 <main+0x1394>
 8009bee:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8009d48 <main+0x1398>
 8009bf2:	b2ee      	uxtb	r6, r5
  for (j=0;j<(strlen(text));j++)
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7f7 fc43 	bl	8001480 <strlen>
 8009bfa:	4286      	cmp	r6, r0
 8009bfc:	f4bf ad0d 	bcs.w	800961a <main+0xc6a>
 8009c00:	0133      	lsls	r3, r6, #4
 8009c02:	b2db      	uxtb	r3, r3
    oled_current_column = (x*8);
 8009c04:	f88b 3000 	strb.w	r3, [fp]
    oled_current_row = (y);
 8009c08:	f88a 7000 	strb.w	r7, [sl]
 8009c0c:	444b      	add	r3, r9
 8009c0e:	5da0      	ldrb	r0, [r4, r6]
      write_big_oled_char(text[j]);
 8009c10:	463a      	mov	r2, r7
 8009c12:	eb08 1080 	add.w	r0, r8, r0, lsl #6
 8009c16:	e066      	b.n	8009ce6 <main+0x1336>
	      irradiance = irradiance2;
 8009c18:	4b38      	ldr	r3, [pc, #224]	; (8009cfc <main+0x134c>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	4b38      	ldr	r3, [pc, #224]	; (8009d00 <main+0x1350>)
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	e645      	b.n	80098ae <main+0xefe>
	  if (winddir > 360.0)
 8009c22:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8009d04 <main+0x1354>
 8009c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c2e:	f77f aeb1 	ble.w	8009994 <main+0xfe4>
	    winddir = 360;
 8009c32:	4b35      	ldr	r3, [pc, #212]	; (8009d08 <main+0x1358>)
 8009c34:	ed83 7a00 	vstr	s14, [r3]
 8009c38:	e6ac      	b.n	8009994 <main+0xfe4>
	    windspeed = windspeed*2.237;  //convert to MPH
 8009c3a:	ee1e 0a10 	vmov	r0, s28
 8009c3e:	f7f6 fded 	bl	800081c <__aeabi_f2d>
 8009c42:	a32b      	add	r3, pc, #172	; (adr r3, 8009cf0 <main+0x1340>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 fe40 	bl	80008cc <__aeabi_dmul>
 8009c4c:	f7f7 f916 	bl	8000e7c <__aeabi_d2f>
 8009c50:	4b2e      	ldr	r3, [pc, #184]	; (8009d0c <main+0x135c>)
 8009c52:	6018      	str	r0, [r3, #0]
 8009c54:	e6b9      	b.n	80099ca <main+0x101a>
	      sprintf(metrics[1],"Wnd: %3.0f",windspeed);
 8009c56:	4b2d      	ldr	r3, [pc, #180]	; (8009d0c <main+0x135c>)
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	f7f6 fddf 	bl	800081c <__aeabi_f2d>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	492b      	ldr	r1, [pc, #172]	; (8009d10 <main+0x1360>)
 8009c64:	482b      	ldr	r0, [pc, #172]	; (8009d14 <main+0x1364>)
 8009c66:	f7f7 fbe1 	bl	800142c <sprintf>
 8009c6a:	e6e7      	b.n	8009a3c <main+0x108c>
	      sprintf(metrics[8],"wDi: %3.0f",winddir);
 8009c6c:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <main+0x1358>)
 8009c6e:	6818      	ldr	r0, [r3, #0]
 8009c70:	f7f6 fdd4 	bl	800081c <__aeabi_f2d>
 8009c74:	4602      	mov	r2, r0
 8009c76:	460b      	mov	r3, r1
 8009c78:	4927      	ldr	r1, [pc, #156]	; (8009d18 <main+0x1368>)
 8009c7a:	4828      	ldr	r0, [pc, #160]	; (8009d1c <main+0x136c>)
 8009c7c:	f7f7 fbd6 	bl	800142c <sprintf>
 8009c80:	e6ed      	b.n	8009a5e <main+0x10ae>
	      fillTemp(metrics[6],pt100temp5,5);
 8009c82:	2105      	movs	r1, #5
 8009c84:	4b26      	ldr	r3, [pc, #152]	; (8009d20 <main+0x1370>)
 8009c86:	ed93 0a00 	vldr	s0, [r3]
 8009c8a:	4826      	ldr	r0, [pc, #152]	; (8009d24 <main+0x1374>)
 8009c8c:	f7fc fed8 	bl	8006a40 <fillTemp>
 8009c90:	e717      	b.n	8009ac2 <main+0x1112>
	  else if (snow < 1.2){
 8009c92:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8009c96:	4b24      	ldr	r3, [pc, #144]	; (8009d28 <main+0x1378>)
 8009c98:	4620      	mov	r0, r4
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f7f7 f888 	bl	8000db0 <__aeabi_dcmplt>
 8009ca0:	b150      	cbz	r0, 8009cb8 <main+0x1308>
	      snowoutput = 1;	     
 8009ca2:	4b22      	ldr	r3, [pc, #136]	; (8009d2c <main+0x137c>)
 8009ca4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8009ca8:	601a      	str	r2, [r3, #0]
	      sprintf(metrics[7], "Snw: T ");
 8009caa:	4b21      	ldr	r3, [pc, #132]	; (8009d30 <main+0x1380>)
 8009cac:	4a21      	ldr	r2, [pc, #132]	; (8009d34 <main+0x1384>)
 8009cae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cb2:	e883 0003 	stmia.w	r3, {r0, r1}
 8009cb6:	e71b      	b.n	8009af0 <main+0x1140>
	      snowoutput = 0;
 8009cb8:	4b1c      	ldr	r3, [pc, #112]	; (8009d2c <main+0x137c>)
 8009cba:	2200      	movs	r2, #0
 8009cbc:	601a      	str	r2, [r3, #0]
	      sprintf(metrics[7], "Snw: F ");
 8009cbe:	4b1c      	ldr	r3, [pc, #112]	; (8009d30 <main+0x1380>)
 8009cc0:	4a1d      	ldr	r2, [pc, #116]	; (8009d38 <main+0x1388>)
 8009cc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8009cc6:	e883 0003 	stmia.w	r3, {r0, r1}
 8009cca:	e711      	b.n	8009af0 <main+0x1140>
	  vbuf[oled_current_row+j][oled_current_column+i] = grotesk[a-32][i*grotesk_rows_char+(grotesk_rows_char-1)-j];
 8009ccc:	ea4f 1cc1 	mov.w	ip, r1, lsl #7
 8009cd0:	f816 ed01 	ldrb.w	lr, [r6, #-1]!
 8009cd4:	f803 e00c 	strb.w	lr, [r3, ip]
 8009cd8:	3101      	adds	r1, #1
      for (j=0; j<grotesk_rows_char;j++)
 8009cda:	2904      	cmp	r1, #4
 8009cdc:	d1f6      	bne.n	8009ccc <main+0x131c>
 8009cde:	3301      	adds	r3, #1
 8009ce0:	3204      	adds	r2, #4
    for (i=0; i<grotesk_cols; i++)
 8009ce2:	2a40      	cmp	r2, #64	; 0x40
 8009ce4:	d002      	beq.n	8009cec <main+0x133c>
 8009ce6:	1886      	adds	r6, r0, r2
  chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 8009ce8:	2100      	movs	r1, #0
 8009cea:	e7ef      	b.n	8009ccc <main+0x131c>
 8009cec:	3501      	adds	r5, #1
 8009cee:	e780      	b.n	8009bf2 <main+0x1242>
 8009cf0:	4189374c 	.word	0x4189374c
 8009cf4:	4001e560 	.word	0x4001e560
 8009cf8:	20002050 	.word	0x20002050
 8009cfc:	20002044 	.word	0x20002044
 8009d00:	20002040 	.word	0x20002040
 8009d04:	43b40000 	.word	0x43b40000
 8009d08:	20004194 	.word	0x20004194
 8009d0c:	20004198 	.word	0x20004198
 8009d10:	0800d084 	.word	0x0800d084
 8009d14:	2000205c 	.word	0x2000205c
 8009d18:	0800d09c 	.word	0x0800d09c
 8009d1c:	200020b0 	.word	0x200020b0
 8009d20:	200020d0 	.word	0x200020d0
 8009d24:	20002098 	.word	0x20002098
 8009d28:	3ff33333 	.word	0x3ff33333
 8009d2c:	20002550 	.word	0x20002550
 8009d30:	200020a4 	.word	0x200020a4
 8009d34:	0800d0c0 	.word	0x0800d0c0
 8009d38:	0800d0c8 	.word	0x0800d0c8
 8009d3c:	200020bd 	.word	0x200020bd
 8009d40:	200020be 	.word	0x200020be
 8009d44:	2000265c 	.word	0x2000265c
 8009d48:	0800af98 	.word	0x0800af98
 8009d4c:	00000000 	.word	0x00000000

08009d50 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 8009d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d54:	b085      	sub	sp, #20
 8009d56:	9301      	str	r3, [sp, #4]
  qnotify_t nfy = oqp->q_notify;
  size_t wr = 0;

  osalDbgCheck(n > 0U);
 8009d58:	2a00      	cmp	r2, #0
 8009d5a:	d054      	beq.n	8009e06 <oqWriteTimeout+0xb6>
 8009d5c:	4604      	mov	r4, r0
 8009d5e:	468a      	mov	sl, r1
 8009d60:	4617      	mov	r7, r2
  qnotify_t nfy = oqp->q_notify;
 8009d62:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 8009d66:	2320      	movs	r3, #32
 8009d68:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009d6c:	f7fd fb48 	bl	8007400 <_dbg_check_lock>
  size_t wr = 0;
 8009d70:	f04f 0800 	mov.w	r8, #0
  if (n > oqGetEmptyI(oqp)) {
 8009d74:	9702      	str	r7, [sp, #8]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009d76:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8009e58 <oqWriteTimeout+0x108>
 8009d7a:	68a3      	ldr	r3, [r4, #8]
 8009d7c:	429f      	cmp	r7, r3
    n = oqGetEmptyI(oqp);
 8009d7e:	bf8c      	ite	hi
 8009d80:	68a5      	ldrhi	r5, [r4, #8]
  if (n > oqGetEmptyI(oqp)) {
 8009d82:	9d02      	ldrls	r5, [sp, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8009d84:	6960      	ldr	r0, [r4, #20]
 8009d86:	6926      	ldr	r6, [r4, #16]
 8009d88:	1a36      	subs	r6, r6, r0
  if (n < s1) {
 8009d8a:	42ae      	cmp	r6, r5
 8009d8c:	d83e      	bhi.n	8009e0c <oqWriteTimeout+0xbc>
  else if (n > s1) {
 8009d8e:	42ae      	cmp	r6, r5
 8009d90:	d344      	bcc.n	8009e1c <oqWriteTimeout+0xcc>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8009d92:	462a      	mov	r2, r5
 8009d94:	4651      	mov	r1, sl
 8009d96:	f7f7 fa47 	bl	8001228 <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8009d9a:	68e3      	ldr	r3, [r4, #12]
 8009d9c:	6163      	str	r3, [r4, #20]
  oqp->q_counter -= n;
 8009d9e:	68a3      	ldr	r3, [r4, #8]
 8009da0:	1b5b      	subs	r3, r3, r5
 8009da2:	60a3      	str	r3, [r4, #8]

  while (wr < n) {
    size_t done;

    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
 8009da4:	2d00      	cmp	r5, #0
 8009da6:	d04a      	beq.n	8009e3e <oqWriteTimeout+0xee>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8009da8:	f1bb 0f00 	cmp.w	fp, #0
 8009dac:	d001      	beq.n	8009db2 <oqWriteTimeout+0x62>
        nfy(oqp);
 8009dae:	4620      	mov	r0, r4
 8009db0:	47d8      	blx	fp
  _dbg_check_unlock();
 8009db2:	f7fd fadd 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009db6:	f8d9 3000 	ldr.w	r3, [r9]
 8009dba:	454b      	cmp	r3, r9
 8009dbc:	d005      	beq.n	8009dca <oqWriteTimeout+0x7a>
 8009dbe:	f8d9 2018 	ldr.w	r2, [r9, #24]
 8009dc2:	6892      	ldr	r2, [r2, #8]
 8009dc4:	689b      	ldr	r3, [r3, #8]
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d340      	bcc.n	8009e4c <oqWriteTimeout+0xfc>
 8009dca:	2300      	movs	r3, #0
 8009dcc:	f383 8811 	msr	BASEPRI, r3
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      wr += done;
 8009dd0:	44a8      	add	r8, r5
      bp += done;
 8009dd2:	44aa      	add	sl, r5
 8009dd4:	2320      	movs	r3, #32
 8009dd6:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 8009dda:	f7fd fb11 	bl	8007400 <_dbg_check_lock>
  while (wr < n) {
 8009dde:	4547      	cmp	r7, r8
 8009de0:	d8cb      	bhi.n	8009d7a <oqWriteTimeout+0x2a>
  _dbg_check_unlock();
 8009de2:	f7fd fac5 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 8009de6:	4b1c      	ldr	r3, [pc, #112]	; (8009e58 <oqWriteTimeout+0x108>)
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	429a      	cmp	r2, r3
 8009dec:	d004      	beq.n	8009df8 <oqWriteTimeout+0xa8>
 8009dee:	699b      	ldr	r3, [r3, #24]
 8009df0:	6899      	ldr	r1, [r3, #8]
 8009df2:	6893      	ldr	r3, [r2, #8]
 8009df4:	4299      	cmp	r1, r3
 8009df6:	d32c      	bcc.n	8009e52 <oqWriteTimeout+0x102>
 8009df8:	2300      	movs	r3, #0
 8009dfa:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return wr;
}
 8009dfe:	4640      	mov	r0, r8
 8009e00:	b005      	add	sp, #20
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  osalDbgCheck(n > 0U);
 8009e06:	4815      	ldr	r0, [pc, #84]	; (8009e5c <oqWriteTimeout+0x10c>)
 8009e08:	f7fb ffba 	bl	8005d80 <chSysHalt>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 8009e0c:	462a      	mov	r2, r5
 8009e0e:	4651      	mov	r1, sl
 8009e10:	f7f7 fa0a 	bl	8001228 <memcpy>
    oqp->q_wrptr += n;
 8009e14:	6963      	ldr	r3, [r4, #20]
 8009e16:	442b      	add	r3, r5
 8009e18:	6163      	str	r3, [r4, #20]
 8009e1a:	e7c0      	b.n	8009d9e <oqWriteTimeout+0x4e>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 8009e1c:	4632      	mov	r2, r6
 8009e1e:	4651      	mov	r1, sl
 8009e20:	f7f7 fa02 	bl	8001228 <memcpy>
    s2 = n - s1;
 8009e24:	1bab      	subs	r3, r5, r6
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 8009e26:	9303      	str	r3, [sp, #12]
 8009e28:	461a      	mov	r2, r3
 8009e2a:	eb0a 0106 	add.w	r1, sl, r6
 8009e2e:	68e0      	ldr	r0, [r4, #12]
 8009e30:	f7f7 f9fa 	bl	8001228 <memcpy>
    oqp->q_wrptr = oqp->q_buffer + s2;
 8009e34:	68e3      	ldr	r3, [r4, #12]
 8009e36:	9a03      	ldr	r2, [sp, #12]
 8009e38:	4413      	add	r3, r2
 8009e3a:	6163      	str	r3, [r4, #20]
 8009e3c:	e7af      	b.n	8009d9e <oqWriteTimeout+0x4e>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8009e3e:	9901      	ldr	r1, [sp, #4]
 8009e40:	4620      	mov	r0, r4
 8009e42:	f7fd fa2d 	bl	80072a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0c9      	beq.n	8009dde <oqWriteTimeout+0x8e>
 8009e4a:	e7ca      	b.n	8009de2 <oqWriteTimeout+0x92>
 8009e4c:	4804      	ldr	r0, [pc, #16]	; (8009e60 <oqWriteTimeout+0x110>)
 8009e4e:	f7fb ff97 	bl	8005d80 <chSysHalt>
 8009e52:	4803      	ldr	r0, [pc, #12]	; (8009e60 <oqWriteTimeout+0x110>)
 8009e54:	f7fb ff94 	bl	8005d80 <chSysHalt>
 8009e58:	200015d8 	.word	0x200015d8
 8009e5c:	0800b4ec 	.word	0x0800b4ec
 8009e60:	0800b148 	.word	0x0800b148
	...

08009e70 <Thread4>:
static THD_FUNCTION(Thread4, arg) {
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b08c      	sub	sp, #48	; 0x30
	    chMBFetchTimeout(&RxMbx,&rxRow,TIME_INFINITE);
 8009e74:	f8df 92cc 	ldr.w	r9, [pc, #716]	; 800a144 <Thread4+0x2d4>
	    memcpy(lcltext,rx_text[rxRow],rxPos);
 8009e78:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 800a148 <Thread4+0x2d8>
		    sdWrite(&SD2,lcltext,rxPos);
 8009e7c:	4d98      	ldr	r5, [pc, #608]	; (800a0e0 <Thread4+0x270>)
 8009e7e:	f105 0a30 	add.w	sl, r5, #48	; 0x30
			    value = winddir*10.0;
 8009e82:	2600      	movs	r6, #0
 8009e84:	4f97      	ldr	r7, [pc, #604]	; (800a0e4 <Thread4+0x274>)
			    value = lifetimeRain*100;
 8009e86:	ed9f 8a98 	vldr	s16, [pc, #608]	; 800a0e8 <Thread4+0x278>
 8009e8a:	e174      	b.n	800a176 <Thread4+0x306>
		    reg = (lcltext[2]<<8)|lcltext[3];
 8009e8c:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8009e90:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8009e94:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		    switch (reg){
 8009e98:	b21b      	sxth	r3, r3
 8009e9a:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d031      	beq.n	8009f06 <Thread4+0x96>
 8009ea2:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8009ea6:	4293      	cmp	r3, r2
 8009ea8:	d036      	beq.n	8009f18 <Thread4+0xa8>
 8009eaa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009eae:	d01a      	beq.n	8009ee6 <Thread4+0x76>
			error = 0x02;
 8009eb0:	2202      	movs	r2, #2
			lcltext[0] = my_address;
 8009eb2:	4b8e      	ldr	r3, [pc, #568]	; (800a0ec <Thread4+0x27c>)
 8009eb4:	781b      	ldrb	r3, [r3, #0]
 8009eb6:	f88d 3010 	strb.w	r3, [sp, #16]
			lcltext[1] = 0x86;
 8009eba:	2386      	movs	r3, #134	; 0x86
 8009ebc:	f88d 3011 	strb.w	r3, [sp, #17]
			lcltext[2] = error;
 8009ec0:	f88d 2012 	strb.w	r2, [sp, #18]
			*(uint16_t*)(lcltext+3) = CRC16(lcltext,3);
 8009ec4:	2103      	movs	r1, #3
 8009ec6:	a804      	add	r0, sp, #16
 8009ec8:	f7fb fe2a 	bl	8005b20 <CRC16>
 8009ecc:	f8ad 0013 	strh.w	r0, [sp, #19]
			lcltext[5] = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	f88d 3015 	strb.w	r3, [sp, #21]
			sdWrite(&SD2,lcltext,5);
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eda:	2205      	movs	r2, #5
 8009edc:	a904      	add	r1, sp, #16
 8009ede:	4650      	mov	r0, sl
 8009ee0:	f7ff ff36 	bl	8009d50 <oqWriteTimeout>
 8009ee4:	e0f9      	b.n	800a0da <Thread4+0x26a>
			save_address = (lcltext[4]<<8)|lcltext[5];
 8009ee6:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009eea:	4b81      	ldr	r3, [pc, #516]	; (800a0f0 <Thread4+0x280>)
 8009eec:	701a      	strb	r2, [r3, #0]
			chprintf(&SD1,"Hello World - I am now # %d\r\n",save_address);
 8009eee:	4981      	ldr	r1, [pc, #516]	; (800a0f4 <Thread4+0x284>)
 8009ef0:	4881      	ldr	r0, [pc, #516]	; (800a0f8 <Thread4+0x288>)
 8009ef2:	f7fc fe25 	bl	8006b40 <chprintf>
			sdWrite(&SD2,lcltext,8);
 8009ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009efa:	2208      	movs	r2, #8
 8009efc:	a904      	add	r1, sp, #16
 8009efe:	4650      	mov	r0, sl
 8009f00:	f7ff ff26 	bl	8009d50 <oqWriteTimeout>
 8009f04:	e0e9      	b.n	800a0da <Thread4+0x26a>
			save_baud_rate = (lcltext[4]<<8)|lcltext[5];
 8009f06:	f89d 2015 	ldrb.w	r2, [sp, #21]
 8009f0a:	4b7c      	ldr	r3, [pc, #496]	; (800a0fc <Thread4+0x28c>)
 8009f0c:	701a      	strb	r2, [r3, #0]
			chprintf(&SD1,"Hello World - baud_rate # %d\r\n",save_baud_rate);
 8009f0e:	497c      	ldr	r1, [pc, #496]	; (800a100 <Thread4+0x290>)
 8009f10:	4879      	ldr	r0, [pc, #484]	; (800a0f8 <Thread4+0x288>)
 8009f12:	f7fc fe15 	bl	8006b40 <chprintf>
 8009f16:	e7ee      	b.n	8009ef6 <Thread4+0x86>
		      settings = ((save_baud_rate&0xff)<<8)|(save_address&0xff);
 8009f18:	4b78      	ldr	r3, [pc, #480]	; (800a0fc <Thread4+0x28c>)
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	4a74      	ldr	r2, [pc, #464]	; (800a0f0 <Thread4+0x280>)
 8009f1e:	7812      	ldrb	r2, [r2, #0]
 8009f20:	ea42 2103 	orr.w	r1, r2, r3, lsl #8
 8009f24:	4877      	ldr	r0, [pc, #476]	; (800a104 <Thread4+0x294>)
 8009f26:	8001      	strh	r1, [r0, #0]
		      chprintf(&SD1,"Write Flash %d,%d,%x\r\n",save_address,save_baud_rate,settings);			
 8009f28:	9100      	str	r1, [sp, #0]
 8009f2a:	4977      	ldr	r1, [pc, #476]	; (800a108 <Thread4+0x298>)
 8009f2c:	4872      	ldr	r0, [pc, #456]	; (800a0f8 <Thread4+0x288>)
 8009f2e:	f7fc fe07 	bl	8006b40 <chprintf>
			code =  (lcltext[4]<<8)|lcltext[5];
 8009f32:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8009f36:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8009f3a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			if (code==0x1234){
 8009f3e:	b21b      	sxth	r3, r3
 8009f40:	f241 2234 	movw	r2, #4660	; 0x1234
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d001      	beq.n	8009f4c <Thread4+0xdc>
			    error = 0x04;
 8009f48:	2204      	movs	r2, #4
 8009f4a:	e7b2      	b.n	8009eb2 <Thread4+0x42>
			  write_flash(settings,flash1);
 8009f4c:	4c6f      	ldr	r4, [pc, #444]	; (800a10c <Thread4+0x29c>)
 8009f4e:	4621      	mov	r1, r4
 8009f50:	4b6c      	ldr	r3, [pc, #432]	; (800a104 <Thread4+0x294>)
 8009f52:	8818      	ldrh	r0, [r3, #0]
 8009f54:	f7fb fe04 	bl	8005b60 <write_flash>
			    chprintf(&SD1,"WroteFlash %x\r\n",*flash1);			
 8009f58:	8822      	ldrh	r2, [r4, #0]
 8009f5a:	496d      	ldr	r1, [pc, #436]	; (800a110 <Thread4+0x2a0>)
 8009f5c:	4866      	ldr	r0, [pc, #408]	; (800a0f8 <Thread4+0x288>)
 8009f5e:	f7fc fdef 	bl	8006b40 <chprintf>
			    reset = 1;
 8009f62:	4b6c      	ldr	r3, [pc, #432]	; (800a114 <Thread4+0x2a4>)
 8009f64:	2201      	movs	r2, #1
 8009f66:	701a      	strb	r2, [r3, #0]
 8009f68:	e7c5      	b.n	8009ef6 <Thread4+0x86>
			    value = irradiance3*10.0;
 8009f6a:	4b6b      	ldr	r3, [pc, #428]	; (800a118 <Thread4+0x2a8>)
 8009f6c:	6818      	ldr	r0, [r3, #0]
 8009f6e:	f7f6 fc55 	bl	800081c <__aeabi_f2d>
 8009f72:	4632      	mov	r2, r6
 8009f74:	463b      	mov	r3, r7
 8009f76:	f7f6 fca9 	bl	80008cc <__aeabi_dmul>
 8009f7a:	f7f6 ff57 	bl	8000e2c <__aeabi_d2iz>
 8009f7e:	b200      	sxth	r0, r0
			    lcltext[1] = 4;
 8009f80:	2304      	movs	r3, #4
 8009f82:	f88d 3011 	strb.w	r3, [sp, #17]
			    lcltext[2] = 2;
 8009f86:	2302      	movs	r3, #2
 8009f88:	f88d 3012 	strb.w	r3, [sp, #18]
			    lcltext[3] = (value & 0xFF00 ) >> 8;
 8009f8c:	1203      	asrs	r3, r0, #8
 8009f8e:	f88d 3013 	strb.w	r3, [sp, #19]
			    lcltext[4] = value & 0xFF ;
 8009f92:	f88d 0014 	strb.w	r0, [sp, #20]
			    *(uint16_t*)(lcltext+5) = CRC16(lcltext,5);
 8009f96:	2105      	movs	r1, #5
 8009f98:	a804      	add	r0, sp, #16
 8009f9a:	f7fb fdc1 	bl	8005b20 <CRC16>
 8009f9e:	f8ad 0015 	strh.w	r0, [sp, #21]
			    lcltext[7] = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	f88d 3017 	strb.w	r3, [sp, #23]
			    sdWrite(&SD2,lcltext,7);
 8009fa8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fac:	2207      	movs	r2, #7
 8009fae:	a904      	add	r1, sp, #16
 8009fb0:	4650      	mov	r0, sl
 8009fb2:	f7ff fecd 	bl	8009d50 <oqWriteTimeout>
 8009fb6:	e090      	b.n	800a0da <Thread4+0x26a>
			    value = windspeed*10.0;
 8009fb8:	4b58      	ldr	r3, [pc, #352]	; (800a11c <Thread4+0x2ac>)
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	f7f6 fc2e 	bl	800081c <__aeabi_f2d>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	f7f6 fc82 	bl	80008cc <__aeabi_dmul>
 8009fc8:	f7f6 ff30 	bl	8000e2c <__aeabi_d2iz>
 8009fcc:	b200      	sxth	r0, r0
 8009fce:	e7d7      	b.n	8009f80 <Thread4+0x110>
			    value = pt100temp1*10.0;
 8009fd0:	4b53      	ldr	r3, [pc, #332]	; (800a120 <Thread4+0x2b0>)
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	f7f6 fc22 	bl	800081c <__aeabi_f2d>
 8009fd8:	4632      	mov	r2, r6
 8009fda:	463b      	mov	r3, r7
 8009fdc:	f7f6 fc76 	bl	80008cc <__aeabi_dmul>
 8009fe0:	f7f6 ff24 	bl	8000e2c <__aeabi_d2iz>
 8009fe4:	b200      	sxth	r0, r0
 8009fe6:	e7cb      	b.n	8009f80 <Thread4+0x110>
			    value = pt100temp2*10.0;
 8009fe8:	4b4e      	ldr	r3, [pc, #312]	; (800a124 <Thread4+0x2b4>)
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	f7f6 fc16 	bl	800081c <__aeabi_f2d>
 8009ff0:	4632      	mov	r2, r6
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	f7f6 fc6a 	bl	80008cc <__aeabi_dmul>
 8009ff8:	f7f6 ff18 	bl	8000e2c <__aeabi_d2iz>
 8009ffc:	b200      	sxth	r0, r0
 8009ffe:	e7bf      	b.n	8009f80 <Thread4+0x110>
			    value = pt100temp3*10.0;
 800a000:	4b49      	ldr	r3, [pc, #292]	; (800a128 <Thread4+0x2b8>)
 800a002:	6818      	ldr	r0, [r3, #0]
 800a004:	f7f6 fc0a 	bl	800081c <__aeabi_f2d>
 800a008:	4632      	mov	r2, r6
 800a00a:	463b      	mov	r3, r7
 800a00c:	f7f6 fc5e 	bl	80008cc <__aeabi_dmul>
 800a010:	f7f6 ff0c 	bl	8000e2c <__aeabi_d2iz>
 800a014:	b200      	sxth	r0, r0
 800a016:	e7b3      	b.n	8009f80 <Thread4+0x110>
			    value = pt100temp4*10.0;
 800a018:	4b44      	ldr	r3, [pc, #272]	; (800a12c <Thread4+0x2bc>)
 800a01a:	6818      	ldr	r0, [r3, #0]
 800a01c:	f7f6 fbfe 	bl	800081c <__aeabi_f2d>
 800a020:	4632      	mov	r2, r6
 800a022:	463b      	mov	r3, r7
 800a024:	f7f6 fc52 	bl	80008cc <__aeabi_dmul>
 800a028:	f7f6 ff00 	bl	8000e2c <__aeabi_d2iz>
 800a02c:	b200      	sxth	r0, r0
 800a02e:	e7a7      	b.n	8009f80 <Thread4+0x110>
			    value = pt100temp5*10.0;
 800a030:	4b3f      	ldr	r3, [pc, #252]	; (800a130 <Thread4+0x2c0>)
 800a032:	6818      	ldr	r0, [r3, #0]
 800a034:	f7f6 fbf2 	bl	800081c <__aeabi_f2d>
 800a038:	4632      	mov	r2, r6
 800a03a:	463b      	mov	r3, r7
 800a03c:	f7f6 fc46 	bl	80008cc <__aeabi_dmul>
 800a040:	f7f6 fef4 	bl	8000e2c <__aeabi_d2iz>
 800a044:	b200      	sxth	r0, r0
 800a046:	e79b      	b.n	8009f80 <Thread4+0x110>
			    value = snowoutput;
 800a048:	4b3a      	ldr	r3, [pc, #232]	; (800a134 <Thread4+0x2c4>)
 800a04a:	edd3 7a00 	vldr	s15, [r3]
 800a04e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a052:	ee17 3a90 	vmov	r3, s15
 800a056:	b218      	sxth	r0, r3
 800a058:	e792      	b.n	8009f80 <Thread4+0x110>
			    value = rainRate*100;
 800a05a:	4b37      	ldr	r3, [pc, #220]	; (800a138 <Thread4+0x2c8>)
 800a05c:	edd3 7a00 	vldr	s15, [r3]
 800a060:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a068:	ee17 3a90 	vmov	r3, s15
 800a06c:	b218      	sxth	r0, r3
 800a06e:	e787      	b.n	8009f80 <Thread4+0x110>
			    value = lifetimeRain*100;
 800a070:	4b32      	ldr	r3, [pc, #200]	; (800a13c <Thread4+0x2cc>)
 800a072:	edd3 7a00 	vldr	s15, [r3]
 800a076:	ee67 7a88 	vmul.f32	s15, s15, s16
 800a07a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a07e:	ee17 3a90 	vmov	r3, s15
 800a082:	b218      	sxth	r0, r3
 800a084:	e77c      	b.n	8009f80 <Thread4+0x110>
			    value = winddir*10.0;
 800a086:	4b2e      	ldr	r3, [pc, #184]	; (800a140 <Thread4+0x2d0>)
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f7f6 fbc7 	bl	800081c <__aeabi_f2d>
 800a08e:	4632      	mov	r2, r6
 800a090:	463b      	mov	r3, r7
 800a092:	f7f6 fc1b 	bl	80008cc <__aeabi_dmul>
 800a096:	f7f6 fec9 	bl	8000e2c <__aeabi_d2iz>
 800a09a:	b200      	sxth	r0, r0
 800a09c:	e770      	b.n	8009f80 <Thread4+0x110>
			    lcltext[1] = 0x84;
 800a09e:	2384      	movs	r3, #132	; 0x84
 800a0a0:	f88d 3011 	strb.w	r3, [sp, #17]
			    lcltext[2] = 0x02;
 800a0a4:	2302      	movs	r3, #2
 800a0a6:	f88d 3012 	strb.w	r3, [sp, #18]
			    *(uint16_t*)(lcltext+3) = CRC16(lcltext,3);
 800a0aa:	2103      	movs	r1, #3
 800a0ac:	a804      	add	r0, sp, #16
 800a0ae:	f7fb fd37 	bl	8005b20 <CRC16>
 800a0b2:	f8ad 0013 	strh.w	r0, [sp, #19]
			    lcltext[5] = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	f88d 3015 	strb.w	r3, [sp, #21]
			    sdWrite(&SD2,lcltext,5);
 800a0bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0c0:	2205      	movs	r2, #5
 800a0c2:	a904      	add	r1, sp, #16
 800a0c4:	4650      	mov	r0, sl
 800a0c6:	f7ff fe43 	bl	8009d50 <oqWriteTimeout>
 800a0ca:	e006      	b.n	800a0da <Thread4+0x26a>
		    sdWrite(&SD2,lcltext,rxPos);
 800a0cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0d0:	4622      	mov	r2, r4
 800a0d2:	a904      	add	r1, sp, #16
 800a0d4:	4650      	mov	r0, sl
 800a0d6:	f7ff fe3b 	bl	8009d50 <oqWriteTimeout>
		    	chThdSleepMilliseconds(1);
 800a0da:	240a      	movs	r4, #10
 800a0dc:	e039      	b.n	800a152 <Thread4+0x2e2>
 800a0de:	bf00      	nop
 800a0e0:	20001474 	.word	0x20001474
 800a0e4:	40240000 	.word	0x40240000
 800a0e8:	42c80000 	.word	0x42c80000
 800a0ec:	200020bc 	.word	0x200020bc
 800a0f0:	20002504 	.word	0x20002504
 800a0f4:	0800b01c 	.word	0x0800b01c
 800a0f8:	20001414 	.word	0x20001414
 800a0fc:	20002505 	.word	0x20002505
 800a100:	0800b03c 	.word	0x0800b03c
 800a104:	20002548 	.word	0x20002548
 800a108:	0800b05c 	.word	0x0800b05c
 800a10c:	0803f000 	.word	0x0803f000
 800a110:	0800b074 	.word	0x0800b074
 800a114:	200020e4 	.word	0x200020e4
 800a118:	20002048 	.word	0x20002048
 800a11c:	20004198 	.word	0x20004198
 800a120:	200020c0 	.word	0x200020c0
 800a124:	200020c4 	.word	0x200020c4
 800a128:	200020c8 	.word	0x200020c8
 800a12c:	200020cc 	.word	0x200020cc
 800a130:	200020d0 	.word	0x200020d0
 800a134:	20002550 	.word	0x20002550
 800a138:	200020e0 	.word	0x200020e0
 800a13c:	2000204c 	.word	0x2000204c
 800a140:	20004194 	.word	0x20004194
 800a144:	200012fc 	.word	0x200012fc
 800a148:	200020f0 	.word	0x200020f0
 800a14c:	4620      	mov	r0, r4
 800a14e:	f7fd fca7 	bl	8007aa0 <chThdSleep>
		while (!(oqIsEmptyI(&(&SD2)->oqueue)))
 800a152:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 800a154:	6cab      	ldr	r3, [r5, #72]	; 0x48
 800a156:	429a      	cmp	r2, r3
 800a158:	d1f8      	bne.n	800a14c <Thread4+0x2dc>
 800a15a:	6bab      	ldr	r3, [r5, #56]	; 0x38
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d0f5      	beq.n	800a14c <Thread4+0x2dc>
		chThdSleepMilliseconds(2);
 800a160:	2014      	movs	r0, #20
 800a162:	f7fd fc9d 	bl	8007aa0 <chThdSleep>
		palClearPad(GPIOA,1);
 800a166:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a16a:	2202      	movs	r2, #2
 800a16c:	835a      	strh	r2, [r3, #26]
		palClearPad(GPIOE,0);
 800a16e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a172:	2201      	movs	r2, #1
 800a174:	835a      	strh	r2, [r3, #26]
	    chMBFetchTimeout(&RxMbx,&rxRow,TIME_INFINITE);
 800a176:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a17a:	a903      	add	r1, sp, #12
 800a17c:	4648      	mov	r0, r9
 800a17e:	f7fd f997 	bl	80074b0 <chMBFetchTimeout>
	    rxPos = rxRow & 0xFF;
 800a182:	9903      	ldr	r1, [sp, #12]
 800a184:	b2cc      	uxtb	r4, r1
	    rxRow = rxRow >> 8;
 800a186:	1209      	asrs	r1, r1, #8
 800a188:	9103      	str	r1, [sp, #12]
	    memcpy(lcltext,rx_text[rxRow],rxPos);
 800a18a:	4622      	mov	r2, r4
 800a18c:	eb08 1141 	add.w	r1, r8, r1, lsl #5
 800a190:	a804      	add	r0, sp, #16
 800a192:	f7f7 f849 	bl	8001228 <memcpy>
            if ((lcltext[0] == my_address) &&
 800a196:	f89d 2010 	ldrb.w	r2, [sp, #16]
 800a19a:	4b21      	ldr	r3, [pc, #132]	; (800a220 <Thread4+0x3b0>)
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d1e9      	bne.n	800a176 <Thread4+0x306>
		(*(uint16_t*)(lcltext+rxPos-2) == CRC16(lcltext,rxPos-2))){
 800a1a2:	1ea1      	subs	r1, r4, #2
 800a1a4:	b289      	uxth	r1, r1
 800a1a6:	a804      	add	r0, sp, #16
 800a1a8:	f7fb fcba 	bl	8005b20 <CRC16>
 800a1ac:	ab0c      	add	r3, sp, #48	; 0x30
 800a1ae:	4423      	add	r3, r4
            if ((lcltext[0] == my_address) &&
 800a1b0:	f833 3c22 	ldrh.w	r3, [r3, #-34]
 800a1b4:	4283      	cmp	r3, r0
 800a1b6:	d1de      	bne.n	800a176 <Thread4+0x306>
		command = lcltext[1];		
 800a1b8:	f89d 3011 	ldrb.w	r3, [sp, #17]
		palSetPad(GPIOA,1);
 800a1bc:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800a1c0:	2102      	movs	r1, #2
 800a1c2:	8311      	strh	r1, [r2, #24]
		palSetPad(GPIOE,0);
 800a1c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	8311      	strh	r1, [r2, #24]
		if (command == 6){
 800a1cc:	2b06      	cmp	r3, #6
 800a1ce:	f43f ae5d 	beq.w	8009e8c <Thread4+0x1c>
		else if (command == 4)
 800a1d2:	2b04      	cmp	r3, #4
 800a1d4:	f47f af7a 	bne.w	800a0cc <Thread4+0x25c>
			reg = (lcltext[2]<<8)|lcltext[3];
 800a1d8:	f89d 2012 	ldrb.w	r2, [sp, #18]
 800a1dc:	f89d 3013 	ldrb.w	r3, [sp, #19]
 800a1e0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
			switch (reg) {
 800a1e4:	b21b      	sxth	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	2b0a      	cmp	r3, #10
 800a1ea:	f63f af58 	bhi.w	800a09e <Thread4+0x22e>
 800a1ee:	a201      	add	r2, pc, #4	; (adr r2, 800a1f4 <Thread4+0x384>)
 800a1f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1f4:	08009f6b 	.word	0x08009f6b
 800a1f8:	08009fb9 	.word	0x08009fb9
 800a1fc:	08009fd1 	.word	0x08009fd1
 800a200:	08009fe9 	.word	0x08009fe9
 800a204:	0800a001 	.word	0x0800a001
 800a208:	0800a019 	.word	0x0800a019
 800a20c:	0800a031 	.word	0x0800a031
 800a210:	0800a049 	.word	0x0800a049
 800a214:	0800a05b 	.word	0x0800a05b
 800a218:	0800a071 	.word	0x0800a071
 800a21c:	0800a087 	.word	0x0800a087
 800a220:	200020bc 	.word	0x200020bc
	...

0800a230 <_writet>:
                      sysinterval_t timeout) {
 800a230:	b508      	push	{r3, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 800a232:	3030      	adds	r0, #48	; 0x30
 800a234:	f7ff fd8c 	bl	8009d50 <oqWriteTimeout>
}
 800a238:	bd08      	pop	{r3, pc}
 800a23a:	bf00      	nop
 800a23c:	0000      	movs	r0, r0
	...

0800a240 <_write>:
static size_t _write(void *ip, const uint8_t *bp, size_t n) {
 800a240:	b508      	push	{r3, lr}
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 800a242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a246:	3030      	adds	r0, #48	; 0x30
 800a248:	f7ff fd82 	bl	8009d50 <oqWriteTimeout>
}
 800a24c:	bd08      	pop	{r3, pc}
 800a24e:	bf00      	nop

0800a250 <oqPutTimeout>:
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 800a250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a252:	4604      	mov	r4, r0
 800a254:	460f      	mov	r7, r1
 800a256:	4616      	mov	r6, r2
 800a258:	2320      	movs	r3, #32
 800a25a:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a25e:	f7fd f8cf 	bl	8007400 <_dbg_check_lock>
  while (oqIsFullI(oqp)) {
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	b9bb      	cbnz	r3, 800a296 <oqPutTimeout+0x46>
 800a266:	4631      	mov	r1, r6
 800a268:	4620      	mov	r0, r4
 800a26a:	f7fd f819 	bl	80072a0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800a26e:	1e05      	subs	r5, r0, #0
 800a270:	daf7      	bge.n	800a262 <oqPutTimeout+0x12>
  _dbg_check_unlock();
 800a272:	f7fd f87d 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a276:	4b1a      	ldr	r3, [pc, #104]	; (800a2e0 <oqPutTimeout+0x90>)
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	d004      	beq.n	800a288 <oqPutTimeout+0x38>
 800a27e:	699b      	ldr	r3, [r3, #24]
 800a280:	6899      	ldr	r1, [r3, #8]
 800a282:	6893      	ldr	r3, [r2, #8]
 800a284:	4299      	cmp	r1, r3
 800a286:	d303      	bcc.n	800a290 <oqPutTimeout+0x40>
 800a288:	2300      	movs	r3, #0
 800a28a:	f383 8811 	msr	BASEPRI, r3
 800a28e:	e021      	b.n	800a2d4 <oqPutTimeout+0x84>
 800a290:	4814      	ldr	r0, [pc, #80]	; (800a2e4 <oqPutTimeout+0x94>)
 800a292:	f7fb fd75 	bl	8005d80 <chSysHalt>
  oqp->q_counter--;
 800a296:	68a3      	ldr	r3, [r4, #8]
 800a298:	3b01      	subs	r3, #1
 800a29a:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 800a29c:	6963      	ldr	r3, [r4, #20]
 800a29e:	1c5a      	adds	r2, r3, #1
 800a2a0:	6162      	str	r2, [r4, #20]
 800a2a2:	701f      	strb	r7, [r3, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 800a2a4:	6962      	ldr	r2, [r4, #20]
 800a2a6:	6923      	ldr	r3, [r4, #16]
 800a2a8:	429a      	cmp	r2, r3
    oqp->q_wrptr = oqp->q_buffer;
 800a2aa:	bf24      	itt	cs
 800a2ac:	68e3      	ldrcs	r3, [r4, #12]
 800a2ae:	6163      	strcs	r3, [r4, #20]
  if (oqp->q_notify != NULL) {
 800a2b0:	69e3      	ldr	r3, [r4, #28]
 800a2b2:	b10b      	cbz	r3, 800a2b8 <oqPutTimeout+0x68>
    oqp->q_notify(oqp);
 800a2b4:	4620      	mov	r0, r4
 800a2b6:	4798      	blx	r3
  _dbg_check_unlock();
 800a2b8:	f7fd f85a 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a2bc:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <oqPutTimeout+0x90>)
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d004      	beq.n	800a2ce <oqPutTimeout+0x7e>
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	6899      	ldr	r1, [r3, #8]
 800a2c8:	6893      	ldr	r3, [r2, #8]
 800a2ca:	4299      	cmp	r1, r3
 800a2cc:	d304      	bcc.n	800a2d8 <oqPutTimeout+0x88>
 800a2ce:	2500      	movs	r5, #0
 800a2d0:	f385 8811 	msr	BASEPRI, r5
}
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a2d8:	4802      	ldr	r0, [pc, #8]	; (800a2e4 <oqPutTimeout+0x94>)
 800a2da:	f7fb fd51 	bl	8005d80 <chSysHalt>
 800a2de:	bf00      	nop
 800a2e0:	200015d8 	.word	0x200015d8
 800a2e4:	0800b148 	.word	0x0800b148
	...

0800a2f0 <_putt>:
static msg_t _putt(void *ip, uint8_t b, sysinterval_t timeout) {
 800a2f0:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 800a2f2:	3030      	adds	r0, #48	; 0x30
 800a2f4:	f7ff ffac 	bl	800a250 <oqPutTimeout>
}
 800a2f8:	bd08      	pop	{r3, pc}
 800a2fa:	bf00      	nop
 800a2fc:	0000      	movs	r0, r0
	...

0800a300 <_put>:
static msg_t _put(void *ip, uint8_t b) {
 800a300:	b508      	push	{r3, lr}
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 800a302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a306:	3030      	adds	r0, #48	; 0x30
 800a308:	f7ff ffa2 	bl	800a250 <oqPutTimeout>
}
 800a30c:	bd08      	pop	{r3, pc}
 800a30e:	bf00      	nop

0800a310 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 800a310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a314:	b085      	sub	sp, #20
 800a316:	9301      	str	r3, [sp, #4]
  osalDbgCheck(n > 0U);
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d054      	beq.n	800a3c6 <iqReadTimeout+0xb6>
 800a31c:	4604      	mov	r4, r0
 800a31e:	468a      	mov	sl, r1
 800a320:	4617      	mov	r7, r2
  qnotify_t nfy = iqp->q_notify;
 800a322:	f8d0 b01c 	ldr.w	fp, [r0, #28]
 800a326:	2320      	movs	r3, #32
 800a328:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a32c:	f7fd f868 	bl	8007400 <_dbg_check_lock>
  size_t rd = 0;
 800a330:	f04f 0800 	mov.w	r8, #0
  if (n > iqGetFullI(iqp)) {
 800a334:	9702      	str	r7, [sp, #8]
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a336:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800a418 <iqReadTimeout+0x108>
 800a33a:	68a3      	ldr	r3, [r4, #8]
 800a33c:	429f      	cmp	r7, r3
    n = iqGetFullI(iqp);
 800a33e:	bf8c      	ite	hi
 800a340:	68a5      	ldrhi	r5, [r4, #8]
  if (n > iqGetFullI(iqp)) {
 800a342:	9d02      	ldrls	r5, [sp, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800a344:	69a1      	ldr	r1, [r4, #24]
 800a346:	6926      	ldr	r6, [r4, #16]
 800a348:	1a76      	subs	r6, r6, r1
  if (n < s1) {
 800a34a:	42ae      	cmp	r6, r5
 800a34c:	d83e      	bhi.n	800a3cc <iqReadTimeout+0xbc>
  else if (n > s1) {
 800a34e:	42ae      	cmp	r6, r5
 800a350:	d344      	bcc.n	800a3dc <iqReadTimeout+0xcc>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800a352:	462a      	mov	r2, r5
 800a354:	4650      	mov	r0, sl
 800a356:	f7f6 ff67 	bl	8001228 <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 800a35a:	68e3      	ldr	r3, [r4, #12]
 800a35c:	61a3      	str	r3, [r4, #24]
  iqp->q_counter -= n;
 800a35e:	68a3      	ldr	r3, [r4, #8]
 800a360:	1b5b      	subs	r3, r3, r5
 800a362:	60a3      	str	r3, [r4, #8]
    if (done == (size_t)0) {
 800a364:	2d00      	cmp	r5, #0
 800a366:	d04a      	beq.n	800a3fe <iqReadTimeout+0xee>
      if (nfy != NULL) {
 800a368:	f1bb 0f00 	cmp.w	fp, #0
 800a36c:	d001      	beq.n	800a372 <iqReadTimeout+0x62>
        nfy(iqp);
 800a36e:	4620      	mov	r0, r4
 800a370:	47d8      	blx	fp
  _dbg_check_unlock();
 800a372:	f7fc fffd 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a376:	f8d9 3000 	ldr.w	r3, [r9]
 800a37a:	454b      	cmp	r3, r9
 800a37c:	d005      	beq.n	800a38a <iqReadTimeout+0x7a>
 800a37e:	f8d9 2018 	ldr.w	r2, [r9, #24]
 800a382:	6892      	ldr	r2, [r2, #8]
 800a384:	689b      	ldr	r3, [r3, #8]
 800a386:	429a      	cmp	r2, r3
 800a388:	d340      	bcc.n	800a40c <iqReadTimeout+0xfc>
 800a38a:	2300      	movs	r3, #0
 800a38c:	f383 8811 	msr	BASEPRI, r3
      rd += done;
 800a390:	44a8      	add	r8, r5
      bp += done;
 800a392:	44aa      	add	sl, r5
 800a394:	2320      	movs	r3, #32
 800a396:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a39a:	f7fd f831 	bl	8007400 <_dbg_check_lock>
  while (rd < n) {
 800a39e:	4547      	cmp	r7, r8
 800a3a0:	d8cb      	bhi.n	800a33a <iqReadTimeout+0x2a>
  _dbg_check_unlock();
 800a3a2:	f7fc ffe5 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a3a6:	4b1c      	ldr	r3, [pc, #112]	; (800a418 <iqReadTimeout+0x108>)
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d004      	beq.n	800a3b8 <iqReadTimeout+0xa8>
 800a3ae:	699b      	ldr	r3, [r3, #24]
 800a3b0:	6899      	ldr	r1, [r3, #8]
 800a3b2:	6893      	ldr	r3, [r2, #8]
 800a3b4:	4299      	cmp	r1, r3
 800a3b6:	d32c      	bcc.n	800a412 <iqReadTimeout+0x102>
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f383 8811 	msr	BASEPRI, r3
}
 800a3be:	4640      	mov	r0, r8
 800a3c0:	b005      	add	sp, #20
 800a3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  osalDbgCheck(n > 0U);
 800a3c6:	4815      	ldr	r0, [pc, #84]	; (800a41c <iqReadTimeout+0x10c>)
 800a3c8:	f7fb fcda 	bl	8005d80 <chSysHalt>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800a3cc:	462a      	mov	r2, r5
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	f7f6 ff2a 	bl	8001228 <memcpy>
    iqp->q_rdptr += n;
 800a3d4:	69a3      	ldr	r3, [r4, #24]
 800a3d6:	442b      	add	r3, r5
 800a3d8:	61a3      	str	r3, [r4, #24]
 800a3da:	e7c0      	b.n	800a35e <iqReadTimeout+0x4e>
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 800a3dc:	4632      	mov	r2, r6
 800a3de:	4650      	mov	r0, sl
 800a3e0:	f7f6 ff22 	bl	8001228 <memcpy>
    s2 = n - s1;
 800a3e4:	1bab      	subs	r3, r5, r6
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 800a3e6:	9303      	str	r3, [sp, #12]
 800a3e8:	461a      	mov	r2, r3
 800a3ea:	68e1      	ldr	r1, [r4, #12]
 800a3ec:	eb0a 0006 	add.w	r0, sl, r6
 800a3f0:	f7f6 ff1a 	bl	8001228 <memcpy>
    iqp->q_rdptr = iqp->q_buffer + s2;
 800a3f4:	68e3      	ldr	r3, [r4, #12]
 800a3f6:	9a03      	ldr	r2, [sp, #12]
 800a3f8:	4413      	add	r3, r2
 800a3fa:	61a3      	str	r3, [r4, #24]
 800a3fc:	e7af      	b.n	800a35e <iqReadTimeout+0x4e>
 800a3fe:	9901      	ldr	r1, [sp, #4]
 800a400:	4620      	mov	r0, r4
 800a402:	f7fc ff4d 	bl	80072a0 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 800a406:	2800      	cmp	r0, #0
 800a408:	d0c9      	beq.n	800a39e <iqReadTimeout+0x8e>
 800a40a:	e7ca      	b.n	800a3a2 <iqReadTimeout+0x92>
 800a40c:	4804      	ldr	r0, [pc, #16]	; (800a420 <iqReadTimeout+0x110>)
 800a40e:	f7fb fcb7 	bl	8005d80 <chSysHalt>
 800a412:	4803      	ldr	r0, [pc, #12]	; (800a420 <iqReadTimeout+0x110>)
 800a414:	f7fb fcb4 	bl	8005d80 <chSysHalt>
 800a418:	200015d8 	.word	0x200015d8
 800a41c:	0800b4dc 	.word	0x0800b4dc
 800a420:	0800b148 	.word	0x0800b148
	...

0800a430 <_readt>:
                     sysinterval_t timeout) {
 800a430:	b508      	push	{r3, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 800a432:	300c      	adds	r0, #12
 800a434:	f7ff ff6c 	bl	800a310 <iqReadTimeout>
}
 800a438:	bd08      	pop	{r3, pc}
 800a43a:	bf00      	nop
 800a43c:	0000      	movs	r0, r0
	...

0800a440 <_read>:
static size_t _read(void *ip, uint8_t *bp, size_t n) {
 800a440:	b508      	push	{r3, lr}
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 800a442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a446:	300c      	adds	r0, #12
 800a448:	f7ff ff62 	bl	800a310 <iqReadTimeout>
}
 800a44c:	bd08      	pop	{r3, pc}
 800a44e:	bf00      	nop

0800a450 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	4604      	mov	r4, r0
 800a454:	460e      	mov	r6, r1
 800a456:	2320      	movs	r3, #32
 800a458:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock();
 800a45c:	f7fc ffd0 	bl	8007400 <_dbg_check_lock>
  while (iqIsEmptyI(iqp)) {
 800a460:	68a3      	ldr	r3, [r4, #8]
 800a462:	b9bb      	cbnz	r3, 800a494 <iqGetTimeout+0x44>
 800a464:	4631      	mov	r1, r6
 800a466:	4620      	mov	r0, r4
 800a468:	f7fc ff1a 	bl	80072a0 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 800a46c:	1e05      	subs	r5, r0, #0
 800a46e:	daf7      	bge.n	800a460 <iqGetTimeout+0x10>
  _dbg_check_unlock();
 800a470:	f7fc ff7e 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a474:	4b19      	ldr	r3, [pc, #100]	; (800a4dc <iqGetTimeout+0x8c>)
 800a476:	681a      	ldr	r2, [r3, #0]
 800a478:	429a      	cmp	r2, r3
 800a47a:	d004      	beq.n	800a486 <iqGetTimeout+0x36>
 800a47c:	699b      	ldr	r3, [r3, #24]
 800a47e:	6899      	ldr	r1, [r3, #8]
 800a480:	6893      	ldr	r3, [r2, #8]
 800a482:	4299      	cmp	r1, r3
 800a484:	d303      	bcc.n	800a48e <iqGetTimeout+0x3e>
 800a486:	2300      	movs	r3, #0
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	e020      	b.n	800a4d0 <iqGetTimeout+0x80>
 800a48e:	4814      	ldr	r0, [pc, #80]	; (800a4e0 <iqGetTimeout+0x90>)
 800a490:	f7fb fc76 	bl	8005d80 <chSysHalt>
  iqp->q_counter--;
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	3b01      	subs	r3, #1
 800a498:	60a3      	str	r3, [r4, #8]
  b = *iqp->q_rdptr++;
 800a49a:	69a2      	ldr	r2, [r4, #24]
 800a49c:	1c53      	adds	r3, r2, #1
 800a49e:	61a3      	str	r3, [r4, #24]
 800a4a0:	7815      	ldrb	r5, [r2, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 800a4a2:	6922      	ldr	r2, [r4, #16]
 800a4a4:	4293      	cmp	r3, r2
    iqp->q_rdptr = iqp->q_buffer;
 800a4a6:	bf24      	itt	cs
 800a4a8:	68e3      	ldrcs	r3, [r4, #12]
 800a4aa:	61a3      	strcs	r3, [r4, #24]
  if (iqp->q_notify != NULL) {
 800a4ac:	69e3      	ldr	r3, [r4, #28]
 800a4ae:	b10b      	cbz	r3, 800a4b4 <iqGetTimeout+0x64>
    iqp->q_notify(iqp);
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4798      	blx	r3
  _dbg_check_unlock();
 800a4b4:	f7fc ff5c 	bl	8007370 <_dbg_check_unlock>
  chDbgAssert((ch.rlist.queue.next == (thread_t *)&ch.rlist.queue) ||
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <iqGetTimeout+0x8c>)
 800a4ba:	681a      	ldr	r2, [r3, #0]
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	d004      	beq.n	800a4ca <iqGetTimeout+0x7a>
 800a4c0:	699b      	ldr	r3, [r3, #24]
 800a4c2:	6899      	ldr	r1, [r3, #8]
 800a4c4:	6893      	ldr	r3, [r2, #8]
 800a4c6:	4299      	cmp	r1, r3
 800a4c8:	d304      	bcc.n	800a4d4 <iqGetTimeout+0x84>
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	f383 8811 	msr	BASEPRI, r3
}
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	4802      	ldr	r0, [pc, #8]	; (800a4e0 <iqGetTimeout+0x90>)
 800a4d6:	f7fb fc53 	bl	8005d80 <chSysHalt>
 800a4da:	bf00      	nop
 800a4dc:	200015d8 	.word	0x200015d8
 800a4e0:	0800b148 	.word	0x0800b148
	...

0800a4f0 <Thread3>:
static THD_FUNCTION(Thread3, arg) {
 800a4f0:	b580      	push	{r7, lr}
 800a4f2:	4b26      	ldr	r3, [pc, #152]	; (800a58c <Thread3+0x9c>)
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	4a26      	ldr	r2, [pc, #152]	; (800a590 <Thread3+0xa0>)
 800a4f8:	619a      	str	r2, [r3, #24]
	  b = sdGetTimeout(&SD2,TIME_MS2I(2));
 800a4fa:	4f26      	ldr	r7, [pc, #152]	; (800a594 <Thread3+0xa4>)
	  if ((b == Q_TIMEOUT) && (rx_queue_pos > 0))
 800a4fc:	4c26      	ldr	r4, [pc, #152]	; (800a598 <Thread3+0xa8>)
		  rx_text[rx_queue_num][rx_queue_pos] = 0;
 800a4fe:	4d27      	ldr	r5, [pc, #156]	; (800a59c <Thread3+0xac>)
 800a500:	e02a      	b.n	800a558 <Thread3+0x68>
	  if ((b == Q_TIMEOUT) && (rx_queue_pos > 0))
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	2b00      	cmp	r3, #0
 800a506:	dd27      	ble.n	800a558 <Thread3+0x68>
		  rx_text[rx_queue_num][rx_queue_pos] = 0;
 800a508:	6829      	ldr	r1, [r5, #0]
 800a50a:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 800a5b0 <Thread3+0xc0>
 800a50e:	eb08 1241 	add.w	r2, r8, r1, lsl #5
 800a512:	2600      	movs	r6, #0
 800a514:	54d6      	strb	r6, [r2, r3]
		  chMBPostTimeout(&RxMbx,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
 800a516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a51a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800a51e:	4820      	ldr	r0, [pc, #128]	; (800a5a0 <Thread3+0xb0>)
 800a520:	f7fd f81e 	bl	8007560 <chMBPostTimeout>
		  chMBPostTimeout(&RxMbx2,(rx_queue_num<<8)|rx_queue_pos,TIME_INFINITE); // let our mailbox know
 800a524:	6829      	ldr	r1, [r5, #0]
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a52c:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 800a530:	481c      	ldr	r0, [pc, #112]	; (800a5a4 <Thread3+0xb4>)
 800a532:	f7fd f815 	bl	8007560 <chMBPostTimeout>
		  rx_queue_pos = 0;
 800a536:	6026      	str	r6, [r4, #0]
		  rx_queue_num = (++rx_queue_num)%32;
 800a538:	682b      	ldr	r3, [r5, #0]
 800a53a:	3301      	adds	r3, #1
 800a53c:	1af2      	subs	r2, r6, r3
 800a53e:	f003 031f 	and.w	r3, r3, #31
 800a542:	f002 021f 	and.w	r2, r2, #31
 800a546:	bf58      	it	pl
 800a548:	4253      	negpl	r3, r2
 800a54a:	602b      	str	r3, [r5, #0]
		  memset(rx_text[rx_queue_num],0,5);
 800a54c:	015b      	lsls	r3, r3, #5
 800a54e:	eb08 0203 	add.w	r2, r8, r3
 800a552:	f848 6003 	str.w	r6, [r8, r3]
 800a556:	7116      	strb	r6, [r2, #4]
	  b = sdGetTimeout(&SD2,TIME_MS2I(2));
 800a558:	2114      	movs	r1, #20
 800a55a:	4638      	mov	r0, r7
 800a55c:	f7ff ff78 	bl	800a450 <iqGetTimeout>
 800a560:	4606      	mov	r6, r0
	  if ((b!= Q_TIMEOUT) && (rx_queue_pos < 31))
 800a562:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a566:	d0cc      	beq.n	800a502 <Thread3+0x12>
 800a568:	6823      	ldr	r3, [r4, #0]
 800a56a:	2b1e      	cmp	r3, #30
 800a56c:	dcf4      	bgt.n	800a558 <Thread3+0x68>
		  chprintf((BaseSequentialStream*)&SD1,"got char: %x\r\n",b);
 800a56e:	4602      	mov	r2, r0
 800a570:	490d      	ldr	r1, [pc, #52]	; (800a5a8 <Thread3+0xb8>)
 800a572:	480e      	ldr	r0, [pc, #56]	; (800a5ac <Thread3+0xbc>)
 800a574:	f7fc fae4 	bl	8006b40 <chprintf>
		  rx_text[rx_queue_num][rx_queue_pos++]=b;
 800a578:	6829      	ldr	r1, [r5, #0]
 800a57a:	6822      	ldr	r2, [r4, #0]
 800a57c:	1c53      	adds	r3, r2, #1
 800a57e:	6023      	str	r3, [r4, #0]
 800a580:	4b0b      	ldr	r3, [pc, #44]	; (800a5b0 <Thread3+0xc0>)
 800a582:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a586:	549e      	strb	r6, [r3, r2]
 800a588:	e7e6      	b.n	800a558 <Thread3+0x68>
 800a58a:	bf00      	nop
 800a58c:	200015d8 	.word	0x200015d8
 800a590:	0800b004 	.word	0x0800b004
 800a594:	20001480 	.word	0x20001480
 800a598:	200020ec 	.word	0x200020ec
 800a59c:	200020e8 	.word	0x200020e8
 800a5a0:	200012fc 	.word	0x200012fc
 800a5a4:	20001324 	.word	0x20001324
 800a5a8:	0800b00c 	.word	0x0800b00c
 800a5ac:	20001414 	.word	0x20001414
 800a5b0:	200020f0 	.word	0x200020f0
	...

0800a5c0 <_gett>:
static msg_t _gett(void *ip, sysinterval_t timeout) {
 800a5c0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 800a5c2:	300c      	adds	r0, #12
 800a5c4:	f7ff ff44 	bl	800a450 <iqGetTimeout>
}
 800a5c8:	bd08      	pop	{r3, pc}
 800a5ca:	bf00      	nop
 800a5cc:	0000      	movs	r0, r0
	...

0800a5d0 <_get>:
static msg_t _get(void *ip) {
 800a5d0:	b508      	push	{r3, lr}
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 800a5d2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800a5d6:	300c      	adds	r0, #12
 800a5d8:	f7ff ff3a 	bl	800a450 <iqGetTimeout>
}
 800a5dc:	bd08      	pop	{r3, pc}
 800a5de:	bf00      	nop

0800a5e0 <__early_init>:
/**
 * @brief   Early initialization code.
 * @details GPIO ports and system clocks are initialized before everything
 *          else.
 */
void __early_init(void) {
 800a5e0:	b538      	push	{r3, r4, r5, lr}
  rccResetAHB(STM32_GPIO_EN_MASK);
 800a5e2:	4c37      	ldr	r4, [pc, #220]	; (800a6c0 <__early_init+0xe0>)
 800a5e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a5e6:	f443 03fc 	orr.w	r3, r3, #8257536	; 0x7e0000
 800a5ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	62a3      	str	r3, [r4, #40]	; 0x28
  rccEnableAHB(STM32_GPIO_EN_MASK, true);
 800a5f0:	6963      	ldr	r3, [r4, #20]
 800a5f2:	f443 03fc 	orr.w	r3, r3, #8257536	; 0x7e0000
 800a5f6:	6163      	str	r3, [r4, #20]
  gpio_init(GPIOA, &gpio_default_config.PAData);
 800a5f8:	4d32      	ldr	r5, [pc, #200]	; (800a6c4 <__early_init+0xe4>)
 800a5fa:	4629      	mov	r1, r5
 800a5fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a600:	f7fb fde6 	bl	80061d0 <gpio_init>
  gpio_init(GPIOB, &gpio_default_config.PBData);
 800a604:	f105 011c 	add.w	r1, r5, #28
 800a608:	482f      	ldr	r0, [pc, #188]	; (800a6c8 <__early_init+0xe8>)
 800a60a:	f7fb fde1 	bl	80061d0 <gpio_init>
  gpio_init(GPIOC, &gpio_default_config.PCData);
 800a60e:	f105 0138 	add.w	r1, r5, #56	; 0x38
 800a612:	482e      	ldr	r0, [pc, #184]	; (800a6cc <__early_init+0xec>)
 800a614:	f7fb fddc 	bl	80061d0 <gpio_init>
  gpio_init(GPIOD, &gpio_default_config.PDData);
 800a618:	f105 0154 	add.w	r1, r5, #84	; 0x54
 800a61c:	482c      	ldr	r0, [pc, #176]	; (800a6d0 <__early_init+0xf0>)
 800a61e:	f7fb fdd7 	bl	80061d0 <gpio_init>
  gpio_init(GPIOE, &gpio_default_config.PEData);
 800a622:	f105 0170 	add.w	r1, r5, #112	; 0x70
 800a626:	482b      	ldr	r0, [pc, #172]	; (800a6d4 <__early_init+0xf4>)
 800a628:	f7fb fdd2 	bl	80061d0 <gpio_init>
  gpio_init(GPIOF, &gpio_default_config.PFData);
 800a62c:	f105 018c 	add.w	r1, r5, #140	; 0x8c
 800a630:	4829      	ldr	r0, [pc, #164]	; (800a6d8 <__early_init+0xf8>)
 800a632:	f7fb fdcd 	bl	80061d0 <gpio_init>
void stm32_clock_init(void) {

#if !STM32_NO_INIT
  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 800a636:	6823      	ldr	r3, [r4, #0]
 800a638:	f043 0301 	orr.w	r3, r3, #1
 800a63c:	6023      	str	r3, [r4, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 800a63e:	4622      	mov	r2, r4
 800a640:	6813      	ldr	r3, [r2, #0]
 800a642:	f013 0f02 	tst.w	r3, #2
 800a646:	d0fb      	beq.n	800a640 <__early_init+0x60>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. Clearing the register has to be postponed after HSI is the
     new source.*/
  RCC->CFGR &= ~RCC_CFGR_SW;                /* Reset SW, selecting HSI.     */
 800a648:	4a1d      	ldr	r2, [pc, #116]	; (800a6c0 <__early_init+0xe0>)
 800a64a:	6853      	ldr	r3, [r2, #4]
 800a64c:	f023 0303 	bic.w	r3, r3, #3
 800a650:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 800a652:	6853      	ldr	r3, [r2, #4]
 800a654:	f013 0f0c 	tst.w	r3, #12
 800a658:	d1fb      	bne.n	800a652 <__early_init+0x72>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers finally cleared to reset values.*/
  RCC->CR &= RCC_CR_HSITRIM | RCC_CR_HSION; /* CR Reset value.              */
 800a65a:	4b19      	ldr	r3, [pc, #100]	; (800a6c0 <__early_init+0xe0>)
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	f002 02f9 	and.w	r2, r2, #249	; 0xf9
 800a662:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0;                            /* CFGR reset value.            */
 800a664:	2200      	movs	r2, #0
 800a666:	605a      	str	r2, [r3, #4]
    ;                                       /* Waits until HSE is stable.   */
#endif

#if STM32_LSI_ENABLED
  /* LSI activation.*/
  RCC->CSR |= RCC_CSR_LSION;
 800a668:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a66a:	f042 0201 	orr.w	r2, r2, #1
 800a66e:	625a      	str	r2, [r3, #36]	; 0x24
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 800a670:	461a      	mov	r2, r3
 800a672:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800a674:	f013 0f02 	tst.w	r3, #2
 800a678:	d0fb      	beq.n	800a672 <__early_init+0x92>
    ;                                       /* Waits until LSI is stable.   */
#endif

  /* Clock settings.*/
  RCC->CFGR  = STM32_MCOSEL    | STM32_USBPRE    | STM32_PLLMUL   |
 800a67a:	4b11      	ldr	r3, [pc, #68]	; (800a6c0 <__early_init+0xe0>)
 800a67c:	4a17      	ldr	r2, [pc, #92]	; (800a6dc <__early_init+0xfc>)
 800a67e:	605a      	str	r2, [r3, #4]
               STM32_PLLSRC    | STM32_PPRE1     | STM32_PPRE2    |
               STM32_HPRE;
  RCC->CFGR2 = STM32_ADC34PRES | STM32_ADC12PRES | STM32_PREDIV;
 800a680:	f44f 5204 	mov.w	r2, #8448	; 0x2100
 800a684:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->CFGR3 = STM32_UART5SW   | STM32_UART4SW   | STM32_USART3SW |
 800a686:	2230      	movs	r2, #48	; 0x30
 800a688:	631a      	str	r2, [r3, #48]	; 0x30
               STM32_USART2SW  | STM32_I2C2SW    | STM32_I2C1SW   |
               STM32_USART1SW;

#if STM32_ACTIVATE_PLL
  /* PLL activation.*/
  RCC->CR   |= RCC_CR_PLLON;
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800a690:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_PLLRDY))
 800a692:	461a      	mov	r2, r3
 800a694:	6813      	ldr	r3, [r2, #0]
 800a696:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800a69a:	d0fb      	beq.n	800a694 <__early_init+0xb4>
    ;                                       /* Waits until PLL is stable.   */
#endif

  /* Flash setup and final clock selection.   */
  FLASH->ACR = STM32_FLASHBITS;
 800a69c:	4b10      	ldr	r3, [pc, #64]	; (800a6e0 <__early_init+0x100>)
 800a69e:	2211      	movs	r2, #17
 800a6a0:	601a      	str	r2, [r3, #0]

  /* Switching to the configured clock source if it is different from HSI.*/
#if (STM32_SW != STM32_SW_HSI)
  /* Switches clock source.*/
  RCC->CFGR |= STM32_SW;
 800a6a2:	4a07      	ldr	r2, [pc, #28]	; (800a6c0 <__early_init+0xe0>)
 800a6a4:	6853      	ldr	r3, [r2, #4]
 800a6a6:	f043 0302 	orr.w	r3, r3, #2
 800a6aa:	6053      	str	r3, [r2, #4]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 2))
 800a6ac:	6853      	ldr	r3, [r2, #4]
 800a6ae:	f003 030c 	and.w	r3, r3, #12
 800a6b2:	2b08      	cmp	r3, #8
 800a6b4:	d1fa      	bne.n	800a6ac <__early_init+0xcc>
    ;                                       /* Waits selection complete.    */
#endif

  /* After PLL activation because the special requirements for TIM1 and
     TIM8 bits.*/
  RCC->CFGR3 |= STM32_HRTIM1SW | STM32_TIM8SW | STM32_TIM1SW;
 800a6b6:	4b02      	ldr	r3, [pc, #8]	; (800a6c0 <__early_init+0xe0>)
 800a6b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6ba:	631a      	str	r2, [r3, #48]	; 0x30

  stm32_gpio_init();
  stm32_clock_init();
}
 800a6bc:	bd38      	pop	{r3, r4, r5, pc}
 800a6be:	bf00      	nop
 800a6c0:	40021000 	.word	0x40021000
 800a6c4:	0800b6ec 	.word	0x0800b6ec
 800a6c8:	48000400 	.word	0x48000400
 800a6cc:	48000800 	.word	0x48000800
 800a6d0:	48000c00 	.word	0x48000c00
 800a6d4:	48001000 	.word	0x48001000
 800a6d8:	48001400 	.word	0x48001400
 800a6dc:	001c2400 	.word	0x001c2400
 800a6e0:	40022000 	.word	0x40022000
	...

0800a6f0 <VectorD8>:
OSAL_IRQ_HANDLER(STM32_USART2_HANDLER) {
 800a6f0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a6f2:	4c08      	ldr	r4, [pc, #32]	; (800a714 <VectorD8+0x24>)
 800a6f4:	4620      	mov	r0, r4
 800a6f6:	f7fb fb03 	bl	8005d00 <_trace_isr_enter>
 800a6fa:	f7fb fcd9 	bl	80060b0 <_dbg_check_enter_isr>
  serve_interrupt(&SD2);
 800a6fe:	4806      	ldr	r0, [pc, #24]	; (800a718 <VectorD8+0x28>)
 800a700:	f7fb fd76 	bl	80061f0 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800a704:	f7fb fcb4 	bl	8006070 <_dbg_check_leave_isr>
 800a708:	4620      	mov	r0, r4
 800a70a:	f7fb fad9 	bl	8005cc0 <_trace_isr_leave>
 800a70e:	f7fc fc37 	bl	8006f80 <_port_irq_epilogue>
}
 800a712:	bd10      	pop	{r4, pc}
 800a714:	0800b3f0 	.word	0x0800b3f0
 800a718:	20001474 	.word	0x20001474
 800a71c:	00000000 	.word	0x00000000

0800a720 <VectorD4>:
OSAL_IRQ_HANDLER(STM32_USART1_HANDLER) {
 800a720:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800a722:	4c08      	ldr	r4, [pc, #32]	; (800a744 <VectorD4+0x24>)
 800a724:	4620      	mov	r0, r4
 800a726:	f7fb faeb 	bl	8005d00 <_trace_isr_enter>
 800a72a:	f7fb fcc1 	bl	80060b0 <_dbg_check_enter_isr>
  serve_interrupt(&SD1);
 800a72e:	4806      	ldr	r0, [pc, #24]	; (800a748 <VectorD4+0x28>)
 800a730:	f7fb fd5e 	bl	80061f0 <serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800a734:	f7fb fc9c 	bl	8006070 <_dbg_check_leave_isr>
 800a738:	4620      	mov	r0, r4
 800a73a:	f7fb fac1 	bl	8005cc0 <_trace_isr_leave>
 800a73e:	f7fc fc1f 	bl	8006f80 <_port_irq_epilogue>
}
 800a742:	bd10      	pop	{r4, pc}
 800a744:	0800b3c0 	.word	0x0800b3c0
 800a748:	20001414 	.word	0x20001414
 800a74c:	00000000 	.word	0x00000000

0800a750 <VectorB0>:
OSAL_IRQ_HANDLER(ST_HANDLER) {
 800a750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_PROLOGUE();
 800a754:	483c      	ldr	r0, [pc, #240]	; (800a848 <VectorB0+0xf8>)
 800a756:	f7fb fad3 	bl	8005d00 <_trace_isr_enter>
 800a75a:	f7fb fca9 	bl	80060b0 <_dbg_check_enter_isr>
  if ((STM32_ST_TIM->SR & TIM_SR_CC1IF) != 0U) {
 800a75e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	f013 0f02 	tst.w	r3, #2
 800a768:	d108      	bne.n	800a77c <VectorB0+0x2c>
  OSAL_IRQ_EPILOGUE();
 800a76a:	f7fb fc81 	bl	8006070 <_dbg_check_leave_isr>
 800a76e:	4836      	ldr	r0, [pc, #216]	; (800a848 <VectorB0+0xf8>)
 800a770:	f7fb faa6 	bl	8005cc0 <_trace_isr_leave>
 800a774:	f7fc fc04 	bl	8006f80 <_port_irq_epilogue>
}
 800a778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    STM32_ST_TIM->SR = 0U;
 800a77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a780:	2200      	movs	r2, #0
 800a782:	611a      	str	r2, [r3, #16]
 800a784:	2320      	movs	r3, #32
 800a786:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800a78a:	f7fb fcc9 	bl	8006120 <_dbg_check_lock_from_isr>
  chDbgCheckClassI();
 800a78e:	f7fb fb37 	bl	8005e00 <chDbgCheckClassI>
 *
 * @iclass
 */
static inline void chVTDoTickI(void) {

  chDbgCheckClassI();
 800a792:	f7fb fb35 	bl	8005e00 <chDbgCheckClassI>
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 800a796:	4b2d      	ldr	r3, [pc, #180]	; (800a84c <VectorB0+0xfc>)
 800a798:	69dc      	ldr	r4, [r3, #28]
  return (systime_t)STM32_ST_TIM->CNT;
 800a79a:	f04f 4980 	mov.w	r9, #1073741824	; 0x40000000
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 800a79e:	461d      	mov	r5, r3

      /* The "last time" becomes this timer's expiration time.*/
      ch.vtlist.lasttime += vtp->delta;
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800a7a0:	f103 081c 	add.w	r8, r3, #28
 800a7a4:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
 800a7a8:	6aae      	ldr	r6, [r5, #40]	; 0x28
 800a7aa:	1b9e      	subs	r6, r3, r6
    if (nowdelta < vtp->delta) {
 800a7ac:	68a2      	ldr	r2, [r4, #8]
 800a7ae:	4296      	cmp	r6, r2
 800a7b0:	d323      	bcc.n	800a7fa <VectorB0+0xaa>
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 800a7b2:	2700      	movs	r7, #0
      ch.vtlist.lasttime += vtp->delta;
 800a7b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800a7b6:	68a2      	ldr	r2, [r4, #8]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	62ab      	str	r3, [r5, #40]	; 0x28
      nowdelta -= vtp->delta;
 800a7bc:	68a3      	ldr	r3, [r4, #8]
 800a7be:	1af6      	subs	r6, r6, r3
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 800a7c0:	6823      	ldr	r3, [r4, #0]
 800a7c2:	f8c3 8004 	str.w	r8, [r3, #4]
      ch.vtlist.next = vtp->next;
 800a7c6:	6823      	ldr	r3, [r4, #0]
 800a7c8:	61eb      	str	r3, [r5, #28]
      fn = vtp->func;
 800a7ca:	f8d4 a00c 	ldr.w	sl, [r4, #12]
      vtp->func = NULL;
 800a7ce:	60e7      	str	r7, [r4, #12]

      /* if the list becomes empty then the timer is stopped.*/
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800a7d0:	69eb      	ldr	r3, [r5, #28]
 800a7d2:	4543      	cmp	r3, r8
  STM32_ST_TIM->DIER = 0;
 800a7d4:	bf08      	it	eq
 800a7d6:	f8c9 700c 	streq.w	r7, [r9, #12]
  _dbg_check_unlock_from_isr();
 800a7da:	f7fb fc89 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800a7de:	f387 8811 	msr	BASEPRI, r7
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 800a7e2:	6920      	ldr	r0, [r4, #16]
 800a7e4:	47d0      	blx	sl
 800a7e6:	2320      	movs	r3, #32
 800a7e8:	f383 8811 	msr	BASEPRI, r3
  _dbg_check_lock_from_isr();
 800a7ec:	f7fb fc98 	bl	8006120 <_dbg_check_lock_from_isr>
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 800a7f0:	69ec      	ldr	r4, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	429e      	cmp	r6, r3
 800a7f6:	d2dd      	bcs.n	800a7b4 <VectorB0+0x64>
 800a7f8:	e7d4      	b.n	800a7a4 <VectorB0+0x54>
  }

  /* if the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800a7fa:	4a14      	ldr	r2, [pc, #80]	; (800a84c <VectorB0+0xfc>)
 800a7fc:	f852 1f1c 	ldr.w	r1, [r2, #28]!
 800a800:	4291      	cmp	r1, r2
 800a802:	d017      	beq.n	800a834 <VectorB0+0xe4>
    return;
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
 800a804:	4d11      	ldr	r5, [pc, #68]	; (800a84c <VectorB0+0xfc>)
 800a806:	62ab      	str	r3, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800a808:	688a      	ldr	r2, [r1, #8]
 800a80a:	1b96      	subs	r6, r2, r6
 800a80c:	608e      	str	r6, [r1, #8]
 800a80e:	68a4      	ldr	r4, [r4, #8]
 800a810:	1ae4      	subs	r4, r4, r3
 800a812:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800a814:	4414      	add	r4, r2
  return systime + (systime_t)interval;
 800a816:	2c02      	cmp	r4, #2
 800a818:	bf2c      	ite	cs
 800a81a:	191c      	addcs	r4, r3, r4
 800a81c:	1c9c      	addcc	r4, r3, #2
 800a81e:	4620      	mov	r0, r4
 800a820:	f7fc f8fe 	bl	8006a20 <stSetAlarm>
    delta = (sysinterval_t)TIME_MAX_SYSTIME;
  }
#endif
  port_timer_set_alarm(chTimeAddX(now, delta));

  chDbgAssert(chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX()) <=
 800a824:	6aab      	ldr	r3, [r5, #40]	; 0x28
  return (systime_t)STM32_ST_TIM->CNT;
 800a826:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a82a:	6a52      	ldr	r2, [r2, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 800a82c:	1ad2      	subs	r2, r2, r3
 800a82e:	1ae3      	subs	r3, r4, r3
 800a830:	429a      	cmp	r2, r3
 800a832:	d805      	bhi.n	800a840 <VectorB0+0xf0>
  _dbg_check_unlock_from_isr();
 800a834:	f7fb fc5c 	bl	80060f0 <_dbg_check_unlock_from_isr>
 800a838:	2300      	movs	r3, #0
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	e794      	b.n	800a76a <VectorB0+0x1a>
 800a840:	4803      	ldr	r0, [pc, #12]	; (800a850 <VectorB0+0x100>)
 800a842:	f7fb fa9d 	bl	8005d80 <chSysHalt>
 800a846:	bf00      	nop
 800a848:	0800b2c0 	.word	0x0800b2c0
 800a84c:	200015d8 	.word	0x200015d8
 800a850:	0800b11c 	.word	0x0800b11c
	...

0800a860 <Vector130>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 800a860:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a862:	480f      	ldr	r0, [pc, #60]	; (800a8a0 <Vector130+0x40>)
 800a864:	f7fb fa4c 	bl	8005d00 <_trace_isr_enter>
 800a868:	f7fb fc22 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM5);
 800a86c:	4b0d      	ldr	r3, [pc, #52]	; (800a8a4 <Vector130+0x44>)
 800a86e:	6819      	ldr	r1, [r3, #0]
 800a870:	0c09      	lsrs	r1, r1, #16
 800a872:	f001 010e 	and.w	r1, r1, #14
 800a876:	3358      	adds	r3, #88	; 0x58
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	420b      	tst	r3, r1
 800a87c:	d008      	beq.n	800a890 <Vector130+0x30>
 800a87e:	040b      	lsls	r3, r1, #16
 800a880:	4a08      	ldr	r2, [pc, #32]	; (800a8a4 <Vector130+0x44>)
 800a882:	6053      	str	r3, [r2, #4]
 800a884:	4b08      	ldr	r3, [pc, #32]	; (800a8a8 <Vector130+0x48>)
 800a886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a888:	b113      	cbz	r3, 800a890 <Vector130+0x30>
 800a88a:	4a07      	ldr	r2, [pc, #28]	; (800a8a8 <Vector130+0x48>)
 800a88c:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800a88e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a890:	f7fb fbee 	bl	8006070 <_dbg_check_leave_isr>
 800a894:	4802      	ldr	r0, [pc, #8]	; (800a8a0 <Vector130+0x40>)
 800a896:	f7fb fa13 	bl	8005cc0 <_trace_isr_leave>
 800a89a:	f7fc fb71 	bl	8006f80 <_port_irq_epilogue>
}
 800a89e:	bd08      	pop	{r3, pc}
 800a8a0:	0800b494 	.word	0x0800b494
 800a8a4:	40020400 	.word	0x40020400
 800a8a8:	20001570 	.word	0x20001570
 800a8ac:	00000000 	.word	0x00000000

0800a8b0 <Vector12C>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 800a8b0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a8b2:	480f      	ldr	r0, [pc, #60]	; (800a8f0 <Vector12C+0x40>)
 800a8b4:	f7fb fa24 	bl	8005d00 <_trace_isr_enter>
 800a8b8:	f7fb fbfa 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM4);
 800a8bc:	4b0d      	ldr	r3, [pc, #52]	; (800a8f4 <Vector12C+0x44>)
 800a8be:	6819      	ldr	r1, [r3, #0]
 800a8c0:	0b09      	lsrs	r1, r1, #12
 800a8c2:	f001 010e 	and.w	r1, r1, #14
 800a8c6:	3344      	adds	r3, #68	; 0x44
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	420b      	tst	r3, r1
 800a8cc:	d008      	beq.n	800a8e0 <Vector12C+0x30>
 800a8ce:	030b      	lsls	r3, r1, #12
 800a8d0:	4a08      	ldr	r2, [pc, #32]	; (800a8f4 <Vector12C+0x44>)
 800a8d2:	6053      	str	r3, [r2, #4]
 800a8d4:	4b08      	ldr	r3, [pc, #32]	; (800a8f8 <Vector12C+0x48>)
 800a8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8d8:	b113      	cbz	r3, 800a8e0 <Vector12C+0x30>
 800a8da:	4a07      	ldr	r2, [pc, #28]	; (800a8f8 <Vector12C+0x48>)
 800a8dc:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800a8de:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a8e0:	f7fb fbc6 	bl	8006070 <_dbg_check_leave_isr>
 800a8e4:	4802      	ldr	r0, [pc, #8]	; (800a8f0 <Vector12C+0x40>)
 800a8e6:	f7fb f9eb 	bl	8005cc0 <_trace_isr_leave>
 800a8ea:	f7fc fb49 	bl	8006f80 <_port_irq_epilogue>
}
 800a8ee:	bd08      	pop	{r3, pc}
 800a8f0:	0800b480 	.word	0x0800b480
 800a8f4:	40020400 	.word	0x40020400
 800a8f8:	20001570 	.word	0x20001570
 800a8fc:	00000000 	.word	0x00000000

0800a900 <Vector128>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 800a900:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a902:	480f      	ldr	r0, [pc, #60]	; (800a940 <Vector128+0x40>)
 800a904:	f7fb f9fc 	bl	8005d00 <_trace_isr_enter>
 800a908:	f7fb fbd2 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM3);
 800a90c:	4b0d      	ldr	r3, [pc, #52]	; (800a944 <Vector128+0x44>)
 800a90e:	6819      	ldr	r1, [r3, #0]
 800a910:	0a09      	lsrs	r1, r1, #8
 800a912:	f001 010e 	and.w	r1, r1, #14
 800a916:	3330      	adds	r3, #48	; 0x30
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	420b      	tst	r3, r1
 800a91c:	d008      	beq.n	800a930 <Vector128+0x30>
 800a91e:	020b      	lsls	r3, r1, #8
 800a920:	4a08      	ldr	r2, [pc, #32]	; (800a944 <Vector128+0x44>)
 800a922:	6053      	str	r3, [r2, #4]
 800a924:	4b08      	ldr	r3, [pc, #32]	; (800a948 <Vector128+0x48>)
 800a926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a928:	b113      	cbz	r3, 800a930 <Vector128+0x30>
 800a92a:	4a07      	ldr	r2, [pc, #28]	; (800a948 <Vector128+0x48>)
 800a92c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800a92e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a930:	f7fb fb9e 	bl	8006070 <_dbg_check_leave_isr>
 800a934:	4802      	ldr	r0, [pc, #8]	; (800a940 <Vector128+0x40>)
 800a936:	f7fb f9c3 	bl	8005cc0 <_trace_isr_leave>
 800a93a:	f7fc fb21 	bl	8006f80 <_port_irq_epilogue>
}
 800a93e:	bd08      	pop	{r3, pc}
 800a940:	0800b44c 	.word	0x0800b44c
 800a944:	40020400 	.word	0x40020400
 800a948:	20001570 	.word	0x20001570
 800a94c:	00000000 	.word	0x00000000

0800a950 <Vector124>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 800a950:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a952:	480f      	ldr	r0, [pc, #60]	; (800a990 <Vector124+0x40>)
 800a954:	f7fb f9d4 	bl	8005d00 <_trace_isr_enter>
 800a958:	f7fb fbaa 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM2);
 800a95c:	4b0d      	ldr	r3, [pc, #52]	; (800a994 <Vector124+0x44>)
 800a95e:	6819      	ldr	r1, [r3, #0]
 800a960:	0909      	lsrs	r1, r1, #4
 800a962:	f001 010e 	and.w	r1, r1, #14
 800a966:	331c      	adds	r3, #28
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	420b      	tst	r3, r1
 800a96c:	d008      	beq.n	800a980 <Vector124+0x30>
 800a96e:	010b      	lsls	r3, r1, #4
 800a970:	4a08      	ldr	r2, [pc, #32]	; (800a994 <Vector124+0x44>)
 800a972:	6053      	str	r3, [r2, #4]
 800a974:	4b08      	ldr	r3, [pc, #32]	; (800a998 <Vector124+0x48>)
 800a976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a978:	b113      	cbz	r3, 800a980 <Vector124+0x30>
 800a97a:	4a07      	ldr	r2, [pc, #28]	; (800a998 <Vector124+0x48>)
 800a97c:	6c50      	ldr	r0, [r2, #68]	; 0x44
 800a97e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a980:	f7fb fb76 	bl	8006070 <_dbg_check_leave_isr>
 800a984:	4802      	ldr	r0, [pc, #8]	; (800a990 <Vector124+0x40>)
 800a986:	f7fb f99b 	bl	8005cc0 <_trace_isr_leave>
 800a98a:	f7fc faf9 	bl	8006f80 <_port_irq_epilogue>
}
 800a98e:	bd08      	pop	{r3, pc}
 800a990:	0800b42c 	.word	0x0800b42c
 800a994:	40020400 	.word	0x40020400
 800a998:	20001570 	.word	0x20001570
 800a99c:	00000000 	.word	0x00000000

0800a9a0 <Vector120>:
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 800a9a0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a9a2:	480e      	ldr	r0, [pc, #56]	; (800a9dc <Vector120+0x3c>)
 800a9a4:	f7fb f9ac 	bl	8005d00 <_trace_isr_enter>
 800a9a8:	f7fb fb82 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA2_STREAM1);
 800a9ac:	4b0c      	ldr	r3, [pc, #48]	; (800a9e0 <Vector120+0x40>)
 800a9ae:	6819      	ldr	r1, [r3, #0]
 800a9b0:	f001 010e 	and.w	r1, r1, #14
 800a9b4:	3308      	adds	r3, #8
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	420b      	tst	r3, r1
 800a9ba:	d007      	beq.n	800a9cc <Vector120+0x2c>
 800a9bc:	4b08      	ldr	r3, [pc, #32]	; (800a9e0 <Vector120+0x40>)
 800a9be:	6059      	str	r1, [r3, #4]
 800a9c0:	4b08      	ldr	r3, [pc, #32]	; (800a9e4 <Vector120+0x44>)
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	b113      	cbz	r3, 800a9cc <Vector120+0x2c>
 800a9c6:	4a07      	ldr	r2, [pc, #28]	; (800a9e4 <Vector120+0x44>)
 800a9c8:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 800a9ca:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800a9cc:	f7fb fb50 	bl	8006070 <_dbg_check_leave_isr>
 800a9d0:	4802      	ldr	r0, [pc, #8]	; (800a9dc <Vector120+0x3c>)
 800a9d2:	f7fb f975 	bl	8005cc0 <_trace_isr_leave>
 800a9d6:	f7fc fad3 	bl	8006f80 <_port_irq_epilogue>
}
 800a9da:	bd08      	pop	{r3, pc}
 800a9dc:	0800b414 	.word	0x0800b414
 800a9e0:	40020400 	.word	0x40020400
 800a9e4:	20001570 	.word	0x20001570
	...

0800a9f0 <Vector84>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 800a9f0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800a9f2:	480f      	ldr	r0, [pc, #60]	; (800aa30 <Vector84+0x40>)
 800a9f4:	f7fb f984 	bl	8005d00 <_trace_isr_enter>
 800a9f8:	f7fb fb5a 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM7);
 800a9fc:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <Vector84+0x44>)
 800a9fe:	6819      	ldr	r1, [r3, #0]
 800aa00:	0e09      	lsrs	r1, r1, #24
 800aa02:	f001 010e 	and.w	r1, r1, #14
 800aa06:	3380      	adds	r3, #128	; 0x80
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	420b      	tst	r3, r1
 800aa0c:	d008      	beq.n	800aa20 <Vector84+0x30>
 800aa0e:	060b      	lsls	r3, r1, #24
 800aa10:	4a08      	ldr	r2, [pc, #32]	; (800aa34 <Vector84+0x44>)
 800aa12:	6053      	str	r3, [r2, #4]
 800aa14:	4b08      	ldr	r3, [pc, #32]	; (800aa38 <Vector84+0x48>)
 800aa16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa18:	b113      	cbz	r3, 800aa20 <Vector84+0x30>
 800aa1a:	4a07      	ldr	r2, [pc, #28]	; (800aa38 <Vector84+0x48>)
 800aa1c:	6b50      	ldr	r0, [r2, #52]	; 0x34
 800aa1e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aa20:	f7fb fb26 	bl	8006070 <_dbg_check_leave_isr>
 800aa24:	4802      	ldr	r0, [pc, #8]	; (800aa30 <Vector84+0x40>)
 800aa26:	f7fb f94b 	bl	8005cc0 <_trace_isr_leave>
 800aa2a:	f7fc faa9 	bl	8006f80 <_port_irq_epilogue>
}
 800aa2e:	bd08      	pop	{r3, pc}
 800aa30:	0800b3fc 	.word	0x0800b3fc
 800aa34:	40020000 	.word	0x40020000
 800aa38:	20001570 	.word	0x20001570
 800aa3c:	00000000 	.word	0x00000000

0800aa40 <Vector80>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 800aa40:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800aa42:	480f      	ldr	r0, [pc, #60]	; (800aa80 <Vector80+0x40>)
 800aa44:	f7fb f95c 	bl	8005d00 <_trace_isr_enter>
 800aa48:	f7fb fb32 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM6);
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <Vector80+0x44>)
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	0d09      	lsrs	r1, r1, #20
 800aa52:	f001 010e 	and.w	r1, r1, #14
 800aa56:	336c      	adds	r3, #108	; 0x6c
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	420b      	tst	r3, r1
 800aa5c:	d008      	beq.n	800aa70 <Vector80+0x30>
 800aa5e:	050b      	lsls	r3, r1, #20
 800aa60:	4a08      	ldr	r2, [pc, #32]	; (800aa84 <Vector80+0x44>)
 800aa62:	6053      	str	r3, [r2, #4]
 800aa64:	4b08      	ldr	r3, [pc, #32]	; (800aa88 <Vector80+0x48>)
 800aa66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa68:	b113      	cbz	r3, 800aa70 <Vector80+0x30>
 800aa6a:	4a07      	ldr	r2, [pc, #28]	; (800aa88 <Vector80+0x48>)
 800aa6c:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800aa6e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aa70:	f7fb fafe 	bl	8006070 <_dbg_check_leave_isr>
 800aa74:	4802      	ldr	r0, [pc, #8]	; (800aa80 <Vector80+0x40>)
 800aa76:	f7fb f923 	bl	8005cc0 <_trace_isr_leave>
 800aa7a:	f7fc fa81 	bl	8006f80 <_port_irq_epilogue>
}
 800aa7e:	bd08      	pop	{r3, pc}
 800aa80:	0800b3b4 	.word	0x0800b3b4
 800aa84:	40020000 	.word	0x40020000
 800aa88:	20001570 	.word	0x20001570
 800aa8c:	00000000 	.word	0x00000000

0800aa90 <Vector7C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 800aa90:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800aa92:	480f      	ldr	r0, [pc, #60]	; (800aad0 <Vector7C+0x40>)
 800aa94:	f7fb f934 	bl	8005d00 <_trace_isr_enter>
 800aa98:	f7fb fb0a 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM5);
 800aa9c:	4b0d      	ldr	r3, [pc, #52]	; (800aad4 <Vector7C+0x44>)
 800aa9e:	6819      	ldr	r1, [r3, #0]
 800aaa0:	0c09      	lsrs	r1, r1, #16
 800aaa2:	f001 010e 	and.w	r1, r1, #14
 800aaa6:	3358      	adds	r3, #88	; 0x58
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	420b      	tst	r3, r1
 800aaac:	d008      	beq.n	800aac0 <Vector7C+0x30>
 800aaae:	040b      	lsls	r3, r1, #16
 800aab0:	4a08      	ldr	r2, [pc, #32]	; (800aad4 <Vector7C+0x44>)
 800aab2:	6053      	str	r3, [r2, #4]
 800aab4:	4b08      	ldr	r3, [pc, #32]	; (800aad8 <Vector7C+0x48>)
 800aab6:	6a1b      	ldr	r3, [r3, #32]
 800aab8:	b113      	cbz	r3, 800aac0 <Vector7C+0x30>
 800aaba:	4a07      	ldr	r2, [pc, #28]	; (800aad8 <Vector7C+0x48>)
 800aabc:	6a50      	ldr	r0, [r2, #36]	; 0x24
 800aabe:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800aac0:	f7fb fad6 	bl	8006070 <_dbg_check_leave_isr>
 800aac4:	4802      	ldr	r0, [pc, #8]	; (800aad0 <Vector7C+0x40>)
 800aac6:	f7fb f8fb 	bl	8005cc0 <_trace_isr_leave>
 800aaca:	f7fc fa59 	bl	8006f80 <_port_irq_epilogue>
}
 800aace:	bd08      	pop	{r3, pc}
 800aad0:	0800b3a8 	.word	0x0800b3a8
 800aad4:	40020000 	.word	0x40020000
 800aad8:	20001570 	.word	0x20001570
 800aadc:	00000000 	.word	0x00000000

0800aae0 <Vector78>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 800aae0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800aae2:	480f      	ldr	r0, [pc, #60]	; (800ab20 <Vector78+0x40>)
 800aae4:	f7fb f90c 	bl	8005d00 <_trace_isr_enter>
 800aae8:	f7fb fae2 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM4);
 800aaec:	4b0d      	ldr	r3, [pc, #52]	; (800ab24 <Vector78+0x44>)
 800aaee:	6819      	ldr	r1, [r3, #0]
 800aaf0:	0b09      	lsrs	r1, r1, #12
 800aaf2:	f001 010e 	and.w	r1, r1, #14
 800aaf6:	3344      	adds	r3, #68	; 0x44
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	420b      	tst	r3, r1
 800aafc:	d008      	beq.n	800ab10 <Vector78+0x30>
 800aafe:	030b      	lsls	r3, r1, #12
 800ab00:	4a08      	ldr	r2, [pc, #32]	; (800ab24 <Vector78+0x44>)
 800ab02:	6053      	str	r3, [r2, #4]
 800ab04:	4b08      	ldr	r3, [pc, #32]	; (800ab28 <Vector78+0x48>)
 800ab06:	699b      	ldr	r3, [r3, #24]
 800ab08:	b113      	cbz	r3, 800ab10 <Vector78+0x30>
 800ab0a:	4a07      	ldr	r2, [pc, #28]	; (800ab28 <Vector78+0x48>)
 800ab0c:	69d0      	ldr	r0, [r2, #28]
 800ab0e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800ab10:	f7fb faae 	bl	8006070 <_dbg_check_leave_isr>
 800ab14:	4802      	ldr	r0, [pc, #8]	; (800ab20 <Vector78+0x40>)
 800ab16:	f7fb f8d3 	bl	8005cc0 <_trace_isr_leave>
 800ab1a:	f7fc fa31 	bl	8006f80 <_port_irq_epilogue>
}
 800ab1e:	bd08      	pop	{r3, pc}
 800ab20:	0800b39c 	.word	0x0800b39c
 800ab24:	40020000 	.word	0x40020000
 800ab28:	20001570 	.word	0x20001570
 800ab2c:	00000000 	.word	0x00000000

0800ab30 <Vector74>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 800ab30:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800ab32:	480f      	ldr	r0, [pc, #60]	; (800ab70 <Vector74+0x40>)
 800ab34:	f7fb f8e4 	bl	8005d00 <_trace_isr_enter>
 800ab38:	f7fb faba 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM3);
 800ab3c:	4b0d      	ldr	r3, [pc, #52]	; (800ab74 <Vector74+0x44>)
 800ab3e:	6819      	ldr	r1, [r3, #0]
 800ab40:	0a09      	lsrs	r1, r1, #8
 800ab42:	f001 010e 	and.w	r1, r1, #14
 800ab46:	3330      	adds	r3, #48	; 0x30
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	420b      	tst	r3, r1
 800ab4c:	d008      	beq.n	800ab60 <Vector74+0x30>
 800ab4e:	020b      	lsls	r3, r1, #8
 800ab50:	4a08      	ldr	r2, [pc, #32]	; (800ab74 <Vector74+0x44>)
 800ab52:	6053      	str	r3, [r2, #4]
 800ab54:	4b08      	ldr	r3, [pc, #32]	; (800ab78 <Vector74+0x48>)
 800ab56:	691b      	ldr	r3, [r3, #16]
 800ab58:	b113      	cbz	r3, 800ab60 <Vector74+0x30>
 800ab5a:	4a07      	ldr	r2, [pc, #28]	; (800ab78 <Vector74+0x48>)
 800ab5c:	6950      	ldr	r0, [r2, #20]
 800ab5e:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800ab60:	f7fb fa86 	bl	8006070 <_dbg_check_leave_isr>
 800ab64:	4802      	ldr	r0, [pc, #8]	; (800ab70 <Vector74+0x40>)
 800ab66:	f7fb f8ab 	bl	8005cc0 <_trace_isr_leave>
 800ab6a:	f7fc fa09 	bl	8006f80 <_port_irq_epilogue>
}
 800ab6e:	bd08      	pop	{r3, pc}
 800ab70:	0800b34c 	.word	0x0800b34c
 800ab74:	40020000 	.word	0x40020000
 800ab78:	20001570 	.word	0x20001570
 800ab7c:	00000000 	.word	0x00000000

0800ab80 <Vector70>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 800ab80:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800ab82:	480f      	ldr	r0, [pc, #60]	; (800abc0 <Vector70+0x40>)
 800ab84:	f7fb f8bc 	bl	8005d00 <_trace_isr_enter>
 800ab88:	f7fb fa92 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM2);
 800ab8c:	4b0d      	ldr	r3, [pc, #52]	; (800abc4 <Vector70+0x44>)
 800ab8e:	6819      	ldr	r1, [r3, #0]
 800ab90:	0909      	lsrs	r1, r1, #4
 800ab92:	f001 010e 	and.w	r1, r1, #14
 800ab96:	331c      	adds	r3, #28
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	420b      	tst	r3, r1
 800ab9c:	d008      	beq.n	800abb0 <Vector70+0x30>
 800ab9e:	010b      	lsls	r3, r1, #4
 800aba0:	4a08      	ldr	r2, [pc, #32]	; (800abc4 <Vector70+0x44>)
 800aba2:	6053      	str	r3, [r2, #4]
 800aba4:	4b08      	ldr	r3, [pc, #32]	; (800abc8 <Vector70+0x48>)
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	b113      	cbz	r3, 800abb0 <Vector70+0x30>
 800abaa:	4a07      	ldr	r2, [pc, #28]	; (800abc8 <Vector70+0x48>)
 800abac:	68d0      	ldr	r0, [r2, #12]
 800abae:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800abb0:	f7fb fa5e 	bl	8006070 <_dbg_check_leave_isr>
 800abb4:	4802      	ldr	r0, [pc, #8]	; (800abc0 <Vector70+0x40>)
 800abb6:	f7fb f883 	bl	8005cc0 <_trace_isr_leave>
 800abba:	f7fc f9e1 	bl	8006f80 <_port_irq_epilogue>
}
 800abbe:	bd08      	pop	{r3, pc}
 800abc0:	0800b334 	.word	0x0800b334
 800abc4:	40020000 	.word	0x40020000
 800abc8:	20001570 	.word	0x20001570
 800abcc:	00000000 	.word	0x00000000

0800abd0 <Vector6C>:
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 800abd0:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 800abd2:	480e      	ldr	r0, [pc, #56]	; (800ac0c <Vector6C+0x3c>)
 800abd4:	f7fb f894 	bl	8005d00 <_trace_isr_enter>
 800abd8:	f7fb fa6a 	bl	80060b0 <_dbg_check_enter_isr>
  dmaServeInterrupt(STM32_DMA1_STREAM1);
 800abdc:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <Vector6C+0x40>)
 800abde:	6819      	ldr	r1, [r3, #0]
 800abe0:	f001 010e 	and.w	r1, r1, #14
 800abe4:	3308      	adds	r3, #8
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	420b      	tst	r3, r1
 800abea:	d007      	beq.n	800abfc <Vector6C+0x2c>
 800abec:	4b08      	ldr	r3, [pc, #32]	; (800ac10 <Vector6C+0x40>)
 800abee:	6059      	str	r1, [r3, #4]
 800abf0:	4b08      	ldr	r3, [pc, #32]	; (800ac14 <Vector6C+0x44>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	b113      	cbz	r3, 800abfc <Vector6C+0x2c>
 800abf6:	4a07      	ldr	r2, [pc, #28]	; (800ac14 <Vector6C+0x44>)
 800abf8:	6850      	ldr	r0, [r2, #4]
 800abfa:	4798      	blx	r3
  OSAL_IRQ_EPILOGUE();
 800abfc:	f7fb fa38 	bl	8006070 <_dbg_check_leave_isr>
 800ac00:	4802      	ldr	r0, [pc, #8]	; (800ac0c <Vector6C+0x3c>)
 800ac02:	f7fb f85d 	bl	8005cc0 <_trace_isr_leave>
 800ac06:	f7fc f9bb 	bl	8006f80 <_port_irq_epilogue>
}
 800ac0a:	bd08      	pop	{r3, pc}
 800ac0c:	0800b2e8 	.word	0x0800b2e8
 800ac10:	40020000 	.word	0x40020000
 800ac14:	20001570 	.word	0x20001570
	...

0800ac20 <Vector134>:
OSAL_IRQ_HANDLER(STM32_ADC4_HANDLER) {
 800ac20:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800ac22:	4c0a      	ldr	r4, [pc, #40]	; (800ac4c <Vector134+0x2c>)
 800ac24:	4620      	mov	r0, r4
 800ac26:	f7fb f86b 	bl	8005d00 <_trace_isr_enter>
 800ac2a:	f7fb fa41 	bl	80060b0 <_dbg_check_enter_isr>
  isr  = ADC4->ISR;
 800ac2e:	4b08      	ldr	r3, [pc, #32]	; (800ac50 <Vector134+0x30>)
 800ac30:	6819      	ldr	r1, [r3, #0]
  ADC4->ISR = isr;
 800ac32:	6019      	str	r1, [r3, #0]
  adc_lld_serve_interrupt(&ADCD4, isr);
 800ac34:	4807      	ldr	r0, [pc, #28]	; (800ac54 <Vector134+0x34>)
 800ac36:	f7fb fd1b 	bl	8006670 <adc_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800ac3a:	f7fb fa19 	bl	8006070 <_dbg_check_leave_isr>
 800ac3e:	4620      	mov	r0, r4
 800ac40:	f7fb f83e 	bl	8005cc0 <_trace_isr_leave>
 800ac44:	f7fc f99c 	bl	8006f80 <_port_irq_epilogue>
}
 800ac48:	bd10      	pop	{r4, pc}
 800ac4a:	bf00      	nop
 800ac4c:	0800b440 	.word	0x0800b440
 800ac50:	50000500 	.word	0x50000500
 800ac54:	200012c4 	.word	0x200012c4
	...

0800ac60 <VectorFC>:
OSAL_IRQ_HANDLER(STM32_ADC3_HANDLER) {
 800ac60:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800ac62:	4c0a      	ldr	r4, [pc, #40]	; (800ac8c <VectorFC+0x2c>)
 800ac64:	4620      	mov	r0, r4
 800ac66:	f7fb f84b 	bl	8005d00 <_trace_isr_enter>
 800ac6a:	f7fb fa21 	bl	80060b0 <_dbg_check_enter_isr>
  isr  = ADC3->ISR;
 800ac6e:	4b08      	ldr	r3, [pc, #32]	; (800ac90 <VectorFC+0x30>)
 800ac70:	6819      	ldr	r1, [r3, #0]
  ADC3->ISR = isr;
 800ac72:	6019      	str	r1, [r3, #0]
  adc_lld_serve_interrupt(&ADCD3, isr);
 800ac74:	4807      	ldr	r0, [pc, #28]	; (800ac94 <VectorFC+0x34>)
 800ac76:	f7fb fcfb 	bl	8006670 <adc_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800ac7a:	f7fb f9f9 	bl	8006070 <_dbg_check_leave_isr>
 800ac7e:	4620      	mov	r0, r4
 800ac80:	f7fb f81e 	bl	8005cc0 <_trace_isr_leave>
 800ac84:	f7fc f97c 	bl	8006f80 <_port_irq_epilogue>
}
 800ac88:	bd10      	pop	{r4, pc}
 800ac8a:	bf00      	nop
 800ac8c:	0800b420 	.word	0x0800b420
 800ac90:	50000400 	.word	0x50000400
 800ac94:	2000128c 	.word	0x2000128c
	...

0800aca0 <Vector88>:
OSAL_IRQ_HANDLER(STM32_ADC1_HANDLER) {
 800aca0:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 800aca2:	4c0d      	ldr	r4, [pc, #52]	; (800acd8 <Vector88+0x38>)
 800aca4:	4620      	mov	r0, r4
 800aca6:	f7fb f82b 	bl	8005d00 <_trace_isr_enter>
 800acaa:	f7fb fa01 	bl	80060b0 <_dbg_check_enter_isr>
  isr  = ADC1->ISR;
 800acae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800acb2:	6819      	ldr	r1, [r3, #0]
  ADC1->ISR = isr;
 800acb4:	6019      	str	r1, [r3, #0]
  adc_lld_serve_interrupt(&ADCD1, isr);
 800acb6:	4809      	ldr	r0, [pc, #36]	; (800acdc <Vector88+0x3c>)
 800acb8:	f7fb fcda 	bl	8006670 <adc_lld_serve_interrupt>
  isr  = ADC2->ISR;
 800acbc:	4b08      	ldr	r3, [pc, #32]	; (800ace0 <Vector88+0x40>)
 800acbe:	6819      	ldr	r1, [r3, #0]
  ADC2->ISR = isr;
 800acc0:	6019      	str	r1, [r3, #0]
  adc_lld_serve_interrupt(&ADCD2, isr);
 800acc2:	4808      	ldr	r0, [pc, #32]	; (800ace4 <Vector88+0x44>)
 800acc4:	f7fb fcd4 	bl	8006670 <adc_lld_serve_interrupt>
  OSAL_IRQ_EPILOGUE();
 800acc8:	f7fb f9d2 	bl	8006070 <_dbg_check_leave_isr>
 800accc:	4620      	mov	r0, r4
 800acce:	f7fa fff7 	bl	8005cc0 <_trace_isr_leave>
 800acd2:	f7fc f955 	bl	8006f80 <_port_irq_epilogue>
}
 800acd6:	bd10      	pop	{r4, pc}
 800acd8:	0800b408 	.word	0x0800b408
 800acdc:	2000121c 	.word	0x2000121c
 800ace0:	50000100 	.word	0x50000100
 800ace4:	20001254 	.word	0x20001254
	...

0800acf0 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 800acf0:	b470      	push	{r4, r5, r6}
 800acf2:	4e14      	ldr	r6, [pc, #80]	; (800ad44 <__init_ram_areas+0x54>)
 800acf4:	f106 0410 	add.w	r4, r6, #16
 800acf8:	3690      	adds	r6, #144	; 0x90
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 800acfa:	2500      	movs	r5, #0
 800acfc:	e002      	b.n	800ad04 <__init_ram_areas+0x14>
 800acfe:	3410      	adds	r4, #16
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 800ad00:	42b4      	cmp	r4, r6
 800ad02:	d01c      	beq.n	800ad3e <__init_ram_areas+0x4e>
 800ad04:	4621      	mov	r1, r4
    uint32_t *tp = rap->init_text_area;
 800ad06:	f854 2c10 	ldr.w	r2, [r4, #-16]
    uint32_t *p = rap->init_area;
 800ad0a:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    while (p < rap->clear_area) {
 800ad0e:	f854 0c08 	ldr.w	r0, [r4, #-8]
 800ad12:	4283      	cmp	r3, r0
 800ad14:	d208      	bcs.n	800ad28 <__init_ram_areas+0x38>
 800ad16:	3a04      	subs	r2, #4
      *p = *tp;
 800ad18:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800ad1c:	f843 0b04 	str.w	r0, [r3], #4
    while (p < rap->clear_area) {
 800ad20:	f851 0c08 	ldr.w	r0, [r1, #-8]
 800ad24:	4298      	cmp	r0, r3
 800ad26:	d8f7      	bhi.n	800ad18 <__init_ram_areas+0x28>
    while (p < rap->no_init_area) {
 800ad28:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d9e6      	bls.n	800acfe <__init_ram_areas+0xe>
      *p = 0;
 800ad30:	f843 5b04 	str.w	r5, [r3], #4
    while (p < rap->no_init_area) {
 800ad34:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d8f9      	bhi.n	800ad30 <__init_ram_areas+0x40>
 800ad3c:	e7df      	b.n	800acfe <__init_ram_areas+0xe>
#endif
}
 800ad3e:	bc70      	pop	{r4, r5, r6}
 800ad40:	4770      	bx	lr
 800ad42:	bf00      	nop
 800ad44:	0800d100 	.word	0x0800d100
	...

0800ad50 <__default_exit>:
void __default_exit(void) {
 800ad50:	e7fe      	b.n	800ad50 <__default_exit>
 800ad52:	bf00      	nop
	...

0800ad60 <__late_init>:
void __late_init(void) {}
 800ad60:	4770      	bx	lr
 800ad62:	bf00      	nop
	...

0800ad70 <__core_init>:
}
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
